
NilaiTFOTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016474  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002130  08016608  08016608  00026608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000015c  08018738  08018738  00028738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001d8  08018894  08018894  00028894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018a6c  08018a6c  000309c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08018a6c  08018a6c  00028a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018a78  08018a78  00028a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c0  20000000  08018a7c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  200009c0  0801943c  000309c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001060  0801943c  00031060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000309c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000698b5  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006264  00000000  00000000  0009a2a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bd8  00000000  00000000  000a0510  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a80  00000000  00000000  000a20e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002749e  00000000  00000000  000a3b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014e1e  00000000  00000000  000cb006  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e464c  00000000  00000000  000dfe24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c4470  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c1ec  00000000  00000000  001c44ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009c0 	.word	0x200009c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080165ec 	.word	0x080165ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009c4 	.word	0x200009c4
 80001cc:	080165ec 	.word	0x080165ec

080001d0 <d_make_comp>:
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	1e4c      	subs	r4, r1, #1
 80001d4:	4605      	mov	r5, r0
 80001d6:	2c4e      	cmp	r4, #78	; 0x4e
 80001d8:	d83f      	bhi.n	800025a <d_make_comp+0x8a>
 80001da:	e8df f004 	tbb	[pc, r4]
 80001de:	3b3b      	.short	0x3b3b
 80001e0:	3e3e3b3b 	.word	0x3e3e3b3b
 80001e4:	28283e3e 	.word	0x28283e3e
 80001e8:	2828283b 	.word	0x2828283b
 80001ec:	28282828 	.word	0x28282828
 80001f0:	28282828 	.word	0x28282828
 80001f4:	29293e28 	.word	0x29293e28
 80001f8:	29292929 	.word	0x29292929
 80001fc:	283b2929 	.word	0x283b2929
 8000200:	28282828 	.word	0x28282828
 8000204:	3c29283e 	.word	0x3c29283e
 8000208:	293b3e3b 	.word	0x293b3e3b
 800020c:	3e3e3c29 	.word	0x3e3e3c29
 8000210:	3b282828 	.word	0x3b282828
 8000214:	3b3b3b3b 	.word	0x3b3b3b3b
 8000218:	283b3b28 	.word	0x283b3b28
 800021c:	283e3e3b 	.word	0x283e3e3b
 8000220:	3e3e2828 	.word	0x3e3e2828
 8000224:	2828283e 	.word	0x2828283e
 8000228:	293b293b 	.word	0x293b293b
 800022c:	29          	.byte	0x29
 800022d:	00          	.byte	0x00
 800022e:	b1a2      	cbz	r2, 800025a <d_make_comp+0x8a>
 8000230:	e9d5 4005 	ldrd	r4, r0, [r5, #20]
 8000234:	4284      	cmp	r4, r0
 8000236:	da10      	bge.n	800025a <d_make_comp+0x8a>
 8000238:	692f      	ldr	r7, [r5, #16]
 800023a:	0126      	lsls	r6, r4, #4
 800023c:	19b8      	adds	r0, r7, r6
 800023e:	3401      	adds	r4, #1
 8000240:	f04f 0c00 	mov.w	ip, #0
 8000244:	f8c0 c004 	str.w	ip, [r0, #4]
 8000248:	616c      	str	r4, [r5, #20]
 800024a:	55b9      	strb	r1, [r7, r6]
 800024c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8000250:	bcf0      	pop	{r4, r5, r6, r7}
 8000252:	4770      	bx	lr
 8000254:	b10a      	cbz	r2, 800025a <d_make_comp+0x8a>
 8000256:	2b00      	cmp	r3, #0
 8000258:	d1ea      	bne.n	8000230 <d_make_comp+0x60>
 800025a:	2000      	movs	r0, #0
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
 800025e:	4770      	bx	lr

08000260 <d_ref_qualifier>:
 8000260:	b410      	push	{r4}
 8000262:	68c3      	ldr	r3, [r0, #12]
 8000264:	781c      	ldrb	r4, [r3, #0]
 8000266:	2c52      	cmp	r4, #82	; 0x52
 8000268:	460a      	mov	r2, r1
 800026a:	d00f      	beq.n	800028c <d_ref_qualifier+0x2c>
 800026c:	2c4f      	cmp	r4, #79	; 0x4f
 800026e:	d003      	beq.n	8000278 <d_ref_qualifier+0x18>
 8000270:	4608      	mov	r0, r1
 8000272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800027a:	3103      	adds	r1, #3
 800027c:	6301      	str	r1, [r0, #48]	; 0x30
 800027e:	2120      	movs	r1, #32
 8000280:	3301      	adds	r3, #1
 8000282:	60c3      	str	r3, [r0, #12]
 8000284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000288:	2300      	movs	r3, #0
 800028a:	e7a1      	b.n	80001d0 <d_make_comp>
 800028c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800028e:	3102      	adds	r1, #2
 8000290:	6301      	str	r1, [r0, #48]	; 0x30
 8000292:	211f      	movs	r1, #31
 8000294:	e7f4      	b.n	8000280 <d_ref_qualifier+0x20>
 8000296:	bf00      	nop

08000298 <d_count_templates_scopes>:
 8000298:	2a00      	cmp	r2, #0
 800029a:	d04e      	beq.n	800033a <d_count_templates_scopes+0xa2>
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	4605      	mov	r5, r0
 80002a0:	460e      	mov	r6, r1
 80002a2:	4614      	mov	r4, r2
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	3b01      	subs	r3, #1
 80002a8:	2b4e      	cmp	r3, #78	; 0x4e
 80002aa:	d82c      	bhi.n	8000306 <d_count_templates_scopes+0x6e>
 80002ac:	e8df f003 	tbb	[pc, r3]
 80002b0:	40373737 	.word	0x40373737
 80002b4:	28282b2b 	.word	0x28282b2b
 80002b8:	37373737 	.word	0x37373737
 80002bc:	37373737 	.word	0x37373737
 80002c0:	37373737 	.word	0x37373737
 80002c4:	2b373737 	.word	0x2b373737
 80002c8:	37373737 	.word	0x37373737
 80002cc:	37373737 	.word	0x37373737
 80002d0:	30303737 	.word	0x30303737
 80002d4:	372b3737 	.word	0x372b3737
 80002d8:	2c373737 	.word	0x2c373737
 80002dc:	37373737 	.word	0x37373737
 80002e0:	3737282b 	.word	0x3737282b
 80002e4:	37373737 	.word	0x37373737
 80002e8:	37373737 	.word	0x37373737
 80002ec:	2b373737 	.word	0x2b373737
 80002f0:	2c2c372b 	.word	0x2c2c372b
 80002f4:	372b2c2c 	.word	0x372b2c2c
 80002f8:	37373737 	.word	0x37373737
 80002fc:	3737      	.short	0x3737
 80002fe:	37          	.byte	0x37
 80002ff:	00          	.byte	0x00
 8000300:	68e4      	ldr	r4, [r4, #12]
 8000302:	2c00      	cmp	r4, #0
 8000304:	d1ce      	bne.n	80002a4 <d_count_templates_scopes+0xc>
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	68a4      	ldr	r4, [r4, #8]
 800030a:	2c00      	cmp	r4, #0
 800030c:	d1ca      	bne.n	80002a4 <d_count_templates_scopes+0xc>
 800030e:	e7fa      	b.n	8000306 <d_count_templates_scopes+0x6e>
 8000310:	68a2      	ldr	r2, [r4, #8]
 8000312:	7813      	ldrb	r3, [r2, #0]
 8000314:	2b05      	cmp	r3, #5
 8000316:	d103      	bne.n	8000320 <d_count_templates_scopes+0x88>
 8000318:	6833      	ldr	r3, [r6, #0]
 800031a:	3301      	adds	r3, #1
 800031c:	6033      	str	r3, [r6, #0]
 800031e:	68a2      	ldr	r2, [r4, #8]
 8000320:	4631      	mov	r1, r6
 8000322:	4628      	mov	r0, r5
 8000324:	f7ff ffb8 	bl	8000298 <d_count_templates_scopes>
 8000328:	68e4      	ldr	r4, [r4, #12]
 800032a:	2c00      	cmp	r4, #0
 800032c:	d1ba      	bne.n	80002a4 <d_count_templates_scopes+0xc>
 800032e:	e7ea      	b.n	8000306 <d_count_templates_scopes+0x6e>
 8000330:	682b      	ldr	r3, [r5, #0]
 8000332:	3301      	adds	r3, #1
 8000334:	602b      	str	r3, [r5, #0]
 8000336:	68a2      	ldr	r2, [r4, #8]
 8000338:	e7f2      	b.n	8000320 <d_count_templates_scopes+0x88>
 800033a:	4770      	bx	lr

0800033c <d_append_buffer>:
 800033c:	b39a      	cbz	r2, 80003a6 <d_append_buffer+0x6a>
 800033e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000342:	188e      	adds	r6, r1, r2
 8000344:	4604      	mov	r4, r0
 8000346:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800034a:	3e01      	subs	r6, #1
 800034c:	1e4d      	subs	r5, r1, #1
 800034e:	2700      	movs	r7, #0
 8000350:	e016      	b.n	8000380 <d_append_buffer+0x44>
 8000352:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000356:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800035a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800035e:	4798      	blx	r3
 8000360:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000364:	2200      	movs	r2, #0
 8000366:	3301      	adds	r3, #1
 8000368:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800036c:	42b5      	cmp	r5, r6
 800036e:	f04f 0301 	mov.w	r3, #1
 8000372:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8000376:	f804 8002 	strb.w	r8, [r4, r2]
 800037a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800037e:	d010      	beq.n	80003a2 <d_append_buffer+0x66>
 8000380:	2bff      	cmp	r3, #255	; 0xff
 8000382:	4619      	mov	r1, r3
 8000384:	4620      	mov	r0, r4
 8000386:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 800038a:	d0e2      	beq.n	8000352 <d_append_buffer+0x16>
 800038c:	461a      	mov	r2, r3
 800038e:	42b5      	cmp	r5, r6
 8000390:	f103 0301 	add.w	r3, r3, #1
 8000394:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8000398:	f804 8002 	strb.w	r8, [r4, r2]
 800039c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80003a0:	d1ee      	bne.n	8000380 <d_append_buffer+0x44>
 80003a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80003a6:	4770      	bx	lr

080003a8 <is_fnqual_component_type>:
 80003a8:	f1a0 031c 	sub.w	r3, r0, #28
 80003ac:	2b04      	cmp	r3, #4
 80003ae:	d907      	bls.n	80003c0 <is_fnqual_component_type+0x18>
 80003b0:	284c      	cmp	r0, #76	; 0x4c
 80003b2:	d005      	beq.n	80003c0 <is_fnqual_component_type+0x18>
 80003b4:	384e      	subs	r0, #78	; 0x4e
 80003b6:	2801      	cmp	r0, #1
 80003b8:	bf8c      	ite	hi
 80003ba:	2000      	movhi	r0, #0
 80003bc:	2001      	movls	r0, #1
 80003be:	4770      	bx	lr
 80003c0:	2001      	movs	r0, #1
 80003c2:	4770      	bx	lr

080003c4 <d_number.isra.1>:
 80003c4:	b470      	push	{r4, r5, r6}
 80003c6:	6802      	ldr	r2, [r0, #0]
 80003c8:	7811      	ldrb	r1, [r2, #0]
 80003ca:	296e      	cmp	r1, #110	; 0x6e
 80003cc:	d018      	beq.n	8000400 <d_number.isra.1+0x3c>
 80003ce:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80003d2:	2b09      	cmp	r3, #9
 80003d4:	d81e      	bhi.n	8000414 <d_number.isra.1+0x50>
 80003d6:	2600      	movs	r6, #0
 80003d8:	2300      	movs	r3, #0
 80003da:	3201      	adds	r2, #1
 80003dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80003e0:	6002      	str	r2, [r0, #0]
 80003e2:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80003e6:	7811      	ldrb	r1, [r2, #0]
 80003e8:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 80003ec:	2d09      	cmp	r5, #9
 80003ee:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80003f2:	d9f2      	bls.n	80003da <d_number.isra.1+0x16>
 80003f4:	b10e      	cbz	r6, 80003fa <d_number.isra.1+0x36>
 80003f6:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
 80003fa:	4618      	mov	r0, r3
 80003fc:	bc70      	pop	{r4, r5, r6}
 80003fe:	4770      	bx	lr
 8000400:	1c53      	adds	r3, r2, #1
 8000402:	6003      	str	r3, [r0, #0]
 8000404:	7851      	ldrb	r1, [r2, #1]
 8000406:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800040a:	2a09      	cmp	r2, #9
 800040c:	d802      	bhi.n	8000414 <d_number.isra.1+0x50>
 800040e:	461a      	mov	r2, r3
 8000410:	2601      	movs	r6, #1
 8000412:	e7e1      	b.n	80003d8 <d_number.isra.1+0x14>
 8000414:	2300      	movs	r3, #0
 8000416:	4618      	mov	r0, r3
 8000418:	bc70      	pop	{r4, r5, r6}
 800041a:	4770      	bx	lr

0800041c <d_number_component>:
 800041c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8000420:	4293      	cmp	r3, r2
 8000422:	b570      	push	{r4, r5, r6, lr}
 8000424:	da0e      	bge.n	8000444 <d_number_component+0x28>
 8000426:	6901      	ldr	r1, [r0, #16]
 8000428:	011a      	lsls	r2, r3, #4
 800042a:	188c      	adds	r4, r1, r2
 800042c:	3301      	adds	r3, #1
 800042e:	2600      	movs	r6, #0
 8000430:	2541      	movs	r5, #65	; 0x41
 8000432:	6066      	str	r6, [r4, #4]
 8000434:	300c      	adds	r0, #12
 8000436:	6083      	str	r3, [r0, #8]
 8000438:	548d      	strb	r5, [r1, r2]
 800043a:	f7ff ffc3 	bl	80003c4 <d_number.isra.1>
 800043e:	60a0      	str	r0, [r4, #8]
 8000440:	4620      	mov	r0, r4
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	2400      	movs	r4, #0
 8000446:	4620      	mov	r0, r4
 8000448:	bd70      	pop	{r4, r5, r6, pc}
 800044a:	bf00      	nop

0800044c <d_compact_number>:
 800044c:	b510      	push	{r4, lr}
 800044e:	68c3      	ldr	r3, [r0, #12]
 8000450:	781a      	ldrb	r2, [r3, #0]
 8000452:	2a5f      	cmp	r2, #95	; 0x5f
 8000454:	4604      	mov	r4, r0
 8000456:	d00d      	beq.n	8000474 <d_compact_number+0x28>
 8000458:	2a6e      	cmp	r2, #110	; 0x6e
 800045a:	d00d      	beq.n	8000478 <d_compact_number+0x2c>
 800045c:	300c      	adds	r0, #12
 800045e:	f7ff ffb1 	bl	80003c4 <d_number.isra.1>
 8000462:	3001      	adds	r0, #1
 8000464:	d408      	bmi.n	8000478 <d_compact_number+0x2c>
 8000466:	68e3      	ldr	r3, [r4, #12]
 8000468:	781a      	ldrb	r2, [r3, #0]
 800046a:	2a5f      	cmp	r2, #95	; 0x5f
 800046c:	d104      	bne.n	8000478 <d_compact_number+0x2c>
 800046e:	3301      	adds	r3, #1
 8000470:	60e3      	str	r3, [r4, #12]
 8000472:	bd10      	pop	{r4, pc}
 8000474:	2000      	movs	r0, #0
 8000476:	e7fa      	b.n	800046e <d_compact_number+0x22>
 8000478:	f04f 30ff 	mov.w	r0, #4294967295
 800047c:	bd10      	pop	{r4, pc}
 800047e:	bf00      	nop

08000480 <d_template_param>:
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000482:	68c3      	ldr	r3, [r0, #12]
 8000484:	781a      	ldrb	r2, [r3, #0]
 8000486:	2a54      	cmp	r2, #84	; 0x54
 8000488:	d119      	bne.n	80004be <d_template_param+0x3e>
 800048a:	3301      	adds	r3, #1
 800048c:	60c3      	str	r3, [r0, #12]
 800048e:	4604      	mov	r4, r0
 8000490:	f7ff ffdc 	bl	800044c <d_compact_number>
 8000494:	1e05      	subs	r5, r0, #0
 8000496:	db12      	blt.n	80004be <d_template_param+0x3e>
 8000498:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800049c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800049e:	428b      	cmp	r3, r1
 80004a0:	f102 0201 	add.w	r2, r2, #1
 80004a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80004a6:	da0a      	bge.n	80004be <d_template_param+0x3e>
 80004a8:	6921      	ldr	r1, [r4, #16]
 80004aa:	011a      	lsls	r2, r3, #4
 80004ac:	1888      	adds	r0, r1, r2
 80004ae:	3301      	adds	r3, #1
 80004b0:	2700      	movs	r7, #0
 80004b2:	2605      	movs	r6, #5
 80004b4:	6047      	str	r7, [r0, #4]
 80004b6:	6163      	str	r3, [r4, #20]
 80004b8:	548e      	strb	r6, [r1, r2]
 80004ba:	6085      	str	r5, [r0, #8]
 80004bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004be:	2000      	movs	r0, #0
 80004c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004c2:	bf00      	nop

080004c4 <d_source_name>:
 80004c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004c8:	4604      	mov	r4, r0
 80004ca:	300c      	adds	r0, #12
 80004cc:	f7ff ff7a 	bl	80003c4 <d_number.isra.1>
 80004d0:	1e07      	subs	r7, r0, #0
 80004d2:	dd49      	ble.n	8000568 <d_source_name+0xa4>
 80004d4:	68e5      	ldr	r5, [r4, #12]
 80004d6:	6863      	ldr	r3, [r4, #4]
 80004d8:	1b5b      	subs	r3, r3, r5
 80004da:	429f      	cmp	r7, r3
 80004dc:	dc42      	bgt.n	8000564 <d_source_name+0xa0>
 80004de:	68a2      	ldr	r2, [r4, #8]
 80004e0:	19eb      	adds	r3, r5, r7
 80004e2:	0752      	lsls	r2, r2, #29
 80004e4:	60e3      	str	r3, [r4, #12]
 80004e6:	d504      	bpl.n	80004f2 <d_source_name+0x2e>
 80004e8:	5dea      	ldrb	r2, [r5, r7]
 80004ea:	2a24      	cmp	r2, #36	; 0x24
 80004ec:	bf04      	itt	eq
 80004ee:	3301      	addeq	r3, #1
 80004f0:	60e3      	streq	r3, [r4, #12]
 80004f2:	2f09      	cmp	r7, #9
 80004f4:	e9d4 6805 	ldrd	r6, r8, [r4, #20]
 80004f8:	dc10      	bgt.n	800051c <d_source_name+0x58>
 80004fa:	45b0      	cmp	r8, r6
 80004fc:	dd32      	ble.n	8000564 <d_source_name+0xa0>
 80004fe:	6921      	ldr	r1, [r4, #16]
 8000500:	0132      	lsls	r2, r6, #4
 8000502:	1888      	adds	r0, r1, r2
 8000504:	3601      	adds	r6, #1
 8000506:	2300      	movs	r3, #0
 8000508:	6043      	str	r3, [r0, #4]
 800050a:	6166      	str	r6, [r4, #20]
 800050c:	b355      	cbz	r5, 8000564 <d_source_name+0xa0>
 800050e:	6043      	str	r3, [r0, #4]
 8000510:	548b      	strb	r3, [r1, r2]
 8000512:	e9c0 5702 	strd	r5, r7, [r0, #8]
 8000516:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800051c:	2208      	movs	r2, #8
 800051e:	4914      	ldr	r1, [pc, #80]	; (8000570 <d_source_name+0xac>)
 8000520:	4628      	mov	r0, r5
 8000522:	f012 fcb1 	bl	8012e88 <memcmp>
 8000526:	2800      	cmp	r0, #0
 8000528:	d1e7      	bne.n	80004fa <d_source_name+0x36>
 800052a:	7a2b      	ldrb	r3, [r5, #8]
 800052c:	2b2e      	cmp	r3, #46	; 0x2e
 800052e:	d003      	beq.n	8000538 <d_source_name+0x74>
 8000530:	2b5f      	cmp	r3, #95	; 0x5f
 8000532:	d001      	beq.n	8000538 <d_source_name+0x74>
 8000534:	2b24      	cmp	r3, #36	; 0x24
 8000536:	d1e0      	bne.n	80004fa <d_source_name+0x36>
 8000538:	7a6b      	ldrb	r3, [r5, #9]
 800053a:	2b4e      	cmp	r3, #78	; 0x4e
 800053c:	d1dd      	bne.n	80004fa <d_source_name+0x36>
 800053e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000540:	3316      	adds	r3, #22
 8000542:	1bdf      	subs	r7, r3, r7
 8000544:	45b0      	cmp	r8, r6
 8000546:	6327      	str	r7, [r4, #48]	; 0x30
 8000548:	dd0c      	ble.n	8000564 <d_source_name+0xa0>
 800054a:	6922      	ldr	r2, [r4, #16]
 800054c:	4d09      	ldr	r5, [pc, #36]	; (8000574 <d_source_name+0xb0>)
 800054e:	0133      	lsls	r3, r6, #4
 8000550:	18d0      	adds	r0, r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	3601      	adds	r6, #1
 8000556:	6166      	str	r6, [r4, #20]
 8000558:	6041      	str	r1, [r0, #4]
 800055a:	54d1      	strb	r1, [r2, r3]
 800055c:	2315      	movs	r3, #21
 800055e:	e9c0 5302 	strd	r5, r3, [r0, #8]
 8000562:	e7d8      	b.n	8000516 <d_source_name+0x52>
 8000564:	2000      	movs	r0, #0
 8000566:	e7d6      	b.n	8000516 <d_source_name+0x52>
 8000568:	2000      	movs	r0, #0
 800056a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800056e:	bf00      	nop
 8000570:	08017c60 	.word	0x08017c60
 8000574:	08017c6c 	.word	0x08017c6c

08000578 <d_abi_tags>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	68c3      	ldr	r3, [r0, #12]
 800057c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800057e:	781a      	ldrb	r2, [r3, #0]
 8000580:	2a42      	cmp	r2, #66	; 0x42
 8000582:	4604      	mov	r4, r0
 8000584:	460d      	mov	r5, r1
 8000586:	d10f      	bne.n	80005a8 <d_abi_tags+0x30>
 8000588:	3301      	adds	r3, #1
 800058a:	60e3      	str	r3, [r4, #12]
 800058c:	4620      	mov	r0, r4
 800058e:	f7ff ff99 	bl	80004c4 <d_source_name>
 8000592:	462a      	mov	r2, r5
 8000594:	4603      	mov	r3, r0
 8000596:	214b      	movs	r1, #75	; 0x4b
 8000598:	4620      	mov	r0, r4
 800059a:	f7ff fe19 	bl	80001d0 <d_make_comp>
 800059e:	68e3      	ldr	r3, [r4, #12]
 80005a0:	781a      	ldrb	r2, [r3, #0]
 80005a2:	2a42      	cmp	r2, #66	; 0x42
 80005a4:	4605      	mov	r5, r0
 80005a6:	d0ef      	beq.n	8000588 <d_abi_tags+0x10>
 80005a8:	62e6      	str	r6, [r4, #44]	; 0x2c
 80005aa:	4628      	mov	r0, r5
 80005ac:	bd70      	pop	{r4, r5, r6, pc}
 80005ae:	bf00      	nop

080005b0 <d_substitution>:
 80005b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005b4:	4605      	mov	r5, r0
 80005b6:	68c0      	ldr	r0, [r0, #12]
 80005b8:	7803      	ldrb	r3, [r0, #0]
 80005ba:	2b53      	cmp	r3, #83	; 0x53
 80005bc:	d131      	bne.n	8000622 <d_substitution+0x72>
 80005be:	1c43      	adds	r3, r0, #1
 80005c0:	60eb      	str	r3, [r5, #12]
 80005c2:	7842      	ldrb	r2, [r0, #1]
 80005c4:	b3a2      	cbz	r2, 8000630 <d_substitution+0x80>
 80005c6:	1c83      	adds	r3, r0, #2
 80005c8:	60eb      	str	r3, [r5, #12]
 80005ca:	7842      	ldrb	r2, [r0, #1]
 80005cc:	2a5f      	cmp	r2, #95	; 0x5f
 80005ce:	f000 8089 	beq.w	80006e4 <d_substitution+0x134>
 80005d2:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80005d6:	b2e3      	uxtb	r3, r4
 80005d8:	2b09      	cmp	r3, #9
 80005da:	d825      	bhi.n	8000628 <d_substitution+0x78>
 80005dc:	2100      	movs	r1, #0
 80005de:	e00e      	b.n	80005fe <d_substitution+0x4e>
 80005e0:	3b30      	subs	r3, #48	; 0x30
 80005e2:	4299      	cmp	r1, r3
 80005e4:	d81d      	bhi.n	8000622 <d_substitution+0x72>
 80005e6:	68e9      	ldr	r1, [r5, #12]
 80005e8:	780a      	ldrb	r2, [r1, #0]
 80005ea:	1c48      	adds	r0, r1, #1
 80005ec:	b122      	cbz	r2, 80005f8 <d_substitution+0x48>
 80005ee:	60e8      	str	r0, [r5, #12]
 80005f0:	780a      	ldrb	r2, [r1, #0]
 80005f2:	2a5f      	cmp	r2, #95	; 0x5f
 80005f4:	f000 8082 	beq.w	80006fc <d_substitution+0x14c>
 80005f8:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80005fc:	4619      	mov	r1, r3
 80005fe:	b2e4      	uxtb	r4, r4
 8000600:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000604:	2c09      	cmp	r4, #9
 8000606:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 800060a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800060e:	d9e7      	bls.n	80005e0 <d_substitution+0x30>
 8000610:	2819      	cmp	r0, #25
 8000612:	d806      	bhi.n	8000622 <d_substitution+0x72>
 8000614:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000618:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800061c:	3b37      	subs	r3, #55	; 0x37
 800061e:	4299      	cmp	r1, r3
 8000620:	d9e1      	bls.n	80005e6 <d_substitution+0x36>
 8000622:	2000      	movs	r0, #0
 8000624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000628:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800062c:	2b19      	cmp	r3, #25
 800062e:	d9d5      	bls.n	80005dc <d_substitution+0x2c>
 8000630:	68ab      	ldr	r3, [r5, #8]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	bf14      	ite	ne
 800063a:	2401      	movne	r4, #1
 800063c:	2400      	moveq	r4, #0
 800063e:	d101      	bne.n	8000644 <d_substitution+0x94>
 8000640:	2900      	cmp	r1, #0
 8000642:	d15d      	bne.n	8000700 <d_substitution+0x150>
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <d_substitution+0x16c>)
 8000646:	2174      	movs	r1, #116	; 0x74
 8000648:	4291      	cmp	r1, r2
 800064a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800064e:	d005      	beq.n	800065c <d_substitution+0xac>
 8000650:	331c      	adds	r3, #28
 8000652:	4283      	cmp	r3, r0
 8000654:	d2e5      	bcs.n	8000622 <d_substitution+0x72>
 8000656:	7819      	ldrb	r1, [r3, #0]
 8000658:	4291      	cmp	r1, r2
 800065a:	d1f9      	bne.n	8000650 <d_substitution+0xa0>
 800065c:	6958      	ldr	r0, [r3, #20]
 800065e:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
 8000662:	b1a8      	cbz	r0, 8000690 <d_substitution+0xe0>
 8000664:	428a      	cmp	r2, r1
 8000666:	da57      	bge.n	8000718 <d_substitution+0x168>
 8000668:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800066c:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8000670:	0117      	lsls	r7, r2, #4
 8000672:	eb0c 0607 	add.w	r6, ip, r7
 8000676:	3201      	adds	r2, #1
 8000678:	f04f 0900 	mov.w	r9, #0
 800067c:	f04f 0818 	mov.w	r8, #24
 8000680:	f8c6 9004 	str.w	r9, [r6, #4]
 8000684:	616a      	str	r2, [r5, #20]
 8000686:	f80c 8007 	strb.w	r8, [ip, r7]
 800068a:	e9c6 0e02 	strd	r0, lr, [r6, #8]
 800068e:	62ee      	str	r6, [r5, #44]	; 0x2c
 8000690:	2c00      	cmp	r4, #0
 8000692:	d13c      	bne.n	800070e <d_substitution+0x15e>
 8000694:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
 8000698:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800069a:	4291      	cmp	r1, r2
 800069c:	4423      	add	r3, r4
 800069e:	632b      	str	r3, [r5, #48]	; 0x30
 80006a0:	dd38      	ble.n	8000714 <d_substitution+0x164>
 80006a2:	6929      	ldr	r1, [r5, #16]
 80006a4:	0113      	lsls	r3, r2, #4
 80006a6:	18c8      	adds	r0, r1, r3
 80006a8:	3201      	adds	r2, #1
 80006aa:	f04f 0c00 	mov.w	ip, #0
 80006ae:	2718      	movs	r7, #24
 80006b0:	f8c0 c004 	str.w	ip, [r0, #4]
 80006b4:	616a      	str	r2, [r5, #20]
 80006b6:	54cf      	strb	r7, [r1, r3]
 80006b8:	e9c0 6402 	strd	r6, r4, [r0, #8]
 80006bc:	68eb      	ldr	r3, [r5, #12]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b42      	cmp	r3, #66	; 0x42
 80006c2:	d1af      	bne.n	8000624 <d_substitution+0x74>
 80006c4:	4601      	mov	r1, r0
 80006c6:	4628      	mov	r0, r5
 80006c8:	f7ff ff56 	bl	8000578 <d_abi_tags>
 80006cc:	2800      	cmp	r0, #0
 80006ce:	d0a8      	beq.n	8000622 <d_substitution+0x72>
 80006d0:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 80006d4:	4293      	cmp	r3, r2
 80006d6:	daa5      	bge.n	8000624 <d_substitution+0x74>
 80006d8:	69e9      	ldr	r1, [r5, #28]
 80006da:	1c5a      	adds	r2, r3, #1
 80006dc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80006e0:	622a      	str	r2, [r5, #32]
 80006e2:	e79f      	b.n	8000624 <d_substitution+0x74>
 80006e4:	2300      	movs	r3, #0
 80006e6:	6a2a      	ldr	r2, [r5, #32]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d99a      	bls.n	8000622 <d_substitution+0x72>
 80006ec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80006ee:	69e9      	ldr	r1, [r5, #28]
 80006f0:	3201      	adds	r2, #1
 80006f2:	62aa      	str	r2, [r5, #40]	; 0x28
 80006f4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80006f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006fc:	3301      	adds	r3, #1
 80006fe:	e7f2      	b.n	80006e6 <d_substitution+0x136>
 8000700:	68eb      	ldr	r3, [r5, #12]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	3b43      	subs	r3, #67	; 0x43
 8000706:	2b01      	cmp	r3, #1
 8000708:	bf98      	it	ls
 800070a:	460c      	movls	r4, r1
 800070c:	e79a      	b.n	8000644 <d_substitution+0x94>
 800070e:	e9d3 6403 	ldrd	r6, r4, [r3, #12]
 8000712:	e7c1      	b.n	8000698 <d_substitution+0xe8>
 8000714:	2000      	movs	r0, #0
 8000716:	e7d1      	b.n	80006bc <d_substitution+0x10c>
 8000718:	2600      	movs	r6, #0
 800071a:	e7b8      	b.n	800068e <d_substitution+0xde>
 800071c:	080170b0 	.word	0x080170b0

08000720 <d_discriminator>:
 8000720:	68c3      	ldr	r3, [r0, #12]
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	2a5f      	cmp	r2, #95	; 0x5f
 8000726:	d001      	beq.n	800072c <d_discriminator+0xc>
 8000728:	2001      	movs	r0, #1
 800072a:	4770      	bx	lr
 800072c:	b510      	push	{r4, lr}
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	4604      	mov	r4, r0
 8000732:	f840 2f0c 	str.w	r2, [r0, #12]!
 8000736:	785a      	ldrb	r2, [r3, #1]
 8000738:	2a5f      	cmp	r2, #95	; 0x5f
 800073a:	d004      	beq.n	8000746 <d_discriminator+0x26>
 800073c:	f7ff fe42 	bl	80003c4 <d_number.isra.1>
 8000740:	43c0      	mvns	r0, r0
 8000742:	0fc0      	lsrs	r0, r0, #31
 8000744:	bd10      	pop	{r4, pc}
 8000746:	3302      	adds	r3, #2
 8000748:	60e3      	str	r3, [r4, #12]
 800074a:	f7ff fe3b 	bl	80003c4 <d_number.isra.1>
 800074e:	2800      	cmp	r0, #0
 8000750:	db05      	blt.n	800075e <d_discriminator+0x3e>
 8000752:	2809      	cmp	r0, #9
 8000754:	dd07      	ble.n	8000766 <d_discriminator+0x46>
 8000756:	68e3      	ldr	r3, [r4, #12]
 8000758:	781a      	ldrb	r2, [r3, #0]
 800075a:	2a5f      	cmp	r2, #95	; 0x5f
 800075c:	d001      	beq.n	8000762 <d_discriminator+0x42>
 800075e:	2000      	movs	r0, #0
 8000760:	bd10      	pop	{r4, pc}
 8000762:	3301      	adds	r3, #1
 8000764:	60e3      	str	r3, [r4, #12]
 8000766:	2001      	movs	r0, #1
 8000768:	bd10      	pop	{r4, pc}
 800076a:	bf00      	nop

0800076c <d_index_template_argument.part.9>:
 800076c:	b170      	cbz	r0, 800078c <d_index_template_argument.part.9+0x20>
 800076e:	7803      	ldrb	r3, [r0, #0]
 8000770:	2b2f      	cmp	r3, #47	; 0x2f
 8000772:	d10f      	bne.n	8000794 <d_index_template_argument.part.9+0x28>
 8000774:	2900      	cmp	r1, #0
 8000776:	dc04      	bgt.n	8000782 <d_index_template_argument.part.9+0x16>
 8000778:	e009      	b.n	800078e <d_index_template_argument.part.9+0x22>
 800077a:	7803      	ldrb	r3, [r0, #0]
 800077c:	2b2f      	cmp	r3, #47	; 0x2f
 800077e:	d109      	bne.n	8000794 <d_index_template_argument.part.9+0x28>
 8000780:	b131      	cbz	r1, 8000790 <d_index_template_argument.part.9+0x24>
 8000782:	68c0      	ldr	r0, [r0, #12]
 8000784:	3901      	subs	r1, #1
 8000786:	2800      	cmp	r0, #0
 8000788:	d1f7      	bne.n	800077a <d_index_template_argument.part.9+0xe>
 800078a:	4770      	bx	lr
 800078c:	4770      	bx	lr
 800078e:	d101      	bne.n	8000794 <d_index_template_argument.part.9+0x28>
 8000790:	6880      	ldr	r0, [r0, #8]
 8000792:	4770      	bx	lr
 8000794:	2000      	movs	r0, #0
 8000796:	4770      	bx	lr

08000798 <d_lookup_template_argument.isra.10>:
 8000798:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800079c:	b133      	cbz	r3, 80007ac <d_lookup_template_argument.isra.10+0x14>
 800079e:	6809      	ldr	r1, [r1, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	2900      	cmp	r1, #0
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	db04      	blt.n	80007b2 <d_lookup_template_argument.isra.10+0x1a>
 80007a8:	4618      	mov	r0, r3
 80007aa:	e7df      	b.n	800076c <d_index_template_argument.part.9>
 80007ac:	2201      	movs	r2, #1
 80007ae:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 80007b2:	4618      	mov	r0, r3
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop

080007b8 <d_find_pack>:
 80007b8:	2900      	cmp	r1, #0
 80007ba:	d042      	beq.n	8000842 <d_find_pack+0x8a>
 80007bc:	b538      	push	{r3, r4, r5, lr}
 80007be:	4605      	mov	r5, r0
 80007c0:	460c      	mov	r4, r1
 80007c2:	7823      	ldrb	r3, [r4, #0]
 80007c4:	2b4b      	cmp	r3, #75	; 0x4b
 80007c6:	d827      	bhi.n	8000818 <d_find_pack+0x60>
 80007c8:	e8df f003 	tbb	[pc, r3]
 80007cc:	2626262e 	.word	0x2626262e
 80007d0:	2b2e3026 	.word	0x2b2e3026
 80007d4:	2626262b 	.word	0x2626262b
 80007d8:	26262626 	.word	0x26262626
 80007dc:	26262626 	.word	0x26262626
 80007e0:	26262626 	.word	0x26262626
 80007e4:	2626262e 	.word	0x2626262e
 80007e8:	26262626 	.word	0x26262626
 80007ec:	26262626 	.word	0x26262626
 80007f0:	2e262626 	.word	0x2e262626
 80007f4:	26262626 	.word	0x26262626
 80007f8:	2626262e 	.word	0x2626262e
 80007fc:	262b2e26 	.word	0x262b2e26
 8000800:	26262626 	.word	0x26262626
 8000804:	26262626 	.word	0x26262626
 8000808:	26262626 	.word	0x26262626
 800080c:	26262e2e 	.word	0x26262e2e
 8000810:	2e2e2e26 	.word	0x2e2e2e26
 8000814:	2e2e2626 	.word	0x2e2e2626
 8000818:	68a1      	ldr	r1, [r4, #8]
 800081a:	4628      	mov	r0, r5
 800081c:	f7ff ffcc 	bl	80007b8 <d_find_pack>
 8000820:	b918      	cbnz	r0, 800082a <d_find_pack+0x72>
 8000822:	68e4      	ldr	r4, [r4, #12]
 8000824:	2c00      	cmp	r4, #0
 8000826:	d1cc      	bne.n	80007c2 <d_find_pack+0xa>
 8000828:	2000      	movs	r0, #0
 800082a:	bd38      	pop	{r3, r4, r5, pc}
 800082c:	f104 0108 	add.w	r1, r4, #8
 8000830:	4628      	mov	r0, r5
 8000832:	f7ff ffb1 	bl	8000798 <d_lookup_template_argument.isra.10>
 8000836:	2800      	cmp	r0, #0
 8000838:	d0f6      	beq.n	8000828 <d_find_pack+0x70>
 800083a:	7803      	ldrb	r3, [r0, #0]
 800083c:	2b2f      	cmp	r3, #47	; 0x2f
 800083e:	d1f3      	bne.n	8000828 <d_find_pack+0x70>
 8000840:	bd38      	pop	{r3, r4, r5, pc}
 8000842:	2000      	movs	r0, #0
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop

08000848 <d_growable_string_callback_adapter>:
 8000848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800084c:	4614      	mov	r4, r2
 800084e:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
 8000852:	6852      	ldr	r2, [r2, #4]
 8000854:	1c4b      	adds	r3, r1, #1
 8000856:	4413      	add	r3, r2
 8000858:	42ab      	cmp	r3, r5
 800085a:	b082      	sub	sp, #8
 800085c:	460e      	mov	r6, r1
 800085e:	4680      	mov	r8, r0
 8000860:	d814      	bhi.n	800088c <d_growable_string_callback_adapter+0x44>
 8000862:	b117      	cbz	r7, 800086a <d_growable_string_callback_adapter+0x22>
 8000864:	b002      	add	sp, #8
 8000866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800086a:	e9d4 0300 	ldrd	r0, r3, [r4]
 800086e:	4632      	mov	r2, r6
 8000870:	4641      	mov	r1, r8
 8000872:	4418      	add	r0, r3
 8000874:	f012 fb17 	bl	8012ea6 <memcpy>
 8000878:	e9d4 3200 	ldrd	r3, r2, [r4]
 800087c:	4433      	add	r3, r6
 800087e:	549f      	strb	r7, [r3, r2]
 8000880:	6863      	ldr	r3, [r4, #4]
 8000882:	441e      	add	r6, r3
 8000884:	6066      	str	r6, [r4, #4]
 8000886:	b002      	add	sp, #8
 8000888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800088c:	2f00      	cmp	r7, #0
 800088e:	d1e9      	bne.n	8000864 <d_growable_string_callback_adapter+0x1c>
 8000890:	b91d      	cbnz	r5, 800089a <d_growable_string_callback_adapter+0x52>
 8000892:	2b02      	cmp	r3, #2
 8000894:	f04f 0502 	mov.w	r5, #2
 8000898:	d902      	bls.n	80008a0 <d_growable_string_callback_adapter+0x58>
 800089a:	006d      	lsls	r5, r5, #1
 800089c:	42ab      	cmp	r3, r5
 800089e:	d8fc      	bhi.n	800089a <d_growable_string_callback_adapter+0x52>
 80008a0:	4629      	mov	r1, r5
 80008a2:	6820      	ldr	r0, [r4, #0]
 80008a4:	f012 fb6c 	bl	8012f80 <realloc>
 80008a8:	b128      	cbz	r0, 80008b6 <d_growable_string_callback_adapter+0x6e>
 80008aa:	68e7      	ldr	r7, [r4, #12]
 80008ac:	6020      	str	r0, [r4, #0]
 80008ae:	60a5      	str	r5, [r4, #8]
 80008b0:	2f00      	cmp	r7, #0
 80008b2:	d1d7      	bne.n	8000864 <d_growable_string_callback_adapter+0x1c>
 80008b4:	e7d9      	b.n	800086a <d_growable_string_callback_adapter+0x22>
 80008b6:	9001      	str	r0, [sp, #4]
 80008b8:	6820      	ldr	r0, [r4, #0]
 80008ba:	f012 f8a7 	bl	8012a0c <free>
 80008be:	9b01      	ldr	r3, [sp, #4]
 80008c0:	2201      	movs	r2, #1
 80008c2:	e9c4 3300 	strd	r3, r3, [r4]
 80008c6:	e9c4 3202 	strd	r3, r2, [r4, #8]
 80008ca:	e7cb      	b.n	8000864 <d_growable_string_callback_adapter+0x1c>

080008cc <d_call_offset>:
 80008cc:	b538      	push	{r3, r4, r5, lr}
 80008ce:	4604      	mov	r4, r0
 80008d0:	b929      	cbnz	r1, 80008de <d_call_offset+0x12>
 80008d2:	68c3      	ldr	r3, [r0, #12]
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	b132      	cbz	r2, 80008e6 <d_call_offset+0x1a>
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	60c2      	str	r2, [r0, #12]
 80008dc:	7819      	ldrb	r1, [r3, #0]
 80008de:	2968      	cmp	r1, #104	; 0x68
 80008e0:	d012      	beq.n	8000908 <d_call_offset+0x3c>
 80008e2:	2976      	cmp	r1, #118	; 0x76
 80008e4:	d001      	beq.n	80008ea <d_call_offset+0x1e>
 80008e6:	2000      	movs	r0, #0
 80008e8:	bd38      	pop	{r3, r4, r5, pc}
 80008ea:	f104 050c 	add.w	r5, r4, #12
 80008ee:	4628      	mov	r0, r5
 80008f0:	f7ff fd68 	bl	80003c4 <d_number.isra.1>
 80008f4:	68e3      	ldr	r3, [r4, #12]
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	2a5f      	cmp	r2, #95	; 0x5f
 80008fa:	d1f4      	bne.n	80008e6 <d_call_offset+0x1a>
 80008fc:	3301      	adds	r3, #1
 80008fe:	60e3      	str	r3, [r4, #12]
 8000900:	4628      	mov	r0, r5
 8000902:	f7ff fd5f 	bl	80003c4 <d_number.isra.1>
 8000906:	e003      	b.n	8000910 <d_call_offset+0x44>
 8000908:	f104 000c 	add.w	r0, r4, #12
 800090c:	f7ff fd5a 	bl	80003c4 <d_number.isra.1>
 8000910:	68e3      	ldr	r3, [r4, #12]
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	2a5f      	cmp	r2, #95	; 0x5f
 8000916:	d1e6      	bne.n	80008e6 <d_call_offset+0x1a>
 8000918:	3301      	adds	r3, #1
 800091a:	60e3      	str	r3, [r4, #12]
 800091c:	2001      	movs	r0, #1
 800091e:	bd38      	pop	{r3, r4, r5, pc}

08000920 <d_append_num>:
 8000920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000924:	b088      	sub	sp, #32
 8000926:	460a      	mov	r2, r1
 8000928:	4604      	mov	r4, r0
 800092a:	491c      	ldr	r1, [pc, #112]	; (800099c <d_append_num+0x7c>)
 800092c:	a801      	add	r0, sp, #4
 800092e:	f012 fd65 	bl	80133fc <sprintf>
 8000932:	a801      	add	r0, sp, #4
 8000934:	f006 fa16 	bl	8006d64 <strlen>
 8000938:	b368      	cbz	r0, 8000996 <d_append_num+0x76>
 800093a:	ad01      	add	r5, sp, #4
 800093c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8000940:	182e      	adds	r6, r5, r0
 8000942:	2700      	movs	r7, #0
 8000944:	e016      	b.n	8000974 <d_append_num+0x54>
 8000946:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800094a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800094e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8000952:	4798      	blx	r3
 8000954:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000958:	2200      	movs	r2, #0
 800095a:	3301      	adds	r3, #1
 800095c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8000960:	42ae      	cmp	r6, r5
 8000962:	f04f 0301 	mov.w	r3, #1
 8000966:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800096a:	f804 8002 	strb.w	r8, [r4, r2]
 800096e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000972:	d010      	beq.n	8000996 <d_append_num+0x76>
 8000974:	2bff      	cmp	r3, #255	; 0xff
 8000976:	4619      	mov	r1, r3
 8000978:	4620      	mov	r0, r4
 800097a:	f815 8b01 	ldrb.w	r8, [r5], #1
 800097e:	d0e2      	beq.n	8000946 <d_append_num+0x26>
 8000980:	461a      	mov	r2, r3
 8000982:	42ae      	cmp	r6, r5
 8000984:	f103 0301 	add.w	r3, r3, #1
 8000988:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800098c:	f804 8002 	strb.w	r8, [r4, r2]
 8000990:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000994:	d1ee      	bne.n	8000974 <d_append_num+0x54>
 8000996:	b008      	add	sp, #32
 8000998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800099c:	08017c84 	.word	0x08017c84

080009a0 <d_exprlist>:
 80009a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009a4:	68c3      	ldr	r3, [r0, #12]
 80009a6:	781d      	ldrb	r5, [r3, #0]
 80009a8:	b083      	sub	sp, #12
 80009aa:	2200      	movs	r2, #0
 80009ac:	428d      	cmp	r5, r1
 80009ae:	4604      	mov	r4, r0
 80009b0:	9201      	str	r2, [sp, #4]
 80009b2:	f000 8199 	beq.w	8000ce8 <d_exprlist+0x348>
 80009b6:	f8df 94c0 	ldr.w	r9, [pc, #1216]	; 8000e78 <d_exprlist+0x4d8>
 80009ba:	4688      	mov	r8, r1
 80009bc:	af01      	add	r7, sp, #4
 80009be:	2501      	movs	r5, #1
 80009c0:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80009c2:	6365      	str	r5, [r4, #52]	; 0x34
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	2a4c      	cmp	r2, #76	; 0x4c
 80009c8:	d05c      	beq.n	8000a84 <d_exprlist+0xe4>
 80009ca:	2a54      	cmp	r2, #84	; 0x54
 80009cc:	d066      	beq.n	8000a9c <d_exprlist+0xfc>
 80009ce:	2a73      	cmp	r2, #115	; 0x73
 80009d0:	d045      	beq.n	8000a5e <d_exprlist+0xbe>
 80009d2:	2a66      	cmp	r2, #102	; 0x66
 80009d4:	d11c      	bne.n	8000a10 <d_exprlist+0x70>
 80009d6:	785a      	ldrb	r2, [r3, #1]
 80009d8:	2a70      	cmp	r2, #112	; 0x70
 80009da:	f000 8087 	beq.w	8000aec <d_exprlist+0x14c>
 80009de:	4620      	mov	r0, r4
 80009e0:	f001 fa70 	bl	8001ec4 <d_operator_name>
 80009e4:	4605      	mov	r5, r0
 80009e6:	2800      	cmp	r0, #0
 80009e8:	f000 818c 	beq.w	8000d04 <d_exprlist+0x364>
 80009ec:	7803      	ldrb	r3, [r0, #0]
 80009ee:	2b31      	cmp	r3, #49	; 0x31
 80009f0:	f000 8098 	beq.w	8000b24 <d_exprlist+0x184>
 80009f4:	2b32      	cmp	r3, #50	; 0x32
 80009f6:	d056      	beq.n	8000aa6 <d_exprlist+0x106>
 80009f8:	2b33      	cmp	r3, #51	; 0x33
 80009fa:	d171      	bne.n	8000ae0 <d_exprlist+0x140>
 80009fc:	68e3      	ldr	r3, [r4, #12]
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	2a5f      	cmp	r2, #95	; 0x5f
 8000a02:	f000 81da 	beq.w	8000dba <d_exprlist+0x41a>
 8000a06:	4620      	mov	r0, r4
 8000a08:	f000 fa38 	bl	8000e7c <d_expression_1>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	e0c1      	b.n	8000b94 <d_exprlist+0x1f4>
 8000a10:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000a14:	2909      	cmp	r1, #9
 8000a16:	f200 80e7 	bhi.w	8000be8 <d_exprlist+0x248>
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f001 fbfe 	bl	800221c <d_unqualified_name>
 8000a20:	4605      	mov	r5, r0
 8000a22:	2800      	cmp	r0, #0
 8000a24:	f000 816e 	beq.w	8000d04 <d_exprlist+0x364>
 8000a28:	68e3      	ldr	r3, [r4, #12]
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	2a49      	cmp	r2, #73	; 0x49
 8000a2e:	f000 80b8 	beq.w	8000ba2 <d_exprlist+0x202>
 8000a32:	6366      	str	r6, [r4, #52]	; 0x34
 8000a34:	462a      	mov	r2, r5
 8000a36:	2300      	movs	r3, #0
 8000a38:	212e      	movs	r1, #46	; 0x2e
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	f7ff fbc8 	bl	80001d0 <d_make_comp>
 8000a40:	6038      	str	r0, [r7, #0]
 8000a42:	b330      	cbz	r0, 8000a92 <d_exprlist+0xf2>
 8000a44:	68e3      	ldr	r3, [r4, #12]
 8000a46:	781a      	ldrb	r2, [r3, #0]
 8000a48:	4542      	cmp	r2, r8
 8000a4a:	f100 070c 	add.w	r7, r0, #12
 8000a4e:	d1b6      	bne.n	80009be <d_exprlist+0x1e>
 8000a50:	3301      	adds	r3, #1
 8000a52:	9d01      	ldr	r5, [sp, #4]
 8000a54:	60e3      	str	r3, [r4, #12]
 8000a56:	4628      	mov	r0, r5
 8000a58:	b003      	add	sp, #12
 8000a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a5e:	785a      	ldrb	r2, [r3, #1]
 8000a60:	2a72      	cmp	r2, #114	; 0x72
 8000a62:	f000 80ab 	beq.w	8000bbc <d_exprlist+0x21c>
 8000a66:	2a70      	cmp	r2, #112	; 0x70
 8000a68:	d1b9      	bne.n	80009de <d_exprlist+0x3e>
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	60e3      	str	r3, [r4, #12]
 8000a6e:	4620      	mov	r0, r4
 8000a70:	f000 fa04 	bl	8000e7c <d_expression_1>
 8000a74:	2300      	movs	r3, #0
 8000a76:	4602      	mov	r2, r0
 8000a78:	214a      	movs	r1, #74	; 0x4a
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	f7ff fba8 	bl	80001d0 <d_make_comp>
 8000a80:	4605      	mov	r5, r0
 8000a82:	e003      	b.n	8000a8c <d_exprlist+0xec>
 8000a84:	4620      	mov	r0, r4
 8000a86:	f002 f813 	bl	8002ab0 <d_expr_primary>
 8000a8a:	4605      	mov	r5, r0
 8000a8c:	6366      	str	r6, [r4, #52]	; 0x34
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d1d0      	bne.n	8000a34 <d_exprlist+0x94>
 8000a92:	2500      	movs	r5, #0
 8000a94:	4628      	mov	r0, r5
 8000a96:	b003      	add	sp, #12
 8000a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	f7ff fcef 	bl	8000480 <d_template_param>
 8000aa2:	4605      	mov	r5, r0
 8000aa4:	e7f2      	b.n	8000a8c <d_exprlist+0xec>
 8000aa6:	6883      	ldr	r3, [r0, #8]
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d819      	bhi.n	8000ae0 <d_exprlist+0x140>
 8000aac:	a201      	add	r2, pc, #4	; (adr r2, 8000ab4 <d_exprlist+0x114>)
 8000aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab2:	bf00      	nop
 8000ab4:	08000c47 	.word	0x08000c47
 8000ab8:	08000a07 	.word	0x08000a07
 8000abc:	08000ae1 	.word	0x08000ae1
 8000ac0:	08000ae1 	.word	0x08000ae1
 8000ac4:	2a74      	cmp	r2, #116	; 0x74
 8000ac6:	d18a      	bne.n	80009de <d_exprlist+0x3e>
 8000ac8:	785b      	ldrb	r3, [r3, #1]
 8000aca:	2b6c      	cmp	r3, #108	; 0x6c
 8000acc:	d187      	bne.n	80009de <d_exprlist+0x3e>
 8000ace:	4620      	mov	r0, r4
 8000ad0:	f000 fdfe 	bl	80016d0 <d_type>
 8000ad4:	68e3      	ldr	r3, [r4, #12]
 8000ad6:	785a      	ldrb	r2, [r3, #1]
 8000ad8:	4605      	mov	r5, r0
 8000ada:	2a00      	cmp	r2, #0
 8000adc:	f040 8123 	bne.w	8000d26 <d_exprlist+0x386>
 8000ae0:	2500      	movs	r5, #0
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	6366      	str	r6, [r4, #52]	; 0x34
 8000ae6:	b003      	add	sp, #12
 8000ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aec:	1c9a      	adds	r2, r3, #2
 8000aee:	60e2      	str	r2, [r4, #12]
 8000af0:	789a      	ldrb	r2, [r3, #2]
 8000af2:	2a54      	cmp	r2, #84	; 0x54
 8000af4:	f040 8082 	bne.w	8000bfc <d_exprlist+0x25c>
 8000af8:	3303      	adds	r3, #3
 8000afa:	60e3      	str	r3, [r4, #12]
 8000afc:	2000      	movs	r0, #0
 8000afe:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000b02:	4293      	cmp	r3, r2
 8000b04:	daec      	bge.n	8000ae0 <d_exprlist+0x140>
 8000b06:	6921      	ldr	r1, [r4, #16]
 8000b08:	011a      	lsls	r2, r3, #4
 8000b0a:	188d      	adds	r5, r1, r2
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	f04f 0e00 	mov.w	lr, #0
 8000b12:	f04f 0c06 	mov.w	ip, #6
 8000b16:	f8c5 e004 	str.w	lr, [r5, #4]
 8000b1a:	6163      	str	r3, [r4, #20]
 8000b1c:	f801 c002 	strb.w	ip, [r1, r2]
 8000b20:	60a8      	str	r0, [r5, #8]
 8000b22:	e786      	b.n	8000a32 <d_exprlist+0x92>
 8000b24:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8000b28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b2a:	f8db 2008 	ldr.w	r2, [fp, #8]
 8000b2e:	f8db a000 	ldr.w	sl, [fp]
 8000b32:	3a02      	subs	r2, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	6323      	str	r3, [r4, #48]	; 0x30
 8000b38:	4650      	mov	r0, sl
 8000b3a:	4649      	mov	r1, r9
 8000b3c:	f006 f908 	bl	8006d50 <strcmp>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	f000 80e4 	beq.w	8000d0e <d_exprlist+0x36e>
 8000b46:	f8db b00c 	ldr.w	fp, [fp, #12]
 8000b4a:	f1bb 0f03 	cmp.w	fp, #3
 8000b4e:	d8c7      	bhi.n	8000ae0 <d_exprlist+0x140>
 8000b50:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8000b54:	00040079 	.word	0x00040079
 8000b58:	008100f7 	.word	0x008100f7
 8000b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8000b60:	2b70      	cmp	r3, #112	; 0x70
 8000b62:	d065      	beq.n	8000c30 <d_exprlist+0x290>
 8000b64:	2b6d      	cmp	r3, #109	; 0x6d
 8000b66:	d063      	beq.n	8000c30 <d_exprlist+0x290>
 8000b68:	f04f 0b00 	mov.w	fp, #0
 8000b6c:	4650      	mov	r0, sl
 8000b6e:	49bd      	ldr	r1, [pc, #756]	; (8000e64 <d_exprlist+0x4c4>)
 8000b70:	f006 f8ee 	bl	8006d50 <strcmp>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	f040 80c0 	bne.w	8000cfa <d_exprlist+0x35a>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	f000 fb90 	bl	80012a0 <d_template_args_1>
 8000b80:	4603      	mov	r3, r0
 8000b82:	f1bb 0f00 	cmp.w	fp, #0
 8000b86:	d005      	beq.n	8000b94 <d_exprlist+0x1f4>
 8000b88:	461a      	mov	r2, r3
 8000b8a:	2138      	movs	r1, #56	; 0x38
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f7ff fb1f 	bl	80001d0 <d_make_comp>
 8000b92:	4603      	mov	r3, r0
 8000b94:	462a      	mov	r2, r5
 8000b96:	2136      	movs	r1, #54	; 0x36
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f7ff fb19 	bl	80001d0 <d_make_comp>
 8000b9e:	4605      	mov	r5, r0
 8000ba0:	e774      	b.n	8000a8c <d_exprlist+0xec>
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	60e3      	str	r3, [r4, #12]
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f000 fb7a 	bl	80012a0 <d_template_args_1>
 8000bac:	462a      	mov	r2, r5
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f7ff fb0c 	bl	80001d0 <d_make_comp>
 8000bb8:	4605      	mov	r5, r0
 8000bba:	e767      	b.n	8000a8c <d_exprlist+0xec>
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	60e3      	str	r3, [r4, #12]
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	f000 fd85 	bl	80016d0 <d_type>
 8000bc6:	4682      	mov	sl, r0
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f001 fb27 	bl	800221c <d_unqualified_name>
 8000bce:	68e3      	ldr	r3, [r4, #12]
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	2a49      	cmp	r2, #73	; 0x49
 8000bd4:	4683      	mov	fp, r0
 8000bd6:	d01e      	beq.n	8000c16 <d_exprlist+0x276>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4629      	mov	r1, r5
 8000bdc:	4652      	mov	r2, sl
 8000bde:	4620      	mov	r0, r4
 8000be0:	f7ff faf6 	bl	80001d0 <d_make_comp>
 8000be4:	4605      	mov	r5, r0
 8000be6:	e751      	b.n	8000a8c <d_exprlist+0xec>
 8000be8:	2a6f      	cmp	r2, #111	; 0x6f
 8000bea:	f040 8094 	bne.w	8000d16 <d_exprlist+0x376>
 8000bee:	785a      	ldrb	r2, [r3, #1]
 8000bf0:	2a6e      	cmp	r2, #110	; 0x6e
 8000bf2:	f47f aef4 	bne.w	80009de <d_exprlist+0x3e>
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	60e3      	str	r3, [r4, #12]
 8000bfa:	e70e      	b.n	8000a1a <d_exprlist+0x7a>
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f7ff fc25 	bl	800044c <d_compact_number>
 8000c02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000c06:	4298      	cmp	r0, r3
 8000c08:	f43f af6a 	beq.w	8000ae0 <d_exprlist+0x140>
 8000c0c:	1c43      	adds	r3, r0, #1
 8000c0e:	f43f af67 	beq.w	8000ae0 <d_exprlist+0x140>
 8000c12:	3001      	adds	r0, #1
 8000c14:	e773      	b.n	8000afe <d_exprlist+0x15e>
 8000c16:	3301      	adds	r3, #1
 8000c18:	60e3      	str	r3, [r4, #12]
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f000 fb40 	bl	80012a0 <d_template_args_1>
 8000c20:	465a      	mov	r2, fp
 8000c22:	4603      	mov	r3, r0
 8000c24:	2104      	movs	r1, #4
 8000c26:	4620      	mov	r0, r4
 8000c28:	f7ff fad2 	bl	80001d0 <d_make_comp>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	e7d4      	b.n	8000bda <d_exprlist+0x23a>
 8000c30:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d197      	bne.n	8000b68 <d_exprlist+0x1c8>
 8000c38:	68e3      	ldr	r3, [r4, #12]
 8000c3a:	781a      	ldrb	r2, [r3, #0]
 8000c3c:	2a5f      	cmp	r2, #95	; 0x5f
 8000c3e:	d195      	bne.n	8000b6c <d_exprlist+0x1cc>
 8000c40:	3301      	adds	r3, #1
 8000c42:	60e3      	str	r3, [r4, #12]
 8000c44:	e790      	b.n	8000b68 <d_exprlist+0x1c8>
 8000c46:	462a      	mov	r2, r5
 8000c48:	2300      	movs	r3, #0
 8000c4a:	2135      	movs	r1, #53	; 0x35
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	f7ff fabf 	bl	80001d0 <d_make_comp>
 8000c52:	4605      	mov	r5, r0
 8000c54:	e71a      	b.n	8000a8c <d_exprlist+0xec>
 8000c56:	f1ba 0f00 	cmp.w	sl, #0
 8000c5a:	f43f af41 	beq.w	8000ae0 <d_exprlist+0x140>
 8000c5e:	4982      	ldr	r1, [pc, #520]	; (8000e68 <d_exprlist+0x4c8>)
 8000c60:	4650      	mov	r0, sl
 8000c62:	f006 f875 	bl	8006d50 <strcmp>
 8000c66:	2800      	cmp	r0, #0
 8000c68:	f000 80c7 	beq.w	8000dfa <d_exprlist+0x45a>
 8000c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c70:	2b66      	cmp	r3, #102	; 0x66
 8000c72:	f000 80ed 	beq.w	8000e50 <d_exprlist+0x4b0>
 8000c76:	2b6e      	cmp	r3, #110	; 0x6e
 8000c78:	f47f af32 	bne.w	8000ae0 <d_exprlist+0x140>
 8000c7c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000c80:	2b77      	cmp	r3, #119	; 0x77
 8000c82:	d002      	beq.n	8000c8a <d_exprlist+0x2ea>
 8000c84:	2b61      	cmp	r3, #97	; 0x61
 8000c86:	f47f af2b 	bne.w	8000ae0 <d_exprlist+0x140>
 8000c8a:	215f      	movs	r1, #95	; 0x5f
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f7ff fe87 	bl	80009a0 <d_exprlist>
 8000c92:	4682      	mov	sl, r0
 8000c94:	4620      	mov	r0, r4
 8000c96:	f000 fd1b 	bl	80016d0 <d_type>
 8000c9a:	68e3      	ldr	r3, [r4, #12]
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	2a45      	cmp	r2, #69	; 0x45
 8000ca0:	4683      	mov	fp, r0
 8000ca2:	f000 8086 	beq.w	8000db2 <d_exprlist+0x412>
 8000ca6:	2a70      	cmp	r2, #112	; 0x70
 8000ca8:	f000 80c6 	beq.w	8000e38 <d_exprlist+0x498>
 8000cac:	2a69      	cmp	r2, #105	; 0x69
 8000cae:	f47f af17 	bne.w	8000ae0 <d_exprlist+0x140>
 8000cb2:	785b      	ldrb	r3, [r3, #1]
 8000cb4:	2b6c      	cmp	r3, #108	; 0x6c
 8000cb6:	f47f af13 	bne.w	8000ae0 <d_exprlist+0x140>
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f000 f8de 	bl	8000e7c <d_expression_1>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	465a      	mov	r2, fp
 8000cc4:	213b      	movs	r1, #59	; 0x3b
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f7ff fa82 	bl	80001d0 <d_make_comp>
 8000ccc:	4652      	mov	r2, sl
 8000cce:	4603      	mov	r3, r0
 8000cd0:	213a      	movs	r1, #58	; 0x3a
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	f7ff fa7c 	bl	80001d0 <d_make_comp>
 8000cd8:	462a      	mov	r2, r5
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2139      	movs	r1, #57	; 0x39
 8000cde:	4620      	mov	r0, r4
 8000ce0:	f7ff fa76 	bl	80001d0 <d_make_comp>
 8000ce4:	4605      	mov	r5, r0
 8000ce6:	e6d1      	b.n	8000a8c <d_exprlist+0xec>
 8000ce8:	3301      	adds	r3, #1
 8000cea:	60c3      	str	r3, [r0, #12]
 8000cec:	212e      	movs	r1, #46	; 0x2e
 8000cee:	4613      	mov	r3, r2
 8000cf0:	b003      	add	sp, #12
 8000cf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cf6:	f7ff ba6b 	b.w	80001d0 <d_make_comp>
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f000 f8be 	bl	8000e7c <d_expression_1>
 8000d00:	4603      	mov	r3, r0
 8000d02:	e73e      	b.n	8000b82 <d_exprlist+0x1e2>
 8000d04:	4628      	mov	r0, r5
 8000d06:	6366      	str	r6, [r4, #52]	; 0x34
 8000d08:	b003      	add	sp, #12
 8000d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f000 fcde 	bl	80016d0 <d_type>
 8000d14:	e73d      	b.n	8000b92 <d_exprlist+0x1f2>
 8000d16:	2a69      	cmp	r2, #105	; 0x69
 8000d18:	f47f aed4 	bne.w	8000ac4 <d_exprlist+0x124>
 8000d1c:	785a      	ldrb	r2, [r3, #1]
 8000d1e:	2a6c      	cmp	r2, #108	; 0x6c
 8000d20:	f47f ae5d 	bne.w	80009de <d_exprlist+0x3e>
 8000d24:	2500      	movs	r5, #0
 8000d26:	3302      	adds	r3, #2
 8000d28:	60e3      	str	r3, [r4, #12]
 8000d2a:	2145      	movs	r1, #69	; 0x45
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	f7ff fe37 	bl	80009a0 <d_exprlist>
 8000d32:	462a      	mov	r2, r5
 8000d34:	4603      	mov	r3, r0
 8000d36:	2130      	movs	r1, #48	; 0x30
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f7ff fa49 	bl	80001d0 <d_make_comp>
 8000d3e:	4605      	mov	r5, r0
 8000d40:	e6a4      	b.n	8000a8c <d_exprlist+0xec>
 8000d42:	f1ba 0f00 	cmp.w	sl, #0
 8000d46:	f43f aecb 	beq.w	8000ae0 <d_exprlist+0x140>
 8000d4a:	68ab      	ldr	r3, [r5, #8]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	785a      	ldrb	r2, [r3, #1]
 8000d50:	2a63      	cmp	r2, #99	; 0x63
 8000d52:	d03a      	beq.n	8000dca <d_exprlist+0x42a>
 8000d54:	f89a 3000 	ldrb.w	r3, [sl]
 8000d58:	2b66      	cmp	r3, #102	; 0x66
 8000d5a:	d149      	bne.n	8000df0 <d_exprlist+0x450>
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f001 f8b1 	bl	8001ec4 <d_operator_name>
 8000d62:	4683      	mov	fp, r0
 8000d64:	4941      	ldr	r1, [pc, #260]	; (8000e6c <d_exprlist+0x4cc>)
 8000d66:	4650      	mov	r0, sl
 8000d68:	f005 fff2 	bl	8006d50 <strcmp>
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	d039      	beq.n	8000de4 <d_exprlist+0x444>
 8000d70:	493f      	ldr	r1, [pc, #252]	; (8000e70 <d_exprlist+0x4d0>)
 8000d72:	4650      	mov	r0, sl
 8000d74:	f005 ffec 	bl	8006d50 <strcmp>
 8000d78:	b128      	cbz	r0, 8000d86 <d_exprlist+0x3e6>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	493d      	ldr	r1, [pc, #244]	; (8000e74 <d_exprlist+0x4d4>)
 8000d7e:	f005 ffe7 	bl	8006d50 <strcmp>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d168      	bne.n	8000e58 <d_exprlist+0x4b8>
 8000d86:	4620      	mov	r0, r4
 8000d88:	f001 fa48 	bl	800221c <d_unqualified_name>
 8000d8c:	68e3      	ldr	r3, [r4, #12]
 8000d8e:	781a      	ldrb	r2, [r3, #0]
 8000d90:	2a49      	cmp	r2, #73	; 0x49
 8000d92:	4682      	mov	sl, r0
 8000d94:	d043      	beq.n	8000e1e <d_exprlist+0x47e>
 8000d96:	4653      	mov	r3, sl
 8000d98:	465a      	mov	r2, fp
 8000d9a:	2138      	movs	r1, #56	; 0x38
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f7ff fa17 	bl	80001d0 <d_make_comp>
 8000da2:	462a      	mov	r2, r5
 8000da4:	4603      	mov	r3, r0
 8000da6:	2137      	movs	r1, #55	; 0x37
 8000da8:	4620      	mov	r0, r4
 8000daa:	f7ff fa11 	bl	80001d0 <d_make_comp>
 8000dae:	4605      	mov	r5, r0
 8000db0:	e66c      	b.n	8000a8c <d_exprlist+0xec>
 8000db2:	3301      	adds	r3, #1
 8000db4:	60e3      	str	r3, [r4, #12]
 8000db6:	2300      	movs	r3, #0
 8000db8:	e783      	b.n	8000cc2 <d_exprlist+0x322>
 8000dba:	3301      	adds	r3, #1
 8000dbc:	60e3      	str	r3, [r4, #12]
 8000dbe:	2145      	movs	r1, #69	; 0x45
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	f7ff fded 	bl	80009a0 <d_exprlist>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e6e4      	b.n	8000b94 <d_exprlist+0x1f4>
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000dd0:	2a01      	cmp	r2, #1
 8000dd2:	d902      	bls.n	8000dda <d_exprlist+0x43a>
 8000dd4:	3b72      	subs	r3, #114	; 0x72
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d8bc      	bhi.n	8000d54 <d_exprlist+0x3b4>
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f000 fc78 	bl	80016d0 <d_type>
 8000de0:	4683      	mov	fp, r0
 8000de2:	e7bf      	b.n	8000d64 <d_exprlist+0x3c4>
 8000de4:	2145      	movs	r1, #69	; 0x45
 8000de6:	4620      	mov	r0, r4
 8000de8:	f7ff fdda 	bl	80009a0 <d_exprlist>
 8000dec:	4682      	mov	sl, r0
 8000dee:	e7d2      	b.n	8000d96 <d_exprlist+0x3f6>
 8000df0:	4620      	mov	r0, r4
 8000df2:	f000 f843 	bl	8000e7c <d_expression_1>
 8000df6:	4683      	mov	fp, r0
 8000df8:	e7b4      	b.n	8000d64 <d_exprlist+0x3c4>
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f000 f83e 	bl	8000e7c <d_expression_1>
 8000e00:	4682      	mov	sl, r0
 8000e02:	4620      	mov	r0, r4
 8000e04:	f000 f83a 	bl	8000e7c <d_expression_1>
 8000e08:	4683      	mov	fp, r0
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f000 f836 	bl	8000e7c <d_expression_1>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2800      	cmp	r0, #0
 8000e14:	f47f af55 	bne.w	8000cc2 <d_exprlist+0x322>
 8000e18:	6366      	str	r6, [r4, #52]	; 0x34
 8000e1a:	4605      	mov	r5, r0
 8000e1c:	e61b      	b.n	8000a56 <d_exprlist+0xb6>
 8000e1e:	3301      	adds	r3, #1
 8000e20:	60e3      	str	r3, [r4, #12]
 8000e22:	4620      	mov	r0, r4
 8000e24:	f000 fa3c 	bl	80012a0 <d_template_args_1>
 8000e28:	4652      	mov	r2, sl
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2104      	movs	r1, #4
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f7ff f9ce 	bl	80001d0 <d_make_comp>
 8000e34:	4682      	mov	sl, r0
 8000e36:	e7ae      	b.n	8000d96 <d_exprlist+0x3f6>
 8000e38:	785a      	ldrb	r2, [r3, #1]
 8000e3a:	2a69      	cmp	r2, #105	; 0x69
 8000e3c:	f47f ae50 	bne.w	8000ae0 <d_exprlist+0x140>
 8000e40:	3302      	adds	r3, #2
 8000e42:	60e3      	str	r3, [r4, #12]
 8000e44:	2145      	movs	r1, #69	; 0x45
 8000e46:	4620      	mov	r0, r4
 8000e48:	f7ff fdaa 	bl	80009a0 <d_exprlist>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	e738      	b.n	8000cc2 <d_exprlist+0x322>
 8000e50:	4620      	mov	r0, r4
 8000e52:	f001 f837 	bl	8001ec4 <d_operator_name>
 8000e56:	e7d3      	b.n	8000e00 <d_exprlist+0x460>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f000 f80f 	bl	8000e7c <d_expression_1>
 8000e5e:	4682      	mov	sl, r0
 8000e60:	e799      	b.n	8000d96 <d_exprlist+0x3f6>
 8000e62:	bf00      	nop
 8000e64:	08017c88 	.word	0x08017c88
 8000e68:	08017c98 	.word	0x08017c98
 8000e6c:	08017c8c 	.word	0x08017c8c
 8000e70:	08017c90 	.word	0x08017c90
 8000e74:	08017c94 	.word	0x08017c94
 8000e78:	080181a4 	.word	0x080181a4

08000e7c <d_expression_1>:
 8000e7c:	68c1      	ldr	r1, [r0, #12]
 8000e7e:	780b      	ldrb	r3, [r1, #0]
 8000e80:	2b4c      	cmp	r3, #76	; 0x4c
 8000e82:	d067      	beq.n	8000f54 <d_expression_1+0xd8>
 8000e84:	2b54      	cmp	r3, #84	; 0x54
 8000e86:	d067      	beq.n	8000f58 <d_expression_1+0xdc>
 8000e88:	2b73      	cmp	r3, #115	; 0x73
 8000e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e8e:	4604      	mov	r4, r0
 8000e90:	d01c      	beq.n	8000ecc <d_expression_1+0x50>
 8000e92:	2b66      	cmp	r3, #102	; 0x66
 8000e94:	d13d      	bne.n	8000f12 <d_expression_1+0x96>
 8000e96:	784b      	ldrb	r3, [r1, #1]
 8000e98:	2b70      	cmp	r3, #112	; 0x70
 8000e9a:	d11d      	bne.n	8000ed8 <d_expression_1+0x5c>
 8000e9c:	1c8b      	adds	r3, r1, #2
 8000e9e:	60c3      	str	r3, [r0, #12]
 8000ea0:	788b      	ldrb	r3, [r1, #2]
 8000ea2:	2b54      	cmp	r3, #84	; 0x54
 8000ea4:	f040 809a 	bne.w	8000fdc <d_expression_1+0x160>
 8000ea8:	3103      	adds	r1, #3
 8000eaa:	60c1      	str	r1, [r0, #12]
 8000eac:	2000      	movs	r0, #0
 8000eae:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	da4a      	bge.n	8000f4c <d_expression_1+0xd0>
 8000eb6:	6921      	ldr	r1, [r4, #16]
 8000eb8:	011a      	lsls	r2, r3, #4
 8000eba:	188d      	adds	r5, r1, r2
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	2700      	movs	r7, #0
 8000ec0:	2606      	movs	r6, #6
 8000ec2:	606f      	str	r7, [r5, #4]
 8000ec4:	6163      	str	r3, [r4, #20]
 8000ec6:	548e      	strb	r6, [r1, r2]
 8000ec8:	60a8      	str	r0, [r5, #8]
 8000eca:	e02f      	b.n	8000f2c <d_expression_1+0xb0>
 8000ecc:	784b      	ldrb	r3, [r1, #1]
 8000ece:	2b72      	cmp	r3, #114	; 0x72
 8000ed0:	d06e      	beq.n	8000fb0 <d_expression_1+0x134>
 8000ed2:	2b70      	cmp	r3, #112	; 0x70
 8000ed4:	f000 8160 	beq.w	8001198 <d_expression_1+0x31c>
 8000ed8:	4620      	mov	r0, r4
 8000eda:	f000 fff3 	bl	8001ec4 <d_operator_name>
 8000ede:	4605      	mov	r5, r0
 8000ee0:	b3a0      	cbz	r0, 8000f4c <d_expression_1+0xd0>
 8000ee2:	7803      	ldrb	r3, [r0, #0]
 8000ee4:	2b31      	cmp	r3, #49	; 0x31
 8000ee6:	d039      	beq.n	8000f5c <d_expression_1+0xe0>
 8000ee8:	2b32      	cmp	r3, #50	; 0x32
 8000eea:	f000 8127 	beq.w	800113c <d_expression_1+0x2c0>
 8000eee:	2b33      	cmp	r3, #51	; 0x33
 8000ef0:	d12c      	bne.n	8000f4c <d_expression_1+0xd0>
 8000ef2:	68e3      	ldr	r3, [r4, #12]
 8000ef4:	781a      	ldrb	r2, [r3, #0]
 8000ef6:	2a5f      	cmp	r2, #95	; 0x5f
 8000ef8:	f000 8176 	beq.w	80011e8 <d_expression_1+0x36c>
 8000efc:	4620      	mov	r0, r4
 8000efe:	f7ff ffbd 	bl	8000e7c <d_expression_1>
 8000f02:	4603      	mov	r3, r0
 8000f04:	462a      	mov	r2, r5
 8000f06:	4620      	mov	r0, r4
 8000f08:	2136      	movs	r1, #54	; 0x36
 8000f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f0e:	f7ff b95f 	b.w	80001d0 <d_make_comp>
 8000f12:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000f16:	2a09      	cmp	r2, #9
 8000f18:	d841      	bhi.n	8000f9e <d_expression_1+0x122>
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	f001 f97e 	bl	800221c <d_unqualified_name>
 8000f20:	4605      	mov	r5, r0
 8000f22:	b198      	cbz	r0, 8000f4c <d_expression_1+0xd0>
 8000f24:	68e3      	ldr	r3, [r4, #12]
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	2a49      	cmp	r2, #73	; 0x49
 8000f2a:	d02b      	beq.n	8000f84 <d_expression_1+0x108>
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f32:	2b74      	cmp	r3, #116	; 0x74
 8000f34:	d1d0      	bne.n	8000ed8 <d_expression_1+0x5c>
 8000f36:	784b      	ldrb	r3, [r1, #1]
 8000f38:	2b6c      	cmp	r3, #108	; 0x6c
 8000f3a:	d1cd      	bne.n	8000ed8 <d_expression_1+0x5c>
 8000f3c:	f000 fbc8 	bl	80016d0 <d_type>
 8000f40:	68e1      	ldr	r1, [r4, #12]
 8000f42:	784b      	ldrb	r3, [r1, #1]
 8000f44:	4605      	mov	r5, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f040 8190 	bne.w	800126c <d_expression_1+0x3f0>
 8000f4c:	2500      	movs	r5, #0
 8000f4e:	4628      	mov	r0, r5
 8000f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f54:	f001 bdac 	b.w	8002ab0 <d_expr_primary>
 8000f58:	f7ff ba92 	b.w	8000480 <d_template_param>
 8000f5c:	6887      	ldr	r7, [r0, #8]
 8000f5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	683e      	ldr	r6, [r7, #0]
 8000f64:	49c8      	ldr	r1, [pc, #800]	; (8001288 <d_expression_1+0x40c>)
 8000f66:	3a02      	subs	r2, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	6323      	str	r3, [r4, #48]	; 0x30
 8000f6c:	4630      	mov	r0, r6
 8000f6e:	f005 feef 	bl	8006d50 <strcmp>
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d05b      	beq.n	800102e <d_expression_1+0x1b2>
 8000f76:	68ff      	ldr	r7, [r7, #12]
 8000f78:	2f03      	cmp	r7, #3
 8000f7a:	d8e7      	bhi.n	8000f4c <d_expression_1+0xd0>
 8000f7c:	e8df f007 	tbb	[pc, r7]
 8000f80:	64a7385c 	.word	0x64a7385c
 8000f84:	3301      	adds	r3, #1
 8000f86:	60e3      	str	r3, [r4, #12]
 8000f88:	4620      	mov	r0, r4
 8000f8a:	f000 f989 	bl	80012a0 <d_template_args_1>
 8000f8e:	462a      	mov	r2, r5
 8000f90:	4603      	mov	r3, r0
 8000f92:	2104      	movs	r1, #4
 8000f94:	4620      	mov	r0, r4
 8000f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f9a:	f7ff b919 	b.w	80001d0 <d_make_comp>
 8000f9e:	2b6f      	cmp	r3, #111	; 0x6f
 8000fa0:	f040 815c 	bne.w	800125c <d_expression_1+0x3e0>
 8000fa4:	784b      	ldrb	r3, [r1, #1]
 8000fa6:	2b6e      	cmp	r3, #110	; 0x6e
 8000fa8:	d196      	bne.n	8000ed8 <d_expression_1+0x5c>
 8000faa:	3102      	adds	r1, #2
 8000fac:	60c1      	str	r1, [r0, #12]
 8000fae:	e7b4      	b.n	8000f1a <d_expression_1+0x9e>
 8000fb0:	3102      	adds	r1, #2
 8000fb2:	60c1      	str	r1, [r0, #12]
 8000fb4:	f000 fb8c 	bl	80016d0 <d_type>
 8000fb8:	4605      	mov	r5, r0
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f001 f92e 	bl	800221c <d_unqualified_name>
 8000fc0:	68e3      	ldr	r3, [r4, #12]
 8000fc2:	7819      	ldrb	r1, [r3, #0]
 8000fc4:	2949      	cmp	r1, #73	; 0x49
 8000fc6:	4606      	mov	r6, r0
 8000fc8:	f000 80d9 	beq.w	800117e <d_expression_1+0x302>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	462a      	mov	r2, r5
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fd8:	f7ff b8fa 	b.w	80001d0 <d_make_comp>
 8000fdc:	f7ff fa36 	bl	800044c <d_compact_number>
 8000fe0:	43c3      	mvns	r3, r0
 8000fe2:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8000fe6:	bf18      	it	ne
 8000fe8:	3001      	addne	r0, #1
 8000fea:	f47f af60 	bne.w	8000eae <d_expression_1+0x32>
 8000fee:	e7ad      	b.n	8000f4c <d_expression_1+0xd0>
 8000ff0:	2e00      	cmp	r6, #0
 8000ff2:	d083      	beq.n	8000efc <d_expression_1+0x80>
 8000ff4:	7833      	ldrb	r3, [r6, #0]
 8000ff6:	2b70      	cmp	r3, #112	; 0x70
 8000ff8:	f000 80b0 	beq.w	800115c <d_expression_1+0x2e0>
 8000ffc:	2b6d      	cmp	r3, #109	; 0x6d
 8000ffe:	f000 80ad 	beq.w	800115c <d_expression_1+0x2e0>
 8001002:	2700      	movs	r7, #0
 8001004:	4630      	mov	r0, r6
 8001006:	49a1      	ldr	r1, [pc, #644]	; (800128c <d_expression_1+0x410>)
 8001008:	f005 fea2 	bl	8006d50 <strcmp>
 800100c:	2800      	cmp	r0, #0
 800100e:	f040 80b1 	bne.w	8001174 <d_expression_1+0x2f8>
 8001012:	4620      	mov	r0, r4
 8001014:	f000 f944 	bl	80012a0 <d_template_args_1>
 8001018:	4603      	mov	r3, r0
 800101a:	2f00      	cmp	r7, #0
 800101c:	f43f af72 	beq.w	8000f04 <d_expression_1+0x88>
 8001020:	461a      	mov	r2, r3
 8001022:	2138      	movs	r1, #56	; 0x38
 8001024:	4620      	mov	r0, r4
 8001026:	f7ff f8d3 	bl	80001d0 <d_make_comp>
 800102a:	4603      	mov	r3, r0
 800102c:	e76a      	b.n	8000f04 <d_expression_1+0x88>
 800102e:	4620      	mov	r0, r4
 8001030:	f000 fb4e 	bl	80016d0 <d_type>
 8001034:	4603      	mov	r3, r0
 8001036:	e765      	b.n	8000f04 <d_expression_1+0x88>
 8001038:	462a      	mov	r2, r5
 800103a:	4620      	mov	r0, r4
 800103c:	2300      	movs	r3, #0
 800103e:	2135      	movs	r1, #53	; 0x35
 8001040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001044:	f7ff b8c4 	b.w	80001d0 <d_make_comp>
 8001048:	4991      	ldr	r1, [pc, #580]	; (8001290 <d_expression_1+0x414>)
 800104a:	4630      	mov	r0, r6
 800104c:	f005 fe80 	bl	8006d50 <strcmp>
 8001050:	2800      	cmp	r0, #0
 8001052:	f000 80d1 	beq.w	80011f8 <d_expression_1+0x37c>
 8001056:	7833      	ldrb	r3, [r6, #0]
 8001058:	2b66      	cmp	r3, #102	; 0x66
 800105a:	f000 80f6 	beq.w	800124a <d_expression_1+0x3ce>
 800105e:	2b6e      	cmp	r3, #110	; 0x6e
 8001060:	f47f af74 	bne.w	8000f4c <d_expression_1+0xd0>
 8001064:	7873      	ldrb	r3, [r6, #1]
 8001066:	2b77      	cmp	r3, #119	; 0x77
 8001068:	d002      	beq.n	8001070 <d_expression_1+0x1f4>
 800106a:	2b61      	cmp	r3, #97	; 0x61
 800106c:	f47f af6e 	bne.w	8000f4c <d_expression_1+0xd0>
 8001070:	215f      	movs	r1, #95	; 0x5f
 8001072:	4620      	mov	r0, r4
 8001074:	f7ff fc94 	bl	80009a0 <d_exprlist>
 8001078:	4606      	mov	r6, r0
 800107a:	4620      	mov	r0, r4
 800107c:	f000 fb28 	bl	80016d0 <d_type>
 8001080:	68e3      	ldr	r3, [r4, #12]
 8001082:	7819      	ldrb	r1, [r3, #0]
 8001084:	2945      	cmp	r1, #69	; 0x45
 8001086:	4607      	mov	r7, r0
 8001088:	f000 80aa 	beq.w	80011e0 <d_expression_1+0x364>
 800108c:	2970      	cmp	r1, #112	; 0x70
 800108e:	f000 80d0 	beq.w	8001232 <d_expression_1+0x3b6>
 8001092:	2969      	cmp	r1, #105	; 0x69
 8001094:	f47f af5a 	bne.w	8000f4c <d_expression_1+0xd0>
 8001098:	785b      	ldrb	r3, [r3, #1]
 800109a:	2b6c      	cmp	r3, #108	; 0x6c
 800109c:	f47f af56 	bne.w	8000f4c <d_expression_1+0xd0>
 80010a0:	4620      	mov	r0, r4
 80010a2:	f7ff feeb 	bl	8000e7c <d_expression_1>
 80010a6:	4603      	mov	r3, r0
 80010a8:	463a      	mov	r2, r7
 80010aa:	213b      	movs	r1, #59	; 0x3b
 80010ac:	4620      	mov	r0, r4
 80010ae:	f7ff f88f 	bl	80001d0 <d_make_comp>
 80010b2:	4632      	mov	r2, r6
 80010b4:	4603      	mov	r3, r0
 80010b6:	213a      	movs	r1, #58	; 0x3a
 80010b8:	4620      	mov	r0, r4
 80010ba:	f7ff f889 	bl	80001d0 <d_make_comp>
 80010be:	462a      	mov	r2, r5
 80010c0:	4603      	mov	r3, r0
 80010c2:	2139      	movs	r1, #57	; 0x39
 80010c4:	4620      	mov	r0, r4
 80010c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010ca:	f7ff b881 	b.w	80001d0 <d_make_comp>
 80010ce:	2e00      	cmp	r6, #0
 80010d0:	f43f af3c 	beq.w	8000f4c <d_expression_1+0xd0>
 80010d4:	68ab      	ldr	r3, [r5, #8]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	785a      	ldrb	r2, [r3, #1]
 80010da:	2a63      	cmp	r2, #99	; 0x63
 80010dc:	d068      	beq.n	80011b0 <d_expression_1+0x334>
 80010de:	7833      	ldrb	r3, [r6, #0]
 80010e0:	2b66      	cmp	r3, #102	; 0x66
 80010e2:	d178      	bne.n	80011d6 <d_expression_1+0x35a>
 80010e4:	4620      	mov	r0, r4
 80010e6:	f000 feed 	bl	8001ec4 <d_operator_name>
 80010ea:	4607      	mov	r7, r0
 80010ec:	4969      	ldr	r1, [pc, #420]	; (8001294 <d_expression_1+0x418>)
 80010ee:	4630      	mov	r0, r6
 80010f0:	f005 fe2e 	bl	8006d50 <strcmp>
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d068      	beq.n	80011ca <d_expression_1+0x34e>
 80010f8:	4967      	ldr	r1, [pc, #412]	; (8001298 <d_expression_1+0x41c>)
 80010fa:	4630      	mov	r0, r6
 80010fc:	f005 fe28 	bl	8006d50 <strcmp>
 8001100:	b130      	cbz	r0, 8001110 <d_expression_1+0x294>
 8001102:	4630      	mov	r0, r6
 8001104:	4965      	ldr	r1, [pc, #404]	; (800129c <d_expression_1+0x420>)
 8001106:	f005 fe23 	bl	8006d50 <strcmp>
 800110a:	2800      	cmp	r0, #0
 800110c:	f040 80a1 	bne.w	8001252 <d_expression_1+0x3d6>
 8001110:	4620      	mov	r0, r4
 8001112:	f001 f883 	bl	800221c <d_unqualified_name>
 8001116:	68e3      	ldr	r3, [r4, #12]
 8001118:	781a      	ldrb	r2, [r3, #0]
 800111a:	2a49      	cmp	r2, #73	; 0x49
 800111c:	4606      	mov	r6, r0
 800111e:	d07b      	beq.n	8001218 <d_expression_1+0x39c>
 8001120:	4633      	mov	r3, r6
 8001122:	463a      	mov	r2, r7
 8001124:	2138      	movs	r1, #56	; 0x38
 8001126:	4620      	mov	r0, r4
 8001128:	f7ff f852 	bl	80001d0 <d_make_comp>
 800112c:	462a      	mov	r2, r5
 800112e:	4603      	mov	r3, r0
 8001130:	2137      	movs	r1, #55	; 0x37
 8001132:	4620      	mov	r0, r4
 8001134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001138:	f7ff b84a 	b.w	80001d0 <d_make_comp>
 800113c:	6883      	ldr	r3, [r0, #8]
 800113e:	2b03      	cmp	r3, #3
 8001140:	f63f af04 	bhi.w	8000f4c <d_expression_1+0xd0>
 8001144:	a201      	add	r2, pc, #4	; (adr r2, 800114c <d_expression_1+0x2d0>)
 8001146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114a:	bf00      	nop
 800114c:	08001039 	.word	0x08001039
 8001150:	08000efd 	.word	0x08000efd
 8001154:	08000f4d 	.word	0x08000f4d
 8001158:	08000f4d 	.word	0x08000f4d
 800115c:	7872      	ldrb	r2, [r6, #1]
 800115e:	429a      	cmp	r2, r3
 8001160:	f47f af4f 	bne.w	8001002 <d_expression_1+0x186>
 8001164:	68e3      	ldr	r3, [r4, #12]
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	2a5f      	cmp	r2, #95	; 0x5f
 800116a:	f47f af4b 	bne.w	8001004 <d_expression_1+0x188>
 800116e:	3301      	adds	r3, #1
 8001170:	60e3      	str	r3, [r4, #12]
 8001172:	e746      	b.n	8001002 <d_expression_1+0x186>
 8001174:	4620      	mov	r0, r4
 8001176:	f7ff fe81 	bl	8000e7c <d_expression_1>
 800117a:	4603      	mov	r3, r0
 800117c:	e74d      	b.n	800101a <d_expression_1+0x19e>
 800117e:	3301      	adds	r3, #1
 8001180:	60e3      	str	r3, [r4, #12]
 8001182:	4620      	mov	r0, r4
 8001184:	f000 f88c 	bl	80012a0 <d_template_args_1>
 8001188:	4632      	mov	r2, r6
 800118a:	4603      	mov	r3, r0
 800118c:	2104      	movs	r1, #4
 800118e:	4620      	mov	r0, r4
 8001190:	f7ff f81e 	bl	80001d0 <d_make_comp>
 8001194:	4603      	mov	r3, r0
 8001196:	e71a      	b.n	8000fce <d_expression_1+0x152>
 8001198:	3102      	adds	r1, #2
 800119a:	60e1      	str	r1, [r4, #12]
 800119c:	f7ff fe6e 	bl	8000e7c <d_expression_1>
 80011a0:	2300      	movs	r3, #0
 80011a2:	4602      	mov	r2, r0
 80011a4:	214a      	movs	r1, #74	; 0x4a
 80011a6:	4620      	mov	r0, r4
 80011a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011ac:	f7ff b810 	b.w	80001d0 <d_make_comp>
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80011b6:	2a01      	cmp	r2, #1
 80011b8:	d902      	bls.n	80011c0 <d_expression_1+0x344>
 80011ba:	3b72      	subs	r3, #114	; 0x72
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d88e      	bhi.n	80010de <d_expression_1+0x262>
 80011c0:	4620      	mov	r0, r4
 80011c2:	f000 fa85 	bl	80016d0 <d_type>
 80011c6:	4607      	mov	r7, r0
 80011c8:	e790      	b.n	80010ec <d_expression_1+0x270>
 80011ca:	2145      	movs	r1, #69	; 0x45
 80011cc:	4620      	mov	r0, r4
 80011ce:	f7ff fbe7 	bl	80009a0 <d_exprlist>
 80011d2:	4606      	mov	r6, r0
 80011d4:	e7a4      	b.n	8001120 <d_expression_1+0x2a4>
 80011d6:	4620      	mov	r0, r4
 80011d8:	f7ff fe50 	bl	8000e7c <d_expression_1>
 80011dc:	4607      	mov	r7, r0
 80011de:	e785      	b.n	80010ec <d_expression_1+0x270>
 80011e0:	3301      	adds	r3, #1
 80011e2:	60e3      	str	r3, [r4, #12]
 80011e4:	2300      	movs	r3, #0
 80011e6:	e75f      	b.n	80010a8 <d_expression_1+0x22c>
 80011e8:	3301      	adds	r3, #1
 80011ea:	60e3      	str	r3, [r4, #12]
 80011ec:	2145      	movs	r1, #69	; 0x45
 80011ee:	4620      	mov	r0, r4
 80011f0:	f7ff fbd6 	bl	80009a0 <d_exprlist>
 80011f4:	4603      	mov	r3, r0
 80011f6:	e685      	b.n	8000f04 <d_expression_1+0x88>
 80011f8:	4620      	mov	r0, r4
 80011fa:	f7ff fe3f 	bl	8000e7c <d_expression_1>
 80011fe:	4606      	mov	r6, r0
 8001200:	4620      	mov	r0, r4
 8001202:	f7ff fe3b 	bl	8000e7c <d_expression_1>
 8001206:	4607      	mov	r7, r0
 8001208:	4620      	mov	r0, r4
 800120a:	f7ff fe37 	bl	8000e7c <d_expression_1>
 800120e:	4603      	mov	r3, r0
 8001210:	2800      	cmp	r0, #0
 8001212:	f47f af49 	bne.w	80010a8 <d_expression_1+0x22c>
 8001216:	e699      	b.n	8000f4c <d_expression_1+0xd0>
 8001218:	3301      	adds	r3, #1
 800121a:	60e3      	str	r3, [r4, #12]
 800121c:	4620      	mov	r0, r4
 800121e:	f000 f83f 	bl	80012a0 <d_template_args_1>
 8001222:	4632      	mov	r2, r6
 8001224:	4603      	mov	r3, r0
 8001226:	2104      	movs	r1, #4
 8001228:	4620      	mov	r0, r4
 800122a:	f7fe ffd1 	bl	80001d0 <d_make_comp>
 800122e:	4606      	mov	r6, r0
 8001230:	e776      	b.n	8001120 <d_expression_1+0x2a4>
 8001232:	785a      	ldrb	r2, [r3, #1]
 8001234:	2a69      	cmp	r2, #105	; 0x69
 8001236:	f47f ae89 	bne.w	8000f4c <d_expression_1+0xd0>
 800123a:	3302      	adds	r3, #2
 800123c:	60e3      	str	r3, [r4, #12]
 800123e:	2145      	movs	r1, #69	; 0x45
 8001240:	4620      	mov	r0, r4
 8001242:	f7ff fbad 	bl	80009a0 <d_exprlist>
 8001246:	4603      	mov	r3, r0
 8001248:	e72e      	b.n	80010a8 <d_expression_1+0x22c>
 800124a:	4620      	mov	r0, r4
 800124c:	f000 fe3a 	bl	8001ec4 <d_operator_name>
 8001250:	e7d5      	b.n	80011fe <d_expression_1+0x382>
 8001252:	4620      	mov	r0, r4
 8001254:	f7ff fe12 	bl	8000e7c <d_expression_1>
 8001258:	4606      	mov	r6, r0
 800125a:	e761      	b.n	8001120 <d_expression_1+0x2a4>
 800125c:	2b69      	cmp	r3, #105	; 0x69
 800125e:	f47f ae68 	bne.w	8000f32 <d_expression_1+0xb6>
 8001262:	784b      	ldrb	r3, [r1, #1]
 8001264:	2b6c      	cmp	r3, #108	; 0x6c
 8001266:	f47f ae37 	bne.w	8000ed8 <d_expression_1+0x5c>
 800126a:	2500      	movs	r5, #0
 800126c:	3102      	adds	r1, #2
 800126e:	60e1      	str	r1, [r4, #12]
 8001270:	4620      	mov	r0, r4
 8001272:	2145      	movs	r1, #69	; 0x45
 8001274:	f7ff fb94 	bl	80009a0 <d_exprlist>
 8001278:	462a      	mov	r2, r5
 800127a:	4603      	mov	r3, r0
 800127c:	2130      	movs	r1, #48	; 0x30
 800127e:	4620      	mov	r0, r4
 8001280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001284:	f7fe bfa4 	b.w	80001d0 <d_make_comp>
 8001288:	080181a4 	.word	0x080181a4
 800128c:	08017c88 	.word	0x08017c88
 8001290:	08017c98 	.word	0x08017c98
 8001294:	08017c8c 	.word	0x08017c8c
 8001298:	08017c90 	.word	0x08017c90
 800129c:	08017c94 	.word	0x08017c94

080012a0 <d_template_args_1>:
 80012a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012a4:	68c2      	ldr	r2, [r0, #12]
 80012a6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80012a8:	7813      	ldrb	r3, [r2, #0]
 80012aa:	2b45      	cmp	r3, #69	; 0x45
 80012ac:	b082      	sub	sp, #8
 80012ae:	4604      	mov	r4, r0
 80012b0:	d04e      	beq.n	8001350 <d_template_args_1+0xb0>
 80012b2:	ad02      	add	r5, sp, #8
 80012b4:	2100      	movs	r1, #0
 80012b6:	f845 1d04 	str.w	r1, [r5, #-4]!
 80012ba:	2601      	movs	r6, #1
 80012bc:	3b49      	subs	r3, #73	; 0x49
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	d83d      	bhi.n	800133e <d_template_args_1+0x9e>
 80012c2:	e8df f003 	tbb	[pc, r3]
 80012c6:	3737      	.short	0x3737
 80012c8:	3c3c323c 	.word	0x3c3c323c
 80012cc:	3c3c3c3c 	.word	0x3c3c3c3c
 80012d0:	3c3c3c3c 	.word	0x3c3c3c3c
 80012d4:	083c      	.short	0x083c
 80012d6:	3201      	adds	r2, #1
 80012d8:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
 80012dc:	60e2      	str	r2, [r4, #12]
 80012de:	6366      	str	r6, [r4, #52]	; 0x34
 80012e0:	4620      	mov	r0, r4
 80012e2:	f7ff fdcb 	bl	8000e7c <d_expression_1>
 80012e6:	68e3      	ldr	r3, [r4, #12]
 80012e8:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 80012ec:	781a      	ldrb	r2, [r3, #0]
 80012ee:	2a45      	cmp	r2, #69	; 0x45
 80012f0:	4684      	mov	ip, r0
 80012f2:	f103 0301 	add.w	r3, r3, #1
 80012f6:	d127      	bne.n	8001348 <d_template_args_1+0xa8>
 80012f8:	60e3      	str	r3, [r4, #12]
 80012fa:	2300      	movs	r3, #0
 80012fc:	212f      	movs	r1, #47	; 0x2f
 80012fe:	4662      	mov	r2, ip
 8001300:	4620      	mov	r0, r4
 8001302:	f1bc 0f00 	cmp.w	ip, #0
 8001306:	d01f      	beq.n	8001348 <d_template_args_1+0xa8>
 8001308:	f7fe ff62 	bl	80001d0 <d_make_comp>
 800130c:	6028      	str	r0, [r5, #0]
 800130e:	f100 050c 	add.w	r5, r0, #12
 8001312:	b1c8      	cbz	r0, 8001348 <d_template_args_1+0xa8>
 8001314:	68e2      	ldr	r2, [r4, #12]
 8001316:	7813      	ldrb	r3, [r2, #0]
 8001318:	2b45      	cmp	r3, #69	; 0x45
 800131a:	d1cf      	bne.n	80012bc <d_template_args_1+0x1c>
 800131c:	9801      	ldr	r0, [sp, #4]
 800131e:	62e7      	str	r7, [r4, #44]	; 0x2c
 8001320:	3201      	adds	r2, #1
 8001322:	60e2      	str	r2, [r4, #12]
 8001324:	b002      	add	sp, #8
 8001326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800132a:	4620      	mov	r0, r4
 800132c:	f001 fbc0 	bl	8002ab0 <d_expr_primary>
 8001330:	4684      	mov	ip, r0
 8001332:	e7e2      	b.n	80012fa <d_template_args_1+0x5a>
 8001334:	4620      	mov	r0, r4
 8001336:	f000 f815 	bl	8001364 <d_template_args>
 800133a:	4684      	mov	ip, r0
 800133c:	e7dd      	b.n	80012fa <d_template_args_1+0x5a>
 800133e:	4620      	mov	r0, r4
 8001340:	f000 f9c6 	bl	80016d0 <d_type>
 8001344:	4684      	mov	ip, r0
 8001346:	e7d8      	b.n	80012fa <d_template_args_1+0x5a>
 8001348:	2000      	movs	r0, #0
 800134a:	b002      	add	sp, #8
 800134c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001350:	3201      	adds	r2, #1
 8001352:	2300      	movs	r3, #0
 8001354:	60c2      	str	r2, [r0, #12]
 8001356:	212f      	movs	r1, #47	; 0x2f
 8001358:	461a      	mov	r2, r3
 800135a:	b002      	add	sp, #8
 800135c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001360:	f7fe bf36 	b.w	80001d0 <d_make_comp>

08001364 <d_template_args>:
 8001364:	68c3      	ldr	r3, [r0, #12]
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	3a49      	subs	r2, #73	; 0x49
 800136a:	2a01      	cmp	r2, #1
 800136c:	d802      	bhi.n	8001374 <d_template_args+0x10>
 800136e:	3301      	adds	r3, #1
 8001370:	60c3      	str	r3, [r0, #12]
 8001372:	e795      	b.n	80012a0 <d_template_args_1>
 8001374:	2000      	movs	r0, #0
 8001376:	4770      	bx	lr

08001378 <d_name>:
 8001378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800137c:	68c2      	ldr	r2, [r0, #12]
 800137e:	7813      	ldrb	r3, [r2, #0]
 8001380:	3b4e      	subs	r3, #78	; 0x4e
 8001382:	b083      	sub	sp, #12
 8001384:	4604      	mov	r4, r0
 8001386:	2b0c      	cmp	r3, #12
 8001388:	d846      	bhi.n	8001418 <d_name+0xa0>
 800138a:	e8df f003 	tbb	[pc, r3]
 800138e:	4567      	.short	0x4567
 8001390:	0e454545 	.word	0x0e454545
 8001394:	45450745 	.word	0x45450745
 8001398:	4545      	.short	0x4545
 800139a:	a4          	.byte	0xa4
 800139b:	00          	.byte	0x00
 800139c:	f000 ff3e 	bl	800221c <d_unqualified_name>
 80013a0:	4605      	mov	r5, r0
 80013a2:	4628      	mov	r0, r5
 80013a4:	b003      	add	sp, #12
 80013a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013aa:	7853      	ldrb	r3, [r2, #1]
 80013ac:	2b74      	cmp	r3, #116	; 0x74
 80013ae:	f040 80d7 	bne.w	8001560 <d_name+0x1e8>
 80013b2:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 80013b6:	3202      	adds	r2, #2
 80013b8:	428b      	cmp	r3, r1
 80013ba:	60c2      	str	r2, [r0, #12]
 80013bc:	f280 8127 	bge.w	800160e <d_name+0x296>
 80013c0:	6901      	ldr	r1, [r0, #16]
 80013c2:	48c0      	ldr	r0, [pc, #768]	; (80016c4 <d_name+0x34c>)
 80013c4:	011a      	lsls	r2, r3, #4
 80013c6:	188d      	adds	r5, r1, r2
 80013c8:	3301      	adds	r3, #1
 80013ca:	6163      	str	r3, [r4, #20]
 80013cc:	2300      	movs	r3, #0
 80013ce:	606b      	str	r3, [r5, #4]
 80013d0:	548b      	strb	r3, [r1, r2]
 80013d2:	2303      	movs	r3, #3
 80013d4:	e9c5 0302 	strd	r0, r3, [r5, #8]
 80013d8:	4620      	mov	r0, r4
 80013da:	f000 ff1f 	bl	800221c <d_unqualified_name>
 80013de:	462a      	mov	r2, r5
 80013e0:	4603      	mov	r3, r0
 80013e2:	2101      	movs	r1, #1
 80013e4:	4620      	mov	r0, r4
 80013e6:	f7fe fef3 	bl	80001d0 <d_make_comp>
 80013ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013ec:	68e2      	ldr	r2, [r4, #12]
 80013ee:	3303      	adds	r3, #3
 80013f0:	6323      	str	r3, [r4, #48]	; 0x30
 80013f2:	7813      	ldrb	r3, [r2, #0]
 80013f4:	2b49      	cmp	r3, #73	; 0x49
 80013f6:	4605      	mov	r5, r0
 80013f8:	d1d3      	bne.n	80013a2 <d_name+0x2a>
 80013fa:	2800      	cmp	r0, #0
 80013fc:	f000 80ba 	beq.w	8001574 <d_name+0x1fc>
 8001400:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001404:	4293      	cmp	r3, r2
 8001406:	f280 80b5 	bge.w	8001574 <d_name+0x1fc>
 800140a:	69e1      	ldr	r1, [r4, #28]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001412:	6222      	str	r2, [r4, #32]
 8001414:	4620      	mov	r0, r4
 8001416:	e014      	b.n	8001442 <d_name+0xca>
 8001418:	f000 ff00 	bl	800221c <d_unqualified_name>
 800141c:	68e3      	ldr	r3, [r4, #12]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b49      	cmp	r3, #73	; 0x49
 8001422:	4605      	mov	r5, r0
 8001424:	d1bd      	bne.n	80013a2 <d_name+0x2a>
 8001426:	2800      	cmp	r0, #0
 8001428:	f000 80a4 	beq.w	8001574 <d_name+0x1fc>
 800142c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001430:	4293      	cmp	r3, r2
 8001432:	f280 809f 	bge.w	8001574 <d_name+0x1fc>
 8001436:	69e1      	ldr	r1, [r4, #28]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800143e:	4620      	mov	r0, r4
 8001440:	6222      	str	r2, [r4, #32]
 8001442:	f7ff ff8f 	bl	8001364 <d_template_args>
 8001446:	462a      	mov	r2, r5
 8001448:	4603      	mov	r3, r0
 800144a:	2104      	movs	r1, #4
 800144c:	4620      	mov	r0, r4
 800144e:	f7fe febf 	bl	80001d0 <d_make_comp>
 8001452:	4605      	mov	r5, r0
 8001454:	4628      	mov	r0, r5
 8001456:	b003      	add	sp, #12
 8001458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800145c:	3201      	adds	r2, #1
 800145e:	60c2      	str	r2, [r0, #12]
 8001460:	a901      	add	r1, sp, #4
 8001462:	2201      	movs	r2, #1
 8001464:	f000 fde6 	bl	8002034 <d_cv_qualifiers>
 8001468:	4680      	mov	r8, r0
 800146a:	2800      	cmp	r0, #0
 800146c:	f000 8082 	beq.w	8001574 <d_name+0x1fc>
 8001470:	2100      	movs	r1, #0
 8001472:	4620      	mov	r0, r4
 8001474:	f7fe fef4 	bl	8000260 <d_ref_qualifier>
 8001478:	68e2      	ldr	r2, [r4, #12]
 800147a:	4e93      	ldr	r6, [pc, #588]	; (80016c8 <d_name+0x350>)
 800147c:	7815      	ldrb	r5, [r2, #0]
 800147e:	4681      	mov	r9, r0
 8001480:	2700      	movs	r7, #0
 8001482:	2d00      	cmp	r5, #0
 8001484:	f000 80b3 	beq.w	80015ee <d_name+0x276>
 8001488:	2d44      	cmp	r5, #68	; 0x44
 800148a:	f000 8096 	beq.w	80015ba <d_name+0x242>
 800148e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b1c      	cmp	r3, #28
 8001496:	d96f      	bls.n	8001578 <d_name+0x200>
 8001498:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b19      	cmp	r3, #25
 80014a0:	d96e      	bls.n	8001580 <d_name+0x208>
 80014a2:	2d55      	cmp	r5, #85	; 0x55
 80014a4:	f000 80a1 	beq.w	80015ea <d_name+0x272>
 80014a8:	2d53      	cmp	r5, #83	; 0x53
 80014aa:	f000 80b2 	beq.w	8001612 <d_name+0x29a>
 80014ae:	2d49      	cmp	r5, #73	; 0x49
 80014b0:	f000 80a4 	beq.w	80015fc <d_name+0x284>
 80014b4:	2d54      	cmp	r5, #84	; 0x54
 80014b6:	f000 80e6 	beq.w	8001686 <d_name+0x30e>
 80014ba:	2d45      	cmp	r5, #69	; 0x45
 80014bc:	f000 80e9 	beq.w	8001692 <d_name+0x31a>
 80014c0:	2d4d      	cmp	r5, #77	; 0x4d
 80014c2:	f040 8094 	bne.w	80015ee <d_name+0x276>
 80014c6:	2f00      	cmp	r7, #0
 80014c8:	f000 8091 	beq.w	80015ee <d_name+0x276>
 80014cc:	1c53      	adds	r3, r2, #1
 80014ce:	60e3      	str	r3, [r4, #12]
 80014d0:	7855      	ldrb	r5, [r2, #1]
 80014d2:	461a      	mov	r2, r3
 80014d4:	e7d5      	b.n	8001482 <d_name+0x10a>
 80014d6:	3201      	adds	r2, #1
 80014d8:	60c2      	str	r2, [r0, #12]
 80014da:	2100      	movs	r1, #0
 80014dc:	f001 f83a 	bl	8002554 <d_encoding>
 80014e0:	68e3      	ldr	r3, [r4, #12]
 80014e2:	781a      	ldrb	r2, [r3, #0]
 80014e4:	2a45      	cmp	r2, #69	; 0x45
 80014e6:	4606      	mov	r6, r0
 80014e8:	d144      	bne.n	8001574 <d_name+0x1fc>
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	60e2      	str	r2, [r4, #12]
 80014ee:	785a      	ldrb	r2, [r3, #1]
 80014f0:	2a73      	cmp	r2, #115	; 0x73
 80014f2:	f000 80b0 	beq.w	8001656 <d_name+0x2de>
 80014f6:	2a64      	cmp	r2, #100	; 0x64
 80014f8:	f000 8095 	beq.w	8001626 <d_name+0x2ae>
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7ff ff3b 	bl	8001378 <d_name>
 8001502:	4605      	mov	r5, r0
 8001504:	b308      	cbz	r0, 800154a <d_name+0x1d2>
 8001506:	7803      	ldrb	r3, [r0, #0]
 8001508:	2b45      	cmp	r3, #69	; 0x45
 800150a:	d01e      	beq.n	800154a <d_name+0x1d2>
 800150c:	2b47      	cmp	r3, #71	; 0x47
 800150e:	d01c      	beq.n	800154a <d_name+0x1d2>
 8001510:	f04f 37ff 	mov.w	r7, #4294967295
 8001514:	4620      	mov	r0, r4
 8001516:	f7ff f903 	bl	8000720 <d_discriminator>
 800151a:	b358      	cbz	r0, 8001574 <d_name+0x1fc>
 800151c:	1c7b      	adds	r3, r7, #1
 800151e:	d014      	beq.n	800154a <d_name+0x1d2>
 8001520:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001524:	4293      	cmp	r3, r2
 8001526:	f280 8094 	bge.w	8001652 <d_name+0x2da>
 800152a:	6920      	ldr	r0, [r4, #16]
 800152c:	0119      	lsls	r1, r3, #4
 800152e:	1842      	adds	r2, r0, r1
 8001530:	3301      	adds	r3, #1
 8001532:	f04f 0e00 	mov.w	lr, #0
 8001536:	f04f 0c46 	mov.w	ip, #70	; 0x46
 800153a:	f8c2 e004 	str.w	lr, [r2, #4]
 800153e:	6163      	str	r3, [r4, #20]
 8001540:	f800 c001 	strb.w	ip, [r0, r1]
 8001544:	e9c2 5702 	strd	r5, r7, [r2, #8]
 8001548:	4615      	mov	r5, r2
 800154a:	462b      	mov	r3, r5
 800154c:	4632      	mov	r2, r6
 800154e:	4620      	mov	r0, r4
 8001550:	2102      	movs	r1, #2
 8001552:	f7fe fe3d 	bl	80001d0 <d_make_comp>
 8001556:	4605      	mov	r5, r0
 8001558:	4628      	mov	r0, r5
 800155a:	b003      	add	sp, #12
 800155c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001560:	2100      	movs	r1, #0
 8001562:	f7ff f825 	bl	80005b0 <d_substitution>
 8001566:	68e3      	ldr	r3, [r4, #12]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b49      	cmp	r3, #73	; 0x49
 800156c:	4605      	mov	r5, r0
 800156e:	f47f af18 	bne.w	80013a2 <d_name+0x2a>
 8001572:	e74f      	b.n	8001414 <d_name+0x9c>
 8001574:	2500      	movs	r5, #0
 8001576:	e714      	b.n	80013a2 <d_name+0x2a>
 8001578:	fa26 f303 	lsr.w	r3, r6, r3
 800157c:	07d9      	lsls	r1, r3, #31
 800157e:	d58b      	bpl.n	8001498 <d_name+0x120>
 8001580:	4620      	mov	r0, r4
 8001582:	f000 fe4b 	bl	800221c <d_unqualified_name>
 8001586:	b35f      	cbz	r7, 80015e0 <d_name+0x268>
 8001588:	2101      	movs	r1, #1
 800158a:	4603      	mov	r3, r0
 800158c:	463a      	mov	r2, r7
 800158e:	4620      	mov	r0, r4
 8001590:	f7fe fe1e 	bl	80001d0 <d_make_comp>
 8001594:	4607      	mov	r7, r0
 8001596:	68e2      	ldr	r2, [r4, #12]
 8001598:	2d53      	cmp	r5, #83	; 0x53
 800159a:	7813      	ldrb	r3, [r2, #0]
 800159c:	d01e      	beq.n	80015dc <d_name+0x264>
 800159e:	2b45      	cmp	r3, #69	; 0x45
 80015a0:	d01a      	beq.n	80015d8 <d_name+0x260>
 80015a2:	b327      	cbz	r7, 80015ee <d_name+0x276>
 80015a4:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 80015a8:	428b      	cmp	r3, r1
 80015aa:	da20      	bge.n	80015ee <d_name+0x276>
 80015ac:	69e1      	ldr	r1, [r4, #28]
 80015ae:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 80015b2:	3301      	adds	r3, #1
 80015b4:	6223      	str	r3, [r4, #32]
 80015b6:	7815      	ldrb	r5, [r2, #0]
 80015b8:	e763      	b.n	8001482 <d_name+0x10a>
 80015ba:	7853      	ldrb	r3, [r2, #1]
 80015bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80015c0:	2b54      	cmp	r3, #84	; 0x54
 80015c2:	4620      	mov	r0, r4
 80015c4:	d00e      	beq.n	80015e4 <d_name+0x26c>
 80015c6:	f000 fe29 	bl	800221c <d_unqualified_name>
 80015ca:	2f00      	cmp	r7, #0
 80015cc:	d1dc      	bne.n	8001588 <d_name+0x210>
 80015ce:	68e2      	ldr	r2, [r4, #12]
 80015d0:	7813      	ldrb	r3, [r2, #0]
 80015d2:	2b45      	cmp	r3, #69	; 0x45
 80015d4:	4607      	mov	r7, r0
 80015d6:	d1e4      	bne.n	80015a2 <d_name+0x22a>
 80015d8:	461d      	mov	r5, r3
 80015da:	e758      	b.n	800148e <d_name+0x116>
 80015dc:	461d      	mov	r5, r3
 80015de:	e750      	b.n	8001482 <d_name+0x10a>
 80015e0:	4607      	mov	r7, r0
 80015e2:	e7d8      	b.n	8001596 <d_name+0x21e>
 80015e4:	f000 f874 	bl	80016d0 <d_type>
 80015e8:	e7ef      	b.n	80015ca <d_name+0x252>
 80015ea:	4620      	mov	r0, r4
 80015ec:	e7eb      	b.n	80015c6 <d_name+0x24e>
 80015ee:	2500      	movs	r5, #0
 80015f0:	4628      	mov	r0, r5
 80015f2:	f8c8 5000 	str.w	r5, [r8]
 80015f6:	b003      	add	sp, #12
 80015f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015fc:	2f00      	cmp	r7, #0
 80015fe:	d0f6      	beq.n	80015ee <d_name+0x276>
 8001600:	3201      	adds	r2, #1
 8001602:	60e2      	str	r2, [r4, #12]
 8001604:	4620      	mov	r0, r4
 8001606:	f7ff fe4b 	bl	80012a0 <d_template_args_1>
 800160a:	2104      	movs	r1, #4
 800160c:	e7bd      	b.n	800158a <d_name+0x212>
 800160e:	2500      	movs	r5, #0
 8001610:	e6e2      	b.n	80013d8 <d_name+0x60>
 8001612:	2101      	movs	r1, #1
 8001614:	4620      	mov	r0, r4
 8001616:	f7fe ffcb 	bl	80005b0 <d_substitution>
 800161a:	2f00      	cmp	r7, #0
 800161c:	d1b4      	bne.n	8001588 <d_name+0x210>
 800161e:	68e2      	ldr	r2, [r4, #12]
 8001620:	4607      	mov	r7, r0
 8001622:	7815      	ldrb	r5, [r2, #0]
 8001624:	e72d      	b.n	8001482 <d_name+0x10a>
 8001626:	3302      	adds	r3, #2
 8001628:	60e3      	str	r3, [r4, #12]
 800162a:	4620      	mov	r0, r4
 800162c:	f7fe ff0e 	bl	800044c <d_compact_number>
 8001630:	1e07      	subs	r7, r0, #0
 8001632:	db9f      	blt.n	8001574 <d_name+0x1fc>
 8001634:	4620      	mov	r0, r4
 8001636:	f7ff fe9f 	bl	8001378 <d_name>
 800163a:	4605      	mov	r5, r0
 800163c:	2800      	cmp	r0, #0
 800163e:	f43f af6f 	beq.w	8001520 <d_name+0x1a8>
 8001642:	7803      	ldrb	r3, [r0, #0]
 8001644:	2b45      	cmp	r3, #69	; 0x45
 8001646:	f43f af69 	beq.w	800151c <d_name+0x1a4>
 800164a:	2b47      	cmp	r3, #71	; 0x47
 800164c:	f43f af66 	beq.w	800151c <d_name+0x1a4>
 8001650:	e760      	b.n	8001514 <d_name+0x19c>
 8001652:	2500      	movs	r5, #0
 8001654:	e779      	b.n	800154a <d_name+0x1d2>
 8001656:	3302      	adds	r3, #2
 8001658:	60e3      	str	r3, [r4, #12]
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff f860 	bl	8000720 <d_discriminator>
 8001660:	2800      	cmp	r0, #0
 8001662:	d087      	beq.n	8001574 <d_name+0x1fc>
 8001664:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8001668:	429a      	cmp	r2, r3
 800166a:	da10      	bge.n	800168e <d_name+0x316>
 800166c:	6920      	ldr	r0, [r4, #16]
 800166e:	4d17      	ldr	r5, [pc, #92]	; (80016cc <d_name+0x354>)
 8001670:	0111      	lsls	r1, r2, #4
 8001672:	1843      	adds	r3, r0, r1
 8001674:	3201      	adds	r2, #1
 8001676:	6162      	str	r2, [r4, #20]
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	5442      	strb	r2, [r0, r1]
 800167e:	220e      	movs	r2, #14
 8001680:	e9c3 5202 	strd	r5, r2, [r3, #8]
 8001684:	e762      	b.n	800154c <d_name+0x1d4>
 8001686:	4620      	mov	r0, r4
 8001688:	f7fe fefa 	bl	8000480 <d_template_param>
 800168c:	e79d      	b.n	80015ca <d_name+0x252>
 800168e:	2300      	movs	r3, #0
 8001690:	e75c      	b.n	800154c <d_name+0x1d4>
 8001692:	f8c8 7000 	str.w	r7, [r8]
 8001696:	2f00      	cmp	r7, #0
 8001698:	f43f af6c 	beq.w	8001574 <d_name+0x1fc>
 800169c:	f1b9 0f00 	cmp.w	r9, #0
 80016a0:	d004      	beq.n	80016ac <d_name+0x334>
 80016a2:	9b01      	ldr	r3, [sp, #4]
 80016a4:	f8c9 3008 	str.w	r3, [r9, #8]
 80016a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80016ac:	7813      	ldrb	r3, [r2, #0]
 80016ae:	2b45      	cmp	r3, #69	; 0x45
 80016b0:	f47f af60 	bne.w	8001574 <d_name+0x1fc>
 80016b4:	9d01      	ldr	r5, [sp, #4]
 80016b6:	3201      	adds	r2, #1
 80016b8:	4628      	mov	r0, r5
 80016ba:	60e2      	str	r2, [r4, #12]
 80016bc:	b003      	add	sp, #12
 80016be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016c2:	bf00      	nop
 80016c4:	08017cac 	.word	0x08017cac
 80016c8:	100803ff 	.word	0x100803ff
 80016cc:	08017c9c 	.word	0x08017c9c

080016d0 <d_type>:
 80016d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016d4:	68c2      	ldr	r2, [r0, #12]
 80016d6:	7813      	ldrb	r3, [r2, #0]
 80016d8:	2b72      	cmp	r3, #114	; 0x72
 80016da:	b083      	sub	sp, #12
 80016dc:	4604      	mov	r4, r0
 80016de:	d05f      	beq.n	80017a0 <d_type+0xd0>
 80016e0:	2b56      	cmp	r3, #86	; 0x56
 80016e2:	d05d      	beq.n	80017a0 <d_type+0xd0>
 80016e4:	2b4b      	cmp	r3, #75	; 0x4b
 80016e6:	d05b      	beq.n	80017a0 <d_type+0xd0>
 80016e8:	2b44      	cmp	r3, #68	; 0x44
 80016ea:	d051      	beq.n	8001790 <d_type+0xc0>
 80016ec:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80016f0:	294a      	cmp	r1, #74	; 0x4a
 80016f2:	f200 809e 	bhi.w	8001832 <d_type+0x162>
 80016f6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80016fa:	0111      	.short	0x0111
 80016fc:	01110111 	.word	0x01110111
 8001700:	01110111 	.word	0x01110111
 8001704:	01110111 	.word	0x01110111
 8001708:	01110111 	.word	0x01110111
 800170c:	009c0111 	.word	0x009c0111
 8001710:	009c009c 	.word	0x009c009c
 8001714:	009c009c 	.word	0x009c009c
 8001718:	009c009c 	.word	0x009c009c
 800171c:	009c021e 	.word	0x009c021e
 8001720:	009c013b 	.word	0x009c013b
 8001724:	0135009c 	.word	0x0135009c
 8001728:	009c0149 	.word	0x009c0149
 800172c:	009c009c 	.word	0x009c009c
 8001730:	009c009c 	.word	0x009c009c
 8001734:	01110206 	.word	0x01110206
 8001738:	01650157 	.word	0x01650157
 800173c:	0173009c 	.word	0x0173009c
 8001740:	01a50181 	.word	0x01a50181
 8001744:	009c01cc 	.word	0x009c01cc
 8001748:	009c009c 	.word	0x009c009c
 800174c:	0111009c 	.word	0x0111009c
 8001750:	009c009c 	.word	0x009c009c
 8001754:	009c009c 	.word	0x009c009c
 8001758:	009c009c 	.word	0x009c009c
 800175c:	01e401e4 	.word	0x01e401e4
 8001760:	01e401e4 	.word	0x01e401e4
 8001764:	01e401e4 	.word	0x01e401e4
 8001768:	01e401e4 	.word	0x01e401e4
 800176c:	01e401e4 	.word	0x01e401e4
 8001770:	01e4009c 	.word	0x01e4009c
 8001774:	01e401e4 	.word	0x01e401e4
 8001778:	009c01e4 	.word	0x009c01e4
 800177c:	009c009c 	.word	0x009c009c
 8001780:	01e401e4 	.word	0x01e401e4
 8001784:	01e40127 	.word	0x01e40127
 8001788:	01e401e4 	.word	0x01e401e4
 800178c:	01e401e4 	.word	0x01e401e4
 8001790:	7853      	ldrb	r3, [r2, #1]
 8001792:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 8001796:	294f      	cmp	r1, #79	; 0x4f
 8001798:	d002      	beq.n	80017a0 <d_type+0xd0>
 800179a:	3b77      	subs	r3, #119	; 0x77
 800179c:	2b01      	cmp	r3, #1
 800179e:	d84d      	bhi.n	800183c <d_type+0x16c>
 80017a0:	2200      	movs	r2, #0
 80017a2:	a901      	add	r1, sp, #4
 80017a4:	4620      	mov	r0, r4
 80017a6:	f000 fc45 	bl	8002034 <d_cv_qualifiers>
 80017aa:	4605      	mov	r5, r0
 80017ac:	2800      	cmp	r0, #0
 80017ae:	d040      	beq.n	8001832 <d_type+0x162>
 80017b0:	68e3      	ldr	r3, [r4, #12]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b46      	cmp	r3, #70	; 0x46
 80017b6:	4620      	mov	r0, r4
 80017b8:	d119      	bne.n	80017ee <d_type+0x11e>
 80017ba:	f000 fd0f 	bl	80021dc <d_function_type>
 80017be:	6028      	str	r0, [r5, #0]
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d036      	beq.n	8001832 <d_type+0x162>
 80017c4:	7803      	ldrb	r3, [r0, #0]
 80017c6:	9a01      	ldr	r2, [sp, #4]
 80017c8:	3b1f      	subs	r3, #31
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d913      	bls.n	80017f6 <d_type+0x126>
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	d02f      	beq.n	8001832 <d_type+0x162>
 80017d2:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 80017d6:	428b      	cmp	r3, r1
 80017d8:	da2b      	bge.n	8001832 <d_type+0x162>
 80017da:	69e0      	ldr	r0, [r4, #28]
 80017dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80017e0:	1c59      	adds	r1, r3, #1
 80017e2:	9d01      	ldr	r5, [sp, #4]
 80017e4:	6221      	str	r1, [r4, #32]
 80017e6:	4628      	mov	r0, r5
 80017e8:	b003      	add	sp, #12
 80017ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017ee:	f7ff ff6f 	bl	80016d0 <d_type>
 80017f2:	6028      	str	r0, [r5, #0]
 80017f4:	e7e4      	b.n	80017c0 <d_type+0xf0>
 80017f6:	6883      	ldr	r3, [r0, #8]
 80017f8:	6082      	str	r2, [r0, #8]
 80017fa:	682a      	ldr	r2, [r5, #0]
 80017fc:	9201      	str	r2, [sp, #4]
 80017fe:	602b      	str	r3, [r5, #0]
 8001800:	9a01      	ldr	r2, [sp, #4]
 8001802:	e7e4      	b.n	80017ce <d_type+0xfe>
 8001804:	2301      	movs	r3, #1
 8001806:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001808:	6343      	str	r3, [r0, #52]	; 0x34
 800180a:	f7ff fb37 	bl	8000e7c <d_expression_1>
 800180e:	6365      	str	r5, [r4, #52]	; 0x34
 8001810:	4602      	mov	r2, r0
 8001812:	2300      	movs	r3, #0
 8001814:	2142      	movs	r1, #66	; 0x42
 8001816:	4620      	mov	r0, r4
 8001818:	f7fe fcda 	bl	80001d0 <d_make_comp>
 800181c:	4605      	mov	r5, r0
 800181e:	9001      	str	r0, [sp, #4]
 8001820:	b138      	cbz	r0, 8001832 <d_type+0x162>
 8001822:	68e3      	ldr	r3, [r4, #12]
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	b122      	cbz	r2, 8001832 <d_type+0x162>
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	60e2      	str	r2, [r4, #12]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b45      	cmp	r3, #69	; 0x45
 8001830:	d07b      	beq.n	800192a <d_type+0x25a>
 8001832:	2500      	movs	r5, #0
 8001834:	4628      	mov	r0, r5
 8001836:	b003      	add	sp, #12
 8001838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800183c:	1c53      	adds	r3, r2, #1
 800183e:	60c3      	str	r3, [r0, #12]
 8001840:	7853      	ldrb	r3, [r2, #1]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f5      	beq.n	8001832 <d_type+0x162>
 8001846:	1c93      	adds	r3, r2, #2
 8001848:	60c3      	str	r3, [r0, #12]
 800184a:	7853      	ldrb	r3, [r2, #1]
 800184c:	3b46      	subs	r3, #70	; 0x46
 800184e:	2b30      	cmp	r3, #48	; 0x30
 8001850:	d8ef      	bhi.n	8001832 <d_type+0x162>
 8001852:	a101      	add	r1, pc, #4	; (adr r1, 8001858 <d_type+0x188>)
 8001854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001858:	08001d15 	.word	0x08001d15
 800185c:	08001833 	.word	0x08001833
 8001860:	08001833 	.word	0x08001833
 8001864:	08001833 	.word	0x08001833
 8001868:	08001833 	.word	0x08001833
 800186c:	08001833 	.word	0x08001833
 8001870:	08001833 	.word	0x08001833
 8001874:	08001833 	.word	0x08001833
 8001878:	08001833 	.word	0x08001833
 800187c:	08001833 	.word	0x08001833
 8001880:	08001833 	.word	0x08001833
 8001884:	08001833 	.word	0x08001833
 8001888:	08001833 	.word	0x08001833
 800188c:	08001833 	.word	0x08001833
 8001890:	08001805 	.word	0x08001805
 8001894:	08001833 	.word	0x08001833
 8001898:	08001833 	.word	0x08001833
 800189c:	08001833 	.word	0x08001833
 80018a0:	08001833 	.word	0x08001833
 80018a4:	08001833 	.word	0x08001833
 80018a8:	08001833 	.word	0x08001833
 80018ac:	08001833 	.word	0x08001833
 80018b0:	08001833 	.word	0x08001833
 80018b4:	08001833 	.word	0x08001833
 80018b8:	08001833 	.word	0x08001833
 80018bc:	08001833 	.word	0x08001833
 80018c0:	08001833 	.word	0x08001833
 80018c4:	08001cf1 	.word	0x08001cf1
 80018c8:	08001833 	.word	0x08001833
 80018cc:	08001ccd 	.word	0x08001ccd
 80018d0:	08001ca5 	.word	0x08001ca5
 80018d4:	08001c7d 	.word	0x08001c7d
 80018d8:	08001c55 	.word	0x08001c55
 80018dc:	08001833 	.word	0x08001833
 80018e0:	08001c2d 	.word	0x08001c2d
 80018e4:	08001dc9 	.word	0x08001dc9
 80018e8:	08001833 	.word	0x08001833
 80018ec:	08001833 	.word	0x08001833
 80018f0:	08001833 	.word	0x08001833
 80018f4:	08001833 	.word	0x08001833
 80018f8:	08001d7d 	.word	0x08001d7d
 80018fc:	08001833 	.word	0x08001833
 8001900:	08001c17 	.word	0x08001c17
 8001904:	08001833 	.word	0x08001833
 8001908:	08001833 	.word	0x08001833
 800190c:	08001bef 	.word	0x08001bef
 8001910:	08001805 	.word	0x08001805
 8001914:	08001833 	.word	0x08001833
 8001918:	08001bb5 	.word	0x08001bb5
 800191c:	4620      	mov	r0, r4
 800191e:	f7ff fd2b 	bl	8001378 <d_name>
 8001922:	4605      	mov	r5, r0
 8001924:	9001      	str	r0, [sp, #4]
 8001926:	2d00      	cmp	r5, #0
 8001928:	d083      	beq.n	8001832 <d_type+0x162>
 800192a:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800192e:	4293      	cmp	r3, r2
 8001930:	f6bf af7f 	bge.w	8001832 <d_type+0x162>
 8001934:	69e1      	ldr	r1, [r4, #28]
 8001936:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800193a:	9d01      	ldr	r5, [sp, #4]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	4628      	mov	r0, r5
 8001940:	6222      	str	r2, [r4, #32]
 8001942:	b003      	add	sp, #12
 8001944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001948:	3201      	adds	r2, #1
 800194a:	60e2      	str	r2, [r4, #12]
 800194c:	4620      	mov	r0, r4
 800194e:	f7fe fdb9 	bl	80004c4 <d_source_name>
 8001952:	2300      	movs	r3, #0
 8001954:	4602      	mov	r2, r0
 8001956:	2128      	movs	r1, #40	; 0x28
 8001958:	4620      	mov	r0, r4
 800195a:	f7fe fc39 	bl	80001d0 <d_make_comp>
 800195e:	4605      	mov	r5, r0
 8001960:	9001      	str	r0, [sp, #4]
 8001962:	e7e0      	b.n	8001926 <d_type+0x256>
 8001964:	4620      	mov	r0, r4
 8001966:	f000 fc39 	bl	80021dc <d_function_type>
 800196a:	4605      	mov	r5, r0
 800196c:	9001      	str	r0, [sp, #4]
 800196e:	e7da      	b.n	8001926 <d_type+0x256>
 8001970:	3201      	adds	r2, #1
 8001972:	60e2      	str	r2, [r4, #12]
 8001974:	4620      	mov	r0, r4
 8001976:	f7ff feab 	bl	80016d0 <d_type>
 800197a:	2300      	movs	r3, #0
 800197c:	4602      	mov	r2, r0
 800197e:	2125      	movs	r1, #37	; 0x25
 8001980:	4620      	mov	r0, r4
 8001982:	f7fe fc25 	bl	80001d0 <d_make_comp>
 8001986:	4605      	mov	r5, r0
 8001988:	9001      	str	r0, [sp, #4]
 800198a:	e7cc      	b.n	8001926 <d_type+0x256>
 800198c:	3201      	adds	r2, #1
 800198e:	60e2      	str	r2, [r4, #12]
 8001990:	4620      	mov	r0, r4
 8001992:	f7ff fe9d 	bl	80016d0 <d_type>
 8001996:	2300      	movs	r3, #0
 8001998:	4602      	mov	r2, r0
 800199a:	2126      	movs	r1, #38	; 0x26
 800199c:	4620      	mov	r0, r4
 800199e:	f7fe fc17 	bl	80001d0 <d_make_comp>
 80019a2:	4605      	mov	r5, r0
 80019a4:	9001      	str	r0, [sp, #4]
 80019a6:	e7be      	b.n	8001926 <d_type+0x256>
 80019a8:	3201      	adds	r2, #1
 80019aa:	60e2      	str	r2, [r4, #12]
 80019ac:	4620      	mov	r0, r4
 80019ae:	f7ff fe8f 	bl	80016d0 <d_type>
 80019b2:	2300      	movs	r3, #0
 80019b4:	4602      	mov	r2, r0
 80019b6:	2124      	movs	r1, #36	; 0x24
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7fe fc09 	bl	80001d0 <d_make_comp>
 80019be:	4605      	mov	r5, r0
 80019c0:	9001      	str	r0, [sp, #4]
 80019c2:	e7b0      	b.n	8001926 <d_type+0x256>
 80019c4:	3201      	adds	r2, #1
 80019c6:	60e2      	str	r2, [r4, #12]
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff fe81 	bl	80016d0 <d_type>
 80019ce:	2300      	movs	r3, #0
 80019d0:	4602      	mov	r2, r0
 80019d2:	2122      	movs	r1, #34	; 0x22
 80019d4:	4620      	mov	r0, r4
 80019d6:	f7fe fbfb 	bl	80001d0 <d_make_comp>
 80019da:	4605      	mov	r5, r0
 80019dc:	9001      	str	r0, [sp, #4]
 80019de:	e7a2      	b.n	8001926 <d_type+0x256>
 80019e0:	3201      	adds	r2, #1
 80019e2:	60e2      	str	r2, [r4, #12]
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7ff fe73 	bl	80016d0 <d_type>
 80019ea:	2300      	movs	r3, #0
 80019ec:	4602      	mov	r2, r0
 80019ee:	2123      	movs	r1, #35	; 0x23
 80019f0:	4620      	mov	r0, r4
 80019f2:	f7fe fbed 	bl	80001d0 <d_make_comp>
 80019f6:	4605      	mov	r5, r0
 80019f8:	9001      	str	r0, [sp, #4]
 80019fa:	e794      	b.n	8001926 <d_type+0x256>
 80019fc:	7853      	ldrb	r3, [r2, #1]
 80019fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a02:	2a09      	cmp	r2, #9
 8001a04:	d905      	bls.n	8001a12 <d_type+0x342>
 8001a06:	2b5f      	cmp	r3, #95	; 0x5f
 8001a08:	d003      	beq.n	8001a12 <d_type+0x342>
 8001a0a:	3b41      	subs	r3, #65	; 0x41
 8001a0c:	2b19      	cmp	r3, #25
 8001a0e:	f200 820f 	bhi.w	8001e30 <d_type+0x760>
 8001a12:	2100      	movs	r1, #0
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7fe fdcb 	bl	80005b0 <d_substitution>
 8001a1a:	68e3      	ldr	r3, [r4, #12]
 8001a1c:	9001      	str	r0, [sp, #4]
 8001a1e:	781a      	ldrb	r2, [r3, #0]
 8001a20:	2a49      	cmp	r2, #73	; 0x49
 8001a22:	4605      	mov	r5, r0
 8001a24:	f47f aedf 	bne.w	80017e6 <d_type+0x116>
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60e3      	str	r3, [r4, #12]
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7ff fc37 	bl	80012a0 <d_template_args_1>
 8001a32:	4603      	mov	r3, r0
 8001a34:	462a      	mov	r2, r5
 8001a36:	2104      	movs	r1, #4
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f7fe fbc9 	bl	80001d0 <d_make_comp>
 8001a3e:	4605      	mov	r5, r0
 8001a40:	9001      	str	r0, [sp, #4]
 8001a42:	e770      	b.n	8001926 <d_type+0x256>
 8001a44:	4620      	mov	r0, r4
 8001a46:	f7fe fd1b 	bl	8000480 <d_template_param>
 8001a4a:	68e6      	ldr	r6, [r4, #12]
 8001a4c:	9001      	str	r0, [sp, #4]
 8001a4e:	7833      	ldrb	r3, [r6, #0]
 8001a50:	2b49      	cmp	r3, #73	; 0x49
 8001a52:	4605      	mov	r5, r0
 8001a54:	f47f af67 	bne.w	8001926 <d_type+0x256>
 8001a58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 81f5 	bne.w	8001e4a <d_type+0x77a>
 8001a60:	2800      	cmp	r0, #0
 8001a62:	f43f aee6 	beq.w	8001832 <d_type+0x162>
 8001a66:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8001a6a:	428a      	cmp	r2, r1
 8001a6c:	f6bf aee1 	bge.w	8001832 <d_type+0x162>
 8001a70:	69e1      	ldr	r1, [r4, #28]
 8001a72:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8001a76:	3201      	adds	r2, #1
 8001a78:	6222      	str	r2, [r4, #32]
 8001a7a:	7831      	ldrb	r1, [r6, #0]
 8001a7c:	9d01      	ldr	r5, [sp, #4]
 8001a7e:	3949      	subs	r1, #73	; 0x49
 8001a80:	2901      	cmp	r1, #1
 8001a82:	d8d7      	bhi.n	8001a34 <d_type+0x364>
 8001a84:	3601      	adds	r6, #1
 8001a86:	60e6      	str	r6, [r4, #12]
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7ff fc09 	bl	80012a0 <d_template_args_1>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	e7d0      	b.n	8001a34 <d_type+0x364>
 8001a92:	3201      	adds	r2, #1
 8001a94:	60e2      	str	r2, [r4, #12]
 8001a96:	4620      	mov	r0, r4
 8001a98:	f7fe fd14 	bl	80004c4 <d_source_name>
 8001a9c:	68e3      	ldr	r3, [r4, #12]
 8001a9e:	9001      	str	r0, [sp, #4]
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	2a49      	cmp	r2, #73	; 0x49
 8001aa4:	4605      	mov	r5, r0
 8001aa6:	f000 81a8 	beq.w	8001dfa <d_type+0x72a>
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff fe10 	bl	80016d0 <d_type>
 8001ab0:	9b01      	ldr	r3, [sp, #4]
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	2121      	movs	r1, #33	; 0x21
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7fe fb8a 	bl	80001d0 <d_make_comp>
 8001abc:	4605      	mov	r5, r0
 8001abe:	9001      	str	r0, [sp, #4]
 8001ac0:	e731      	b.n	8001926 <d_type+0x256>
 8001ac2:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
 8001ac6:	3b61      	subs	r3, #97	; 0x61
 8001ac8:	4db6      	ldr	r5, [pc, #728]	; (8001da4 <d_type+0x6d4>)
 8001aca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ace:	4281      	cmp	r1, r0
 8001ad0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001ad4:	f280 818b 	bge.w	8001dee <d_type+0x71e>
 8001ad8:	6858      	ldr	r0, [r3, #4]
 8001ada:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001adc:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8001ae0:	010f      	lsls	r7, r1, #4
 8001ae2:	eb0c 0507 	add.w	r5, ip, r7
 8001ae6:	4406      	add	r6, r0
 8001ae8:	4630      	mov	r0, r6
 8001aea:	3201      	adds	r2, #1
 8001aec:	3101      	adds	r1, #1
 8001aee:	f04f 0e00 	mov.w	lr, #0
 8001af2:	2627      	movs	r6, #39	; 0x27
 8001af4:	f8c5 e004 	str.w	lr, [r5, #4]
 8001af8:	6161      	str	r1, [r4, #20]
 8001afa:	f80c 6007 	strb.w	r6, [ip, r7]
 8001afe:	60ab      	str	r3, [r5, #8]
 8001b00:	60e2      	str	r2, [r4, #12]
 8001b02:	6320      	str	r0, [r4, #48]	; 0x30
 8001b04:	e66f      	b.n	80017e6 <d_type+0x116>
 8001b06:	3201      	adds	r2, #1
 8001b08:	60e2      	str	r2, [r4, #12]
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff fde0 	bl	80016d0 <d_type>
 8001b10:	4605      	mov	r5, r0
 8001b12:	2800      	cmp	r0, #0
 8001b14:	f43f ae8d 	beq.w	8001832 <d_type+0x162>
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f7ff fdd9 	bl	80016d0 <d_type>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2800      	cmp	r0, #0
 8001b22:	f43f ae86 	beq.w	8001832 <d_type+0x162>
 8001b26:	462a      	mov	r2, r5
 8001b28:	212b      	movs	r1, #43	; 0x2b
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f7fe fb50 	bl	80001d0 <d_make_comp>
 8001b30:	4605      	mov	r5, r0
 8001b32:	9001      	str	r0, [sp, #4]
 8001b34:	e6f7      	b.n	8001926 <d_type+0x256>
 8001b36:	1c55      	adds	r5, r2, #1
 8001b38:	60e5      	str	r5, [r4, #12]
 8001b3a:	7853      	ldrb	r3, [r2, #1]
 8001b3c:	2b5f      	cmp	r3, #95	; 0x5f
 8001b3e:	f000 815a 	beq.w	8001df6 <d_type+0x726>
 8001b42:	3b30      	subs	r3, #48	; 0x30
 8001b44:	2b09      	cmp	r3, #9
 8001b46:	f200 8165 	bhi.w	8001e14 <d_type+0x744>
 8001b4a:	4628      	mov	r0, r5
 8001b4c:	e000      	b.n	8001b50 <d_type+0x480>
 8001b4e:	4608      	mov	r0, r1
 8001b50:	1c41      	adds	r1, r0, #1
 8001b52:	60e1      	str	r1, [r4, #12]
 8001b54:	7843      	ldrb	r3, [r0, #1]
 8001b56:	3b30      	subs	r3, #48	; 0x30
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d9f8      	bls.n	8001b4e <d_type+0x47e>
 8001b5c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001b60:	4293      	cmp	r3, r2
 8001b62:	eba1 0705 	sub.w	r7, r1, r5
 8001b66:	f6bf ae64 	bge.w	8001832 <d_type+0x162>
 8001b6a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001b6e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8001b72:	eb0e 060c 	add.w	r6, lr, ip
 8001b76:	3301      	adds	r3, #1
 8001b78:	2200      	movs	r2, #0
 8001b7a:	6072      	str	r2, [r6, #4]
 8001b7c:	6163      	str	r3, [r4, #20]
 8001b7e:	2f00      	cmp	r7, #0
 8001b80:	f43f ae57 	beq.w	8001832 <d_type+0x162>
 8001b84:	6072      	str	r2, [r6, #4]
 8001b86:	f80e 200c 	strb.w	r2, [lr, ip]
 8001b8a:	e9c6 5702 	strd	r5, r7, [r6, #8]
 8001b8e:	7843      	ldrb	r3, [r0, #1]
 8001b90:	460d      	mov	r5, r1
 8001b92:	2b5f      	cmp	r3, #95	; 0x5f
 8001b94:	f47f ae4d 	bne.w	8001832 <d_type+0x162>
 8001b98:	3501      	adds	r5, #1
 8001b9a:	60e5      	str	r5, [r4, #12]
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f7ff fd97 	bl	80016d0 <d_type>
 8001ba2:	4632      	mov	r2, r6
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	212a      	movs	r1, #42	; 0x2a
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f7fe fb11 	bl	80001d0 <d_make_comp>
 8001bae:	4605      	mov	r5, r0
 8001bb0:	9001      	str	r0, [sp, #4]
 8001bb2:	e6b8      	b.n	8001926 <d_type+0x256>
 8001bb4:	7893      	ldrb	r3, [r2, #2]
 8001bb6:	2b5f      	cmp	r3, #95	; 0x5f
 8001bb8:	f000 8178 	beq.w	8001eac <d_type+0x7dc>
 8001bbc:	f7fe fc2e 	bl	800041c <d_number_component>
 8001bc0:	4605      	mov	r5, r0
 8001bc2:	2d00      	cmp	r5, #0
 8001bc4:	f43f ae35 	beq.w	8001832 <d_type+0x162>
 8001bc8:	68e3      	ldr	r3, [r4, #12]
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	2a5f      	cmp	r2, #95	; 0x5f
 8001bce:	f47f ae30 	bne.w	8001832 <d_type+0x162>
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60e3      	str	r3, [r4, #12]
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f7ff fd7a 	bl	80016d0 <d_type>
 8001bdc:	462a      	mov	r2, r5
 8001bde:	4603      	mov	r3, r0
 8001be0:	212d      	movs	r1, #45	; 0x2d
 8001be2:	4620      	mov	r0, r4
 8001be4:	f7fe faf4 	bl	80001d0 <d_make_comp>
 8001be8:	4605      	mov	r5, r0
 8001bea:	9001      	str	r0, [sp, #4]
 8001bec:	e69b      	b.n	8001926 <d_type+0x256>
 8001bee:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	f280 80fb 	bge.w	8001dee <d_type+0x71e>
 8001bf8:	6900      	ldr	r0, [r0, #16]
 8001bfa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001bfc:	0119      	lsls	r1, r3, #4
 8001bfe:	1845      	adds	r5, r0, r1
 8001c00:	3301      	adds	r3, #1
 8001c02:	2600      	movs	r6, #0
 8001c04:	606e      	str	r6, [r5, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	6163      	str	r3, [r4, #20]
 8001c0a:	2627      	movs	r6, #39	; 0x27
 8001c0c:	4b66      	ldr	r3, [pc, #408]	; (8001da8 <d_type+0x6d8>)
 8001c0e:	5446      	strb	r6, [r0, r1]
 8001c10:	60ab      	str	r3, [r5, #8]
 8001c12:	6322      	str	r2, [r4, #48]	; 0x30
 8001c14:	e5e7      	b.n	80017e6 <d_type+0x116>
 8001c16:	f7ff fd5b 	bl	80016d0 <d_type>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	214a      	movs	r1, #74	; 0x4a
 8001c20:	4620      	mov	r0, r4
 8001c22:	f7fe fad5 	bl	80001d0 <d_make_comp>
 8001c26:	4605      	mov	r5, r0
 8001c28:	9001      	str	r0, [sp, #4]
 8001c2a:	e67c      	b.n	8001926 <d_type+0x256>
 8001c2c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c30:	4293      	cmp	r3, r2
 8001c32:	f280 80dc 	bge.w	8001dee <d_type+0x71e>
 8001c36:	6900      	ldr	r0, [r0, #16]
 8001c38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c3a:	0119      	lsls	r1, r3, #4
 8001c3c:	1845      	adds	r5, r0, r1
 8001c3e:	3301      	adds	r3, #1
 8001c40:	2600      	movs	r6, #0
 8001c42:	606e      	str	r6, [r5, #4]
 8001c44:	3204      	adds	r2, #4
 8001c46:	6163      	str	r3, [r4, #20]
 8001c48:	2627      	movs	r6, #39	; 0x27
 8001c4a:	4b58      	ldr	r3, [pc, #352]	; (8001dac <d_type+0x6dc>)
 8001c4c:	5446      	strb	r6, [r0, r1]
 8001c4e:	60ab      	str	r3, [r5, #8]
 8001c50:	6322      	str	r2, [r4, #48]	; 0x30
 8001c52:	e5c8      	b.n	80017e6 <d_type+0x116>
 8001c54:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	f280 80c8 	bge.w	8001dee <d_type+0x71e>
 8001c5e:	6900      	ldr	r0, [r0, #16]
 8001c60:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c62:	0119      	lsls	r1, r3, #4
 8001c64:	1845      	adds	r5, r0, r1
 8001c66:	3301      	adds	r3, #1
 8001c68:	2600      	movs	r6, #0
 8001c6a:	606e      	str	r6, [r5, #4]
 8001c6c:	3209      	adds	r2, #9
 8001c6e:	6163      	str	r3, [r4, #20]
 8001c70:	2627      	movs	r6, #39	; 0x27
 8001c72:	4b4f      	ldr	r3, [pc, #316]	; (8001db0 <d_type+0x6e0>)
 8001c74:	5446      	strb	r6, [r0, r1]
 8001c76:	60ab      	str	r3, [r5, #8]
 8001c78:	6322      	str	r2, [r4, #48]	; 0x30
 8001c7a:	e5b4      	b.n	80017e6 <d_type+0x116>
 8001c7c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c80:	4293      	cmp	r3, r2
 8001c82:	f280 80b4 	bge.w	8001dee <d_type+0x71e>
 8001c86:	6900      	ldr	r0, [r0, #16]
 8001c88:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c8a:	0119      	lsls	r1, r3, #4
 8001c8c:	1845      	adds	r5, r0, r1
 8001c8e:	3301      	adds	r3, #1
 8001c90:	2600      	movs	r6, #0
 8001c92:	606e      	str	r6, [r5, #4]
 8001c94:	320a      	adds	r2, #10
 8001c96:	6163      	str	r3, [r4, #20]
 8001c98:	2627      	movs	r6, #39	; 0x27
 8001c9a:	4b46      	ldr	r3, [pc, #280]	; (8001db4 <d_type+0x6e4>)
 8001c9c:	5446      	strb	r6, [r0, r1]
 8001c9e:	60ab      	str	r3, [r5, #8]
 8001ca0:	6322      	str	r2, [r4, #48]	; 0x30
 8001ca2:	e5a0      	b.n	80017e6 <d_type+0x116>
 8001ca4:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	f280 80a0 	bge.w	8001dee <d_type+0x71e>
 8001cae:	6900      	ldr	r0, [r0, #16]
 8001cb0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cb2:	0119      	lsls	r1, r3, #4
 8001cb4:	1845      	adds	r5, r0, r1
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	2600      	movs	r6, #0
 8001cba:	606e      	str	r6, [r5, #4]
 8001cbc:	3209      	adds	r2, #9
 8001cbe:	6163      	str	r3, [r4, #20]
 8001cc0:	2627      	movs	r6, #39	; 0x27
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <d_type+0x6e8>)
 8001cc4:	5446      	strb	r6, [r0, r1]
 8001cc6:	60ab      	str	r3, [r5, #8]
 8001cc8:	6322      	str	r2, [r4, #48]	; 0x30
 8001cca:	e58c      	b.n	80017e6 <d_type+0x116>
 8001ccc:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	f6bf adae 	bge.w	8001832 <d_type+0x162>
 8001cd6:	6901      	ldr	r1, [r0, #16]
 8001cd8:	4e38      	ldr	r6, [pc, #224]	; (8001dbc <d_type+0x6ec>)
 8001cda:	011a      	lsls	r2, r3, #4
 8001cdc:	188d      	adds	r5, r1, r2
 8001cde:	3301      	adds	r3, #1
 8001ce0:	6143      	str	r3, [r0, #20]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	200e      	movs	r0, #14
 8001ce6:	606b      	str	r3, [r5, #4]
 8001ce8:	548b      	strb	r3, [r1, r2]
 8001cea:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001cee:	e57a      	b.n	80017e6 <d_type+0x116>
 8001cf0:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	f6bf ad9c 	bge.w	8001832 <d_type+0x162>
 8001cfa:	6901      	ldr	r1, [r0, #16]
 8001cfc:	4e30      	ldr	r6, [pc, #192]	; (8001dc0 <d_type+0x6f0>)
 8001cfe:	011a      	lsls	r2, r3, #4
 8001d00:	188d      	adds	r5, r1, r2
 8001d02:	3301      	adds	r3, #1
 8001d04:	6143      	str	r3, [r0, #20]
 8001d06:	2300      	movs	r3, #0
 8001d08:	2004      	movs	r0, #4
 8001d0a:	606b      	str	r3, [r5, #4]
 8001d0c:	548b      	strb	r3, [r1, r2]
 8001d0e:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001d12:	e568      	b.n	80017e6 <d_type+0x116>
 8001d14:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 8001d18:	428b      	cmp	r3, r1
 8001d1a:	f280 80af 	bge.w	8001e7c <d_type+0x7ac>
 8001d1e:	6905      	ldr	r5, [r0, #16]
 8001d20:	0118      	lsls	r0, r3, #4
 8001d22:	1829      	adds	r1, r5, r0
 8001d24:	3301      	adds	r3, #1
 8001d26:	2700      	movs	r7, #0
 8001d28:	262c      	movs	r6, #44	; 0x2c
 8001d2a:	604f      	str	r7, [r1, #4]
 8001d2c:	9101      	str	r1, [sp, #4]
 8001d2e:	6163      	str	r3, [r4, #20]
 8001d30:	542e      	strb	r6, [r5, r0]
 8001d32:	7893      	ldrb	r3, [r2, #2]
 8001d34:	3b30      	subs	r3, #48	; 0x30
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b09      	cmp	r3, #9
 8001d3a:	bf94      	ite	ls
 8001d3c:	2301      	movls	r3, #1
 8001d3e:	463b      	movhi	r3, r7
 8001d40:	818b      	strh	r3, [r1, #12]
 8001d42:	f240 80ae 	bls.w	8001ea2 <d_type+0x7d2>
 8001d46:	4620      	mov	r0, r4
 8001d48:	9d01      	ldr	r5, [sp, #4]
 8001d4a:	f7ff fcc1 	bl	80016d0 <d_type>
 8001d4e:	9b01      	ldr	r3, [sp, #4]
 8001d50:	60a8      	str	r0, [r5, #8]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f43f ad6c 	beq.w	8001832 <d_type+0x162>
 8001d5a:	f104 000c 	add.w	r0, r4, #12
 8001d5e:	f7fe fb31 	bl	80003c4 <d_number.isra.1>
 8001d62:	68e2      	ldr	r2, [r4, #12]
 8001d64:	7813      	ldrb	r3, [r2, #0]
 8001d66:	b113      	cbz	r3, 8001d6e <d_type+0x69e>
 8001d68:	1c53      	adds	r3, r2, #1
 8001d6a:	60e3      	str	r3, [r4, #12]
 8001d6c:	7813      	ldrb	r3, [r2, #0]
 8001d6e:	9d01      	ldr	r5, [sp, #4]
 8001d70:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
 8001d74:	4253      	negs	r3, r2
 8001d76:	4153      	adcs	r3, r2
 8001d78:	81eb      	strh	r3, [r5, #14]
 8001d7a:	e534      	b.n	80017e6 <d_type+0x116>
 8001d7c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001d80:	4293      	cmp	r3, r2
 8001d82:	da34      	bge.n	8001dee <d_type+0x71e>
 8001d84:	6900      	ldr	r0, [r0, #16]
 8001d86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d88:	0119      	lsls	r1, r3, #4
 8001d8a:	1845      	adds	r5, r0, r1
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	2600      	movs	r6, #0
 8001d90:	606e      	str	r6, [r5, #4]
 8001d92:	3211      	adds	r2, #17
 8001d94:	6163      	str	r3, [r4, #20]
 8001d96:	2627      	movs	r6, #39	; 0x27
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <d_type+0x6f4>)
 8001d9a:	5446      	strb	r6, [r0, r1]
 8001d9c:	60ab      	str	r3, [r5, #8]
 8001d9e:	6322      	str	r2, [r4, #48]	; 0x30
 8001da0:	e521      	b.n	80017e6 <d_type+0x116>
 8001da2:	bf00      	nop
 8001da4:	08017174 	.word	0x08017174
 8001da8:	080173cc 	.word	0x080173cc
 8001dac:	080173b8 	.word	0x080173b8
 8001db0:	0801737c 	.word	0x0801737c
 8001db4:	080173a4 	.word	0x080173a4
 8001db8:	08017390 	.word	0x08017390
 8001dbc:	08017cb8 	.word	0x08017cb8
 8001dc0:	08017cb0 	.word	0x08017cb0
 8001dc4:	080173f4 	.word	0x080173f4
 8001dc8:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	da0e      	bge.n	8001dee <d_type+0x71e>
 8001dd0:	6900      	ldr	r0, [r0, #16]
 8001dd2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001dd4:	0119      	lsls	r1, r3, #4
 8001dd6:	1845      	adds	r5, r0, r1
 8001dd8:	3301      	adds	r3, #1
 8001dda:	2600      	movs	r6, #0
 8001ddc:	606e      	str	r6, [r5, #4]
 8001dde:	3208      	adds	r2, #8
 8001de0:	6163      	str	r3, [r4, #20]
 8001de2:	2627      	movs	r6, #39	; 0x27
 8001de4:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <d_type+0x7f0>)
 8001de6:	5446      	strb	r6, [r0, r1]
 8001de8:	60ab      	str	r3, [r5, #8]
 8001dea:	6322      	str	r2, [r4, #48]	; 0x30
 8001dec:	e4fb      	b.n	80017e6 <d_type+0x116>
 8001dee:	2300      	movs	r3, #0
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	deff      	udf	#255	; 0xff
 8001df6:	2600      	movs	r6, #0
 8001df8:	e6ce      	b.n	8001b98 <d_type+0x4c8>
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60e3      	str	r3, [r4, #12]
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7ff fa4e 	bl	80012a0 <d_template_args_1>
 8001e04:	462a      	mov	r2, r5
 8001e06:	4603      	mov	r3, r0
 8001e08:	2104      	movs	r1, #4
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f7fe f9e0 	bl	80001d0 <d_make_comp>
 8001e10:	9001      	str	r0, [sp, #4]
 8001e12:	e64a      	b.n	8001aaa <d_type+0x3da>
 8001e14:	2301      	movs	r3, #1
 8001e16:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001e18:	6363      	str	r3, [r4, #52]	; 0x34
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f7ff f82e 	bl	8000e7c <d_expression_1>
 8001e20:	6365      	str	r5, [r4, #52]	; 0x34
 8001e22:	4606      	mov	r6, r0
 8001e24:	2800      	cmp	r0, #0
 8001e26:	f43f ad04 	beq.w	8001832 <d_type+0x162>
 8001e2a:	68e5      	ldr	r5, [r4, #12]
 8001e2c:	782b      	ldrb	r3, [r5, #0]
 8001e2e:	e6b0      	b.n	8001b92 <d_type+0x4c2>
 8001e30:	4620      	mov	r0, r4
 8001e32:	f7ff faa1 	bl	8001378 <d_name>
 8001e36:	4605      	mov	r5, r0
 8001e38:	9001      	str	r0, [sp, #4]
 8001e3a:	2800      	cmp	r0, #0
 8001e3c:	f43f acf9 	beq.w	8001832 <d_type+0x162>
 8001e40:	7803      	ldrb	r3, [r0, #0]
 8001e42:	2b18      	cmp	r3, #24
 8001e44:	f47f ad71 	bne.w	800192a <d_type+0x25a>
 8001e48:	e4cd      	b.n	80017e6 <d_type+0x116>
 8001e4a:	1c73      	adds	r3, r6, #1
 8001e4c:	60e3      	str	r3, [r4, #12]
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001e54:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001e58:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001e5a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001e5c:	f7ff fa20 	bl	80012a0 <d_template_args_1>
 8001e60:	68e2      	ldr	r2, [r4, #12]
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	2a49      	cmp	r2, #73	; 0x49
 8001e66:	4603      	mov	r3, r0
 8001e68:	d00b      	beq.n	8001e82 <d_type+0x7b2>
 8001e6a:	6325      	str	r5, [r4, #48]	; 0x30
 8001e6c:	60e6      	str	r6, [r4, #12]
 8001e6e:	f8c4 9014 	str.w	r9, [r4, #20]
 8001e72:	f8c4 8020 	str.w	r8, [r4, #32]
 8001e76:	62a7      	str	r7, [r4, #40]	; 0x28
 8001e78:	9d01      	ldr	r5, [sp, #4]
 8001e7a:	e554      	b.n	8001926 <d_type+0x256>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	701b      	strb	r3, [r3, #0]
 8001e80:	deff      	udf	#255	; 0xff
 8001e82:	9901      	ldr	r1, [sp, #4]
 8001e84:	2900      	cmp	r1, #0
 8001e86:	f43f acd4 	beq.w	8001832 <d_type+0x162>
 8001e8a:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
 8001e8e:	4282      	cmp	r2, r0
 8001e90:	f6bf accf 	bge.w	8001832 <d_type+0x162>
 8001e94:	69e0      	ldr	r0, [r4, #28]
 8001e96:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8001e9a:	3201      	adds	r2, #1
 8001e9c:	6222      	str	r2, [r4, #32]
 8001e9e:	9a01      	ldr	r2, [sp, #4]
 8001ea0:	e5c9      	b.n	8001a36 <d_type+0x366>
 8001ea2:	f104 000c 	add.w	r0, r4, #12
 8001ea6:	f7fe fa8d 	bl	80003c4 <d_number.isra.1>
 8001eaa:	e74c      	b.n	8001d46 <d_type+0x676>
 8001eac:	3203      	adds	r2, #3
 8001eae:	2301      	movs	r3, #1
 8001eb0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001eb2:	60c2      	str	r2, [r0, #12]
 8001eb4:	6343      	str	r3, [r0, #52]	; 0x34
 8001eb6:	f7fe ffe1 	bl	8000e7c <d_expression_1>
 8001eba:	6366      	str	r6, [r4, #52]	; 0x34
 8001ebc:	4605      	mov	r5, r0
 8001ebe:	e680      	b.n	8001bc2 <d_type+0x4f2>
 8001ec0:	080173e0 	.word	0x080173e0

08001ec4 <d_operator_name>:
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec6:	68c3      	ldr	r3, [r0, #12]
 8001ec8:	781e      	ldrb	r6, [r3, #0]
 8001eca:	4686      	mov	lr, r0
 8001ecc:	b336      	cbz	r6, 8001f1c <d_operator_name+0x58>
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	60c2      	str	r2, [r0, #12]
 8001ed2:	785a      	ldrb	r2, [r3, #1]
 8001ed4:	781e      	ldrb	r6, [r3, #0]
 8001ed6:	2a00      	cmp	r2, #0
 8001ed8:	d04a      	beq.n	8001f70 <d_operator_name+0xac>
 8001eda:	1c9a      	adds	r2, r3, #2
 8001edc:	60c2      	str	r2, [r0, #12]
 8001ede:	2e76      	cmp	r6, #118	; 0x76
 8001ee0:	4604      	mov	r4, r0
 8001ee2:	f893 c001 	ldrb.w	ip, [r3, #1]
 8001ee6:	d145      	bne.n	8001f74 <d_operator_name+0xb0>
 8001ee8:	f1ac 0530 	sub.w	r5, ip, #48	; 0x30
 8001eec:	b2eb      	uxtb	r3, r5
 8001eee:	2b09      	cmp	r3, #9
 8001ef0:	d815      	bhi.n	8001f1e <d_operator_name+0x5a>
 8001ef2:	f7fe fae7 	bl	80004c4 <d_source_name>
 8001ef6:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8001efa:	428b      	cmp	r3, r1
 8001efc:	4602      	mov	r2, r0
 8001efe:	da21      	bge.n	8001f44 <d_operator_name+0x80>
 8001f00:	6926      	ldr	r6, [r4, #16]
 8001f02:	0119      	lsls	r1, r3, #4
 8001f04:	1870      	adds	r0, r6, r1
 8001f06:	3301      	adds	r3, #1
 8001f08:	2700      	movs	r7, #0
 8001f0a:	6047      	str	r7, [r0, #4]
 8001f0c:	6163      	str	r3, [r4, #20]
 8001f0e:	b1ca      	cbz	r2, 8001f44 <d_operator_name+0x80>
 8001f10:	2332      	movs	r3, #50	; 0x32
 8001f12:	6047      	str	r7, [r0, #4]
 8001f14:	5473      	strb	r3, [r6, r1]
 8001f16:	e9c0 5202 	strd	r5, r2, [r0, #8]
 8001f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f1c:	46b4      	mov	ip, r6
 8001f1e:	4c23      	ldr	r4, [pc, #140]	; (8001fac <d_operator_name+0xe8>)
 8001f20:	2043      	movs	r0, #67	; 0x43
 8001f22:	2200      	movs	r2, #0
 8001f24:	1a83      	subs	r3, r0, r2
 8001f26:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001f2a:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001f2e:	0119      	lsls	r1, r3, #4
 8001f30:	1867      	adds	r7, r4, r1
 8001f32:	5861      	ldr	r1, [r4, r1]
 8001f34:	780d      	ldrb	r5, [r1, #0]
 8001f36:	42b5      	cmp	r5, r6
 8001f38:	d006      	beq.n	8001f48 <d_operator_name+0x84>
 8001f3a:	bf94      	ite	ls
 8001f3c:	1c5a      	addls	r2, r3, #1
 8001f3e:	4618      	movhi	r0, r3
 8001f40:	4282      	cmp	r2, r0
 8001f42:	d1ef      	bne.n	8001f24 <d_operator_name+0x60>
 8001f44:	2000      	movs	r0, #0
 8001f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f48:	7849      	ldrb	r1, [r1, #1]
 8001f4a:	4561      	cmp	r1, ip
 8001f4c:	d1f5      	bne.n	8001f3a <d_operator_name+0x76>
 8001f4e:	e9de 3205 	ldrd	r3, r2, [lr, #20]
 8001f52:	4293      	cmp	r3, r2
 8001f54:	daf6      	bge.n	8001f44 <d_operator_name+0x80>
 8001f56:	f8de 1010 	ldr.w	r1, [lr, #16]
 8001f5a:	011a      	lsls	r2, r3, #4
 8001f5c:	1888      	adds	r0, r1, r2
 8001f5e:	3301      	adds	r3, #1
 8001f60:	2500      	movs	r5, #0
 8001f62:	2431      	movs	r4, #49	; 0x31
 8001f64:	6045      	str	r5, [r0, #4]
 8001f66:	f8ce 3014 	str.w	r3, [lr, #20]
 8001f6a:	548c      	strb	r4, [r1, r2]
 8001f6c:	6087      	str	r7, [r0, #8]
 8001f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f70:	4694      	mov	ip, r2
 8001f72:	e7d4      	b.n	8001f1e <d_operator_name+0x5a>
 8001f74:	2e63      	cmp	r6, #99	; 0x63
 8001f76:	d1d2      	bne.n	8001f1e <d_operator_name+0x5a>
 8001f78:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
 8001f7c:	d1cf      	bne.n	8001f1e <d_operator_name+0x5a>
 8001f7e:	e9d0 350d 	ldrd	r3, r5, [r0, #52]	; 0x34
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	6383      	str	r3, [r0, #56]	; 0x38
 8001f8a:	f7ff fba1 	bl	80016d0 <d_type>
 8001f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f90:	4602      	mov	r2, r0
 8001f92:	b92b      	cbnz	r3, 8001fa0 <d_operator_name+0xdc>
 8001f94:	2133      	movs	r1, #51	; 0x33
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7fe f91a 	bl	80001d0 <d_make_comp>
 8001f9c:	63a5      	str	r5, [r4, #56]	; 0x38
 8001f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2134      	movs	r1, #52	; 0x34
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7fe f913 	bl	80001d0 <d_make_comp>
 8001faa:	e7f7      	b.n	8001f9c <d_operator_name+0xd8>
 8001fac:	08017408 	.word	0x08017408

08001fb0 <d_parmlist>:
 8001fb0:	b530      	push	{r4, r5, lr}
 8001fb2:	68c2      	ldr	r2, [r0, #12]
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	7813      	ldrb	r3, [r2, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d036      	beq.n	800202e <d_parmlist+0x7e>
 8001fc0:	2b45      	cmp	r3, #69	; 0x45
 8001fc2:	d034      	beq.n	800202e <d_parmlist+0x7e>
 8001fc4:	2b2e      	cmp	r3, #46	; 0x2e
 8001fc6:	d032      	beq.n	800202e <d_parmlist+0x7e>
 8001fc8:	4604      	mov	r4, r0
 8001fca:	ad01      	add	r5, sp, #4
 8001fcc:	e015      	b.n	8001ffa <d_parmlist+0x4a>
 8001fce:	2b4f      	cmp	r3, #79	; 0x4f
 8001fd0:	d016      	beq.n	8002000 <d_parmlist+0x50>
 8001fd2:	f7ff fb7d 	bl	80016d0 <d_type>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	4602      	mov	r2, r0
 8001fda:	212e      	movs	r1, #46	; 0x2e
 8001fdc:	b338      	cbz	r0, 800202e <d_parmlist+0x7e>
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7fe f8f6 	bl	80001d0 <d_make_comp>
 8001fe4:	6028      	str	r0, [r5, #0]
 8001fe6:	b310      	cbz	r0, 800202e <d_parmlist+0x7e>
 8001fe8:	68e2      	ldr	r2, [r4, #12]
 8001fea:	7813      	ldrb	r3, [r2, #0]
 8001fec:	f100 050c 	add.w	r5, r0, #12
 8001ff0:	b14b      	cbz	r3, 8002006 <d_parmlist+0x56>
 8001ff2:	2b45      	cmp	r3, #69	; 0x45
 8001ff4:	d007      	beq.n	8002006 <d_parmlist+0x56>
 8001ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8001ff8:	d005      	beq.n	8002006 <d_parmlist+0x56>
 8001ffa:	2b52      	cmp	r3, #82	; 0x52
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	d1e6      	bne.n	8001fce <d_parmlist+0x1e>
 8002000:	7853      	ldrb	r3, [r2, #1]
 8002002:	2b45      	cmp	r3, #69	; 0x45
 8002004:	d1e5      	bne.n	8001fd2 <d_parmlist+0x22>
 8002006:	9801      	ldr	r0, [sp, #4]
 8002008:	b188      	cbz	r0, 800202e <d_parmlist+0x7e>
 800200a:	68c3      	ldr	r3, [r0, #12]
 800200c:	b10b      	cbz	r3, 8002012 <d_parmlist+0x62>
 800200e:	b003      	add	sp, #12
 8002010:	bd30      	pop	{r4, r5, pc}
 8002012:	6882      	ldr	r2, [r0, #8]
 8002014:	7811      	ldrb	r1, [r2, #0]
 8002016:	2927      	cmp	r1, #39	; 0x27
 8002018:	d1f9      	bne.n	800200e <d_parmlist+0x5e>
 800201a:	6892      	ldr	r2, [r2, #8]
 800201c:	7c11      	ldrb	r1, [r2, #16]
 800201e:	2909      	cmp	r1, #9
 8002020:	d1f5      	bne.n	800200e <d_parmlist+0x5e>
 8002022:	6851      	ldr	r1, [r2, #4]
 8002024:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002026:	1a52      	subs	r2, r2, r1
 8002028:	6322      	str	r2, [r4, #48]	; 0x30
 800202a:	6083      	str	r3, [r0, #8]
 800202c:	e7ef      	b.n	800200e <d_parmlist+0x5e>
 800202e:	2000      	movs	r0, #0
 8002030:	b003      	add	sp, #12
 8002032:	bd30      	pop	{r4, r5, pc}

08002034 <d_cv_qualifiers>:
 8002034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002038:	4689      	mov	r9, r1
 800203a:	b083      	sub	sp, #12
 800203c:	68c1      	ldr	r1, [r0, #12]
 800203e:	1e13      	subs	r3, r2, #0
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	4604      	mov	r4, r0
 8002044:	780b      	ldrb	r3, [r1, #0]
 8002046:	bf15      	itete	ne
 8002048:	f04f 081e 	movne.w	r8, #30
 800204c:	f04f 081b 	moveq.w	r8, #27
 8002050:	271d      	movne	r7, #29
 8002052:	271a      	moveq	r7, #26
 8002054:	bf14      	ite	ne
 8002056:	261c      	movne	r6, #28
 8002058:	2619      	moveq	r6, #25
 800205a:	464d      	mov	r5, r9
 800205c:	f04f 0a01 	mov.w	sl, #1
 8002060:	e01c      	b.n	800209c <d_cv_qualifiers+0x68>
 8002062:	2b56      	cmp	r3, #86	; 0x56
 8002064:	d03f      	beq.n	80020e6 <d_cv_qualifiers+0xb2>
 8002066:	2b4b      	cmp	r3, #75	; 0x4b
 8002068:	d043      	beq.n	80020f2 <d_cv_qualifiers+0xbe>
 800206a:	784b      	ldrb	r3, [r1, #1]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d035      	beq.n	80020dc <d_cv_qualifiers+0xa8>
 8002070:	1c8b      	adds	r3, r1, #2
 8002072:	60e3      	str	r3, [r4, #12]
 8002074:	784b      	ldrb	r3, [r1, #1]
 8002076:	2b78      	cmp	r3, #120	; 0x78
 8002078:	d041      	beq.n	80020fe <d_cv_qualifiers+0xca>
 800207a:	2b6f      	cmp	r3, #111	; 0x6f
 800207c:	d145      	bne.n	800210a <d_cv_qualifiers+0xd6>
 800207e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002080:	3309      	adds	r3, #9
 8002082:	6323      	str	r3, [r4, #48]	; 0x30
 8002084:	214e      	movs	r1, #78	; 0x4e
 8002086:	2300      	movs	r3, #0
 8002088:	2200      	movs	r2, #0
 800208a:	4620      	mov	r0, r4
 800208c:	f7fe f8a0 	bl	80001d0 <d_make_comp>
 8002090:	6028      	str	r0, [r5, #0]
 8002092:	b318      	cbz	r0, 80020dc <d_cv_qualifiers+0xa8>
 8002094:	68e1      	ldr	r1, [r4, #12]
 8002096:	780b      	ldrb	r3, [r1, #0]
 8002098:	f100 0508 	add.w	r5, r0, #8
 800209c:	2b72      	cmp	r3, #114	; 0x72
 800209e:	d00d      	beq.n	80020bc <d_cv_qualifiers+0x88>
 80020a0:	2b56      	cmp	r3, #86	; 0x56
 80020a2:	d00b      	beq.n	80020bc <d_cv_qualifiers+0x88>
 80020a4:	2b4b      	cmp	r3, #75	; 0x4b
 80020a6:	d009      	beq.n	80020bc <d_cv_qualifiers+0x88>
 80020a8:	2b44      	cmp	r3, #68	; 0x44
 80020aa:	d146      	bne.n	800213a <d_cv_qualifiers+0x106>
 80020ac:	784a      	ldrb	r2, [r1, #1]
 80020ae:	f002 00df 	and.w	r0, r2, #223	; 0xdf
 80020b2:	284f      	cmp	r0, #79	; 0x4f
 80020b4:	d002      	beq.n	80020bc <d_cv_qualifiers+0x88>
 80020b6:	3a77      	subs	r2, #119	; 0x77
 80020b8:	2a01      	cmp	r2, #1
 80020ba:	d83e      	bhi.n	800213a <d_cv_qualifiers+0x106>
 80020bc:	1c4a      	adds	r2, r1, #1
 80020be:	2b72      	cmp	r3, #114	; 0x72
 80020c0:	60e2      	str	r2, [r4, #12]
 80020c2:	d1ce      	bne.n	8002062 <d_cv_qualifiers+0x2e>
 80020c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020c6:	3309      	adds	r3, #9
 80020c8:	6323      	str	r3, [r4, #48]	; 0x30
 80020ca:	4631      	mov	r1, r6
 80020cc:	2300      	movs	r3, #0
 80020ce:	2200      	movs	r2, #0
 80020d0:	4620      	mov	r0, r4
 80020d2:	f7fe f87d 	bl	80001d0 <d_make_comp>
 80020d6:	6028      	str	r0, [r5, #0]
 80020d8:	2800      	cmp	r0, #0
 80020da:	d1db      	bne.n	8002094 <d_cv_qualifiers+0x60>
 80020dc:	2500      	movs	r5, #0
 80020de:	4628      	mov	r0, r5
 80020e0:	b003      	add	sp, #12
 80020e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020e8:	3309      	adds	r3, #9
 80020ea:	6323      	str	r3, [r4, #48]	; 0x30
 80020ec:	4639      	mov	r1, r7
 80020ee:	2300      	movs	r3, #0
 80020f0:	e7ca      	b.n	8002088 <d_cv_qualifiers+0x54>
 80020f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020f4:	3306      	adds	r3, #6
 80020f6:	6323      	str	r3, [r4, #48]	; 0x30
 80020f8:	4641      	mov	r1, r8
 80020fa:	2300      	movs	r3, #0
 80020fc:	e7c4      	b.n	8002088 <d_cv_qualifiers+0x54>
 80020fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002100:	3311      	adds	r3, #17
 8002102:	6323      	str	r3, [r4, #48]	; 0x30
 8002104:	214c      	movs	r1, #76	; 0x4c
 8002106:	2300      	movs	r3, #0
 8002108:	e7be      	b.n	8002088 <d_cv_qualifiers+0x54>
 800210a:	2b4f      	cmp	r3, #79	; 0x4f
 800210c:	d132      	bne.n	8002174 <d_cv_qualifiers+0x140>
 800210e:	e9d4 3b0c 	ldrd	r3, fp, [r4, #48]	; 0x30
 8002112:	3309      	adds	r3, #9
 8002114:	6323      	str	r3, [r4, #48]	; 0x30
 8002116:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
 800211a:	4620      	mov	r0, r4
 800211c:	f7fe feae 	bl	8000e7c <d_expression_1>
 8002120:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
 8002124:	4603      	mov	r3, r0
 8002126:	2800      	cmp	r0, #0
 8002128:	d0d8      	beq.n	80020dc <d_cv_qualifiers+0xa8>
 800212a:	68e2      	ldr	r2, [r4, #12]
 800212c:	7811      	ldrb	r1, [r2, #0]
 800212e:	2945      	cmp	r1, #69	; 0x45
 8002130:	d1d4      	bne.n	80020dc <d_cv_qualifiers+0xa8>
 8002132:	3201      	adds	r2, #1
 8002134:	60e2      	str	r2, [r4, #12]
 8002136:	214e      	movs	r1, #78	; 0x4e
 8002138:	e7a6      	b.n	8002088 <d_cv_qualifiers+0x54>
 800213a:	9a01      	ldr	r2, [sp, #4]
 800213c:	2a00      	cmp	r2, #0
 800213e:	d1ce      	bne.n	80020de <d_cv_qualifiers+0xaa>
 8002140:	2b46      	cmp	r3, #70	; 0x46
 8002142:	d1cc      	bne.n	80020de <d_cv_qualifiers+0xaa>
 8002144:	454d      	cmp	r5, r9
 8002146:	d0ca      	beq.n	80020de <d_cv_qualifiers+0xaa>
 8002148:	241d      	movs	r4, #29
 800214a:	201e      	movs	r0, #30
 800214c:	211c      	movs	r1, #28
 800214e:	e008      	b.n	8002162 <d_cv_qualifiers+0x12e>
 8002150:	2a1b      	cmp	r2, #27
 8002152:	d00d      	beq.n	8002170 <d_cv_qualifiers+0x13c>
 8002154:	2a19      	cmp	r2, #25
 8002156:	d100      	bne.n	800215a <d_cv_qualifiers+0x126>
 8002158:	7019      	strb	r1, [r3, #0]
 800215a:	f103 0908 	add.w	r9, r3, #8
 800215e:	454d      	cmp	r5, r9
 8002160:	d0bd      	beq.n	80020de <d_cv_qualifiers+0xaa>
 8002162:	f8d9 3000 	ldr.w	r3, [r9]
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	2a1a      	cmp	r2, #26
 800216a:	d1f1      	bne.n	8002150 <d_cv_qualifiers+0x11c>
 800216c:	701c      	strb	r4, [r3, #0]
 800216e:	e7f4      	b.n	800215a <d_cv_qualifiers+0x126>
 8002170:	7018      	strb	r0, [r3, #0]
 8002172:	e7f2      	b.n	800215a <d_cv_qualifiers+0x126>
 8002174:	2b77      	cmp	r3, #119	; 0x77
 8002176:	d1b1      	bne.n	80020dc <d_cv_qualifiers+0xa8>
 8002178:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800217a:	3306      	adds	r3, #6
 800217c:	6323      	str	r3, [r4, #48]	; 0x30
 800217e:	4620      	mov	r0, r4
 8002180:	f7ff ff16 	bl	8001fb0 <d_parmlist>
 8002184:	4603      	mov	r3, r0
 8002186:	2800      	cmp	r0, #0
 8002188:	d0a8      	beq.n	80020dc <d_cv_qualifiers+0xa8>
 800218a:	68e2      	ldr	r2, [r4, #12]
 800218c:	7811      	ldrb	r1, [r2, #0]
 800218e:	2945      	cmp	r1, #69	; 0x45
 8002190:	d1a4      	bne.n	80020dc <d_cv_qualifiers+0xa8>
 8002192:	3201      	adds	r2, #1
 8002194:	60e2      	str	r2, [r4, #12]
 8002196:	214f      	movs	r1, #79	; 0x4f
 8002198:	e776      	b.n	8002088 <d_cv_qualifiers+0x54>
 800219a:	bf00      	nop

0800219c <d_bare_function_type>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	68c3      	ldr	r3, [r0, #12]
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	2a4a      	cmp	r2, #74	; 0x4a
 80021a4:	4604      	mov	r4, r0
 80021a6:	d013      	beq.n	80021d0 <d_bare_function_type+0x34>
 80021a8:	b181      	cbz	r1, 80021cc <d_bare_function_type+0x30>
 80021aa:	4620      	mov	r0, r4
 80021ac:	f7ff fa90 	bl	80016d0 <d_type>
 80021b0:	4605      	mov	r5, r0
 80021b2:	b180      	cbz	r0, 80021d6 <d_bare_function_type+0x3a>
 80021b4:	4620      	mov	r0, r4
 80021b6:	f7ff fefb 	bl	8001fb0 <d_parmlist>
 80021ba:	b160      	cbz	r0, 80021d6 <d_bare_function_type+0x3a>
 80021bc:	4603      	mov	r3, r0
 80021be:	462a      	mov	r2, r5
 80021c0:	4620      	mov	r0, r4
 80021c2:	2129      	movs	r1, #41	; 0x29
 80021c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80021c8:	f7fe b802 	b.w	80001d0 <d_make_comp>
 80021cc:	460d      	mov	r5, r1
 80021ce:	e7f1      	b.n	80021b4 <d_bare_function_type+0x18>
 80021d0:	3301      	adds	r3, #1
 80021d2:	60c3      	str	r3, [r0, #12]
 80021d4:	e7e9      	b.n	80021aa <d_bare_function_type+0xe>
 80021d6:	2000      	movs	r0, #0
 80021d8:	bd70      	pop	{r4, r5, r6, pc}
 80021da:	bf00      	nop

080021dc <d_function_type>:
 80021dc:	68c3      	ldr	r3, [r0, #12]
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	2a46      	cmp	r2, #70	; 0x46
 80021e2:	d118      	bne.n	8002216 <d_function_type+0x3a>
 80021e4:	b510      	push	{r4, lr}
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	60c2      	str	r2, [r0, #12]
 80021ea:	785a      	ldrb	r2, [r3, #1]
 80021ec:	2a59      	cmp	r2, #89	; 0x59
 80021ee:	bf04      	itt	eq
 80021f0:	3302      	addeq	r3, #2
 80021f2:	60c3      	streq	r3, [r0, #12]
 80021f4:	2101      	movs	r1, #1
 80021f6:	4604      	mov	r4, r0
 80021f8:	f7ff ffd0 	bl	800219c <d_bare_function_type>
 80021fc:	4601      	mov	r1, r0
 80021fe:	4620      	mov	r0, r4
 8002200:	f7fe f82e 	bl	8000260 <d_ref_qualifier>
 8002204:	68e3      	ldr	r3, [r4, #12]
 8002206:	781a      	ldrb	r2, [r3, #0]
 8002208:	2a45      	cmp	r2, #69	; 0x45
 800220a:	d102      	bne.n	8002212 <d_function_type+0x36>
 800220c:	3301      	adds	r3, #1
 800220e:	60e3      	str	r3, [r4, #12]
 8002210:	bd10      	pop	{r4, pc}
 8002212:	2000      	movs	r0, #0
 8002214:	bd10      	pop	{r4, pc}
 8002216:	2000      	movs	r0, #0
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop

0800221c <d_unqualified_name>:
 800221c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002220:	68c1      	ldr	r1, [r0, #12]
 8002222:	780b      	ldrb	r3, [r1, #0]
 8002224:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002228:	2a09      	cmp	r2, #9
 800222a:	4604      	mov	r4, r0
 800222c:	d93c      	bls.n	80022a8 <d_unqualified_name+0x8c>
 800222e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002232:	2a19      	cmp	r2, #25
 8002234:	d922      	bls.n	800227c <d_unqualified_name+0x60>
 8002236:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
 800223a:	2a01      	cmp	r2, #1
 800223c:	d969      	bls.n	8002312 <d_unqualified_name+0xf6>
 800223e:	2b4c      	cmp	r3, #76	; 0x4c
 8002240:	d056      	beq.n	80022f0 <d_unqualified_name+0xd4>
 8002242:	2b55      	cmp	r3, #85	; 0x55
 8002244:	d15f      	bne.n	8002306 <d_unqualified_name+0xea>
 8002246:	784b      	ldrb	r3, [r1, #1]
 8002248:	2b6c      	cmp	r3, #108	; 0x6c
 800224a:	f000 80e5 	beq.w	8002418 <d_unqualified_name+0x1fc>
 800224e:	2b74      	cmp	r3, #116	; 0x74
 8002250:	d159      	bne.n	8002306 <d_unqualified_name+0xea>
 8002252:	1c4b      	adds	r3, r1, #1
 8002254:	60c3      	str	r3, [r0, #12]
 8002256:	784b      	ldrb	r3, [r1, #1]
 8002258:	2b74      	cmp	r3, #116	; 0x74
 800225a:	d158      	bne.n	800230e <d_unqualified_name+0xf2>
 800225c:	3102      	adds	r1, #2
 800225e:	60c1      	str	r1, [r0, #12]
 8002260:	f7fe f8f4 	bl	800044c <d_compact_number>
 8002264:	2800      	cmp	r0, #0
 8002266:	f2c0 8155 	blt.w	8002514 <d_unqualified_name+0x2f8>
 800226a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800226e:	4293      	cmp	r3, r2
 8002270:	68e7      	ldr	r7, [r4, #12]
 8002272:	f2c0 80f3 	blt.w	800245c <d_unqualified_name+0x240>
 8002276:	783b      	ldrb	r3, [r7, #0]
 8002278:	2500      	movs	r5, #0
 800227a:	e010      	b.n	800229e <d_unqualified_name+0x82>
 800227c:	2b6f      	cmp	r3, #111	; 0x6f
 800227e:	d104      	bne.n	800228a <d_unqualified_name+0x6e>
 8002280:	784b      	ldrb	r3, [r1, #1]
 8002282:	2b6e      	cmp	r3, #110	; 0x6e
 8002284:	bf04      	itt	eq
 8002286:	3102      	addeq	r1, #2
 8002288:	60c1      	streq	r1, [r0, #12]
 800228a:	4620      	mov	r0, r4
 800228c:	f7ff fe1a 	bl	8001ec4 <d_operator_name>
 8002290:	4605      	mov	r5, r0
 8002292:	b110      	cbz	r0, 800229a <d_unqualified_name+0x7e>
 8002294:	7803      	ldrb	r3, [r0, #0]
 8002296:	2b31      	cmp	r3, #49	; 0x31
 8002298:	d013      	beq.n	80022c2 <d_unqualified_name+0xa6>
 800229a:	68e3      	ldr	r3, [r4, #12]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b42      	cmp	r3, #66	; 0x42
 80022a0:	d009      	beq.n	80022b6 <d_unqualified_name+0x9a>
 80022a2:	4628      	mov	r0, r5
 80022a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022a8:	f7fe f90c 	bl	80004c4 <d_source_name>
 80022ac:	68e3      	ldr	r3, [r4, #12]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b42      	cmp	r3, #66	; 0x42
 80022b2:	4605      	mov	r5, r0
 80022b4:	d1f5      	bne.n	80022a2 <d_unqualified_name+0x86>
 80022b6:	4629      	mov	r1, r5
 80022b8:	4620      	mov	r0, r4
 80022ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022be:	f7fe b95b 	b.w	8000578 <d_abi_tags>
 80022c2:	6882      	ldr	r2, [r0, #8]
 80022c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022c6:	6896      	ldr	r6, [r2, #8]
 80022c8:	6810      	ldr	r0, [r2, #0]
 80022ca:	49a1      	ldr	r1, [pc, #644]	; (8002550 <d_unqualified_name+0x334>)
 80022cc:	3307      	adds	r3, #7
 80022ce:	4433      	add	r3, r6
 80022d0:	6323      	str	r3, [r4, #48]	; 0x30
 80022d2:	f004 fd3d 	bl	8006d50 <strcmp>
 80022d6:	2800      	cmp	r0, #0
 80022d8:	d1df      	bne.n	800229a <d_unqualified_name+0x7e>
 80022da:	4620      	mov	r0, r4
 80022dc:	f7fe f8f2 	bl	80004c4 <d_source_name>
 80022e0:	462a      	mov	r2, r5
 80022e2:	4603      	mov	r3, r0
 80022e4:	2136      	movs	r1, #54	; 0x36
 80022e6:	4620      	mov	r0, r4
 80022e8:	f7fd ff72 	bl	80001d0 <d_make_comp>
 80022ec:	4605      	mov	r5, r0
 80022ee:	e7d4      	b.n	800229a <d_unqualified_name+0x7e>
 80022f0:	3101      	adds	r1, #1
 80022f2:	60c1      	str	r1, [r0, #12]
 80022f4:	f7fe f8e6 	bl	80004c4 <d_source_name>
 80022f8:	4605      	mov	r5, r0
 80022fa:	b120      	cbz	r0, 8002306 <d_unqualified_name+0xea>
 80022fc:	4620      	mov	r0, r4
 80022fe:	f7fe fa0f 	bl	8000720 <d_discriminator>
 8002302:	2800      	cmp	r0, #0
 8002304:	d1c9      	bne.n	800229a <d_unqualified_name+0x7e>
 8002306:	2500      	movs	r5, #0
 8002308:	4628      	mov	r0, r5
 800230a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800230e:	2500      	movs	r5, #0
 8002310:	e7c5      	b.n	800229e <d_unqualified_name+0x82>
 8002312:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002314:	b132      	cbz	r2, 8002324 <d_unqualified_name+0x108>
 8002316:	7810      	ldrb	r0, [r2, #0]
 8002318:	b9e0      	cbnz	r0, 8002354 <d_unqualified_name+0x138>
 800231a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800231c:	68d0      	ldr	r0, [r2, #12]
 800231e:	4403      	add	r3, r0
 8002320:	6323      	str	r3, [r4, #48]	; 0x30
 8002322:	780b      	ldrb	r3, [r1, #0]
 8002324:	2b43      	cmp	r3, #67	; 0x43
 8002326:	d018      	beq.n	800235a <d_unqualified_name+0x13e>
 8002328:	2b44      	cmp	r3, #68	; 0x44
 800232a:	d1f0      	bne.n	800230e <d_unqualified_name+0xf2>
 800232c:	784b      	ldrb	r3, [r1, #1]
 800232e:	3b30      	subs	r3, #48	; 0x30
 8002330:	2b05      	cmp	r3, #5
 8002332:	d8e8      	bhi.n	8002306 <d_unqualified_name+0xea>
 8002334:	a001      	add	r0, pc, #4	; (adr r0, 800233c <d_unqualified_name+0x120>)
 8002336:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800233a:	bf00      	nop
 800233c:	080023ad 	.word	0x080023ad
 8002340:	08002377 	.word	0x08002377
 8002344:	080023bf 	.word	0x080023bf
 8002348:	08002307 	.word	0x08002307
 800234c:	080023b9 	.word	0x080023b9
 8002350:	080023b3 	.word	0x080023b3
 8002354:	2818      	cmp	r0, #24
 8002356:	d1e5      	bne.n	8002324 <d_unqualified_name+0x108>
 8002358:	e7df      	b.n	800231a <d_unqualified_name+0xfe>
 800235a:	784b      	ldrb	r3, [r1, #1]
 800235c:	2b49      	cmp	r3, #73	; 0x49
 800235e:	f000 80b0 	beq.w	80024c2 <d_unqualified_name+0x2a6>
 8002362:	3b31      	subs	r3, #49	; 0x31
 8002364:	2b04      	cmp	r3, #4
 8002366:	d8ce      	bhi.n	8002306 <d_unqualified_name+0xea>
 8002368:	e8df f013 	tbh	[pc, r3, lsl #1]
 800236c:	005100ed 	.word	0x005100ed
 8002370:	0047004c 	.word	0x0047004c
 8002374:	002c      	.short	0x002c
 8002376:	f04f 0c02 	mov.w	ip, #2
 800237a:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800237e:	1c8d      	adds	r5, r1, #2
 8002380:	4283      	cmp	r3, r0
 8002382:	60e5      	str	r5, [r4, #12]
 8002384:	f280 80d0 	bge.w	8002528 <d_unqualified_name+0x30c>
 8002388:	6926      	ldr	r6, [r4, #16]
 800238a:	0118      	lsls	r0, r3, #4
 800238c:	1835      	adds	r5, r6, r0
 800238e:	3301      	adds	r3, #1
 8002390:	2700      	movs	r7, #0
 8002392:	606f      	str	r7, [r5, #4]
 8002394:	6163      	str	r3, [r4, #20]
 8002396:	2a00      	cmp	r2, #0
 8002398:	f000 80cf 	beq.w	800253a <d_unqualified_name+0x31e>
 800239c:	2308      	movs	r3, #8
 800239e:	606f      	str	r7, [r5, #4]
 80023a0:	5433      	strb	r3, [r6, r0]
 80023a2:	f885 c008 	strb.w	ip, [r5, #8]
 80023a6:	60ea      	str	r2, [r5, #12]
 80023a8:	788b      	ldrb	r3, [r1, #2]
 80023aa:	e778      	b.n	800229e <d_unqualified_name+0x82>
 80023ac:	f04f 0c01 	mov.w	ip, #1
 80023b0:	e7e3      	b.n	800237a <d_unqualified_name+0x15e>
 80023b2:	f04f 0c05 	mov.w	ip, #5
 80023b6:	e7e0      	b.n	800237a <d_unqualified_name+0x15e>
 80023b8:	f04f 0c04 	mov.w	ip, #4
 80023bc:	e7dd      	b.n	800237a <d_unqualified_name+0x15e>
 80023be:	f04f 0c03 	mov.w	ip, #3
 80023c2:	e7da      	b.n	800237a <d_unqualified_name+0x15e>
 80023c4:	3102      	adds	r1, #2
 80023c6:	60e1      	str	r1, [r4, #12]
 80023c8:	f04f 0805 	mov.w	r8, #5
 80023cc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80023d0:	4283      	cmp	r3, r0
 80023d2:	f280 80ac 	bge.w	800252e <d_unqualified_name+0x312>
 80023d6:	6926      	ldr	r6, [r4, #16]
 80023d8:	0118      	lsls	r0, r3, #4
 80023da:	1835      	adds	r5, r6, r0
 80023dc:	3301      	adds	r3, #1
 80023de:	2700      	movs	r7, #0
 80023e0:	606f      	str	r7, [r5, #4]
 80023e2:	6163      	str	r3, [r4, #20]
 80023e4:	2a00      	cmp	r2, #0
 80023e6:	f000 80ab 	beq.w	8002540 <d_unqualified_name+0x324>
 80023ea:	2307      	movs	r3, #7
 80023ec:	606f      	str	r7, [r5, #4]
 80023ee:	5433      	strb	r3, [r6, r0]
 80023f0:	f885 8008 	strb.w	r8, [r5, #8]
 80023f4:	60ea      	str	r2, [r5, #12]
 80023f6:	780b      	ldrb	r3, [r1, #0]
 80023f8:	e751      	b.n	800229e <d_unqualified_name+0x82>
 80023fa:	3102      	adds	r1, #2
 80023fc:	60e1      	str	r1, [r4, #12]
 80023fe:	f04f 0804 	mov.w	r8, #4
 8002402:	e7e3      	b.n	80023cc <d_unqualified_name+0x1b0>
 8002404:	3102      	adds	r1, #2
 8002406:	60e1      	str	r1, [r4, #12]
 8002408:	f04f 0803 	mov.w	r8, #3
 800240c:	e7de      	b.n	80023cc <d_unqualified_name+0x1b0>
 800240e:	3102      	adds	r1, #2
 8002410:	60e1      	str	r1, [r4, #12]
 8002412:	f04f 0802 	mov.w	r8, #2
 8002416:	e7d9      	b.n	80023cc <d_unqualified_name+0x1b0>
 8002418:	1c4b      	adds	r3, r1, #1
 800241a:	60c3      	str	r3, [r0, #12]
 800241c:	784b      	ldrb	r3, [r1, #1]
 800241e:	2b6c      	cmp	r3, #108	; 0x6c
 8002420:	f47f af75 	bne.w	800230e <d_unqualified_name+0xf2>
 8002424:	3102      	adds	r1, #2
 8002426:	60c1      	str	r1, [r0, #12]
 8002428:	f7ff fdc2 	bl	8001fb0 <d_parmlist>
 800242c:	4606      	mov	r6, r0
 800242e:	2800      	cmp	r0, #0
 8002430:	d070      	beq.n	8002514 <d_unqualified_name+0x2f8>
 8002432:	68e2      	ldr	r2, [r4, #12]
 8002434:	7813      	ldrb	r3, [r2, #0]
 8002436:	2b45      	cmp	r3, #69	; 0x45
 8002438:	f47f af69 	bne.w	800230e <d_unqualified_name+0xf2>
 800243c:	3201      	adds	r2, #1
 800243e:	60e2      	str	r2, [r4, #12]
 8002440:	4620      	mov	r0, r4
 8002442:	f7fe f803 	bl	800044c <d_compact_number>
 8002446:	f1b0 0e00 	subs.w	lr, r0, #0
 800244a:	db63      	blt.n	8002514 <d_unqualified_name+0x2f8>
 800244c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002450:	4293      	cmp	r3, r2
 8002452:	68e0      	ldr	r0, [r4, #12]
 8002454:	db1b      	blt.n	800248e <d_unqualified_name+0x272>
 8002456:	7803      	ldrb	r3, [r0, #0]
 8002458:	2500      	movs	r5, #0
 800245a:	e720      	b.n	800229e <d_unqualified_name+0x82>
 800245c:	6926      	ldr	r6, [r4, #16]
 800245e:	6a22      	ldr	r2, [r4, #32]
 8002460:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 8002464:	0119      	lsls	r1, r3, #4
 8002466:	1875      	adds	r5, r6, r1
 8002468:	3301      	adds	r3, #1
 800246a:	f04f 0c00 	mov.w	ip, #0
 800246e:	f8c5 c004 	str.w	ip, [r5, #4]
 8002472:	4572      	cmp	r2, lr
 8002474:	6163      	str	r3, [r4, #20]
 8002476:	f04f 0347 	mov.w	r3, #71	; 0x47
 800247a:	5473      	strb	r3, [r6, r1]
 800247c:	60a8      	str	r0, [r5, #8]
 800247e:	da4d      	bge.n	800251c <d_unqualified_name+0x300>
 8002480:	69e3      	ldr	r3, [r4, #28]
 8002482:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8002486:	3201      	adds	r2, #1
 8002488:	6222      	str	r2, [r4, #32]
 800248a:	783b      	ldrb	r3, [r7, #0]
 800248c:	e707      	b.n	800229e <d_unqualified_name+0x82>
 800248e:	6927      	ldr	r7, [r4, #16]
 8002490:	6a22      	ldr	r2, [r4, #32]
 8002492:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8002496:	0119      	lsls	r1, r3, #4
 8002498:	187d      	adds	r5, r7, r1
 800249a:	3301      	adds	r3, #1
 800249c:	f04f 0c00 	mov.w	ip, #0
 80024a0:	f8c5 c004 	str.w	ip, [r5, #4]
 80024a4:	4542      	cmp	r2, r8
 80024a6:	6163      	str	r3, [r4, #20]
 80024a8:	f04f 0345 	mov.w	r3, #69	; 0x45
 80024ac:	547b      	strb	r3, [r7, r1]
 80024ae:	e9c5 6e02 	strd	r6, lr, [r5, #8]
 80024b2:	da36      	bge.n	8002522 <d_unqualified_name+0x306>
 80024b4:	69e3      	ldr	r3, [r4, #28]
 80024b6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80024ba:	3201      	adds	r2, #1
 80024bc:	6222      	str	r2, [r4, #32]
 80024be:	7803      	ldrb	r3, [r0, #0]
 80024c0:	e6ed      	b.n	800229e <d_unqualified_name+0x82>
 80024c2:	1c4b      	adds	r3, r1, #1
 80024c4:	60e3      	str	r3, [r4, #12]
 80024c6:	788b      	ldrb	r3, [r1, #2]
 80024c8:	3b31      	subs	r3, #49	; 0x31
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d832      	bhi.n	8002534 <d_unqualified_name+0x318>
 80024ce:	e8df f003 	tbb	[pc, r3]
 80024d2:	1c03      	.short	0x1c03
 80024d4:	1217      	.short	0x1217
 80024d6:	0d          	.byte	0x0d
 80024d7:	00          	.byte	0x00
 80024d8:	3103      	adds	r1, #3
 80024da:	60e1      	str	r1, [r4, #12]
 80024dc:	f04f 0801 	mov.w	r8, #1
 80024e0:	4620      	mov	r0, r4
 80024e2:	f7ff f8f5 	bl	80016d0 <d_type>
 80024e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024e8:	68e1      	ldr	r1, [r4, #12]
 80024ea:	e76f      	b.n	80023cc <d_unqualified_name+0x1b0>
 80024ec:	3103      	adds	r1, #3
 80024ee:	60e1      	str	r1, [r4, #12]
 80024f0:	f04f 0805 	mov.w	r8, #5
 80024f4:	e7f4      	b.n	80024e0 <d_unqualified_name+0x2c4>
 80024f6:	3103      	adds	r1, #3
 80024f8:	60e1      	str	r1, [r4, #12]
 80024fa:	f04f 0804 	mov.w	r8, #4
 80024fe:	e7ef      	b.n	80024e0 <d_unqualified_name+0x2c4>
 8002500:	3103      	adds	r1, #3
 8002502:	60e1      	str	r1, [r4, #12]
 8002504:	f04f 0803 	mov.w	r8, #3
 8002508:	e7ea      	b.n	80024e0 <d_unqualified_name+0x2c4>
 800250a:	3103      	adds	r1, #3
 800250c:	60e1      	str	r1, [r4, #12]
 800250e:	f04f 0802 	mov.w	r8, #2
 8002512:	e7e5      	b.n	80024e0 <d_unqualified_name+0x2c4>
 8002514:	68e3      	ldr	r3, [r4, #12]
 8002516:	2500      	movs	r5, #0
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	e6c0      	b.n	800229e <d_unqualified_name+0x82>
 800251c:	783b      	ldrb	r3, [r7, #0]
 800251e:	4665      	mov	r5, ip
 8002520:	e6bd      	b.n	800229e <d_unqualified_name+0x82>
 8002522:	7803      	ldrb	r3, [r0, #0]
 8002524:	4665      	mov	r5, ip
 8002526:	e6ba      	b.n	800229e <d_unqualified_name+0x82>
 8002528:	788b      	ldrb	r3, [r1, #2]
 800252a:	2500      	movs	r5, #0
 800252c:	e6b7      	b.n	800229e <d_unqualified_name+0x82>
 800252e:	780b      	ldrb	r3, [r1, #0]
 8002530:	2500      	movs	r5, #0
 8002532:	e6b4      	b.n	800229e <d_unqualified_name+0x82>
 8002534:	784b      	ldrb	r3, [r1, #1]
 8002536:	2500      	movs	r5, #0
 8002538:	e6b1      	b.n	800229e <d_unqualified_name+0x82>
 800253a:	788b      	ldrb	r3, [r1, #2]
 800253c:	4615      	mov	r5, r2
 800253e:	e6ae      	b.n	800229e <d_unqualified_name+0x82>
 8002540:	780b      	ldrb	r3, [r1, #0]
 8002542:	4615      	mov	r5, r2
 8002544:	e6ab      	b.n	800229e <d_unqualified_name+0x82>
 8002546:	3102      	adds	r1, #2
 8002548:	60e1      	str	r1, [r4, #12]
 800254a:	f04f 0801 	mov.w	r8, #1
 800254e:	e73d      	b.n	80023cc <d_unqualified_name+0x1b0>
 8002550:	08017cc8 	.word	0x08017cc8

08002554 <d_encoding>:
 8002554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002558:	68c3      	ldr	r3, [r0, #12]
 800255a:	781a      	ldrb	r2, [r3, #0]
 800255c:	2a47      	cmp	r2, #71	; 0x47
 800255e:	4604      	mov	r4, r0
 8002560:	d019      	beq.n	8002596 <d_encoding+0x42>
 8002562:	2a54      	cmp	r2, #84	; 0x54
 8002564:	d017      	beq.n	8002596 <d_encoding+0x42>
 8002566:	460e      	mov	r6, r1
 8002568:	f7fe ff06 	bl	8001378 <d_name>
 800256c:	4605      	mov	r5, r0
 800256e:	2800      	cmp	r0, #0
 8002570:	d07d      	beq.n	800266e <d_encoding+0x11a>
 8002572:	2e00      	cmp	r6, #0
 8002574:	d057      	beq.n	8002626 <d_encoding+0xd2>
 8002576:	68a3      	ldr	r3, [r4, #8]
 8002578:	07db      	lsls	r3, r3, #31
 800257a:	d454      	bmi.n	8002626 <d_encoding+0xd2>
 800257c:	e000      	b.n	8002580 <d_encoding+0x2c>
 800257e:	68ad      	ldr	r5, [r5, #8]
 8002580:	782b      	ldrb	r3, [r5, #0]
 8002582:	f1a3 021c 	sub.w	r2, r3, #28
 8002586:	2a04      	cmp	r2, #4
 8002588:	d9f9      	bls.n	800257e <d_encoding+0x2a>
 800258a:	2b02      	cmp	r3, #2
 800258c:	f000 8186 	beq.w	800289c <d_encoding+0x348>
 8002590:	4628      	mov	r0, r5
 8002592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002596:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002598:	f101 0214 	add.w	r2, r1, #20
 800259c:	6322      	str	r2, [r4, #48]	; 0x30
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	2a54      	cmp	r2, #84	; 0x54
 80025a2:	d068      	beq.n	8002676 <d_encoding+0x122>
 80025a4:	2a47      	cmp	r2, #71	; 0x47
 80025a6:	d162      	bne.n	800266e <d_encoding+0x11a>
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	60e2      	str	r2, [r4, #12]
 80025ac:	785a      	ldrb	r2, [r3, #1]
 80025ae:	2a00      	cmp	r2, #0
 80025b0:	d05d      	beq.n	800266e <d_encoding+0x11a>
 80025b2:	1c9a      	adds	r2, r3, #2
 80025b4:	60e2      	str	r2, [r4, #12]
 80025b6:	785a      	ldrb	r2, [r3, #1]
 80025b8:	3a41      	subs	r2, #65	; 0x41
 80025ba:	2a31      	cmp	r2, #49	; 0x31
 80025bc:	d857      	bhi.n	800266e <d_encoding+0x11a>
 80025be:	e8df f012 	tbh	[pc, r2, lsl #1]
 80025c2:	013e      	.short	0x013e
 80025c4:	00560056 	.word	0x00560056
 80025c8:	00560056 	.word	0x00560056
 80025cc:	00560056 	.word	0x00560056
 80025d0:	00560056 	.word	0x00560056
 80025d4:	00560056 	.word	0x00560056
 80025d8:	00560056 	.word	0x00560056
 80025dc:	00560056 	.word	0x00560056
 80025e0:	00560056 	.word	0x00560056
 80025e4:	0056014a 	.word	0x0056014a
 80025e8:	00560159 	.word	0x00560159
 80025ec:	005600e0 	.word	0x005600e0
 80025f0:	00560056 	.word	0x00560056
 80025f4:	00560056 	.word	0x00560056
 80025f8:	00560056 	.word	0x00560056
 80025fc:	00560056 	.word	0x00560056
 8002600:	00560056 	.word	0x00560056
 8002604:	00560056 	.word	0x00560056
 8002608:	00560056 	.word	0x00560056
 800260c:	00560056 	.word	0x00560056
 8002610:	00560056 	.word	0x00560056
 8002614:	00560056 	.word	0x00560056
 8002618:	00560056 	.word	0x00560056
 800261c:	00560056 	.word	0x00560056
 8002620:	00560056 	.word	0x00560056
 8002624:	00eb      	.short	0x00eb
 8002626:	68e3      	ldr	r3, [r4, #12]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0b0      	beq.n	8002590 <d_encoding+0x3c>
 800262e:	2b45      	cmp	r3, #69	; 0x45
 8002630:	d0ae      	beq.n	8002590 <d_encoding+0x3c>
 8002632:	4629      	mov	r1, r5
 8002634:	780b      	ldrb	r3, [r1, #0]
 8002636:	2b20      	cmp	r3, #32
 8002638:	f200 8218 	bhi.w	8002a6c <d_encoding+0x518>
 800263c:	2b1c      	cmp	r3, #28
 800263e:	f080 821e 	bcs.w	8002a7e <d_encoding+0x52a>
 8002642:	2b04      	cmp	r3, #4
 8002644:	f040 8091 	bne.w	800276a <d_encoding+0x216>
 8002648:	688a      	ldr	r2, [r1, #8]
 800264a:	b16a      	cbz	r2, 8002668 <d_encoding+0x114>
 800264c:	7813      	ldrb	r3, [r2, #0]
 800264e:	2b08      	cmp	r3, #8
 8002650:	f103 31ff 	add.w	r1, r3, #4294967295
 8002654:	f200 8086 	bhi.w	8002764 <d_encoding+0x210>
 8002658:	2b07      	cmp	r3, #7
 800265a:	f080 8086 	bcs.w	800276a <d_encoding+0x216>
 800265e:	2901      	cmp	r1, #1
 8002660:	d802      	bhi.n	8002668 <d_encoding+0x114>
 8002662:	68d2      	ldr	r2, [r2, #12]
 8002664:	2a00      	cmp	r2, #0
 8002666:	d1f1      	bne.n	800264c <d_encoding+0xf8>
 8002668:	2101      	movs	r1, #1
 800266a:	e07f      	b.n	800276c <d_encoding+0x218>
 800266c:	60e7      	str	r7, [r4, #12]
 800266e:	2500      	movs	r5, #0
 8002670:	4628      	mov	r0, r5
 8002672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	60e2      	str	r2, [r4, #12]
 800267a:	785a      	ldrb	r2, [r3, #1]
 800267c:	2a00      	cmp	r2, #0
 800267e:	d0f6      	beq.n	800266e <d_encoding+0x11a>
 8002680:	1c9a      	adds	r2, r3, #2
 8002682:	60e2      	str	r2, [r4, #12]
 8002684:	785b      	ldrb	r3, [r3, #1]
 8002686:	3b43      	subs	r3, #67	; 0x43
 8002688:	2b33      	cmp	r3, #51	; 0x33
 800268a:	d8f0      	bhi.n	800266e <d_encoding+0x11a>
 800268c:	a201      	add	r2, pc, #4	; (adr r2, 8002694 <d_encoding+0x140>)
 800268e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002692:	bf00      	nop
 8002694:	080029e9 	.word	0x080029e9
 8002698:	0800266f 	.word	0x0800266f
 800269c:	0800266f 	.word	0x0800266f
 80026a0:	080029d3 	.word	0x080029d3
 80026a4:	0800266f 	.word	0x0800266f
 80026a8:	080029bd 	.word	0x080029bd
 80026ac:	080029a7 	.word	0x080029a7
 80026b0:	08002991 	.word	0x08002991
 80026b4:	0800266f 	.word	0x0800266f
 80026b8:	0800266f 	.word	0x0800266f
 80026bc:	0800266f 	.word	0x0800266f
 80026c0:	0800266f 	.word	0x0800266f
 80026c4:	0800266f 	.word	0x0800266f
 80026c8:	0800266f 	.word	0x0800266f
 80026cc:	0800266f 	.word	0x0800266f
 80026d0:	0800266f 	.word	0x0800266f
 80026d4:	0800297b 	.word	0x0800297b
 80026d8:	08002961 	.word	0x08002961
 80026dc:	0800266f 	.word	0x0800266f
 80026e0:	08002947 	.word	0x08002947
 80026e4:	08002931 	.word	0x08002931
 80026e8:	0800266f 	.word	0x0800266f
 80026ec:	0800266f 	.word	0x0800266f
 80026f0:	0800266f 	.word	0x0800266f
 80026f4:	0800266f 	.word	0x0800266f
 80026f8:	0800266f 	.word	0x0800266f
 80026fc:	0800266f 	.word	0x0800266f
 8002700:	0800266f 	.word	0x0800266f
 8002704:	0800266f 	.word	0x0800266f
 8002708:	0800266f 	.word	0x0800266f
 800270c:	0800266f 	.word	0x0800266f
 8002710:	0800266f 	.word	0x0800266f
 8002714:	080028fd 	.word	0x080028fd
 8002718:	0800266f 	.word	0x0800266f
 800271c:	0800266f 	.word	0x0800266f
 8002720:	0800266f 	.word	0x0800266f
 8002724:	0800266f 	.word	0x0800266f
 8002728:	080028d7 	.word	0x080028d7
 800272c:	0800266f 	.word	0x0800266f
 8002730:	0800266f 	.word	0x0800266f
 8002734:	0800266f 	.word	0x0800266f
 8002738:	0800266f 	.word	0x0800266f
 800273c:	0800266f 	.word	0x0800266f
 8002740:	0800266f 	.word	0x0800266f
 8002744:	0800266f 	.word	0x0800266f
 8002748:	0800266f 	.word	0x0800266f
 800274c:	0800266f 	.word	0x0800266f
 8002750:	0800266f 	.word	0x0800266f
 8002754:	0800266f 	.word	0x0800266f
 8002758:	0800266f 	.word	0x0800266f
 800275c:	0800266f 	.word	0x0800266f
 8002760:	080028b1 	.word	0x080028b1
 8002764:	2b34      	cmp	r3, #52	; 0x34
 8002766:	f47f af7f 	bne.w	8002668 <d_encoding+0x114>
 800276a:	2100      	movs	r1, #0
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff fd15 	bl	800219c <d_bare_function_type>
 8002772:	462a      	mov	r2, r5
 8002774:	4603      	mov	r3, r0
 8002776:	2103      	movs	r1, #3
 8002778:	4620      	mov	r0, r4
 800277a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800277e:	f7fd bd27 	b.w	80001d0 <d_make_comp>
 8002782:	4620      	mov	r0, r4
 8002784:	f7fe fdf8 	bl	8001378 <d_name>
 8002788:	2300      	movs	r3, #0
 800278a:	4602      	mov	r2, r0
 800278c:	2113      	movs	r1, #19
 800278e:	4620      	mov	r0, r4
 8002790:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002794:	f7fd bd1c 	b.w	80001d0 <d_make_comp>
 8002798:	f104 000c 	add.w	r0, r4, #12
 800279c:	f7fd fe12 	bl	80003c4 <d_number.isra.1>
 80027a0:	2801      	cmp	r0, #1
 80027a2:	f77f af64 	ble.w	800266e <d_encoding+0x11a>
 80027a6:	68e3      	ldr	r3, [r4, #12]
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	2a00      	cmp	r2, #0
 80027ac:	f43f af5f 	beq.w	800266e <d_encoding+0x11a>
 80027b0:	1c5f      	adds	r7, r3, #1
 80027b2:	60e7      	str	r7, [r4, #12]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b5f      	cmp	r3, #95	; 0x5f
 80027b8:	f47f af59 	bne.w	800266e <d_encoding+0x11a>
 80027bc:	2200      	movs	r2, #0
 80027be:	1e45      	subs	r5, r0, #1
 80027c0:	4690      	mov	r8, r2
 80027c2:	f04f 0940 	mov.w	r9, #64	; 0x40
 80027c6:	783b      	ldrb	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f43f af50 	beq.w	800266e <d_encoding+0x11a>
 80027ce:	2b24      	cmp	r3, #36	; 0x24
 80027d0:	f040 812a 	bne.w	8002a28 <d_encoding+0x4d4>
 80027d4:	787b      	ldrb	r3, [r7, #1]
 80027d6:	2b53      	cmp	r3, #83	; 0x53
 80027d8:	f000 8156 	beq.w	8002a88 <d_encoding+0x534>
 80027dc:	2b5f      	cmp	r3, #95	; 0x5f
 80027de:	f000 8155 	beq.w	8002a8c <d_encoding+0x538>
 80027e2:	2b24      	cmp	r3, #36	; 0x24
 80027e4:	f47f af43 	bne.w	800266e <d_encoding+0x11a>
 80027e8:	4619      	mov	r1, r3
 80027ea:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 80027ee:	68e7      	ldr	r7, [r4, #12]
 80027f0:	4298      	cmp	r0, r3
 80027f2:	f107 0702 	add.w	r7, r7, #2
 80027f6:	f6bf af39 	bge.w	800266c <d_encoding+0x118>
 80027fa:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80027fe:	0106      	lsls	r6, r0, #4
 8002800:	eb0c 0306 	add.w	r3, ip, r6
 8002804:	3001      	adds	r0, #1
 8002806:	f8c3 8004 	str.w	r8, [r3, #4]
 800280a:	3d02      	subs	r5, #2
 800280c:	6160      	str	r0, [r4, #20]
 800280e:	f80c 9006 	strb.w	r9, [ip, r6]
 8002812:	6099      	str	r1, [r3, #8]
 8002814:	60e7      	str	r7, [r4, #12]
 8002816:	2a00      	cmp	r2, #0
 8002818:	f000 8126 	beq.w	8002a68 <d_encoding+0x514>
 800281c:	213f      	movs	r1, #63	; 0x3f
 800281e:	4620      	mov	r0, r4
 8002820:	f7fd fcd6 	bl	80001d0 <d_make_comp>
 8002824:	4602      	mov	r2, r0
 8002826:	2800      	cmp	r0, #0
 8002828:	f43f af21 	beq.w	800266e <d_encoding+0x11a>
 800282c:	2d00      	cmp	r5, #0
 800282e:	dcca      	bgt.n	80027c6 <d_encoding+0x272>
 8002830:	4620      	mov	r0, r4
 8002832:	2300      	movs	r3, #0
 8002834:	213e      	movs	r1, #62	; 0x3e
 8002836:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800283a:	f7fd bcc9 	b.w	80001d0 <d_make_comp>
 800283e:	2100      	movs	r1, #0
 8002840:	4620      	mov	r0, r4
 8002842:	f7ff fe87 	bl	8002554 <d_encoding>
 8002846:	2300      	movs	r3, #0
 8002848:	4602      	mov	r2, r0
 800284a:	2117      	movs	r1, #23
 800284c:	4620      	mov	r0, r4
 800284e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002852:	f7fd bcbd 	b.w	80001d0 <d_make_comp>
 8002856:	4620      	mov	r0, r4
 8002858:	f7fe fd8e 	bl	8001378 <d_name>
 800285c:	4605      	mov	r5, r0
 800285e:	4620      	mov	r0, r4
 8002860:	f7fd fddc 	bl	800041c <d_number_component>
 8002864:	462a      	mov	r2, r5
 8002866:	4603      	mov	r3, r0
 8002868:	2116      	movs	r1, #22
 800286a:	4620      	mov	r0, r4
 800286c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002870:	f7fd bcae 	b.w	80001d0 <d_make_comp>
 8002874:	789a      	ldrb	r2, [r3, #2]
 8002876:	2100      	movs	r1, #0
 8002878:	4620      	mov	r0, r4
 800287a:	b12a      	cbz	r2, 8002888 <d_encoding+0x334>
 800287c:	1cda      	adds	r2, r3, #3
 800287e:	60e2      	str	r2, [r4, #12]
 8002880:	789b      	ldrb	r3, [r3, #2]
 8002882:	2b6e      	cmp	r3, #110	; 0x6e
 8002884:	f000 8109 	beq.w	8002a9a <d_encoding+0x546>
 8002888:	f7ff fe64 	bl	8002554 <d_encoding>
 800288c:	2300      	movs	r3, #0
 800288e:	4602      	mov	r2, r0
 8002890:	2148      	movs	r1, #72	; 0x48
 8002892:	4620      	mov	r0, r4
 8002894:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002898:	f7fd bc9a 	b.w	80001d0 <d_make_comp>
 800289c:	68ea      	ldr	r2, [r5, #12]
 800289e:	e000      	b.n	80028a2 <d_encoding+0x34e>
 80028a0:	6892      	ldr	r2, [r2, #8]
 80028a2:	7810      	ldrb	r0, [r2, #0]
 80028a4:	f7fd fd80 	bl	80003a8 <is_fnqual_component_type>
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d1f9      	bne.n	80028a0 <d_encoding+0x34c>
 80028ac:	60ea      	str	r2, [r5, #12]
 80028ae:	e66f      	b.n	8002590 <d_encoding+0x3c>
 80028b0:	2176      	movs	r1, #118	; 0x76
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7fe f80a 	bl	80008cc <d_call_offset>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	f43f aed8 	beq.w	800266e <d_encoding+0x11a>
 80028be:	2100      	movs	r1, #0
 80028c0:	4620      	mov	r0, r4
 80028c2:	f7ff fe47 	bl	8002554 <d_encoding>
 80028c6:	2300      	movs	r3, #0
 80028c8:	4602      	mov	r2, r0
 80028ca:	2110      	movs	r1, #16
 80028cc:	4620      	mov	r0, r4
 80028ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028d2:	f7fd bc7d 	b.w	80001d0 <d_make_comp>
 80028d6:	2168      	movs	r1, #104	; 0x68
 80028d8:	4620      	mov	r0, r4
 80028da:	f7fd fff7 	bl	80008cc <d_call_offset>
 80028de:	2800      	cmp	r0, #0
 80028e0:	f43f aec5 	beq.w	800266e <d_encoding+0x11a>
 80028e4:	2100      	movs	r1, #0
 80028e6:	4620      	mov	r0, r4
 80028e8:	f7ff fe34 	bl	8002554 <d_encoding>
 80028ec:	2300      	movs	r3, #0
 80028ee:	4602      	mov	r2, r0
 80028f0:	210f      	movs	r1, #15
 80028f2:	4620      	mov	r0, r4
 80028f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028f8:	f7fd bc6a 	b.w	80001d0 <d_make_comp>
 80028fc:	2100      	movs	r1, #0
 80028fe:	4620      	mov	r0, r4
 8002900:	f7fd ffe4 	bl	80008cc <d_call_offset>
 8002904:	2800      	cmp	r0, #0
 8002906:	f43f aeb2 	beq.w	800266e <d_encoding+0x11a>
 800290a:	2100      	movs	r1, #0
 800290c:	4620      	mov	r0, r4
 800290e:	f7fd ffdd 	bl	80008cc <d_call_offset>
 8002912:	2800      	cmp	r0, #0
 8002914:	f43f aeab 	beq.w	800266e <d_encoding+0x11a>
 8002918:	2100      	movs	r1, #0
 800291a:	4620      	mov	r0, r4
 800291c:	f7ff fe1a 	bl	8002554 <d_encoding>
 8002920:	2300      	movs	r3, #0
 8002922:	4602      	mov	r2, r0
 8002924:	2111      	movs	r1, #17
 8002926:	4620      	mov	r0, r4
 8002928:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800292c:	f7fd bc50 	b.w	80001d0 <d_make_comp>
 8002930:	4620      	mov	r0, r4
 8002932:	f7fe fd21 	bl	8001378 <d_name>
 8002936:	2300      	movs	r3, #0
 8002938:	4602      	mov	r2, r0
 800293a:	2115      	movs	r1, #21
 800293c:	4620      	mov	r0, r4
 800293e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002942:	f7fd bc45 	b.w	80001d0 <d_make_comp>
 8002946:	310f      	adds	r1, #15
 8002948:	6321      	str	r1, [r4, #48]	; 0x30
 800294a:	4620      	mov	r0, r4
 800294c:	f7fe fec0 	bl	80016d0 <d_type>
 8002950:	2300      	movs	r3, #0
 8002952:	4602      	mov	r2, r0
 8002954:	2109      	movs	r1, #9
 8002956:	4620      	mov	r0, r4
 8002958:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800295c:	f7fd bc38 	b.w	80001d0 <d_make_comp>
 8002960:	310a      	adds	r1, #10
 8002962:	6321      	str	r1, [r4, #48]	; 0x30
 8002964:	4620      	mov	r0, r4
 8002966:	f7fe feb3 	bl	80016d0 <d_type>
 800296a:	2300      	movs	r3, #0
 800296c:	4602      	mov	r2, r0
 800296e:	210a      	movs	r1, #10
 8002970:	4620      	mov	r0, r4
 8002972:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002976:	f7fd bc2b 	b.w	80001d0 <d_make_comp>
 800297a:	4620      	mov	r0, r4
 800297c:	f7fe fea8 	bl	80016d0 <d_type>
 8002980:	2300      	movs	r3, #0
 8002982:	4602      	mov	r2, r0
 8002984:	210d      	movs	r1, #13
 8002986:	4620      	mov	r0, r4
 8002988:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800298c:	f7fd bc20 	b.w	80001d0 <d_make_comp>
 8002990:	4620      	mov	r0, r4
 8002992:	f7fe fe9d 	bl	80016d0 <d_type>
 8002996:	2300      	movs	r3, #0
 8002998:	4602      	mov	r2, r0
 800299a:	2112      	movs	r1, #18
 800299c:	4620      	mov	r0, r4
 800299e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029a2:	f7fd bc15 	b.w	80001d0 <d_make_comp>
 80029a6:	4620      	mov	r0, r4
 80029a8:	f7fe fe92 	bl	80016d0 <d_type>
 80029ac:	2300      	movs	r3, #0
 80029ae:	4602      	mov	r2, r0
 80029b0:	210c      	movs	r1, #12
 80029b2:	4620      	mov	r0, r4
 80029b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b8:	f7fd bc0a 	b.w	80001d0 <d_make_comp>
 80029bc:	4620      	mov	r0, r4
 80029be:	f7fe fcdb 	bl	8001378 <d_name>
 80029c2:	2300      	movs	r3, #0
 80029c4:	4602      	mov	r2, r0
 80029c6:	2114      	movs	r1, #20
 80029c8:	4620      	mov	r0, r4
 80029ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ce:	f7fd bbff 	b.w	80001d0 <d_make_comp>
 80029d2:	4620      	mov	r0, r4
 80029d4:	f7fe fe7c 	bl	80016d0 <d_type>
 80029d8:	2300      	movs	r3, #0
 80029da:	4602      	mov	r2, r0
 80029dc:	210e      	movs	r1, #14
 80029de:	4620      	mov	r0, r4
 80029e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e4:	f7fd bbf4 	b.w	80001d0 <d_make_comp>
 80029e8:	4620      	mov	r0, r4
 80029ea:	f7fe fe71 	bl	80016d0 <d_type>
 80029ee:	4605      	mov	r5, r0
 80029f0:	f104 000c 	add.w	r0, r4, #12
 80029f4:	f7fd fce6 	bl	80003c4 <d_number.isra.1>
 80029f8:	2800      	cmp	r0, #0
 80029fa:	f6ff ae38 	blt.w	800266e <d_encoding+0x11a>
 80029fe:	68e3      	ldr	r3, [r4, #12]
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	2a5f      	cmp	r2, #95	; 0x5f
 8002a04:	f47f ae33 	bne.w	800266e <d_encoding+0x11a>
 8002a08:	3301      	adds	r3, #1
 8002a0a:	60e3      	str	r3, [r4, #12]
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f7fe fe5f 	bl	80016d0 <d_type>
 8002a12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a14:	1d59      	adds	r1, r3, #5
 8002a16:	6321      	str	r1, [r4, #48]	; 0x30
 8002a18:	4602      	mov	r2, r0
 8002a1a:	462b      	mov	r3, r5
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	210b      	movs	r1, #11
 8002a20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a24:	f7fd bbd4 	b.w	80001d0 <d_make_comp>
 8002a28:	463e      	mov	r6, r7
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	e004      	b.n	8002a38 <d_encoding+0x4e4>
 8002a2e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8002a32:	b123      	cbz	r3, 8002a3e <d_encoding+0x4ea>
 8002a34:	2b24      	cmp	r3, #36	; 0x24
 8002a36:	d002      	beq.n	8002a3e <d_encoding+0x4ea>
 8002a38:	3101      	adds	r1, #1
 8002a3a:	42a9      	cmp	r1, r5
 8002a3c:	dbf7      	blt.n	8002a2e <d_encoding+0x4da>
 8002a3e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002a42:	4283      	cmp	r3, r0
 8002a44:	da24      	bge.n	8002a90 <d_encoding+0x53c>
 8002a46:	e9d4 c603 	ldrd	ip, r6, [r4, #12]
 8002a4a:	0118      	lsls	r0, r3, #4
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	6163      	str	r3, [r4, #20]
 8002a50:	1833      	adds	r3, r6, r0
 8002a52:	1a6d      	subs	r5, r5, r1
 8002a54:	f8c3 8004 	str.w	r8, [r3, #4]
 8002a58:	f806 8000 	strb.w	r8, [r6, r0]
 8002a5c:	609f      	str	r7, [r3, #8]
 8002a5e:	eb0c 0701 	add.w	r7, ip, r1
 8002a62:	60d9      	str	r1, [r3, #12]
 8002a64:	60e7      	str	r7, [r4, #12]
 8002a66:	e6d6      	b.n	8002816 <d_encoding+0x2c2>
 8002a68:	461a      	mov	r2, r3
 8002a6a:	e6df      	b.n	800282c <d_encoding+0x2d8>
 8002a6c:	2b4c      	cmp	r3, #76	; 0x4c
 8002a6e:	f1a3 024e 	sub.w	r2, r3, #78	; 0x4e
 8002a72:	d004      	beq.n	8002a7e <d_encoding+0x52a>
 8002a74:	f4ff ae79 	bcc.w	800276a <d_encoding+0x216>
 8002a78:	2a01      	cmp	r2, #1
 8002a7a:	f63f ae76 	bhi.w	800276a <d_encoding+0x216>
 8002a7e:	6889      	ldr	r1, [r1, #8]
 8002a80:	2900      	cmp	r1, #0
 8002a82:	f47f add7 	bne.w	8002634 <d_encoding+0xe0>
 8002a86:	e671      	b.n	800276c <d_encoding+0x218>
 8002a88:	212f      	movs	r1, #47	; 0x2f
 8002a8a:	e6ae      	b.n	80027ea <d_encoding+0x296>
 8002a8c:	212e      	movs	r1, #46	; 0x2e
 8002a8e:	e6ac      	b.n	80027ea <d_encoding+0x296>
 8002a90:	68e3      	ldr	r3, [r4, #12]
 8002a92:	440b      	add	r3, r1
 8002a94:	60e3      	str	r3, [r4, #12]
 8002a96:	2500      	movs	r5, #0
 8002a98:	e57a      	b.n	8002590 <d_encoding+0x3c>
 8002a9a:	f7ff fd5b 	bl	8002554 <d_encoding>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	2149      	movs	r1, #73	; 0x49
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aaa:	f7fd bb91 	b.w	80001d0 <d_make_comp>
 8002aae:	bf00      	nop

08002ab0 <d_expr_primary>:
 8002ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab2:	68c2      	ldr	r2, [r0, #12]
 8002ab4:	7813      	ldrb	r3, [r2, #0]
 8002ab6:	2b4c      	cmp	r3, #76	; 0x4c
 8002ab8:	d144      	bne.n	8002b44 <d_expr_primary+0x94>
 8002aba:	1c53      	adds	r3, r2, #1
 8002abc:	60c3      	str	r3, [r0, #12]
 8002abe:	7851      	ldrb	r1, [r2, #1]
 8002ac0:	295f      	cmp	r1, #95	; 0x5f
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	d040      	beq.n	8002b48 <d_expr_primary+0x98>
 8002ac6:	295a      	cmp	r1, #90	; 0x5a
 8002ac8:	d10c      	bne.n	8002ae4 <d_expr_primary+0x34>
 8002aca:	3301      	adds	r3, #1
 8002acc:	60e3      	str	r3, [r4, #12]
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7ff fd3f 	bl	8002554 <d_encoding>
 8002ad6:	68e3      	ldr	r3, [r4, #12]
 8002ad8:	781a      	ldrb	r2, [r3, #0]
 8002ada:	2a45      	cmp	r2, #69	; 0x45
 8002adc:	d132      	bne.n	8002b44 <d_expr_primary+0x94>
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60e3      	str	r3, [r4, #12]
 8002ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ae4:	f7fe fdf4 	bl	80016d0 <d_type>
 8002ae8:	b360      	cbz	r0, 8002b44 <d_expr_primary+0x94>
 8002aea:	7803      	ldrb	r3, [r0, #0]
 8002aec:	2b27      	cmp	r3, #39	; 0x27
 8002aee:	d032      	beq.n	8002b56 <d_expr_primary+0xa6>
 8002af0:	68e6      	ldr	r6, [r4, #12]
 8002af2:	7833      	ldrb	r3, [r6, #0]
 8002af4:	2b6e      	cmp	r3, #110	; 0x6e
 8002af6:	d037      	beq.n	8002b68 <d_expr_primary+0xb8>
 8002af8:	213c      	movs	r1, #60	; 0x3c
 8002afa:	2b45      	cmp	r3, #69	; 0x45
 8002afc:	d040      	beq.n	8002b80 <d_expr_primary+0xd0>
 8002afe:	b30b      	cbz	r3, 8002b44 <d_expr_primary+0x94>
 8002b00:	4633      	mov	r3, r6
 8002b02:	e000      	b.n	8002b06 <d_expr_primary+0x56>
 8002b04:	b1f5      	cbz	r5, 8002b44 <d_expr_primary+0x94>
 8002b06:	3301      	adds	r3, #1
 8002b08:	60e3      	str	r3, [r4, #12]
 8002b0a:	781d      	ldrb	r5, [r3, #0]
 8002b0c:	2d45      	cmp	r5, #69	; 0x45
 8002b0e:	d1f9      	bne.n	8002b04 <d_expr_primary+0x54>
 8002b10:	1b9d      	subs	r5, r3, r6
 8002b12:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	da0b      	bge.n	8002b32 <d_expr_primary+0x82>
 8002b1a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8002b1e:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8002b22:	eb0e 030c 	add.w	r3, lr, ip
 8002b26:	3201      	adds	r2, #1
 8002b28:	2700      	movs	r7, #0
 8002b2a:	605f      	str	r7, [r3, #4]
 8002b2c:	6162      	str	r2, [r4, #20]
 8002b2e:	b106      	cbz	r6, 8002b32 <d_expr_primary+0x82>
 8002b30:	bb05      	cbnz	r5, 8002b74 <d_expr_primary+0xc4>
 8002b32:	2300      	movs	r3, #0
 8002b34:	4602      	mov	r2, r0
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7fd fb4a 	bl	80001d0 <d_make_comp>
 8002b3c:	68e3      	ldr	r3, [r4, #12]
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	2a45      	cmp	r2, #69	; 0x45
 8002b42:	d0cc      	beq.n	8002ade <d_expr_primary+0x2e>
 8002b44:	2000      	movs	r0, #0
 8002b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b48:	1c93      	adds	r3, r2, #2
 8002b4a:	60c3      	str	r3, [r0, #12]
 8002b4c:	7892      	ldrb	r2, [r2, #2]
 8002b4e:	2a5a      	cmp	r2, #90	; 0x5a
 8002b50:	d0bb      	beq.n	8002aca <d_expr_primary+0x1a>
 8002b52:	2000      	movs	r0, #0
 8002b54:	e7c1      	b.n	8002ada <d_expr_primary+0x2a>
 8002b56:	6883      	ldr	r3, [r0, #8]
 8002b58:	7c1a      	ldrb	r2, [r3, #16]
 8002b5a:	2a00      	cmp	r2, #0
 8002b5c:	d0c8      	beq.n	8002af0 <d_expr_primary+0x40>
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	6323      	str	r3, [r4, #48]	; 0x30
 8002b66:	e7c3      	b.n	8002af0 <d_expr_primary+0x40>
 8002b68:	1c72      	adds	r2, r6, #1
 8002b6a:	60e2      	str	r2, [r4, #12]
 8002b6c:	7873      	ldrb	r3, [r6, #1]
 8002b6e:	213d      	movs	r1, #61	; 0x3d
 8002b70:	4616      	mov	r6, r2
 8002b72:	e7c2      	b.n	8002afa <d_expr_primary+0x4a>
 8002b74:	605f      	str	r7, [r3, #4]
 8002b76:	f80e 700c 	strb.w	r7, [lr, ip]
 8002b7a:	e9c3 6502 	strd	r6, r5, [r3, #8]
 8002b7e:	e7d9      	b.n	8002b34 <d_expr_primary+0x84>
 8002b80:	2500      	movs	r5, #0
 8002b82:	e7c6      	b.n	8002b12 <d_expr_primary+0x62>

08002b84 <d_print_comp>:
 8002b84:	b112      	cbz	r2, 8002b8c <d_print_comp+0x8>
 8002b86:	6853      	ldr	r3, [r2, #4]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	dd03      	ble.n	8002b94 <d_print_comp+0x10>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8002b92:	4770      	bx	lr
 8002b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b98:	4615      	mov	r5, r2
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	606a      	str	r2, [r5, #4]
 8002b9e:	b099      	sub	sp, #100	; 0x64
 8002ba0:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
 8002ba4:	9504      	str	r5, [sp, #16]
 8002ba6:	460e      	mov	r6, r1
 8002ba8:	ab04      	add	r3, sp, #16
 8002baa:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
 8002bae:	9105      	str	r1, [sp, #20]
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8002bb6:	2f00      	cmp	r7, #0
 8002bb8:	f040 80d7 	bne.w	8002d6a <d_print_comp+0x1e6>
 8002bbc:	7828      	ldrb	r0, [r5, #0]
 8002bbe:	284f      	cmp	r0, #79	; 0x4f
 8002bc0:	f201 82ef 	bhi.w	80041a2 <d_print_comp+0x161e>
 8002bc4:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002bc8:	0ab80a87 	.word	0x0ab80a87
 8002bcc:	0a4f0ab8 	.word	0x0a4f0ab8
 8002bd0:	079407c6 	.word	0x079407c6
 8002bd4:	075e0767 	.word	0x075e0767
 8002bd8:	070f0737 	.word	0x070f0737
 8002bdc:	06bf06e7 	.word	0x06bf06e7
 8002be0:	066f0697 	.word	0x066f0697
 8002be4:	061f0647 	.word	0x061f0647
 8002be8:	091f0947 	.word	0x091f0947
 8002bec:	08cf08f7 	.word	0x08cf08f7
 8002bf0:	087f08a7 	.word	0x087f08a7
 8002bf4:	082f0857 	.word	0x082f0857
 8002bf8:	09bf09d6 	.word	0x09bf09d6
 8002bfc:	09bf09bf 	.word	0x09bf09bf
 8002c00:	09990999 	.word	0x09990999
 8002c04:	09990999 	.word	0x09990999
 8002c08:	09990999 	.word	0x09990999
 8002c0c:	096f0999 	.word	0x096f0999
 8002c10:	0999096f 	.word	0x0999096f
 8002c14:	0a1d0999 	.word	0x0a1d0999
 8002c18:	06060a14 	.word	0x06060a14
 8002c1c:	05720592 	.word	0x05720592
 8002c20:	0572051b 	.word	0x0572051b
 8002c24:	04d304d3 	.word	0x04d304d3
 8002c28:	045c0488 	.word	0x045c0488
 8002c2c:	0aed0434 	.word	0x0aed0434
 8002c30:	0404040c 	.word	0x0404040c
 8002c34:	039c03b0 	.word	0x039c03b0
 8002c38:	038d0397 	.word	0x038d0397
 8002c3c:	03880388 	.word	0x03880388
 8002c40:	03330333 	.word	0x03330333
 8002c44:	02fe030b 	.word	0x02fe030b
 8002c48:	02aa02dc 	.word	0x02aa02dc
 8002c4c:	025a0282 	.word	0x025a0282
 8002c50:	01f80232 	.word	0x01f80232
 8002c54:	01d00aed 	.word	0x01d00aed
 8002c58:	015301a8 	.word	0x015301a8
 8002c5c:	017b0105 	.word	0x017b0105
 8002c60:	00d80999 	.word	0x00d80999
 8002c64:	09990999 	.word	0x09990999
 8002c68:	68aa      	ldr	r2, [r5, #8]
 8002c6a:	6893      	ldr	r3, [r2, #8]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	7859      	ldrb	r1, [r3, #1]
 8002c70:	2963      	cmp	r1, #99	; 0x63
 8002c72:	d109      	bne.n	8002c88 <d_print_comp+0x104>
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8002c7a:	2901      	cmp	r1, #1
 8002c7c:	f242 8319 	bls.w	80052b2 <d_print_comp+0x272e>
 8002c80:	3b72      	subs	r3, #114	; 0x72
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	f242 8315 	bls.w	80052b2 <d_print_comp+0x272e>
 8002c88:	f105 030c 	add.w	r3, r5, #12
 8002c8c:	4631      	mov	r1, r6
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f003 fcd2 	bl	8006638 <d_maybe_print_fold_expression.isra.20>
 8002c94:	4680      	mov	r8, r0
 8002c96:	2800      	cmp	r0, #0
 8002c98:	f042 8400 	bne.w	800549c <d_print_comp+0x2918>
 8002c9c:	68ab      	ldr	r3, [r5, #8]
 8002c9e:	781a      	ldrb	r2, [r3, #0]
 8002ca0:	2a31      	cmp	r2, #49	; 0x31
 8002ca2:	f002 8592 	beq.w	80057ca <d_print_comp+0x2c46>
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	49d7      	ldr	r1, [pc, #860]	; (8003008 <d_print_comp+0x484>)
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	f004 f850 	bl	8006d50 <strcmp>
 8002cb0:	68eb      	ldr	r3, [r5, #12]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	b918      	cbnz	r0, 8002cbe <d_print_comp+0x13a>
 8002cb6:	7813      	ldrb	r3, [r2, #0]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	f002 85d4 	beq.w	8005866 <d_print_comp+0x2ce2>
 8002cbe:	4631      	mov	r1, r6
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f003 fc67 	bl	8006594 <d_print_subexpr>
 8002cc6:	68af      	ldr	r7, [r5, #8]
 8002cc8:	49d0      	ldr	r1, [pc, #832]	; (800300c <d_print_comp+0x488>)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f8d3 8000 	ldr.w	r8, [r3]
 8002cd0:	4640      	mov	r0, r8
 8002cd2:	f004 f83d 	bl	8006d50 <strcmp>
 8002cd6:	4681      	mov	r9, r0
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	f042 83d0 	bne.w	800547e <d_print_comp+0x28fa>
 8002cde:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002ce2:	2fff      	cmp	r7, #255	; 0xff
 8002ce4:	d110      	bne.n	8002d08 <d_print_comp+0x184>
 8002ce6:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8002cea:	4639      	mov	r1, r7
 8002cec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002cf0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	4798      	blx	r3
 8002cf8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002cfc:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8002d00:	3301      	adds	r3, #1
 8002d02:	464f      	mov	r7, r9
 8002d04:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d08:	1c7a      	adds	r2, r7, #1
 8002d0a:	235b      	movs	r3, #91	; 0x5b
 8002d0c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d10:	55e3      	strb	r3, [r4, r7]
 8002d12:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d16:	68eb      	ldr	r3, [r5, #12]
 8002d18:	4631      	mov	r1, r6
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f7ff ff31 	bl	8002b84 <d_print_comp>
 8002d22:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002d26:	2fff      	cmp	r7, #255	; 0xff
 8002d28:	d111      	bne.n	8002d4e <d_print_comp+0x1ca>
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	4639      	mov	r1, r7
 8002d2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d32:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002d36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	4798      	blx	r3
 8002d3e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d42:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8002d46:	3301      	adds	r3, #1
 8002d48:	4637      	mov	r7, r6
 8002d4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d4e:	235d      	movs	r3, #93	; 0x5d
 8002d50:	1c7a      	adds	r2, r7, #1
 8002d52:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d56:	55e3      	strb	r3, [r4, r7]
 8002d58:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d5c:	68ab      	ldr	r3, [r5, #8]
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	2a31      	cmp	r2, #49	; 0x31
 8002d62:	f002 83ad 	beq.w	80054c0 <d_print_comp+0x293c>
 8002d66:	9905      	ldr	r1, [sp, #20]
 8002d68:	686a      	ldr	r2, [r5, #4]
 8002d6a:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 8002d6e:	3a01      	subs	r2, #1
 8002d70:	606a      	str	r2, [r5, #4]
 8002d72:	b019      	add	sp, #100	; 0x64
 8002d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d78:	4fa5      	ldr	r7, [pc, #660]	; (8003010 <d_print_comp+0x48c>)
 8002d7a:	68aa      	ldr	r2, [r5, #8]
 8002d7c:	4631      	mov	r1, r6
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f7ff ff00 	bl	8002b84 <d_print_comp>
 8002d84:	f107 0808 	add.w	r8, r7, #8
 8002d88:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002d8c:	f04f 0900 	mov.w	r9, #0
 8002d90:	e016      	b.n	8002dc0 <d_print_comp+0x23c>
 8002d92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d96:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d9a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002d9e:	4798      	blx	r3
 8002da0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002da4:	3301      	adds	r3, #1
 8002da6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002daa:	2200      	movs	r2, #0
 8002dac:	2301      	movs	r3, #1
 8002dae:	45b8      	cmp	r8, r7
 8002db0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002db4:	f804 a002 	strb.w	sl, [r4, r2]
 8002db8:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002dbc:	f001 82f9 	beq.w	80043b2 <d_print_comp+0x182e>
 8002dc0:	2bff      	cmp	r3, #255	; 0xff
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002dca:	d0e2      	beq.n	8002d92 <d_print_comp+0x20e>
 8002dcc:	461a      	mov	r2, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	e7ed      	b.n	8002dae <d_print_comp+0x22a>
 8002dd2:	68a9      	ldr	r1, [r5, #8]
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f7fd fcef 	bl	80007b8 <d_find_pack>
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	f002 81e1 	beq.w	80051a2 <d_print_comp+0x261e>
 8002de0:	2300      	movs	r3, #0
 8002de2:	7802      	ldrb	r2, [r0, #0]
 8002de4:	2a2f      	cmp	r2, #47	; 0x2f
 8002de6:	f041 85df 	bne.w	80049a8 <d_print_comp+0x1e24>
 8002dea:	6882      	ldr	r2, [r0, #8]
 8002dec:	2a00      	cmp	r2, #0
 8002dee:	f001 85db 	beq.w	80049a8 <d_print_comp+0x1e24>
 8002df2:	68c0      	ldr	r0, [r0, #12]
 8002df4:	3301      	adds	r3, #1
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d1f3      	bne.n	8002de2 <d_print_comp+0x25e>
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	68ab      	ldr	r3, [r5, #8]
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	1e4a      	subs	r2, r1, #1
 8002e02:	9202      	str	r2, [sp, #8]
 8002e04:	f04f 0a00 	mov.w	sl, #0
 8002e08:	4689      	mov	r9, r1
 8002e0a:	9503      	str	r5, [sp, #12]
 8002e0c:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8002e10:	9a01      	ldr	r2, [sp, #4]
 8002e12:	4631      	mov	r1, r6
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7ff feb5 	bl	8002b84 <d_print_comp>
 8002e1a:	9b02      	ldr	r3, [sp, #8]
 8002e1c:	429f      	cmp	r7, r3
 8002e1e:	f281 81c6 	bge.w	80041ae <d_print_comp+0x162a>
 8002e22:	4d7c      	ldr	r5, [pc, #496]	; (8003014 <d_print_comp+0x490>)
 8002e24:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002e28:	f105 0802 	add.w	r8, r5, #2
 8002e2c:	e016      	b.n	8002e5c <d_print_comp+0x2d8>
 8002e2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e32:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e36:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8002e3a:	4798      	blx	r3
 8002e3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e40:	3301      	adds	r3, #1
 8002e42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e46:	2200      	movs	r2, #0
 8002e48:	2301      	movs	r3, #1
 8002e4a:	45a8      	cmp	r8, r5
 8002e4c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002e50:	f804 b002 	strb.w	fp, [r4, r2]
 8002e54:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8002e58:	f001 81a9 	beq.w	80041ae <d_print_comp+0x162a>
 8002e5c:	2bff      	cmp	r3, #255	; 0xff
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4620      	mov	r0, r4
 8002e62:	f815 bb01 	ldrb.w	fp, [r5], #1
 8002e66:	d0e2      	beq.n	8002e2e <d_print_comp+0x2aa>
 8002e68:	461a      	mov	r2, r3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	e7ed      	b.n	8002e4a <d_print_comp+0x2c6>
 8002e6e:	4f6a      	ldr	r7, [pc, #424]	; (8003018 <d_print_comp+0x494>)
 8002e70:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002e74:	f107 081a 	add.w	r8, r7, #26
 8002e78:	f04f 0900 	mov.w	r9, #0
 8002e7c:	e016      	b.n	8002eac <d_print_comp+0x328>
 8002e7e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e82:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e86:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e8a:	4798      	blx	r3
 8002e8c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e90:	3301      	adds	r3, #1
 8002e92:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e96:	2200      	movs	r2, #0
 8002e98:	2301      	movs	r3, #1
 8002e9a:	45b8      	cmp	r8, r7
 8002e9c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002ea0:	f804 a002 	strb.w	sl, [r4, r2]
 8002ea4:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002ea8:	f001 82f1 	beq.w	800448e <d_print_comp+0x190a>
 8002eac:	2bff      	cmp	r3, #255	; 0xff
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002eb6:	d0e2      	beq.n	8002e7e <d_print_comp+0x2fa>
 8002eb8:	461a      	mov	r2, r3
 8002eba:	3301      	adds	r3, #1
 8002ebc:	e7ed      	b.n	8002e9a <d_print_comp+0x316>
 8002ebe:	4f57      	ldr	r7, [pc, #348]	; (800301c <d_print_comp+0x498>)
 8002ec0:	68aa      	ldr	r2, [r5, #8]
 8002ec2:	4631      	mov	r1, r6
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f7ff fe5d 	bl	8002b84 <d_print_comp>
 8002eca:	f107 0805 	add.w	r8, r7, #5
 8002ece:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002ed2:	f04f 0900 	mov.w	r9, #0
 8002ed6:	e016      	b.n	8002f06 <d_print_comp+0x382>
 8002ed8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002edc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ee0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002ee4:	4798      	blx	r3
 8002ee6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002eea:	3301      	adds	r3, #1
 8002eec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	45b8      	cmp	r8, r7
 8002ef6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002efa:	f804 a002 	strb.w	sl, [r4, r2]
 8002efe:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f02:	f001 827c 	beq.w	80043fe <d_print_comp+0x187a>
 8002f06:	2bff      	cmp	r3, #255	; 0xff
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f817 ab01 	ldrb.w	sl, [r7], #1
 8002f10:	d0e2      	beq.n	8002ed8 <d_print_comp+0x354>
 8002f12:	461a      	mov	r2, r3
 8002f14:	3301      	adds	r3, #1
 8002f16:	e7ed      	b.n	8002ef4 <d_print_comp+0x370>
 8002f18:	4f41      	ldr	r7, [pc, #260]	; (8003020 <d_print_comp+0x49c>)
 8002f1a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f1e:	f107 0816 	add.w	r8, r7, #22
 8002f22:	f04f 0900 	mov.w	r9, #0
 8002f26:	e016      	b.n	8002f56 <d_print_comp+0x3d2>
 8002f28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f30:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f34:	4798      	blx	r3
 8002f36:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f40:	2200      	movs	r2, #0
 8002f42:	2301      	movs	r3, #1
 8002f44:	45b8      	cmp	r8, r7
 8002f46:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f4a:	f804 a002 	strb.w	sl, [r4, r2]
 8002f4e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f52:	f001 81f4 	beq.w	800433e <d_print_comp+0x17ba>
 8002f56:	2bff      	cmp	r3, #255	; 0xff
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002f60:	d0e2      	beq.n	8002f28 <d_print_comp+0x3a4>
 8002f62:	461a      	mov	r2, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	e7ed      	b.n	8002f44 <d_print_comp+0x3c0>
 8002f68:	4e2e      	ldr	r6, [pc, #184]	; (8003024 <d_print_comp+0x4a0>)
 8002f6a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f6e:	f106 070e 	add.w	r7, r6, #14
 8002f72:	f04f 0800 	mov.w	r8, #0
 8002f76:	e016      	b.n	8002fa6 <d_print_comp+0x422>
 8002f78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f80:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002f84:	4798      	blx	r3
 8002f86:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f90:	2200      	movs	r2, #0
 8002f92:	2301      	movs	r3, #1
 8002f94:	42b7      	cmp	r7, r6
 8002f96:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f9a:	f804 9002 	strb.w	r9, [r4, r2]
 8002f9e:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8002fa2:	f001 81d5 	beq.w	8004350 <d_print_comp+0x17cc>
 8002fa6:	2bff      	cmp	r3, #255	; 0xff
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4620      	mov	r0, r4
 8002fac:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8002fb0:	d0e2      	beq.n	8002f78 <d_print_comp+0x3f4>
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	e7ed      	b.n	8002f94 <d_print_comp+0x410>
 8002fb8:	4f1b      	ldr	r7, [pc, #108]	; (8003028 <d_print_comp+0x4a4>)
 8002fba:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002fbe:	f107 0808 	add.w	r8, r7, #8
 8002fc2:	f04f 0900 	mov.w	r9, #0
 8002fc6:	e016      	b.n	8002ff6 <d_print_comp+0x472>
 8002fc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fcc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fd0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002fd4:	4798      	blx	r3
 8002fd6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	45b8      	cmp	r8, r7
 8002fe6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002fea:	f804 a002 	strb.w	sl, [r4, r2]
 8002fee:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002ff2:	f001 8114 	beq.w	800421e <d_print_comp+0x169a>
 8002ff6:	2bff      	cmp	r3, #255	; 0xff
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003000:	d0e2      	beq.n	8002fc8 <d_print_comp+0x444>
 8003002:	461a      	mov	r2, r3
 8003004:	3301      	adds	r3, #1
 8003006:	e7ed      	b.n	8002fe4 <d_print_comp+0x460>
 8003008:	08017c8c 	.word	0x08017c8c
 800300c:	08017e8c 	.word	0x08017e8c
 8003010:	08017f47 	.word	0x08017f47
 8003014:	08017e60 	.word	0x08017e60
 8003018:	08017e2b 	.word	0x08017e2b
 800301c:	08017ccc 	.word	0x08017ccc
 8003020:	08017e2f 	.word	0x08017e2f
 8003024:	08017f37 	.word	0x08017f37
 8003028:	08017f27 	.word	0x08017f27
 800302c:	4fb9      	ldr	r7, [pc, #740]	; (8003314 <d_print_comp+0x790>)
 800302e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003032:	f107 081c 	add.w	r8, r7, #28
 8003036:	f04f 0900 	mov.w	r9, #0
 800303a:	e016      	b.n	800306a <d_print_comp+0x4e6>
 800303c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003040:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003044:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003048:	4798      	blx	r3
 800304a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800304e:	3301      	adds	r3, #1
 8003050:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003054:	2200      	movs	r2, #0
 8003056:	2301      	movs	r3, #1
 8003058:	45b8      	cmp	r8, r7
 800305a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800305e:	f804 a002 	strb.w	sl, [r4, r2]
 8003062:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003066:	f001 810f 	beq.w	8004288 <d_print_comp+0x1704>
 800306a:	2bff      	cmp	r3, #255	; 0xff
 800306c:	4619      	mov	r1, r3
 800306e:	4620      	mov	r0, r4
 8003070:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003074:	d0e2      	beq.n	800303c <d_print_comp+0x4b8>
 8003076:	461a      	mov	r2, r3
 8003078:	3301      	adds	r3, #1
 800307a:	e7ed      	b.n	8003058 <d_print_comp+0x4d4>
 800307c:	4fa6      	ldr	r7, [pc, #664]	; (8003318 <d_print_comp+0x794>)
 800307e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003082:	f107 081d 	add.w	r8, r7, #29
 8003086:	f04f 0900 	mov.w	r9, #0
 800308a:	e016      	b.n	80030ba <d_print_comp+0x536>
 800308c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003090:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003094:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003098:	4798      	blx	r3
 800309a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800309e:	3301      	adds	r3, #1
 80030a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80030a4:	2200      	movs	r2, #0
 80030a6:	2301      	movs	r3, #1
 80030a8:	4547      	cmp	r7, r8
 80030aa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80030ae:	f804 a002 	strb.w	sl, [r4, r2]
 80030b2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80030b6:	f001 8083 	beq.w	80041c0 <d_print_comp+0x163c>
 80030ba:	2bff      	cmp	r3, #255	; 0xff
 80030bc:	4619      	mov	r1, r3
 80030be:	4620      	mov	r0, r4
 80030c0:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80030c4:	d0e2      	beq.n	800308c <d_print_comp+0x508>
 80030c6:	461a      	mov	r2, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	e7ed      	b.n	80030a8 <d_print_comp+0x524>
 80030cc:	4f93      	ldr	r7, [pc, #588]	; (800331c <d_print_comp+0x798>)
 80030ce:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80030d2:	f107 080a 	add.w	r8, r7, #10
 80030d6:	f04f 0900 	mov.w	r9, #0
 80030da:	e016      	b.n	800310a <d_print_comp+0x586>
 80030dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030e4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030e8:	4798      	blx	r3
 80030ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80030ee:	3301      	adds	r3, #1
 80030f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80030f4:	2200      	movs	r2, #0
 80030f6:	2301      	movs	r3, #1
 80030f8:	45b8      	cmp	r8, r7
 80030fa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80030fe:	f804 a002 	strb.w	sl, [r4, r2]
 8003102:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003106:	f001 8064 	beq.w	80041d2 <d_print_comp+0x164e>
 800310a:	2bff      	cmp	r3, #255	; 0xff
 800310c:	4619      	mov	r1, r3
 800310e:	4620      	mov	r0, r4
 8003110:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003114:	d0e2      	beq.n	80030dc <d_print_comp+0x558>
 8003116:	461a      	mov	r2, r3
 8003118:	3301      	adds	r3, #1
 800311a:	e7ed      	b.n	80030f8 <d_print_comp+0x574>
 800311c:	a808      	add	r0, sp, #32
 800311e:	68aa      	ldr	r2, [r5, #8]
 8003120:	497f      	ldr	r1, [pc, #508]	; (8003320 <d_print_comp+0x79c>)
 8003122:	f010 f96b 	bl	80133fc <sprintf>
 8003126:	a808      	add	r0, sp, #32
 8003128:	f003 fe1c 	bl	8006d64 <strlen>
 800312c:	2800      	cmp	r0, #0
 800312e:	f001 81b7 	beq.w	80044a0 <d_print_comp+0x191c>
 8003132:	ae08      	add	r6, sp, #32
 8003134:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003138:	1837      	adds	r7, r6, r0
 800313a:	f04f 0800 	mov.w	r8, #0
 800313e:	e016      	b.n	800316e <d_print_comp+0x5ea>
 8003140:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003144:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003148:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800314c:	4798      	blx	r3
 800314e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003152:	3301      	adds	r3, #1
 8003154:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003158:	2200      	movs	r2, #0
 800315a:	2301      	movs	r3, #1
 800315c:	42be      	cmp	r6, r7
 800315e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003162:	f804 9002 	strb.w	r9, [r4, r2]
 8003166:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800316a:	f001 8199 	beq.w	80044a0 <d_print_comp+0x191c>
 800316e:	2bff      	cmp	r3, #255	; 0xff
 8003170:	4619      	mov	r1, r3
 8003172:	4620      	mov	r0, r4
 8003174:	f816 9b01 	ldrb.w	r9, [r6], #1
 8003178:	d0e2      	beq.n	8003140 <d_print_comp+0x5bc>
 800317a:	461a      	mov	r2, r3
 800317c:	3301      	adds	r3, #1
 800317e:	e7ed      	b.n	800315c <d_print_comp+0x5d8>
 8003180:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003184:	f895 8008 	ldrb.w	r8, [r5, #8]
 8003188:	2fff      	cmp	r7, #255	; 0xff
 800318a:	d111      	bne.n	80031b0 <d_print_comp+0x62c>
 800318c:	2600      	movs	r6, #0
 800318e:	4639      	mov	r1, r7
 8003190:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003194:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003198:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800319c:	4620      	mov	r0, r4
 800319e:	4798      	blx	r3
 80031a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80031a4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80031a8:	3301      	adds	r3, #1
 80031aa:	4637      	mov	r7, r6
 80031ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80031b0:	1c7b      	adds	r3, r7, #1
 80031b2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80031b6:	f804 8007 	strb.w	r8, [r4, r7]
 80031ba:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80031be:	686a      	ldr	r2, [r5, #4]
 80031c0:	9905      	ldr	r1, [sp, #20]
 80031c2:	e5d2      	b.n	8002d6a <d_print_comp+0x1e6>
 80031c4:	68aa      	ldr	r2, [r5, #8]
 80031c6:	4631      	mov	r1, r6
 80031c8:	4620      	mov	r0, r4
 80031ca:	f7ff fcdb 	bl	8002b84 <d_print_comp>
 80031ce:	4631      	mov	r1, r6
 80031d0:	68ea      	ldr	r2, [r5, #12]
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7ff fcd6 	bl	8002b84 <d_print_comp>
 80031d8:	9905      	ldr	r1, [sp, #20]
 80031da:	686a      	ldr	r2, [r5, #4]
 80031dc:	e5c5      	b.n	8002d6a <d_print_comp+0x1e6>
 80031de:	4f51      	ldr	r7, [pc, #324]	; (8003324 <d_print_comp+0x7a0>)
 80031e0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80031e4:	f107 080e 	add.w	r8, r7, #14
 80031e8:	f04f 0900 	mov.w	r9, #0
 80031ec:	e016      	b.n	800321c <d_print_comp+0x698>
 80031ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031f6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80031fa:	4798      	blx	r3
 80031fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003200:	3301      	adds	r3, #1
 8003202:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003206:	2200      	movs	r2, #0
 8003208:	2301      	movs	r3, #1
 800320a:	45b8      	cmp	r8, r7
 800320c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003210:	f804 a002 	strb.w	sl, [r4, r2]
 8003214:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003218:	f001 8146 	beq.w	80044a8 <d_print_comp+0x1924>
 800321c:	2bff      	cmp	r3, #255	; 0xff
 800321e:	4619      	mov	r1, r3
 8003220:	4620      	mov	r0, r4
 8003222:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003226:	d0e2      	beq.n	80031ee <d_print_comp+0x66a>
 8003228:	461a      	mov	r2, r3
 800322a:	3301      	adds	r3, #1
 800322c:	e7ed      	b.n	800320a <d_print_comp+0x686>
 800322e:	68ab      	ldr	r3, [r5, #8]
 8003230:	781a      	ldrb	r2, [r3, #0]
 8003232:	2a27      	cmp	r2, #39	; 0x27
 8003234:	f001 8572 	beq.w	8004d1c <d_print_comp+0x2198>
 8003238:	f04f 0800 	mov.w	r8, #0
 800323c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003240:	2fff      	cmp	r7, #255	; 0xff
 8003242:	d112      	bne.n	800326a <d_print_comp+0x6e6>
 8003244:	f04f 0900 	mov.w	r9, #0
 8003248:	4639      	mov	r1, r7
 800324a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800324e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003252:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003256:	4620      	mov	r0, r4
 8003258:	4798      	blx	r3
 800325a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800325e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8003262:	3301      	adds	r3, #1
 8003264:	464f      	mov	r7, r9
 8003266:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800326a:	2328      	movs	r3, #40	; 0x28
 800326c:	1c7a      	adds	r2, r7, #1
 800326e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003272:	55e3      	strb	r3, [r4, r7]
 8003274:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003278:	68aa      	ldr	r2, [r5, #8]
 800327a:	4631      	mov	r1, r6
 800327c:	4620      	mov	r0, r4
 800327e:	f7ff fc81 	bl	8002b84 <d_print_comp>
 8003282:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003286:	2bff      	cmp	r3, #255	; 0xff
 8003288:	f041 85b8 	bne.w	8004dfc <d_print_comp+0x2278>
 800328c:	2200      	movs	r2, #0
 800328e:	4619      	mov	r1, r3
 8003290:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8003294:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003298:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800329c:	4620      	mov	r0, r4
 800329e:	4798      	blx	r3
 80032a0:	2329      	movs	r3, #41	; 0x29
 80032a2:	7023      	strb	r3, [r4, #0]
 80032a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80032a8:	782a      	ldrb	r2, [r5, #0]
 80032aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80032ae:	2101      	movs	r1, #1
 80032b0:	3301      	adds	r3, #1
 80032b2:	2a3d      	cmp	r2, #61	; 0x3d
 80032b4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032b8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032bc:	f001 85bb 	beq.w	8004e36 <d_print_comp+0x22b2>
 80032c0:	f1b8 0f08 	cmp.w	r8, #8
 80032c4:	f001 8556 	beq.w	8004d74 <d_print_comp+0x21f0>
 80032c8:	4631      	mov	r1, r6
 80032ca:	68ea      	ldr	r2, [r5, #12]
 80032cc:	4620      	mov	r0, r4
 80032ce:	f7ff fc59 	bl	8002b84 <d_print_comp>
 80032d2:	9905      	ldr	r1, [sp, #20]
 80032d4:	686a      	ldr	r2, [r5, #4]
 80032d6:	e548      	b.n	8002d6a <d_print_comp+0x1e6>
 80032d8:	2301      	movs	r3, #1
 80032da:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80032de:	686a      	ldr	r2, [r5, #4]
 80032e0:	e543      	b.n	8002d6a <d_print_comp+0x1e6>
 80032e2:	68eb      	ldr	r3, [r5, #12]
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	2a3a      	cmp	r2, #58	; 0x3a
 80032e8:	f001 8405 	beq.w	8004af6 <d_print_comp+0x1f72>
 80032ec:	2301      	movs	r3, #1
 80032ee:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80032f2:	686a      	ldr	r2, [r5, #4]
 80032f4:	e539      	b.n	8002d6a <d_print_comp+0x1e6>
 80032f6:	2301      	movs	r3, #1
 80032f8:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80032fc:	686a      	ldr	r2, [r5, #4]
 80032fe:	e534      	b.n	8002d6a <d_print_comp+0x1e6>
 8003300:	68eb      	ldr	r3, [r5, #12]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b38      	cmp	r3, #56	; 0x38
 8003306:	f43f acaf 	beq.w	8002c68 <d_print_comp+0xe4>
 800330a:	2301      	movs	r3, #1
 800330c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003310:	686a      	ldr	r2, [r5, #4]
 8003312:	e52a      	b.n	8002d6a <d_print_comp+0x1e6>
 8003314:	08017f07 	.word	0x08017f07
 8003318:	08017ee7 	.word	0x08017ee7
 800331c:	08017ec8 	.word	0x08017ec8
 8003320:	08017c84 	.word	0x08017c84
 8003324:	08017eb7 	.word	0x08017eb7
 8003328:	e9d5 9802 	ldrd	r9, r8, [r5, #8]
 800332c:	f899 3000 	ldrb.w	r3, [r9]
 8003330:	2b31      	cmp	r3, #49	; 0x31
 8003332:	f001 843a 	beq.w	8004baa <d_print_comp+0x2026>
 8003336:	2b33      	cmp	r3, #51	; 0x33
 8003338:	f042 8192 	bne.w	8005660 <d_print_comp+0x2adc>
 800333c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003340:	2fff      	cmp	r7, #255	; 0xff
 8003342:	d112      	bne.n	800336a <d_print_comp+0x7e6>
 8003344:	f04f 0a00 	mov.w	sl, #0
 8003348:	4639      	mov	r1, r7
 800334a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800334e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003352:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003356:	4620      	mov	r0, r4
 8003358:	4798      	blx	r3
 800335a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800335e:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8003362:	3301      	adds	r3, #1
 8003364:	4657      	mov	r7, sl
 8003366:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800336a:	1c7a      	adds	r2, r7, #1
 800336c:	2328      	movs	r3, #40	; 0x28
 800336e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003372:	55e3      	strb	r3, [r4, r7]
 8003374:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003378:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800337c:	4631      	mov	r1, r6
 800337e:	4620      	mov	r0, r4
 8003380:	f7ff fc00 	bl	8002b84 <d_print_comp>
 8003384:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003388:	2fff      	cmp	r7, #255	; 0xff
 800338a:	d112      	bne.n	80033b2 <d_print_comp+0x82e>
 800338c:	f04f 0900 	mov.w	r9, #0
 8003390:	4639      	mov	r1, r7
 8003392:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003396:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800339a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800339e:	4620      	mov	r0, r4
 80033a0:	4798      	blx	r3
 80033a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80033a6:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80033aa:	3301      	adds	r3, #1
 80033ac:	464f      	mov	r7, r9
 80033ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80033b2:	2329      	movs	r3, #41	; 0x29
 80033b4:	1c7a      	adds	r2, r7, #1
 80033b6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80033ba:	55e3      	strb	r3, [r4, r7]
 80033bc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80033c0:	4642      	mov	r2, r8
 80033c2:	4631      	mov	r1, r6
 80033c4:	4620      	mov	r0, r4
 80033c6:	f003 f8e5 	bl	8006594 <d_print_subexpr>
 80033ca:	9905      	ldr	r1, [sp, #20]
 80033cc:	686a      	ldr	r2, [r5, #4]
 80033ce:	e4cc      	b.n	8002d6a <d_print_comp+0x1e6>
 80033d0:	4631      	mov	r1, r6
 80033d2:	68aa      	ldr	r2, [r5, #8]
 80033d4:	4620      	mov	r0, r4
 80033d6:	f003 f89d 	bl	8006514 <d_print_expr_op>
 80033da:	9905      	ldr	r1, [sp, #20]
 80033dc:	686a      	ldr	r2, [r5, #4]
 80033de:	e4c4      	b.n	8002d6a <d_print_comp+0x1e6>
 80033e0:	4fd2      	ldr	r7, [pc, #840]	; (800372c <d_print_comp+0xba8>)
 80033e2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80033e6:	f107 0809 	add.w	r8, r7, #9
 80033ea:	f04f 0900 	mov.w	r9, #0
 80033ee:	e016      	b.n	800341e <d_print_comp+0x89a>
 80033f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033f8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80033fc:	4798      	blx	r3
 80033fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003402:	3301      	adds	r3, #1
 8003404:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003408:	2200      	movs	r2, #0
 800340a:	2301      	movs	r3, #1
 800340c:	45b8      	cmp	r8, r7
 800340e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003412:	f804 a002 	strb.w	sl, [r4, r2]
 8003416:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800341a:	f001 8057 	beq.w	80044cc <d_print_comp+0x1948>
 800341e:	2bff      	cmp	r3, #255	; 0xff
 8003420:	4619      	mov	r1, r3
 8003422:	4620      	mov	r0, r4
 8003424:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003428:	d0e2      	beq.n	80033f0 <d_print_comp+0x86c>
 800342a:	461a      	mov	r2, r3
 800342c:	3301      	adds	r3, #1
 800342e:	e7ed      	b.n	800340c <d_print_comp+0x888>
 8003430:	4fbe      	ldr	r7, [pc, #760]	; (800372c <d_print_comp+0xba8>)
 8003432:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003436:	f107 0809 	add.w	r8, r7, #9
 800343a:	f04f 0900 	mov.w	r9, #0
 800343e:	e016      	b.n	800346e <d_print_comp+0x8ea>
 8003440:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003444:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003448:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800344c:	4798      	blx	r3
 800344e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003452:	3301      	adds	r3, #1
 8003454:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003458:	2200      	movs	r2, #0
 800345a:	2301      	movs	r3, #1
 800345c:	45b8      	cmp	r8, r7
 800345e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003462:	f804 a002 	strb.w	sl, [r4, r2]
 8003466:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800346a:	f001 8026 	beq.w	80044ba <d_print_comp+0x1936>
 800346e:	2bff      	cmp	r3, #255	; 0xff
 8003470:	4619      	mov	r1, r3
 8003472:	4620      	mov	r0, r4
 8003474:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003478:	d0e2      	beq.n	8003440 <d_print_comp+0x8bc>
 800347a:	461a      	mov	r2, r3
 800347c:	3301      	adds	r3, #1
 800347e:	e7ed      	b.n	800345c <d_print_comp+0x8d8>
 8003480:	f8d5 a008 	ldr.w	sl, [r5, #8]
 8003484:	4eaa      	ldr	r6, [pc, #680]	; (8003730 <d_print_comp+0xbac>)
 8003486:	f8da 7008 	ldr.w	r7, [sl, #8]
 800348a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800348e:	f106 0808 	add.w	r8, r6, #8
 8003492:	f04f 0900 	mov.w	r9, #0
 8003496:	e016      	b.n	80034c6 <d_print_comp+0x942>
 8003498:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800349c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034a0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034a4:	4798      	blx	r3
 80034a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80034aa:	3301      	adds	r3, #1
 80034ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80034b0:	2200      	movs	r2, #0
 80034b2:	2301      	movs	r3, #1
 80034b4:	4546      	cmp	r6, r8
 80034b6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80034ba:	f804 b002 	strb.w	fp, [r4, r2]
 80034be:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80034c2:	f001 8021 	beq.w	8004508 <d_print_comp+0x1984>
 80034c6:	2bff      	cmp	r3, #255	; 0xff
 80034c8:	4619      	mov	r1, r3
 80034ca:	4620      	mov	r0, r4
 80034cc:	f816 bf01 	ldrb.w	fp, [r6, #1]!
 80034d0:	d0e2      	beq.n	8003498 <d_print_comp+0x914>
 80034d2:	461a      	mov	r2, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	e7ed      	b.n	80034b4 <d_print_comp+0x930>
 80034d8:	e9d5 2802 	ldrd	r2, r8, [r5, #8]
 80034dc:	b11a      	cbz	r2, 80034e6 <d_print_comp+0x962>
 80034de:	4631      	mov	r1, r6
 80034e0:	4620      	mov	r0, r4
 80034e2:	f7ff fb4f 	bl	8002b84 <d_print_comp>
 80034e6:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80034ea:	2fff      	cmp	r7, #255	; 0xff
 80034ec:	d112      	bne.n	8003514 <d_print_comp+0x990>
 80034ee:	f04f 0900 	mov.w	r9, #0
 80034f2:	4639      	mov	r1, r7
 80034f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034f8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003500:	4620      	mov	r0, r4
 8003502:	4798      	blx	r3
 8003504:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003508:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 800350c:	3301      	adds	r3, #1
 800350e:	464f      	mov	r7, r9
 8003510:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003514:	1c78      	adds	r0, r7, #1
 8003516:	237b      	movs	r3, #123	; 0x7b
 8003518:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 800351c:	4642      	mov	r2, r8
 800351e:	55e3      	strb	r3, [r4, r7]
 8003520:	4631      	mov	r1, r6
 8003522:	4620      	mov	r0, r4
 8003524:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003528:	f7ff fb2c 	bl	8002b84 <d_print_comp>
 800352c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003530:	2fff      	cmp	r7, #255	; 0xff
 8003532:	d111      	bne.n	8003558 <d_print_comp+0x9d4>
 8003534:	2600      	movs	r6, #0
 8003536:	4639      	mov	r1, r7
 8003538:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800353c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003540:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003544:	4620      	mov	r0, r4
 8003546:	4798      	blx	r3
 8003548:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800354c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003550:	3301      	adds	r3, #1
 8003552:	4637      	mov	r7, r6
 8003554:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003558:	1c7a      	adds	r2, r7, #1
 800355a:	237d      	movs	r3, #125	; 0x7d
 800355c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003560:	55e3      	strb	r3, [r4, r7]
 8003562:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003566:	686a      	ldr	r2, [r5, #4]
 8003568:	9905      	ldr	r1, [sp, #20]
 800356a:	f7ff bbfe 	b.w	8002d6a <d_print_comp+0x1e6>
 800356e:	68aa      	ldr	r2, [r5, #8]
 8003570:	b11a      	cbz	r2, 800357a <d_print_comp+0x9f6>
 8003572:	4631      	mov	r1, r6
 8003574:	4620      	mov	r0, r4
 8003576:	f7ff fb05 	bl	8002b84 <d_print_comp>
 800357a:	68eb      	ldr	r3, [r5, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f001 853d 	beq.w	8004ffc <d_print_comp+0x2478>
 8003582:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003586:	2ffd      	cmp	r7, #253	; 0xfd
 8003588:	d912      	bls.n	80035b0 <d_print_comp+0xa2c>
 800358a:	f04f 0800 	mov.w	r8, #0
 800358e:	f804 8007 	strb.w	r8, [r4, r7]
 8003592:	4639      	mov	r1, r7
 8003594:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003598:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800359c:	4620      	mov	r0, r4
 800359e:	4798      	blx	r3
 80035a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035a4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80035a8:	3301      	adds	r3, #1
 80035aa:	4647      	mov	r7, r8
 80035ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035b0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800373c <d_print_comp+0xbb8>
 80035b4:	f04f 0a00 	mov.w	sl, #0
 80035b8:	f108 0b02 	add.w	fp, r8, #2
 80035bc:	e016      	b.n	80035ec <d_print_comp+0xa68>
 80035be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035c2:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 80035c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035ca:	4798      	blx	r3
 80035cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035d0:	3301      	adds	r3, #1
 80035d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035d6:	2701      	movs	r7, #1
 80035d8:	2300      	movs	r3, #0
 80035da:	45c3      	cmp	fp, r8
 80035dc:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 80035e0:	f804 9003 	strb.w	r9, [r4, r3]
 80035e4:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80035e8:	f001 80cf 	beq.w	800478a <d_print_comp+0x1c06>
 80035ec:	2fff      	cmp	r7, #255	; 0xff
 80035ee:	4639      	mov	r1, r7
 80035f0:	4620      	mov	r0, r4
 80035f2:	f818 9b01 	ldrb.w	r9, [r8], #1
 80035f6:	d0e2      	beq.n	80035be <d_print_comp+0xa3a>
 80035f8:	463b      	mov	r3, r7
 80035fa:	3701      	adds	r7, #1
 80035fc:	e7ed      	b.n	80035da <d_print_comp+0xa56>
 80035fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f041 84a0 	bne.w	8004f48 <d_print_comp+0x23c4>
 8003608:	68aa      	ldr	r2, [r5, #8]
 800360a:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <d_print_comp+0xbb0>)
 800360c:	6891      	ldr	r1, [r2, #8]
 800360e:	4299      	cmp	r1, r3
 8003610:	d020      	beq.n	8003654 <d_print_comp+0xad0>
 8003612:	4631      	mov	r1, r6
 8003614:	4620      	mov	r0, r4
 8003616:	f7ff fab5 	bl	8002b84 <d_print_comp>
 800361a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800361e:	2fff      	cmp	r7, #255	; 0xff
 8003620:	d111      	bne.n	8003646 <d_print_comp+0xac2>
 8003622:	2600      	movs	r6, #0
 8003624:	4639      	mov	r1, r7
 8003626:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800362a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800362e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003632:	4620      	mov	r0, r4
 8003634:	4798      	blx	r3
 8003636:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800363a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800363e:	3301      	adds	r3, #1
 8003640:	4637      	mov	r7, r6
 8003642:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003646:	2320      	movs	r3, #32
 8003648:	1c7a      	adds	r2, r7, #1
 800364a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800364e:	55e3      	strb	r3, [r4, r7]
 8003650:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003654:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8003658:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800365c:	2a00      	cmp	r2, #0
 800365e:	f001 80a6 	beq.w	80047ae <d_print_comp+0x1c2a>
 8003662:	4e35      	ldr	r6, [pc, #212]	; (8003738 <d_print_comp+0xbb4>)
 8003664:	f04f 0800 	mov.w	r8, #0
 8003668:	f106 0906 	add.w	r9, r6, #6
 800366c:	e015      	b.n	800369a <d_print_comp+0xb16>
 800366e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003672:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003676:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800367a:	4798      	blx	r3
 800367c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003680:	3301      	adds	r3, #1
 8003682:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003686:	2200      	movs	r2, #0
 8003688:	2301      	movs	r3, #1
 800368a:	45b1      	cmp	r9, r6
 800368c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003690:	54a7      	strb	r7, [r4, r2]
 8003692:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003696:	f001 8183 	beq.w	80049a0 <d_print_comp+0x1e1c>
 800369a:	2bff      	cmp	r3, #255	; 0xff
 800369c:	4619      	mov	r1, r3
 800369e:	4620      	mov	r0, r4
 80036a0:	f816 7b01 	ldrb.w	r7, [r6], #1
 80036a4:	d0e3      	beq.n	800366e <d_print_comp+0xaea>
 80036a6:	461a      	mov	r2, r3
 80036a8:	3301      	adds	r3, #1
 80036aa:	e7ee      	b.n	800368a <d_print_comp+0xb06>
 80036ac:	ab18      	add	r3, sp, #96	; 0x60
 80036ae:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 80036b2:	f843 2d40 	str.w	r2, [r3, #-64]!
 80036b6:	2000      	movs	r0, #0
 80036b8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80036bc:	900a      	str	r0, [sp, #40]	; 0x28
 80036be:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80036c2:	68ea      	ldr	r2, [r5, #12]
 80036c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80036c6:	4631      	mov	r1, r6
 80036c8:	4620      	mov	r0, r4
 80036ca:	9509      	str	r5, [sp, #36]	; 0x24
 80036cc:	f7ff fa5a 	bl	8002b84 <d_print_comp>
 80036d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036d2:	b923      	cbnz	r3, 80036de <d_print_comp+0xb5a>
 80036d4:	4631      	mov	r1, r6
 80036d6:	462a      	mov	r2, r5
 80036d8:	4620      	mov	r0, r4
 80036da:	f002 f8e9 	bl	80058b0 <d_print_mod>
 80036de:	9b08      	ldr	r3, [sp, #32]
 80036e0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80036e4:	9905      	ldr	r1, [sp, #20]
 80036e6:	686a      	ldr	r2, [r5, #4]
 80036e8:	f7ff bb3f 	b.w	8002d6a <d_print_comp+0x1e6>
 80036ec:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 80036f0:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 80036f4:	f849 cd40 	str.w	ip, [r9, #-64]!
 80036f8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80036fc:	f8cd c004 	str.w	ip, [sp, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	4667      	mov	r7, ip
 8003704:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003708:	9509      	str	r5, [sp, #36]	; 0x24
 800370a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800370e:	2f00      	cmp	r7, #0
 8003710:	f001 852f 	beq.w	8005172 <d_print_comp+0x25ee>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	3b19      	subs	r3, #25
 800371a:	2b02      	cmp	r3, #2
 800371c:	f201 8529 	bhi.w	8005172 <d_print_comp+0x25ee>
 8003720:	4623      	mov	r3, r4
 8003722:	f04f 0801 	mov.w	r8, #1
 8003726:	464c      	mov	r4, r9
 8003728:	469c      	mov	ip, r3
 800372a:	e00e      	b.n	800374a <d_print_comp+0xbc6>
 800372c:	08017e6f 	.word	0x08017e6f
 8003730:	08017e63 	.word	0x08017e63
 8003734:	08017214 	.word	0x08017214
 8003738:	08017e50 	.word	0x08017e50
 800373c:	08017e60 	.word	0x08017e60
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	3b19      	subs	r3, #25
 8003746:	2b02      	cmp	r3, #2
 8003748:	d81d      	bhi.n	8003786 <d_print_comp+0xc02>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	ea4f 1e08 	mov.w	lr, r8, lsl #4
 8003750:	aa18      	add	r2, sp, #96	; 0x60
 8003752:	eb02 0b0e 	add.w	fp, r2, lr
 8003756:	b99b      	cbnz	r3, 8003780 <d_print_comp+0xbfc>
 8003758:	f1b8 0f03 	cmp.w	r8, #3
 800375c:	f201 8517 	bhi.w	800518e <d_print_comp+0x260a>
 8003760:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8003764:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 8003768:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 800376c:	f84b 4c40 	str.w	r4, [fp, #-64]
 8003770:	2301      	movs	r3, #1
 8003772:	eb09 040e 	add.w	r4, r9, lr
 8003776:	f8cc 4114 	str.w	r4, [ip, #276]	; 0x114
 800377a:	f108 0801 	add.w	r8, r8, #1
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	683f      	ldr	r7, [r7, #0]
 8003782:	2f00      	cmp	r7, #0
 8003784:	d1dc      	bne.n	8003740 <d_print_comp+0xbbc>
 8003786:	68ea      	ldr	r2, [r5, #12]
 8003788:	4631      	mov	r1, r6
 800378a:	4660      	mov	r0, ip
 800378c:	4664      	mov	r4, ip
 800378e:	f7ff f9f9 	bl	8002b84 <d_print_comp>
 8003792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003794:	9a01      	ldr	r2, [sp, #4]
 8003796:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800379a:	b9bb      	cbnz	r3, 80037cc <d_print_comp+0xc48>
 800379c:	f1b8 0f01 	cmp.w	r8, #1
 80037a0:	d00c      	beq.n	80037bc <d_print_comp+0xc38>
 80037a2:	eb09 1808 	add.w	r8, r9, r8, lsl #4
 80037a6:	af0c      	add	r7, sp, #48	; 0x30
 80037a8:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 80037ac:	4631      	mov	r1, r6
 80037ae:	f1a8 0810 	sub.w	r8, r8, #16
 80037b2:	4620      	mov	r0, r4
 80037b4:	f002 f87c 	bl	80058b0 <d_print_mod>
 80037b8:	4547      	cmp	r7, r8
 80037ba:	d1f5      	bne.n	80037a8 <d_print_comp+0xc24>
 80037bc:	4631      	mov	r1, r6
 80037be:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80037c2:	f105 0208 	add.w	r2, r5, #8
 80037c6:	4620      	mov	r0, r4
 80037c8:	f002 fdca 	bl	8006360 <d_print_array_type.isra.14>
 80037cc:	9905      	ldr	r1, [sp, #20]
 80037ce:	686a      	ldr	r2, [r5, #4]
 80037d0:	f7ff bacb 	b.w	8002d6a <d_print_comp+0x1e6>
 80037d4:	06b2      	lsls	r2, r6, #26
 80037d6:	f026 0860 	bic.w	r8, r6, #96	; 0x60
 80037da:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80037de:	f101 825a 	bmi.w	8004c96 <d_print_comp+0x2112>
 80037e2:	68aa      	ldr	r2, [r5, #8]
 80037e4:	b11a      	cbz	r2, 80037ee <d_print_comp+0xc6a>
 80037e6:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 80037ea:	f001 85c3 	beq.w	8005374 <d_print_comp+0x27f0>
 80037ee:	4641      	mov	r1, r8
 80037f0:	f105 020c 	add.w	r2, r5, #12
 80037f4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80037f8:	4620      	mov	r0, r4
 80037fa:	f002 fb87 	bl	8005f0c <d_print_function_type.isra.15>
 80037fe:	9905      	ldr	r1, [sp, #20]
 8003800:	686a      	ldr	r2, [r5, #4]
 8003802:	f7ff bab2 	b.w	8002d6a <d_print_comp+0x1e6>
 8003806:	4fcb      	ldr	r7, [pc, #812]	; (8003b34 <d_print_comp+0xfb0>)
 8003808:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800380c:	f107 0815 	add.w	r8, r7, #21
 8003810:	f04f 0900 	mov.w	r9, #0
 8003814:	e016      	b.n	8003844 <d_print_comp+0xcc0>
 8003816:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800381a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800381e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003822:	4798      	blx	r3
 8003824:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003828:	3301      	adds	r3, #1
 800382a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800382e:	2200      	movs	r2, #0
 8003830:	2301      	movs	r3, #1
 8003832:	45b8      	cmp	r8, r7
 8003834:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003838:	f804 a002 	strb.w	sl, [r4, r2]
 800383c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003840:	f000 8789 	beq.w	8004756 <d_print_comp+0x1bd2>
 8003844:	2bff      	cmp	r3, #255	; 0xff
 8003846:	4619      	mov	r1, r3
 8003848:	4620      	mov	r0, r4
 800384a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800384e:	d0e2      	beq.n	8003816 <d_print_comp+0xc92>
 8003850:	461a      	mov	r2, r3
 8003852:	3301      	adds	r3, #1
 8003854:	e7ed      	b.n	8003832 <d_print_comp+0xcae>
 8003856:	4fb8      	ldr	r7, [pc, #736]	; (8003b38 <d_print_comp+0xfb4>)
 8003858:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800385c:	f107 0810 	add.w	r8, r7, #16
 8003860:	f04f 0900 	mov.w	r9, #0
 8003864:	e016      	b.n	8003894 <d_print_comp+0xd10>
 8003866:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800386a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800386e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003872:	4798      	blx	r3
 8003874:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003878:	3301      	adds	r3, #1
 800387a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800387e:	2200      	movs	r2, #0
 8003880:	2301      	movs	r3, #1
 8003882:	45b8      	cmp	r8, r7
 8003884:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003888:	f804 a002 	strb.w	sl, [r4, r2]
 800388c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003890:	f000 876a 	beq.w	8004768 <d_print_comp+0x1be4>
 8003894:	2bff      	cmp	r3, #255	; 0xff
 8003896:	4619      	mov	r1, r3
 8003898:	4620      	mov	r0, r4
 800389a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800389e:	d0e2      	beq.n	8003866 <d_print_comp+0xce2>
 80038a0:	461a      	mov	r2, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	e7ed      	b.n	8003882 <d_print_comp+0xcfe>
 80038a6:	4fa5      	ldr	r7, [pc, #660]	; (8003b3c <d_print_comp+0xfb8>)
 80038a8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80038ac:	f107 0812 	add.w	r8, r7, #18
 80038b0:	f04f 0900 	mov.w	r9, #0
 80038b4:	e016      	b.n	80038e4 <d_print_comp+0xd60>
 80038b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038be:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80038c2:	4798      	blx	r3
 80038c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80038c8:	3301      	adds	r3, #1
 80038ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80038ce:	2200      	movs	r2, #0
 80038d0:	2301      	movs	r3, #1
 80038d2:	45b8      	cmp	r8, r7
 80038d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80038d8:	f804 a002 	strb.w	sl, [r4, r2]
 80038dc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80038e0:	f000 8727 	beq.w	8004732 <d_print_comp+0x1bae>
 80038e4:	2bff      	cmp	r3, #255	; 0xff
 80038e6:	4619      	mov	r1, r3
 80038e8:	4620      	mov	r0, r4
 80038ea:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80038ee:	d0e2      	beq.n	80038b6 <d_print_comp+0xd32>
 80038f0:	461a      	mov	r2, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	e7ed      	b.n	80038d2 <d_print_comp+0xd4e>
 80038f6:	4f92      	ldr	r7, [pc, #584]	; (8003b40 <d_print_comp+0xfbc>)
 80038f8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80038fc:	f107 080d 	add.w	r8, r7, #13
 8003900:	f04f 0900 	mov.w	r9, #0
 8003904:	e016      	b.n	8003934 <d_print_comp+0xdb0>
 8003906:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800390a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800390e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003912:	4798      	blx	r3
 8003914:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003918:	3301      	adds	r3, #1
 800391a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800391e:	2200      	movs	r2, #0
 8003920:	2301      	movs	r3, #1
 8003922:	45b8      	cmp	r8, r7
 8003924:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003928:	f804 a002 	strb.w	sl, [r4, r2]
 800392c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003930:	f000 8708 	beq.w	8004744 <d_print_comp+0x1bc0>
 8003934:	2bff      	cmp	r3, #255	; 0xff
 8003936:	4619      	mov	r1, r3
 8003938:	4620      	mov	r0, r4
 800393a:	f817 ab01 	ldrb.w	sl, [r7], #1
 800393e:	d0e2      	beq.n	8003906 <d_print_comp+0xd82>
 8003940:	461a      	mov	r2, r3
 8003942:	3301      	adds	r3, #1
 8003944:	e7ed      	b.n	8003922 <d_print_comp+0xd9e>
 8003946:	4f7f      	ldr	r7, [pc, #508]	; (8003b44 <d_print_comp+0xfc0>)
 8003948:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800394c:	f107 0818 	add.w	r8, r7, #24
 8003950:	f04f 0900 	mov.w	r9, #0
 8003954:	e016      	b.n	8003984 <d_print_comp+0xe00>
 8003956:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800395a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800395e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003962:	4798      	blx	r3
 8003964:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003968:	3301      	adds	r3, #1
 800396a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800396e:	2200      	movs	r2, #0
 8003970:	2301      	movs	r3, #1
 8003972:	45b8      	cmp	r8, r7
 8003974:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003978:	f804 a002 	strb.w	sl, [r4, r2]
 800397c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003980:	f000 8699 	beq.w	80046b6 <d_print_comp+0x1b32>
 8003984:	2bff      	cmp	r3, #255	; 0xff
 8003986:	4619      	mov	r1, r3
 8003988:	4620      	mov	r0, r4
 800398a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800398e:	d0e2      	beq.n	8003956 <d_print_comp+0xdd2>
 8003990:	461a      	mov	r2, r3
 8003992:	3301      	adds	r3, #1
 8003994:	e7ed      	b.n	8003972 <d_print_comp+0xdee>
 8003996:	4f6c      	ldr	r7, [pc, #432]	; (8003b48 <d_print_comp+0xfc4>)
 8003998:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800399c:	f107 0808 	add.w	r8, r7, #8
 80039a0:	f04f 0900 	mov.w	r9, #0
 80039a4:	e016      	b.n	80039d4 <d_print_comp+0xe50>
 80039a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039ae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80039b2:	4798      	blx	r3
 80039b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039b8:	3301      	adds	r3, #1
 80039ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039be:	2200      	movs	r2, #0
 80039c0:	2301      	movs	r3, #1
 80039c2:	45b8      	cmp	r8, r7
 80039c4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80039c8:	f804 a002 	strb.w	sl, [r4, r2]
 80039cc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80039d0:	f000 86a6 	beq.w	8004720 <d_print_comp+0x1b9c>
 80039d4:	2bff      	cmp	r3, #255	; 0xff
 80039d6:	4619      	mov	r1, r3
 80039d8:	4620      	mov	r0, r4
 80039da:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80039de:	d0e2      	beq.n	80039a6 <d_print_comp+0xe22>
 80039e0:	461a      	mov	r2, r3
 80039e2:	3301      	adds	r3, #1
 80039e4:	e7ed      	b.n	80039c2 <d_print_comp+0xe3e>
 80039e6:	4f59      	ldr	r7, [pc, #356]	; (8003b4c <d_print_comp+0xfc8>)
 80039e8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80039ec:	f107 080b 	add.w	r8, r7, #11
 80039f0:	f04f 0900 	mov.w	r9, #0
 80039f4:	e016      	b.n	8003a24 <d_print_comp+0xea0>
 80039f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039fe:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003a02:	4798      	blx	r3
 8003a04:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a08:	3301      	adds	r3, #1
 8003a0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2301      	movs	r3, #1
 8003a12:	45b8      	cmp	r8, r7
 8003a14:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003a18:	f804 a002 	strb.w	sl, [r4, r2]
 8003a1c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003a20:	f000 85cc 	beq.w	80045bc <d_print_comp+0x1a38>
 8003a24:	2bff      	cmp	r3, #255	; 0xff
 8003a26:	4619      	mov	r1, r3
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003a2e:	d0e2      	beq.n	80039f6 <d_print_comp+0xe72>
 8003a30:	461a      	mov	r2, r3
 8003a32:	3301      	adds	r3, #1
 8003a34:	e7ed      	b.n	8003a12 <d_print_comp+0xe8e>
 8003a36:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003a3a:	2fff      	cmp	r7, #255	; 0xff
 8003a3c:	d112      	bne.n	8003a64 <d_print_comp+0xee0>
 8003a3e:	f04f 0800 	mov.w	r8, #0
 8003a42:	4639      	mov	r1, r7
 8003a44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a48:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a50:	4620      	mov	r0, r4
 8003a52:	4798      	blx	r3
 8003a54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a58:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	4647      	mov	r7, r8
 8003a60:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a64:	237e      	movs	r3, #126	; 0x7e
 8003a66:	1c7a      	adds	r2, r7, #1
 8003a68:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003a6c:	55e3      	strb	r3, [r4, r7]
 8003a6e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003a72:	4631      	mov	r1, r6
 8003a74:	68ea      	ldr	r2, [r5, #12]
 8003a76:	4620      	mov	r0, r4
 8003a78:	f7ff f884 	bl	8002b84 <d_print_comp>
 8003a7c:	9905      	ldr	r1, [sp, #20]
 8003a7e:	686a      	ldr	r2, [r5, #4]
 8003a80:	f7ff b973 	b.w	8002d6a <d_print_comp+0x1e6>
 8003a84:	4631      	mov	r1, r6
 8003a86:	68ea      	ldr	r2, [r5, #12]
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7ff f87b 	bl	8002b84 <d_print_comp>
 8003a8e:	9905      	ldr	r1, [sp, #20]
 8003a90:	686a      	ldr	r2, [r5, #4]
 8003a92:	f7ff b96a 	b.w	8002d6a <d_print_comp+0x1e6>
 8003a96:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8003a9a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003a9e:	f1b8 0f00 	cmp.w	r8, #0
 8003aa2:	f000 878b 	beq.w	80049bc <d_print_comp+0x1e38>
 8003aa6:	4e2a      	ldr	r6, [pc, #168]	; (8003b50 <d_print_comp+0xfcc>)
 8003aa8:	f04f 0900 	mov.w	r9, #0
 8003aac:	f106 0a06 	add.w	sl, r6, #6
 8003ab0:	e015      	b.n	8003ade <d_print_comp+0xf5a>
 8003ab2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ab6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003aba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003abe:	4798      	blx	r3
 8003ac0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003aca:	2200      	movs	r2, #0
 8003acc:	2301      	movs	r3, #1
 8003ace:	45b2      	cmp	sl, r6
 8003ad0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ad4:	54a7      	strb	r7, [r4, r2]
 8003ad6:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003ada:	f000 868f 	beq.w	80047fc <d_print_comp+0x1c78>
 8003ade:	2bff      	cmp	r3, #255	; 0xff
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003ae8:	d0e3      	beq.n	8003ab2 <d_print_comp+0xf2e>
 8003aea:	461a      	mov	r2, r3
 8003aec:	3301      	adds	r3, #1
 8003aee:	e7ee      	b.n	8003ace <d_print_comp+0xf4a>
 8003af0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f040 86d1 	bne.w	800489c <d_print_comp+0x1d18>
 8003afa:	f105 0108 	add.w	r1, r5, #8
 8003afe:	4620      	mov	r0, r4
 8003b00:	f7fc fe4a 	bl	8000798 <d_lookup_template_argument.isra.10>
 8003b04:	4602      	mov	r2, r0
 8003b06:	2800      	cmp	r0, #0
 8003b08:	f001 8271 	beq.w	8004fee <d_print_comp+0x246a>
 8003b0c:	7803      	ldrb	r3, [r0, #0]
 8003b0e:	2b2f      	cmp	r3, #47	; 0x2f
 8003b10:	f001 8262 	beq.w	8004fd8 <d_print_comp+0x2454>
 8003b14:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003b1e:	4631      	mov	r1, r6
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7ff f82f 	bl	8002b84 <d_print_comp>
 8003b26:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 8003b2a:	9905      	ldr	r1, [sp, #20]
 8003b2c:	686a      	ldr	r2, [r5, #4]
 8003b2e:	f7ff b91c 	b.w	8002d6a <d_print_comp+0x1e6>
 8003b32:	bf00      	nop
 8003b34:	08017d73 	.word	0x08017d73
 8003b38:	08017d5f 	.word	0x08017d5f
 8003b3c:	08017d4b 	.word	0x08017d4b
 8003b40:	08017d3c 	.word	0x08017d3c
 8003b44:	08017d17 	.word	0x08017d17
 8003b48:	08017d0b 	.word	0x08017d0b
 8003b4c:	08017d00 	.word	0x08017d00
 8003b50:	08017ee0 	.word	0x08017ee0
 8003b54:	2300      	movs	r3, #0
 8003b56:	0771      	lsls	r1, r6, #29
 8003b58:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
 8003b5c:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 8003b60:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003b64:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8003b68:	68af      	ldr	r7, [r5, #8]
 8003b6a:	d505      	bpl.n	8003b78 <d_print_comp+0xff4>
 8003b6c:	783b      	ldrb	r3, [r7, #0]
 8003b6e:	b91b      	cbnz	r3, 8003b78 <d_print_comp+0xff4>
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	2a06      	cmp	r2, #6
 8003b74:	f001 8433 	beq.w	80053de <d_print_comp+0x285a>
 8003b78:	463a      	mov	r2, r7
 8003b7a:	4631      	mov	r1, r6
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f7ff f801 	bl	8002b84 <d_print_comp>
 8003b82:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003b86:	2b3c      	cmp	r3, #60	; 0x3c
 8003b88:	f001 8206 	beq.w	8004f98 <d_print_comp+0x2414>
 8003b8c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003b90:	2fff      	cmp	r7, #255	; 0xff
 8003b92:	d112      	bne.n	8003bba <d_print_comp+0x1036>
 8003b94:	f04f 0a00 	mov.w	sl, #0
 8003b98:	4639      	mov	r1, r7
 8003b9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b9e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003ba2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	4798      	blx	r3
 8003baa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003bae:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	4657      	mov	r7, sl
 8003bb6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003bba:	233c      	movs	r3, #60	; 0x3c
 8003bbc:	1c7a      	adds	r2, r7, #1
 8003bbe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003bc2:	55e3      	strb	r3, [r4, r7]
 8003bc4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003bc8:	4631      	mov	r1, r6
 8003bca:	68ea      	ldr	r2, [r5, #12]
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f7fe ffd9 	bl	8002b84 <d_print_comp>
 8003bd2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8003bd8:	f001 806f 	beq.w	8004cba <d_print_comp+0x2136>
 8003bdc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003be0:	2fff      	cmp	r7, #255	; 0xff
 8003be2:	d111      	bne.n	8003c08 <d_print_comp+0x1084>
 8003be4:	2600      	movs	r6, #0
 8003be6:	4639      	mov	r1, r7
 8003be8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bec:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003bf0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	4798      	blx	r3
 8003bf8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003bfc:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003c00:	3301      	adds	r3, #1
 8003c02:	4637      	mov	r7, r6
 8003c04:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c08:	233e      	movs	r3, #62	; 0x3e
 8003c0a:	1c7a      	adds	r2, r7, #1
 8003c0c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c10:	55e3      	strb	r3, [r4, r7]
 8003c12:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c16:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003c1a:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
 8003c1e:	9905      	ldr	r1, [sp, #20]
 8003c20:	686a      	ldr	r2, [r5, #4]
 8003c22:	f7ff b8a2 	b.w	8002d6a <d_print_comp+0x1e6>
 8003c26:	4fda      	ldr	r7, [pc, #872]	; (8003f90 <d_print_comp+0x140c>)
 8003c28:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003c2c:	f107 0811 	add.w	r8, r7, #17
 8003c30:	f04f 0900 	mov.w	r9, #0
 8003c34:	e016      	b.n	8003c64 <d_print_comp+0x10e0>
 8003c36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c3e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003c42:	4798      	blx	r3
 8003c44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c48:	3301      	adds	r3, #1
 8003c4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2301      	movs	r3, #1
 8003c52:	45b8      	cmp	r8, r7
 8003c54:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003c58:	f804 a002 	strb.w	sl, [r4, r2]
 8003c5c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003c60:	f000 84eb 	beq.w	800463a <d_print_comp+0x1ab6>
 8003c64:	2bff      	cmp	r3, #255	; 0xff
 8003c66:	4619      	mov	r1, r3
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003c6e:	d0e2      	beq.n	8003c36 <d_print_comp+0x10b2>
 8003c70:	461a      	mov	r2, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	e7ed      	b.n	8003c52 <d_print_comp+0x10ce>
 8003c76:	4fc7      	ldr	r7, [pc, #796]	; (8003f94 <d_print_comp+0x1410>)
 8003c78:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003c7c:	f107 0815 	add.w	r8, r7, #21
 8003c80:	f04f 0900 	mov.w	r9, #0
 8003c84:	e016      	b.n	8003cb4 <d_print_comp+0x1130>
 8003c86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c8a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c8e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003c92:	4798      	blx	r3
 8003c94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	45b8      	cmp	r8, r7
 8003ca4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ca8:	f804 a002 	strb.w	sl, [r4, r2]
 8003cac:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003cb0:	f000 84cc 	beq.w	800464c <d_print_comp+0x1ac8>
 8003cb4:	2bff      	cmp	r3, #255	; 0xff
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003cbe:	d0e2      	beq.n	8003c86 <d_print_comp+0x1102>
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	e7ed      	b.n	8003ca2 <d_print_comp+0x111e>
 8003cc6:	4fb4      	ldr	r7, [pc, #720]	; (8003f98 <d_print_comp+0x1414>)
 8003cc8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003ccc:	f107 0819 	add.w	r8, r7, #25
 8003cd0:	f04f 0900 	mov.w	r9, #0
 8003cd4:	e016      	b.n	8003d04 <d_print_comp+0x1180>
 8003cd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003cda:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cde:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003ce2:	4798      	blx	r3
 8003ce4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003ce8:	3301      	adds	r3, #1
 8003cea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	45b8      	cmp	r8, r7
 8003cf4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003cf8:	f804 a002 	strb.w	sl, [r4, r2]
 8003cfc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d00:	f000 8489 	beq.w	8004616 <d_print_comp+0x1a92>
 8003d04:	2bff      	cmp	r3, #255	; 0xff
 8003d06:	4619      	mov	r1, r3
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d0e:	d0e2      	beq.n	8003cd6 <d_print_comp+0x1152>
 8003d10:	461a      	mov	r2, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	e7ed      	b.n	8003cf2 <d_print_comp+0x116e>
 8003d16:	4fa1      	ldr	r7, [pc, #644]	; (8003f9c <d_print_comp+0x1418>)
 8003d18:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d1c:	f107 0816 	add.w	r8, r7, #22
 8003d20:	f04f 0900 	mov.w	r9, #0
 8003d24:	e016      	b.n	8003d54 <d_print_comp+0x11d0>
 8003d26:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d2a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d2e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d32:	4798      	blx	r3
 8003d34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d38:	3301      	adds	r3, #1
 8003d3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2301      	movs	r3, #1
 8003d42:	45b8      	cmp	r8, r7
 8003d44:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d48:	f804 a002 	strb.w	sl, [r4, r2]
 8003d4c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d50:	f000 846a 	beq.w	8004628 <d_print_comp+0x1aa4>
 8003d54:	2bff      	cmp	r3, #255	; 0xff
 8003d56:	4619      	mov	r1, r3
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d5e:	d0e2      	beq.n	8003d26 <d_print_comp+0x11a2>
 8003d60:	461a      	mov	r2, r3
 8003d62:	3301      	adds	r3, #1
 8003d64:	e7ed      	b.n	8003d42 <d_print_comp+0x11be>
 8003d66:	4f8e      	ldr	r7, [pc, #568]	; (8003fa0 <d_print_comp+0x141c>)
 8003d68:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d6c:	f107 0813 	add.w	r8, r7, #19
 8003d70:	f04f 0900 	mov.w	r9, #0
 8003d74:	e016      	b.n	8003da4 <d_print_comp+0x1220>
 8003d76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d7e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d82:	4798      	blx	r3
 8003d84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d88:	3301      	adds	r3, #1
 8003d8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2301      	movs	r3, #1
 8003d92:	45b8      	cmp	r8, r7
 8003d94:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d98:	f804 a002 	strb.w	sl, [r4, r2]
 8003d9c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003da0:	f000 8427 	beq.w	80045f2 <d_print_comp+0x1a6e>
 8003da4:	2bff      	cmp	r3, #255	; 0xff
 8003da6:	4619      	mov	r1, r3
 8003da8:	4620      	mov	r0, r4
 8003daa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003dae:	d0e2      	beq.n	8003d76 <d_print_comp+0x11f2>
 8003db0:	461a      	mov	r2, r3
 8003db2:	3301      	adds	r3, #1
 8003db4:	e7ed      	b.n	8003d92 <d_print_comp+0x120e>
 8003db6:	4f7b      	ldr	r7, [pc, #492]	; (8003fa4 <d_print_comp+0x1420>)
 8003db8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003dbc:	f107 080f 	add.w	r8, r7, #15
 8003dc0:	f04f 0900 	mov.w	r9, #0
 8003dc4:	e016      	b.n	8003df4 <d_print_comp+0x1270>
 8003dc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003dca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003dce:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003dd2:	4798      	blx	r3
 8003dd4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003dd8:	3301      	adds	r3, #1
 8003dda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003dde:	2200      	movs	r2, #0
 8003de0:	2301      	movs	r3, #1
 8003de2:	45b8      	cmp	r8, r7
 8003de4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003de8:	f804 a002 	strb.w	sl, [r4, r2]
 8003dec:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003df0:	f000 8408 	beq.w	8004604 <d_print_comp+0x1a80>
 8003df4:	2bff      	cmp	r3, #255	; 0xff
 8003df6:	4619      	mov	r1, r3
 8003df8:	4620      	mov	r0, r4
 8003dfa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003dfe:	d0e2      	beq.n	8003dc6 <d_print_comp+0x1242>
 8003e00:	461a      	mov	r2, r3
 8003e02:	3301      	adds	r3, #1
 8003e04:	e7ed      	b.n	8003de2 <d_print_comp+0x125e>
 8003e06:	4f68      	ldr	r7, [pc, #416]	; (8003fa8 <d_print_comp+0x1424>)
 8003e08:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e0c:	f107 081a 	add.w	r8, r7, #26
 8003e10:	f04f 0900 	mov.w	r9, #0
 8003e14:	e016      	b.n	8003e44 <d_print_comp+0x12c0>
 8003e16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e1e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e22:	4798      	blx	r3
 8003e24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e28:	3301      	adds	r3, #1
 8003e2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2301      	movs	r3, #1
 8003e32:	45b8      	cmp	r8, r7
 8003e34:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e38:	f804 a002 	strb.w	sl, [r4, r2]
 8003e3c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e40:	f000 83c5 	beq.w	80045ce <d_print_comp+0x1a4a>
 8003e44:	2bff      	cmp	r3, #255	; 0xff
 8003e46:	4619      	mov	r1, r3
 8003e48:	4620      	mov	r0, r4
 8003e4a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e4e:	d0e2      	beq.n	8003e16 <d_print_comp+0x1292>
 8003e50:	461a      	mov	r2, r3
 8003e52:	3301      	adds	r3, #1
 8003e54:	e7ed      	b.n	8003e32 <d_print_comp+0x12ae>
 8003e56:	4f55      	ldr	r7, [pc, #340]	; (8003fac <d_print_comp+0x1428>)
 8003e58:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e5c:	f107 0811 	add.w	r8, r7, #17
 8003e60:	f04f 0900 	mov.w	r9, #0
 8003e64:	e016      	b.n	8003e94 <d_print_comp+0x1310>
 8003e66:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e6e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e72:	4798      	blx	r3
 8003e74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e78:	3301      	adds	r3, #1
 8003e7a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2301      	movs	r3, #1
 8003e82:	45b8      	cmp	r8, r7
 8003e84:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e88:	f804 a002 	strb.w	sl, [r4, r2]
 8003e8c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e90:	f000 83a6 	beq.w	80045e0 <d_print_comp+0x1a5c>
 8003e94:	2bff      	cmp	r3, #255	; 0xff
 8003e96:	4619      	mov	r1, r3
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e9e:	d0e2      	beq.n	8003e66 <d_print_comp+0x12e2>
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	e7ed      	b.n	8003e82 <d_print_comp+0x12fe>
 8003ea6:	f8d4 711c 	ldr.w	r7, [r4, #284]	; 0x11c
 8003eaa:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8003eae:	2f00      	cmp	r7, #0
 8003eb0:	f040 85ae 	bne.w	8004a10 <d_print_comp+0x1e8c>
 8003eb4:	f899 2000 	ldrb.w	r2, [r9]
 8003eb8:	2a05      	cmp	r2, #5
 8003eba:	f001 8180 	beq.w	80051be <d_print_comp+0x263a>
 8003ebe:	f899 3000 	ldrb.w	r3, [r9]
 8003ec2:	2b23      	cmp	r3, #35	; 0x23
 8003ec4:	f000 85a0 	beq.w	8004a08 <d_print_comp+0x1e84>
 8003ec8:	782a      	ldrb	r2, [r5, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	f000 859c 	beq.w	8004a08 <d_print_comp+0x1e84>
 8003ed0:	2b24      	cmp	r3, #36	; 0x24
 8003ed2:	f001 8162 	beq.w	800519a <d_print_comp+0x2616>
 8003ed6:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003eda:	46a9      	mov	r9, r5
 8003edc:	ab18      	add	r3, sp, #96	; 0x60
 8003ede:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8003ee2:	f843 cd40 	str.w	ip, [r3, #-64]!
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8003eec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003ef0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003ef4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8003ef8:	e010      	b.n	8003f1c <d_print_comp+0x1398>
 8003efa:	2200      	movs	r2, #0
 8003efc:	ab18      	add	r3, sp, #96	; 0x60
 8003efe:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8003f02:	f843 1d40 	str.w	r1, [r3, #-64]!
 8003f06:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8003f0a:	9509      	str	r5, [sp, #36]	; 0x24
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f16:	46a9      	mov	r9, r5
 8003f18:	2a00      	cmp	r2, #0
 8003f1a:	d0eb      	beq.n	8003ef4 <d_print_comp+0x1370>
 8003f1c:	4631      	mov	r1, r6
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f7fe fe30 	bl	8002b84 <d_print_comp>
 8003f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f26:	b923      	cbnz	r3, 8003f32 <d_print_comp+0x13ae>
 8003f28:	464a      	mov	r2, r9
 8003f2a:	4631      	mov	r1, r6
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	f001 fcbf 	bl	80058b0 <d_print_mod>
 8003f32:	9b08      	ldr	r3, [sp, #32]
 8003f34:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f38:	b10f      	cbz	r7, 8003f3e <d_print_comp+0x13ba>
 8003f3a:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8003f3e:	9905      	ldr	r1, [sp, #20]
 8003f40:	686a      	ldr	r2, [r5, #4]
 8003f42:	f7fe bf12 	b.w	8002d6a <d_print_comp+0x1e6>
 8003f46:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003f4a:	4663      	mov	r3, ip
 8003f4c:	f1bc 0f00 	cmp.w	ip, #0
 8003f50:	d0c3      	beq.n	8003eda <d_print_comp+0x1356>
 8003f52:	6899      	ldr	r1, [r3, #8]
 8003f54:	b951      	cbnz	r1, 8003f6c <d_print_comp+0x13e8>
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	f1a2 0e19 	sub.w	lr, r2, #25
 8003f5e:	f1be 0f02 	cmp.w	lr, #2
 8003f62:	f201 80fc 	bhi.w	800515e <d_print_comp+0x25da>
 8003f66:	4290      	cmp	r0, r2
 8003f68:	f001 80f0 	beq.w	800514c <d_print_comp+0x25c8>
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1ef      	bne.n	8003f52 <d_print_comp+0x13ce>
 8003f72:	e7b2      	b.n	8003eda <d_print_comp+0x1356>
 8003f74:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 8003f78:	2f00      	cmp	r7, #0
 8003f7a:	f43e aef6 	beq.w	8002d6a <d_print_comp+0x1e6>
 8003f7e:	4437      	add	r7, r6
 8003f80:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003f84:	3f01      	subs	r7, #1
 8003f86:	3e01      	subs	r6, #1
 8003f88:	f04f 0800 	mov.w	r8, #0
 8003f8c:	e027      	b.n	8003fde <d_print_comp+0x145a>
 8003f8e:	bf00      	nop
 8003f90:	08017e17 	.word	0x08017e17
 8003f94:	08017dff 	.word	0x08017dff
 8003f98:	08017de3 	.word	0x08017de3
 8003f9c:	08017dcb 	.word	0x08017dcb
 8003fa0:	08017db7 	.word	0x08017db7
 8003fa4:	08017da7 	.word	0x08017da7
 8003fa8:	08017d8b 	.word	0x08017d8b
 8003fac:	08017d77 	.word	0x08017d77
 8003fb0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003fb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003fb8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003fbc:	4798      	blx	r3
 8003fbe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2301      	movs	r3, #1
 8003fcc:	42b7      	cmp	r7, r6
 8003fce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003fd2:	f804 9002 	strb.w	r9, [r4, r2]
 8003fd6:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8003fda:	f000 83ce 	beq.w	800477a <d_print_comp+0x1bf6>
 8003fde:	2bff      	cmp	r3, #255	; 0xff
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8003fe8:	d0e2      	beq.n	8003fb0 <d_print_comp+0x142c>
 8003fea:	461a      	mov	r2, r3
 8003fec:	3301      	adds	r3, #1
 8003fee:	e7ed      	b.n	8003fcc <d_print_comp+0x1448>
 8003ff0:	4631      	mov	r1, r6
 8003ff2:	68aa      	ldr	r2, [r5, #8]
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f7fe fdc5 	bl	8002b84 <d_print_comp>
 8003ffa:	9905      	ldr	r1, [sp, #20]
 8003ffc:	686a      	ldr	r2, [r5, #4]
 8003ffe:	f7fe beb4 	b.w	8002d6a <d_print_comp+0x1e6>
 8004002:	f016 0604 	ands.w	r6, r6, #4
 8004006:	68a8      	ldr	r0, [r5, #8]
 8004008:	f040 8505 	bne.w	8004a16 <d_print_comp+0x1e92>
 800400c:	e9d0 7300 	ldrd	r7, r3, [r0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f43e aeaa 	beq.w	8002d6a <d_print_comp+0x1e6>
 8004016:	eb07 0803 	add.w	r8, r7, r3
 800401a:	f108 38ff 	add.w	r8, r8, #4294967295
 800401e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004022:	3f01      	subs	r7, #1
 8004024:	46b1      	mov	r9, r6
 8004026:	e015      	b.n	8004054 <d_print_comp+0x14d0>
 8004028:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800402c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004030:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004034:	4798      	blx	r3
 8004036:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800403a:	3301      	adds	r3, #1
 800403c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004040:	2200      	movs	r2, #0
 8004042:	2301      	movs	r3, #1
 8004044:	45b8      	cmp	r8, r7
 8004046:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800404a:	54a6      	strb	r6, [r4, r2]
 800404c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004050:	f000 8545 	beq.w	8004ade <d_print_comp+0x1f5a>
 8004054:	2bff      	cmp	r3, #255	; 0xff
 8004056:	4619      	mov	r1, r3
 8004058:	4620      	mov	r0, r4
 800405a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800405e:	d0e3      	beq.n	8004028 <d_print_comp+0x14a4>
 8004060:	461a      	mov	r2, r3
 8004062:	3301      	adds	r3, #1
 8004064:	e7ee      	b.n	8004044 <d_print_comp+0x14c0>
 8004066:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800406a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800406e:	9302      	str	r3, [sp, #8]
 8004070:	2200      	movs	r2, #0
 8004072:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8004076:	f1b8 0f00 	cmp.w	r8, #0
 800407a:	d025      	beq.n	80040c8 <d_print_comp+0x1544>
 800407c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8004080:	9301      	str	r3, [sp, #4]
 8004082:	f10d 0920 	add.w	r9, sp, #32
 8004086:	4623      	mov	r3, r4
 8004088:	4617      	mov	r7, r2
 800408a:	4644      	mov	r4, r8
 800408c:	4692      	mov	sl, r2
 800408e:	4649      	mov	r1, r9
 8004090:	46ab      	mov	fp, r5
 8004092:	4698      	mov	r8, r3
 8004094:	7825      	ldrb	r5, [r4, #0]
 8004096:	9b01      	ldr	r3, [sp, #4]
 8004098:	600a      	str	r2, [r1, #0]
 800409a:	4628      	mov	r0, r5
 800409c:	e9c1 4a01 	strd	r4, sl, [r1, #4]
 80040a0:	60cb      	str	r3, [r1, #12]
 80040a2:	3701      	adds	r7, #1
 80040a4:	460a      	mov	r2, r1
 80040a6:	f7fc f97f 	bl	80003a8 <is_fnqual_component_type>
 80040aa:	2800      	cmp	r0, #0
 80040ac:	f000 87c8 	beq.w	8005040 <d_print_comp+0x24bc>
 80040b0:	68a4      	ldr	r4, [r4, #8]
 80040b2:	2c00      	cmp	r4, #0
 80040b4:	f001 8057 	beq.w	8005166 <d_print_comp+0x25e2>
 80040b8:	2f04      	cmp	r7, #4
 80040ba:	f101 0110 	add.w	r1, r1, #16
 80040be:	d1e9      	bne.n	8004094 <d_print_comp+0x1510>
 80040c0:	4644      	mov	r4, r8
 80040c2:	465d      	mov	r5, fp
 80040c4:	f8c8 2114 	str.w	r2, [r8, #276]	; 0x114
 80040c8:	2301      	movs	r3, #1
 80040ca:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80040ce:	9905      	ldr	r1, [sp, #20]
 80040d0:	686a      	ldr	r2, [r5, #4]
 80040d2:	f7fe be4a 	b.w	8002d6a <d_print_comp+0x1e6>
 80040d6:	f016 0604 	ands.w	r6, r6, #4
 80040da:	68af      	ldr	r7, [r5, #8]
 80040dc:	f040 8405 	bne.w	80048ea <d_print_comp+0x1d66>
 80040e0:	68eb      	ldr	r3, [r5, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f43e ae41 	beq.w	8002d6a <d_print_comp+0x1e6>
 80040e8:	eb07 0803 	add.w	r8, r7, r3
 80040ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80040f0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80040f4:	3f01      	subs	r7, #1
 80040f6:	46b1      	mov	r9, r6
 80040f8:	e015      	b.n	8004126 <d_print_comp+0x15a2>
 80040fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80040fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004102:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004106:	4798      	blx	r3
 8004108:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800410c:	3301      	adds	r3, #1
 800410e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004112:	2200      	movs	r2, #0
 8004114:	2301      	movs	r3, #1
 8004116:	45b8      	cmp	r8, r7
 8004118:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800411c:	54a6      	strb	r6, [r4, r2]
 800411e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004122:	f000 84e0 	beq.w	8004ae6 <d_print_comp+0x1f62>
 8004126:	2bff      	cmp	r3, #255	; 0xff
 8004128:	4619      	mov	r1, r3
 800412a:	4620      	mov	r0, r4
 800412c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8004130:	d0e3      	beq.n	80040fa <d_print_comp+0x1576>
 8004132:	461a      	mov	r2, r3
 8004134:	3301      	adds	r3, #1
 8004136:	e7ee      	b.n	8004116 <d_print_comp+0x1592>
 8004138:	68aa      	ldr	r2, [r5, #8]
 800413a:	4631      	mov	r1, r6
 800413c:	4620      	mov	r0, r4
 800413e:	f7fe fd21 	bl	8002b84 <d_print_comp>
 8004142:	f016 0904 	ands.w	r9, r6, #4
 8004146:	f000 8681 	beq.w	8004e4c <d_print_comp+0x22c8>
 800414a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800414e:	2fff      	cmp	r7, #255	; 0xff
 8004150:	d112      	bne.n	8004178 <d_print_comp+0x15f4>
 8004152:	f04f 0800 	mov.w	r8, #0
 8004156:	4639      	mov	r1, r7
 8004158:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800415c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004160:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004164:	4620      	mov	r0, r4
 8004166:	4798      	blx	r3
 8004168:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800416c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004170:	3301      	adds	r3, #1
 8004172:	4647      	mov	r7, r8
 8004174:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004178:	232e      	movs	r3, #46	; 0x2e
 800417a:	1c7a      	adds	r2, r7, #1
 800417c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004180:	55e3      	strb	r3, [r4, r7]
 8004182:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004186:	68ef      	ldr	r7, [r5, #12]
 8004188:	783b      	ldrb	r3, [r7, #0]
 800418a:	2b46      	cmp	r3, #70	; 0x46
 800418c:	f000 873a 	beq.w	8005004 <d_print_comp+0x2480>
 8004190:	463a      	mov	r2, r7
 8004192:	4631      	mov	r1, r6
 8004194:	4620      	mov	r0, r4
 8004196:	f7fe fcf5 	bl	8002b84 <d_print_comp>
 800419a:	9905      	ldr	r1, [sp, #20]
 800419c:	686a      	ldr	r2, [r5, #4]
 800419e:	f7fe bde4 	b.w	8002d6a <d_print_comp+0x1e6>
 80041a2:	2301      	movs	r3, #1
 80041a4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80041a8:	686a      	ldr	r2, [r5, #4]
 80041aa:	f7fe bdde 	b.w	8002d6a <d_print_comp+0x1e6>
 80041ae:	3701      	adds	r7, #1
 80041b0:	454f      	cmp	r7, r9
 80041b2:	f47e ae2b 	bne.w	8002e0c <d_print_comp+0x288>
 80041b6:	9d03      	ldr	r5, [sp, #12]
 80041b8:	9905      	ldr	r1, [sp, #20]
 80041ba:	686a      	ldr	r2, [r5, #4]
 80041bc:	f7fe bdd5 	b.w	8002d6a <d_print_comp+0x1e6>
 80041c0:	4631      	mov	r1, r6
 80041c2:	68aa      	ldr	r2, [r5, #8]
 80041c4:	4620      	mov	r0, r4
 80041c6:	f7fe fcdd 	bl	8002b84 <d_print_comp>
 80041ca:	9905      	ldr	r1, [sp, #20]
 80041cc:	686a      	ldr	r2, [r5, #4]
 80041ce:	f7fe bdcc 	b.w	8002d6a <d_print_comp+0x1e6>
 80041d2:	4631      	mov	r1, r6
 80041d4:	68aa      	ldr	r2, [r5, #8]
 80041d6:	4620      	mov	r0, r4
 80041d8:	f7fe fcd4 	bl	8002b84 <d_print_comp>
 80041dc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80041e0:	2fff      	cmp	r7, #255	; 0xff
 80041e2:	d111      	bne.n	8004208 <d_print_comp+0x1684>
 80041e4:	2600      	movs	r6, #0
 80041e6:	4639      	mov	r1, r7
 80041e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80041ec:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80041f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80041f4:	4620      	mov	r0, r4
 80041f6:	4798      	blx	r3
 80041f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80041fc:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004200:	3301      	adds	r3, #1
 8004202:	4637      	mov	r7, r6
 8004204:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004208:	1c7a      	adds	r2, r7, #1
 800420a:	2329      	movs	r3, #41	; 0x29
 800420c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004210:	55e3      	strb	r3, [r4, r7]
 8004212:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004216:	686a      	ldr	r2, [r5, #4]
 8004218:	9905      	ldr	r1, [sp, #20]
 800421a:	f7fe bda6 	b.w	8002d6a <d_print_comp+0x1e6>
 800421e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8004222:	68aa      	ldr	r2, [r5, #8]
 8004224:	4fd3      	ldr	r7, [pc, #844]	; (8004574 <d_print_comp+0x19f0>)
 8004226:	3301      	adds	r3, #1
 8004228:	4631      	mov	r1, r6
 800422a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 800422e:	4620      	mov	r0, r4
 8004230:	f7fe fca8 	bl	8002b84 <d_print_comp>
 8004234:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8004238:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800423c:	3a01      	subs	r2, #1
 800423e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 8004242:	1cbe      	adds	r6, r7, #2
 8004244:	f04f 0800 	mov.w	r8, #0
 8004248:	e015      	b.n	8004276 <d_print_comp+0x16f2>
 800424a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800424e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004252:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004256:	4798      	blx	r3
 8004258:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800425c:	3301      	adds	r3, #1
 800425e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004262:	2200      	movs	r2, #0
 8004264:	2301      	movs	r3, #1
 8004266:	42b7      	cmp	r7, r6
 8004268:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800426c:	f804 9002 	strb.w	r9, [r4, r2]
 8004270:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004274:	d011      	beq.n	800429a <d_print_comp+0x1716>
 8004276:	2bff      	cmp	r3, #255	; 0xff
 8004278:	4619      	mov	r1, r3
 800427a:	4620      	mov	r0, r4
 800427c:	f817 9b01 	ldrb.w	r9, [r7], #1
 8004280:	d0e3      	beq.n	800424a <d_print_comp+0x16c6>
 8004282:	461a      	mov	r2, r3
 8004284:	3301      	adds	r3, #1
 8004286:	e7ee      	b.n	8004266 <d_print_comp+0x16e2>
 8004288:	4631      	mov	r1, r6
 800428a:	68aa      	ldr	r2, [r5, #8]
 800428c:	4620      	mov	r0, r4
 800428e:	f7fe fc79 	bl	8002b84 <d_print_comp>
 8004292:	9905      	ldr	r1, [sp, #20]
 8004294:	686a      	ldr	r2, [r5, #4]
 8004296:	f7fe bd68 	b.w	8002d6a <d_print_comp+0x1e6>
 800429a:	68ea      	ldr	r2, [r5, #12]
 800429c:	49b6      	ldr	r1, [pc, #728]	; (8004578 <d_print_comp+0x19f4>)
 800429e:	3201      	adds	r2, #1
 80042a0:	a808      	add	r0, sp, #32
 80042a2:	f00f f8ab 	bl	80133fc <sprintf>
 80042a6:	a808      	add	r0, sp, #32
 80042a8:	f002 fd5c 	bl	8006d64 <strlen>
 80042ac:	b328      	cbz	r0, 80042fa <d_print_comp+0x1776>
 80042ae:	ae08      	add	r6, sp, #32
 80042b0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80042b4:	1837      	adds	r7, r6, r0
 80042b6:	f04f 0800 	mov.w	r8, #0
 80042ba:	e015      	b.n	80042e8 <d_print_comp+0x1764>
 80042bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80042c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80042c4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80042c8:	4798      	blx	r3
 80042ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80042ce:	3301      	adds	r3, #1
 80042d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80042d4:	2200      	movs	r2, #0
 80042d6:	2301      	movs	r3, #1
 80042d8:	42be      	cmp	r6, r7
 80042da:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80042de:	f804 9002 	strb.w	r9, [r4, r2]
 80042e2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80042e6:	d00a      	beq.n	80042fe <d_print_comp+0x177a>
 80042e8:	2bff      	cmp	r3, #255	; 0xff
 80042ea:	4619      	mov	r1, r3
 80042ec:	4620      	mov	r0, r4
 80042ee:	f816 9b01 	ldrb.w	r9, [r6], #1
 80042f2:	d0e3      	beq.n	80042bc <d_print_comp+0x1738>
 80042f4:	461a      	mov	r2, r3
 80042f6:	3301      	adds	r3, #1
 80042f8:	e7ee      	b.n	80042d8 <d_print_comp+0x1754>
 80042fa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80042fe:	2bff      	cmp	r3, #255	; 0xff
 8004300:	d110      	bne.n	8004324 <d_print_comp+0x17a0>
 8004302:	2600      	movs	r6, #0
 8004304:	4619      	mov	r1, r3
 8004306:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800430a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800430e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004312:	4620      	mov	r0, r4
 8004314:	4798      	blx	r3
 8004316:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800431a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800431e:	3301      	adds	r3, #1
 8004320:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004324:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004328:	9905      	ldr	r1, [sp, #20]
 800432a:	1c50      	adds	r0, r2, #1
 800432c:	237d      	movs	r3, #125	; 0x7d
 800432e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004332:	54a3      	strb	r3, [r4, r2]
 8004334:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004338:	686a      	ldr	r2, [r5, #4]
 800433a:	f7fe bd16 	b.w	8002d6a <d_print_comp+0x1e6>
 800433e:	4631      	mov	r1, r6
 8004340:	68aa      	ldr	r2, [r5, #8]
 8004342:	4620      	mov	r0, r4
 8004344:	f7fe fc1e 	bl	8002b84 <d_print_comp>
 8004348:	9905      	ldr	r1, [sp, #20]
 800434a:	686a      	ldr	r2, [r5, #4]
 800434c:	f7fe bd0d 	b.w	8002d6a <d_print_comp+0x1e6>
 8004350:	68aa      	ldr	r2, [r5, #8]
 8004352:	4989      	ldr	r1, [pc, #548]	; (8004578 <d_print_comp+0x19f4>)
 8004354:	3201      	adds	r2, #1
 8004356:	a808      	add	r0, sp, #32
 8004358:	f00f f850 	bl	80133fc <sprintf>
 800435c:	a808      	add	r0, sp, #32
 800435e:	f002 fd01 	bl	8006d64 <strlen>
 8004362:	2800      	cmp	r0, #0
 8004364:	d071      	beq.n	800444a <d_print_comp+0x18c6>
 8004366:	ae08      	add	r6, sp, #32
 8004368:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800436c:	1837      	adds	r7, r6, r0
 800436e:	f04f 0800 	mov.w	r8, #0
 8004372:	e015      	b.n	80043a0 <d_print_comp+0x181c>
 8004374:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004378:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800437c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004380:	4798      	blx	r3
 8004382:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004386:	3301      	adds	r3, #1
 8004388:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800438c:	2200      	movs	r2, #0
 800438e:	2301      	movs	r3, #1
 8004390:	42b7      	cmp	r7, r6
 8004392:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004396:	f804 9002 	strb.w	r9, [r4, r2]
 800439a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800439e:	d056      	beq.n	800444e <d_print_comp+0x18ca>
 80043a0:	2bff      	cmp	r3, #255	; 0xff
 80043a2:	4619      	mov	r1, r3
 80043a4:	4620      	mov	r0, r4
 80043a6:	f816 9b01 	ldrb.w	r9, [r6], #1
 80043aa:	d0e3      	beq.n	8004374 <d_print_comp+0x17f0>
 80043ac:	461a      	mov	r2, r3
 80043ae:	3301      	adds	r3, #1
 80043b0:	e7ee      	b.n	8004390 <d_print_comp+0x180c>
 80043b2:	4631      	mov	r1, r6
 80043b4:	68ea      	ldr	r2, [r5, #12]
 80043b6:	4620      	mov	r0, r4
 80043b8:	f7fe fbe4 	bl	8002b84 <d_print_comp>
 80043bc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80043c0:	2fff      	cmp	r7, #255	; 0xff
 80043c2:	d111      	bne.n	80043e8 <d_print_comp+0x1864>
 80043c4:	2600      	movs	r6, #0
 80043c6:	4639      	mov	r1, r7
 80043c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80043cc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80043d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80043d4:	4620      	mov	r0, r4
 80043d6:	4798      	blx	r3
 80043d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80043dc:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80043e0:	3301      	adds	r3, #1
 80043e2:	4637      	mov	r7, r6
 80043e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80043e8:	1c7a      	adds	r2, r7, #1
 80043ea:	235d      	movs	r3, #93	; 0x5d
 80043ec:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80043f0:	55e3      	strb	r3, [r4, r7]
 80043f2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80043f6:	686a      	ldr	r2, [r5, #4]
 80043f8:	9905      	ldr	r1, [sp, #20]
 80043fa:	f7fe bcb6 	b.w	8002d6a <d_print_comp+0x1e6>
 80043fe:	4631      	mov	r1, r6
 8004400:	68ea      	ldr	r2, [r5, #12]
 8004402:	4620      	mov	r0, r4
 8004404:	f7fe fbbe 	bl	8002b84 <d_print_comp>
 8004408:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800440c:	2fff      	cmp	r7, #255	; 0xff
 800440e:	d111      	bne.n	8004434 <d_print_comp+0x18b0>
 8004410:	2600      	movs	r6, #0
 8004412:	4639      	mov	r1, r7
 8004414:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004418:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800441c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004420:	4620      	mov	r0, r4
 8004422:	4798      	blx	r3
 8004424:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004428:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800442c:	3301      	adds	r3, #1
 800442e:	4637      	mov	r7, r6
 8004430:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004434:	1c7a      	adds	r2, r7, #1
 8004436:	235d      	movs	r3, #93	; 0x5d
 8004438:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800443c:	55e3      	strb	r3, [r4, r7]
 800443e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004442:	686a      	ldr	r2, [r5, #4]
 8004444:	9905      	ldr	r1, [sp, #20]
 8004446:	f7fe bc90 	b.w	8002d6a <d_print_comp+0x1e6>
 800444a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800444e:	2bff      	cmp	r3, #255	; 0xff
 8004450:	d110      	bne.n	8004474 <d_print_comp+0x18f0>
 8004452:	2600      	movs	r6, #0
 8004454:	4619      	mov	r1, r3
 8004456:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800445a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800445e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004462:	4620      	mov	r0, r4
 8004464:	4798      	blx	r3
 8004466:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800446a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800446e:	3301      	adds	r3, #1
 8004470:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004474:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004478:	9905      	ldr	r1, [sp, #20]
 800447a:	1c50      	adds	r0, r2, #1
 800447c:	237d      	movs	r3, #125	; 0x7d
 800447e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004482:	54a3      	strb	r3, [r4, r2]
 8004484:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004488:	686a      	ldr	r2, [r5, #4]
 800448a:	f7fe bc6e 	b.w	8002d6a <d_print_comp+0x1e6>
 800448e:	4631      	mov	r1, r6
 8004490:	68aa      	ldr	r2, [r5, #8]
 8004492:	4620      	mov	r0, r4
 8004494:	f7fe fb76 	bl	8002b84 <d_print_comp>
 8004498:	9905      	ldr	r1, [sp, #20]
 800449a:	686a      	ldr	r2, [r5, #4]
 800449c:	f7fe bc65 	b.w	8002d6a <d_print_comp+0x1e6>
 80044a0:	9905      	ldr	r1, [sp, #20]
 80044a2:	686a      	ldr	r2, [r5, #4]
 80044a4:	f7fe bc61 	b.w	8002d6a <d_print_comp+0x1e6>
 80044a8:	4631      	mov	r1, r6
 80044aa:	68aa      	ldr	r2, [r5, #8]
 80044ac:	4620      	mov	r0, r4
 80044ae:	f7fe fb69 	bl	8002b84 <d_print_comp>
 80044b2:	9905      	ldr	r1, [sp, #20]
 80044b4:	686a      	ldr	r2, [r5, #4]
 80044b6:	f7fe bc58 	b.w	8002d6a <d_print_comp+0x1e6>
 80044ba:	4631      	mov	r1, r6
 80044bc:	68ea      	ldr	r2, [r5, #12]
 80044be:	4620      	mov	r0, r4
 80044c0:	f7fe fb60 	bl	8002b84 <d_print_comp>
 80044c4:	9905      	ldr	r1, [sp, #20]
 80044c6:	686a      	ldr	r2, [r5, #4]
 80044c8:	f7fe bc4f 	b.w	8002d6a <d_print_comp+0x1e6>
 80044cc:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 80044d0:	b13a      	cbz	r2, 80044e2 <d_print_comp+0x195e>
 80044d2:	ab18      	add	r3, sp, #96	; 0x60
 80044d4:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 80044d8:	f843 1d40 	str.w	r1, [r3, #-64]!
 80044dc:	9209      	str	r2, [sp, #36]	; 0x24
 80044de:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80044e2:	68aa      	ldr	r2, [r5, #8]
 80044e4:	7813      	ldrb	r3, [r2, #0]
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	f000 84d6 	beq.w	8004e98 <d_print_comp+0x2314>
 80044ec:	4631      	mov	r1, r6
 80044ee:	4620      	mov	r0, r4
 80044f0:	f7fe fb48 	bl	8002b84 <d_print_comp>
 80044f4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80044f8:	b113      	cbz	r3, 8004500 <d_print_comp+0x197c>
 80044fa:	9b08      	ldr	r3, [sp, #32]
 80044fc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004500:	9905      	ldr	r1, [sp, #20]
 8004502:	686a      	ldr	r2, [r5, #4]
 8004504:	f7fe bc31 	b.w	8002d6a <d_print_comp+0x1e6>
 8004508:	f8da 6004 	ldr.w	r6, [sl, #4]
 800450c:	7832      	ldrb	r2, [r6, #0]
 800450e:	3a61      	subs	r2, #97	; 0x61
 8004510:	2a19      	cmp	r2, #25
 8004512:	d81d      	bhi.n	8004550 <d_print_comp+0x19cc>
 8004514:	2bff      	cmp	r3, #255	; 0xff
 8004516:	d110      	bne.n	800453a <d_print_comp+0x19b6>
 8004518:	2600      	movs	r6, #0
 800451a:	4619      	mov	r1, r3
 800451c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004520:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004524:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004528:	4620      	mov	r0, r4
 800452a:	4798      	blx	r3
 800452c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004530:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004534:	3301      	adds	r3, #1
 8004536:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800453a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 800453e:	2320      	movs	r3, #32
 8004540:	1c51      	adds	r1, r2, #1
 8004542:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004546:	54a3      	strb	r3, [r4, r2]
 8004548:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800454c:	f8da 6004 	ldr.w	r6, [sl, #4]
 8004550:	19f3      	adds	r3, r6, r7
 8004552:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004556:	2b20      	cmp	r3, #32
 8004558:	bf08      	it	eq
 800455a:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800455e:	2f00      	cmp	r7, #0
 8004560:	f000 86fb 	beq.w	800535a <d_print_comp+0x27d6>
 8004564:	3e01      	subs	r6, #1
 8004566:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800456a:	4437      	add	r7, r6
 800456c:	f04f 0800 	mov.w	r8, #0
 8004570:	e01b      	b.n	80045aa <d_print_comp+0x1a26>
 8004572:	bf00      	nop
 8004574:	08017f34 	.word	0x08017f34
 8004578:	08017c84 	.word	0x08017c84
 800457c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004580:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004584:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004588:	4798      	blx	r3
 800458a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800458e:	3301      	adds	r3, #1
 8004590:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004594:	2200      	movs	r2, #0
 8004596:	2301      	movs	r3, #1
 8004598:	42be      	cmp	r6, r7
 800459a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800459e:	f804 9002 	strb.w	r9, [r4, r2]
 80045a2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80045a6:	f000 80ec 	beq.w	8004782 <d_print_comp+0x1bfe>
 80045aa:	2bff      	cmp	r3, #255	; 0xff
 80045ac:	4619      	mov	r1, r3
 80045ae:	4620      	mov	r0, r4
 80045b0:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 80045b4:	d0e2      	beq.n	800457c <d_print_comp+0x19f8>
 80045b6:	461a      	mov	r2, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	e7ed      	b.n	8004598 <d_print_comp+0x1a14>
 80045bc:	4631      	mov	r1, r6
 80045be:	68aa      	ldr	r2, [r5, #8]
 80045c0:	4620      	mov	r0, r4
 80045c2:	f7fe fadf 	bl	8002b84 <d_print_comp>
 80045c6:	9905      	ldr	r1, [sp, #20]
 80045c8:	686a      	ldr	r2, [r5, #4]
 80045ca:	f7fe bbce 	b.w	8002d6a <d_print_comp+0x1e6>
 80045ce:	4631      	mov	r1, r6
 80045d0:	68aa      	ldr	r2, [r5, #8]
 80045d2:	4620      	mov	r0, r4
 80045d4:	f7fe fad6 	bl	8002b84 <d_print_comp>
 80045d8:	9905      	ldr	r1, [sp, #20]
 80045da:	686a      	ldr	r2, [r5, #4]
 80045dc:	f7fe bbc5 	b.w	8002d6a <d_print_comp+0x1e6>
 80045e0:	4631      	mov	r1, r6
 80045e2:	68aa      	ldr	r2, [r5, #8]
 80045e4:	4620      	mov	r0, r4
 80045e6:	f7fe facd 	bl	8002b84 <d_print_comp>
 80045ea:	9905      	ldr	r1, [sp, #20]
 80045ec:	686a      	ldr	r2, [r5, #4]
 80045ee:	f7fe bbbc 	b.w	8002d6a <d_print_comp+0x1e6>
 80045f2:	4631      	mov	r1, r6
 80045f4:	68aa      	ldr	r2, [r5, #8]
 80045f6:	4620      	mov	r0, r4
 80045f8:	f7fe fac4 	bl	8002b84 <d_print_comp>
 80045fc:	9905      	ldr	r1, [sp, #20]
 80045fe:	686a      	ldr	r2, [r5, #4]
 8004600:	f7fe bbb3 	b.w	8002d6a <d_print_comp+0x1e6>
 8004604:	4631      	mov	r1, r6
 8004606:	68aa      	ldr	r2, [r5, #8]
 8004608:	4620      	mov	r0, r4
 800460a:	f7fe fabb 	bl	8002b84 <d_print_comp>
 800460e:	9905      	ldr	r1, [sp, #20]
 8004610:	686a      	ldr	r2, [r5, #4]
 8004612:	f7fe bbaa 	b.w	8002d6a <d_print_comp+0x1e6>
 8004616:	4631      	mov	r1, r6
 8004618:	68aa      	ldr	r2, [r5, #8]
 800461a:	4620      	mov	r0, r4
 800461c:	f7fe fab2 	bl	8002b84 <d_print_comp>
 8004620:	9905      	ldr	r1, [sp, #20]
 8004622:	686a      	ldr	r2, [r5, #4]
 8004624:	f7fe bba1 	b.w	8002d6a <d_print_comp+0x1e6>
 8004628:	4631      	mov	r1, r6
 800462a:	68aa      	ldr	r2, [r5, #8]
 800462c:	4620      	mov	r0, r4
 800462e:	f7fe faa9 	bl	8002b84 <d_print_comp>
 8004632:	9905      	ldr	r1, [sp, #20]
 8004634:	686a      	ldr	r2, [r5, #4]
 8004636:	f7fe bb98 	b.w	8002d6a <d_print_comp+0x1e6>
 800463a:	4631      	mov	r1, r6
 800463c:	68aa      	ldr	r2, [r5, #8]
 800463e:	4620      	mov	r0, r4
 8004640:	f7fe faa0 	bl	8002b84 <d_print_comp>
 8004644:	9905      	ldr	r1, [sp, #20]
 8004646:	686a      	ldr	r2, [r5, #4]
 8004648:	f7fe bb8f 	b.w	8002d6a <d_print_comp+0x1e6>
 800464c:	4fcf      	ldr	r7, [pc, #828]	; (800498c <d_print_comp+0x1e08>)
 800464e:	68ea      	ldr	r2, [r5, #12]
 8004650:	4631      	mov	r1, r6
 8004652:	4620      	mov	r0, r4
 8004654:	f7fe fa96 	bl	8002b84 <d_print_comp>
 8004658:	f107 0805 	add.w	r8, r7, #5
 800465c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004660:	f04f 0900 	mov.w	r9, #0
 8004664:	e015      	b.n	8004692 <d_print_comp+0x1b0e>
 8004666:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800466a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800466e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004672:	4798      	blx	r3
 8004674:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004678:	3301      	adds	r3, #1
 800467a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800467e:	2200      	movs	r2, #0
 8004680:	2301      	movs	r3, #1
 8004682:	4547      	cmp	r7, r8
 8004684:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004688:	f804 a002 	strb.w	sl, [r4, r2]
 800468c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8004690:	d008      	beq.n	80046a4 <d_print_comp+0x1b20>
 8004692:	2bff      	cmp	r3, #255	; 0xff
 8004694:	4619      	mov	r1, r3
 8004696:	4620      	mov	r0, r4
 8004698:	f817 ab01 	ldrb.w	sl, [r7], #1
 800469c:	d0e3      	beq.n	8004666 <d_print_comp+0x1ae2>
 800469e:	461a      	mov	r2, r3
 80046a0:	3301      	adds	r3, #1
 80046a2:	e7ee      	b.n	8004682 <d_print_comp+0x1afe>
 80046a4:	4631      	mov	r1, r6
 80046a6:	68aa      	ldr	r2, [r5, #8]
 80046a8:	4620      	mov	r0, r4
 80046aa:	f7fe fa6b 	bl	8002b84 <d_print_comp>
 80046ae:	9905      	ldr	r1, [sp, #20]
 80046b0:	686a      	ldr	r2, [r5, #4]
 80046b2:	f7fe bb5a 	b.w	8002d6a <d_print_comp+0x1e6>
 80046b6:	4fb6      	ldr	r7, [pc, #728]	; (8004990 <d_print_comp+0x1e0c>)
 80046b8:	68aa      	ldr	r2, [r5, #8]
 80046ba:	4631      	mov	r1, r6
 80046bc:	4620      	mov	r0, r4
 80046be:	f7fe fa61 	bl	8002b84 <d_print_comp>
 80046c2:	f107 0804 	add.w	r8, r7, #4
 80046c6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80046ca:	f04f 0900 	mov.w	r9, #0
 80046ce:	e015      	b.n	80046fc <d_print_comp+0x1b78>
 80046d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80046d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80046d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80046dc:	4798      	blx	r3
 80046de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80046e2:	3301      	adds	r3, #1
 80046e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80046e8:	2200      	movs	r2, #0
 80046ea:	2301      	movs	r3, #1
 80046ec:	45b8      	cmp	r8, r7
 80046ee:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80046f2:	f804 a002 	strb.w	sl, [r4, r2]
 80046f6:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80046fa:	d008      	beq.n	800470e <d_print_comp+0x1b8a>
 80046fc:	2bff      	cmp	r3, #255	; 0xff
 80046fe:	4619      	mov	r1, r3
 8004700:	4620      	mov	r0, r4
 8004702:	f817 ab01 	ldrb.w	sl, [r7], #1
 8004706:	d0e3      	beq.n	80046d0 <d_print_comp+0x1b4c>
 8004708:	461a      	mov	r2, r3
 800470a:	3301      	adds	r3, #1
 800470c:	e7ee      	b.n	80046ec <d_print_comp+0x1b68>
 800470e:	4631      	mov	r1, r6
 8004710:	68ea      	ldr	r2, [r5, #12]
 8004712:	4620      	mov	r0, r4
 8004714:	f7fe fa36 	bl	8002b84 <d_print_comp>
 8004718:	9905      	ldr	r1, [sp, #20]
 800471a:	686a      	ldr	r2, [r5, #4]
 800471c:	f7fe bb25 	b.w	8002d6a <d_print_comp+0x1e6>
 8004720:	4631      	mov	r1, r6
 8004722:	68aa      	ldr	r2, [r5, #8]
 8004724:	4620      	mov	r0, r4
 8004726:	f7fe fa2d 	bl	8002b84 <d_print_comp>
 800472a:	9905      	ldr	r1, [sp, #20]
 800472c:	686a      	ldr	r2, [r5, #4]
 800472e:	f7fe bb1c 	b.w	8002d6a <d_print_comp+0x1e6>
 8004732:	4631      	mov	r1, r6
 8004734:	68aa      	ldr	r2, [r5, #8]
 8004736:	4620      	mov	r0, r4
 8004738:	f7fe fa24 	bl	8002b84 <d_print_comp>
 800473c:	9905      	ldr	r1, [sp, #20]
 800473e:	686a      	ldr	r2, [r5, #4]
 8004740:	f7fe bb13 	b.w	8002d6a <d_print_comp+0x1e6>
 8004744:	4631      	mov	r1, r6
 8004746:	68aa      	ldr	r2, [r5, #8]
 8004748:	4620      	mov	r0, r4
 800474a:	f7fe fa1b 	bl	8002b84 <d_print_comp>
 800474e:	9905      	ldr	r1, [sp, #20]
 8004750:	686a      	ldr	r2, [r5, #4]
 8004752:	f7fe bb0a 	b.w	8002d6a <d_print_comp+0x1e6>
 8004756:	4631      	mov	r1, r6
 8004758:	68aa      	ldr	r2, [r5, #8]
 800475a:	4620      	mov	r0, r4
 800475c:	f7fe fa12 	bl	8002b84 <d_print_comp>
 8004760:	9905      	ldr	r1, [sp, #20]
 8004762:	686a      	ldr	r2, [r5, #4]
 8004764:	f7fe bb01 	b.w	8002d6a <d_print_comp+0x1e6>
 8004768:	4631      	mov	r1, r6
 800476a:	68aa      	ldr	r2, [r5, #8]
 800476c:	4620      	mov	r0, r4
 800476e:	f7fe fa09 	bl	8002b84 <d_print_comp>
 8004772:	9905      	ldr	r1, [sp, #20]
 8004774:	686a      	ldr	r2, [r5, #4]
 8004776:	f7fe baf8 	b.w	8002d6a <d_print_comp+0x1e6>
 800477a:	9905      	ldr	r1, [sp, #20]
 800477c:	686a      	ldr	r2, [r5, #4]
 800477e:	f7fe baf4 	b.w	8002d6a <d_print_comp+0x1e6>
 8004782:	9905      	ldr	r1, [sp, #20]
 8004784:	686a      	ldr	r2, [r5, #4]
 8004786:	f7fe baf0 	b.w	8002d6a <d_print_comp+0x1e6>
 800478a:	4631      	mov	r1, r6
 800478c:	68ea      	ldr	r2, [r5, #12]
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	4620      	mov	r0, r4
 8004792:	f8d4 6124 	ldr.w	r6, [r4, #292]	; 0x124
 8004796:	f7fe f9f5 	bl	8002b84 <d_print_comp>
 800479a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800479e:	9b01      	ldr	r3, [sp, #4]
 80047a0:	4296      	cmp	r6, r2
 80047a2:	f000 8441 	beq.w	8005028 <d_print_comp+0x24a4>
 80047a6:	9905      	ldr	r1, [sp, #20]
 80047a8:	686a      	ldr	r2, [r5, #4]
 80047aa:	f7fe bade 	b.w	8002d6a <d_print_comp+0x1e6>
 80047ae:	4e79      	ldr	r6, [pc, #484]	; (8004994 <d_print_comp+0x1e10>)
 80047b0:	4690      	mov	r8, r2
 80047b2:	f106 0906 	add.w	r9, r6, #6
 80047b6:	e014      	b.n	80047e2 <d_print_comp+0x1c5e>
 80047b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80047bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80047c0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80047c4:	4798      	blx	r3
 80047c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80047ca:	3301      	adds	r3, #1
 80047cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80047d0:	2200      	movs	r2, #0
 80047d2:	2301      	movs	r3, #1
 80047d4:	45b1      	cmp	r9, r6
 80047d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80047da:	54a7      	strb	r7, [r4, r2]
 80047dc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80047e0:	d008      	beq.n	80047f4 <d_print_comp+0x1c70>
 80047e2:	2bff      	cmp	r3, #255	; 0xff
 80047e4:	4619      	mov	r1, r3
 80047e6:	4620      	mov	r0, r4
 80047e8:	f816 7b01 	ldrb.w	r7, [r6], #1
 80047ec:	d0e4      	beq.n	80047b8 <d_print_comp+0x1c34>
 80047ee:	461a      	mov	r2, r3
 80047f0:	3301      	adds	r3, #1
 80047f2:	e7ef      	b.n	80047d4 <d_print_comp+0x1c50>
 80047f4:	9905      	ldr	r1, [sp, #20]
 80047f6:	686a      	ldr	r2, [r5, #4]
 80047f8:	f7fe bab7 	b.w	8002d6a <d_print_comp+0x1e6>
 80047fc:	4642      	mov	r2, r8
 80047fe:	a808      	add	r0, sp, #32
 8004800:	4965      	ldr	r1, [pc, #404]	; (8004998 <d_print_comp+0x1e14>)
 8004802:	f00e fdfb 	bl	80133fc <sprintf>
 8004806:	a808      	add	r0, sp, #32
 8004808:	f002 faac 	bl	8006d64 <strlen>
 800480c:	b328      	cbz	r0, 800485a <d_print_comp+0x1cd6>
 800480e:	ae08      	add	r6, sp, #32
 8004810:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004814:	eb06 0900 	add.w	r9, r6, r0
 8004818:	f04f 0800 	mov.w	r8, #0
 800481c:	e014      	b.n	8004848 <d_print_comp+0x1cc4>
 800481e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004822:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004826:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800482a:	4798      	blx	r3
 800482c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004830:	3301      	adds	r3, #1
 8004832:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004836:	2200      	movs	r2, #0
 8004838:	2301      	movs	r3, #1
 800483a:	45b1      	cmp	r9, r6
 800483c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004840:	54a7      	strb	r7, [r4, r2]
 8004842:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004846:	d008      	beq.n	800485a <d_print_comp+0x1cd6>
 8004848:	2bff      	cmp	r3, #255	; 0xff
 800484a:	4619      	mov	r1, r3
 800484c:	4620      	mov	r0, r4
 800484e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004852:	d0e4      	beq.n	800481e <d_print_comp+0x1c9a>
 8004854:	461a      	mov	r2, r3
 8004856:	3301      	adds	r3, #1
 8004858:	e7ef      	b.n	800483a <d_print_comp+0x1cb6>
 800485a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800485e:	2fff      	cmp	r7, #255	; 0xff
 8004860:	d111      	bne.n	8004886 <d_print_comp+0x1d02>
 8004862:	2600      	movs	r6, #0
 8004864:	4639      	mov	r1, r7
 8004866:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800486a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800486e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004872:	4620      	mov	r0, r4
 8004874:	4798      	blx	r3
 8004876:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800487a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800487e:	3301      	adds	r3, #1
 8004880:	4637      	mov	r7, r6
 8004882:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004886:	1c7a      	adds	r2, r7, #1
 8004888:	237d      	movs	r3, #125	; 0x7d
 800488a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800488e:	55e3      	strb	r3, [r4, r7]
 8004890:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004894:	686a      	ldr	r2, [r5, #4]
 8004896:	9905      	ldr	r1, [sp, #20]
 8004898:	f7fe ba67 	b.w	8002d6a <d_print_comp+0x1e6>
 800489c:	4e3f      	ldr	r6, [pc, #252]	; (800499c <d_print_comp+0x1e18>)
 800489e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80048a2:	f106 0905 	add.w	r9, r6, #5
 80048a6:	f04f 0800 	mov.w	r8, #0
 80048aa:	e015      	b.n	80048d8 <d_print_comp+0x1d54>
 80048ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048b4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80048b8:	4798      	blx	r3
 80048ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048be:	3301      	adds	r3, #1
 80048c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80048c4:	2200      	movs	r2, #0
 80048c6:	2301      	movs	r3, #1
 80048c8:	45b1      	cmp	r9, r6
 80048ca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80048ce:	54a7      	strb	r7, [r4, r2]
 80048d0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80048d4:	f000 80cf 	beq.w	8004a76 <d_print_comp+0x1ef2>
 80048d8:	2bff      	cmp	r3, #255	; 0xff
 80048da:	4619      	mov	r1, r3
 80048dc:	4620      	mov	r0, r4
 80048de:	f816 7b01 	ldrb.w	r7, [r6], #1
 80048e2:	d0e3      	beq.n	80048ac <d_print_comp+0x1d28>
 80048e4:	461a      	mov	r2, r3
 80048e6:	3301      	adds	r3, #1
 80048e8:	e7ee      	b.n	80048c8 <d_print_comp+0x1d44>
 80048ea:	68ee      	ldr	r6, [r5, #12]
 80048ec:	443e      	add	r6, r7
 80048ee:	42be      	cmp	r6, r7
 80048f0:	f67e aa3b 	bls.w	8002d6a <d_print_comp+0x1e6>
 80048f4:	f04f 0800 	mov.w	r8, #0
 80048f8:	e018      	b.n	800492c <d_print_comp+0x1da8>
 80048fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048fe:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004902:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004906:	4620      	mov	r0, r4
 8004908:	4798      	blx	r3
 800490a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800490e:	3301      	adds	r3, #1
 8004910:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004914:	2100      	movs	r1, #0
 8004916:	2301      	movs	r3, #1
 8004918:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800491c:	f804 9001 	strb.w	r9, [r4, r1]
 8004920:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004924:	3701      	adds	r7, #1
 8004926:	42be      	cmp	r6, r7
 8004928:	f240 80e1 	bls.w	8004aee <d_print_comp+0x1f6a>
 800492c:	1bf3      	subs	r3, r6, r7
 800492e:	2b03      	cmp	r3, #3
 8004930:	f897 9000 	ldrb.w	r9, [r7]
 8004934:	dd02      	ble.n	800493c <d_print_comp+0x1db8>
 8004936:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800493a:	d005      	beq.n	8004948 <d_print_comp+0x1dc4>
 800493c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004940:	29ff      	cmp	r1, #255	; 0xff
 8004942:	d0da      	beq.n	80048fa <d_print_comp+0x1d76>
 8004944:	1c4b      	adds	r3, r1, #1
 8004946:	e7e7      	b.n	8004918 <d_print_comp+0x1d94>
 8004948:	787b      	ldrb	r3, [r7, #1]
 800494a:	2b5f      	cmp	r3, #95	; 0x5f
 800494c:	d1f6      	bne.n	800493c <d_print_comp+0x1db8>
 800494e:	78bb      	ldrb	r3, [r7, #2]
 8004950:	2b55      	cmp	r3, #85	; 0x55
 8004952:	d1f3      	bne.n	800493c <d_print_comp+0x1db8>
 8004954:	1cf9      	adds	r1, r7, #3
 8004956:	2000      	movs	r0, #0
 8004958:	e002      	b.n	8004960 <d_print_comp+0x1ddc>
 800495a:	4613      	mov	r3, r2
 800495c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8004960:	428e      	cmp	r6, r1
 8004962:	468a      	mov	sl, r1
 8004964:	d9ea      	bls.n	800493c <d_print_comp+0x1db8>
 8004966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800496a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800496e:	fa5f fe82 	uxtb.w	lr, r2
 8004972:	f1be 0f09 	cmp.w	lr, #9
 8004976:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 800497a:	d9ee      	bls.n	800495a <d_print_comp+0x1dd6>
 800497c:	f1bc 0f05 	cmp.w	ip, #5
 8004980:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004984:	f200 85c7 	bhi.w	8005516 <d_print_comp+0x2992>
 8004988:	3b37      	subs	r3, #55	; 0x37
 800498a:	e7e7      	b.n	800495c <d_print_comp+0x1dd8>
 800498c:	08017df8 	.word	0x08017df8
 8004990:	08017d34 	.word	0x08017d34
 8004994:	08017e58 	.word	0x08017e58
 8004998:	08017c84 	.word	0x08017c84
 800499c:	08017cf8 	.word	0x08017cf8
 80049a0:	9905      	ldr	r1, [sp, #20]
 80049a2:	686a      	ldr	r2, [r5, #4]
 80049a4:	f7fe b9e1 	b.w	8002d6a <d_print_comp+0x1e6>
 80049a8:	68aa      	ldr	r2, [r5, #8]
 80049aa:	9201      	str	r2, [sp, #4]
 80049ac:	4619      	mov	r1, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f47e aa26 	bne.w	8002e00 <d_print_comp+0x27c>
 80049b4:	9905      	ldr	r1, [sp, #20]
 80049b6:	686a      	ldr	r2, [r5, #4]
 80049b8:	f7fe b9d7 	b.w	8002d6a <d_print_comp+0x1e6>
 80049bc:	4ece      	ldr	r6, [pc, #824]	; (8004cf8 <d_print_comp+0x2174>)
 80049be:	f106 0904 	add.w	r9, r6, #4
 80049c2:	e014      	b.n	80049ee <d_print_comp+0x1e6a>
 80049c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80049c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80049cc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80049d0:	4798      	blx	r3
 80049d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049d6:	3301      	adds	r3, #1
 80049d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049dc:	2200      	movs	r2, #0
 80049de:	2301      	movs	r3, #1
 80049e0:	45b1      	cmp	r9, r6
 80049e2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80049e6:	54a7      	strb	r7, [r4, r2]
 80049e8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80049ec:	d008      	beq.n	8004a00 <d_print_comp+0x1e7c>
 80049ee:	2bff      	cmp	r3, #255	; 0xff
 80049f0:	4619      	mov	r1, r3
 80049f2:	4620      	mov	r0, r4
 80049f4:	f816 7b01 	ldrb.w	r7, [r6], #1
 80049f8:	d0e4      	beq.n	80049c4 <d_print_comp+0x1e40>
 80049fa:	461a      	mov	r2, r3
 80049fc:	3301      	adds	r3, #1
 80049fe:	e7ef      	b.n	80049e0 <d_print_comp+0x1e5c>
 8004a00:	9905      	ldr	r1, [sp, #20]
 8004a02:	686a      	ldr	r2, [r5, #4]
 8004a04:	f7fe b9b1 	b.w	8002d6a <d_print_comp+0x1e6>
 8004a08:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8004a0c:	f7ff ba66 	b.w	8003edc <d_print_comp+0x1358>
 8004a10:	2700      	movs	r7, #0
 8004a12:	f7ff ba54 	b.w	8003ebe <d_print_comp+0x133a>
 8004a16:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
 8004a1a:	2f00      	cmp	r7, #0
 8004a1c:	f43e a9a5 	beq.w	8002d6a <d_print_comp+0x1e6>
 8004a20:	4437      	add	r7, r6
 8004a22:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004a26:	3f01      	subs	r7, #1
 8004a28:	3e01      	subs	r6, #1
 8004a2a:	f04f 0900 	mov.w	r9, #0
 8004a2e:	e015      	b.n	8004a5c <d_print_comp+0x1ed8>
 8004a30:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a38:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004a3c:	4798      	blx	r3
 8004a3e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a42:	3301      	adds	r3, #1
 8004a44:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	42b7      	cmp	r7, r6
 8004a4e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004a52:	f804 8002 	strb.w	r8, [r4, r2]
 8004a56:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004a5a:	d008      	beq.n	8004a6e <d_print_comp+0x1eea>
 8004a5c:	2bff      	cmp	r3, #255	; 0xff
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4620      	mov	r0, r4
 8004a62:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8004a66:	d0e3      	beq.n	8004a30 <d_print_comp+0x1eac>
 8004a68:	461a      	mov	r2, r3
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	e7ee      	b.n	8004a4c <d_print_comp+0x1ec8>
 8004a6e:	9905      	ldr	r1, [sp, #20]
 8004a70:	686a      	ldr	r2, [r5, #4]
 8004a72:	f7fe b97a 	b.w	8002d6a <d_print_comp+0x1e6>
 8004a76:	68aa      	ldr	r2, [r5, #8]
 8004a78:	49a0      	ldr	r1, [pc, #640]	; (8004cfc <d_print_comp+0x2178>)
 8004a7a:	3201      	adds	r2, #1
 8004a7c:	a808      	add	r0, sp, #32
 8004a7e:	f00e fcbd 	bl	80133fc <sprintf>
 8004a82:	a808      	add	r0, sp, #32
 8004a84:	f002 f96e 	bl	8006d64 <strlen>
 8004a88:	b328      	cbz	r0, 8004ad6 <d_print_comp+0x1f52>
 8004a8a:	ae08      	add	r6, sp, #32
 8004a8c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004a90:	eb06 0900 	add.w	r9, r6, r0
 8004a94:	f04f 0800 	mov.w	r8, #0
 8004a98:	e014      	b.n	8004ac4 <d_print_comp+0x1f40>
 8004a9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a9e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004aa2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004aa6:	4798      	blx	r3
 8004aa8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004aac:	3301      	adds	r3, #1
 8004aae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	45b1      	cmp	r9, r6
 8004ab8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004abc:	54a7      	strb	r7, [r4, r2]
 8004abe:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004ac2:	d008      	beq.n	8004ad6 <d_print_comp+0x1f52>
 8004ac4:	2bff      	cmp	r3, #255	; 0xff
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004ace:	d0e4      	beq.n	8004a9a <d_print_comp+0x1f16>
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	e7ef      	b.n	8004ab6 <d_print_comp+0x1f32>
 8004ad6:	9905      	ldr	r1, [sp, #20]
 8004ad8:	686a      	ldr	r2, [r5, #4]
 8004ada:	f7fe b946 	b.w	8002d6a <d_print_comp+0x1e6>
 8004ade:	9905      	ldr	r1, [sp, #20]
 8004ae0:	686a      	ldr	r2, [r5, #4]
 8004ae2:	f7fe b942 	b.w	8002d6a <d_print_comp+0x1e6>
 8004ae6:	9905      	ldr	r1, [sp, #20]
 8004ae8:	686a      	ldr	r2, [r5, #4]
 8004aea:	f7fe b93e 	b.w	8002d6a <d_print_comp+0x1e6>
 8004aee:	9905      	ldr	r1, [sp, #20]
 8004af0:	686a      	ldr	r2, [r5, #4]
 8004af2:	f7fe b93a 	b.w	8002d6a <d_print_comp+0x1e6>
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b3b      	cmp	r3, #59	; 0x3b
 8004afc:	f47e abf6 	bne.w	80032ec <d_print_comp+0x768>
 8004b00:	f105 030c 	add.w	r3, r5, #12
 8004b04:	68aa      	ldr	r2, [r5, #8]
 8004b06:	4631      	mov	r1, r6
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f001 fd95 	bl	8006638 <d_maybe_print_fold_expression.isra.20>
 8004b0e:	4680      	mov	r8, r0
 8004b10:	2800      	cmp	r0, #0
 8004b12:	f040 86a0 	bne.w	8005856 <d_print_comp+0x2cd2>
 8004b16:	e9d5 7202 	ldrd	r7, r2, [r5, #8]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	68d3      	ldr	r3, [r2, #12]
 8004b1e:	6808      	ldr	r0, [r1, #0]
 8004b20:	4977      	ldr	r1, [pc, #476]	; (8004d00 <d_print_comp+0x217c>)
 8004b22:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8004b26:	e9d3 a902 	ldrd	sl, r9, [r3, #8]
 8004b2a:	f002 f911 	bl	8006d50 <strcmp>
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	f000 8674 	beq.w	800581c <d_print_comp+0x2c98>
 8004b34:	2204      	movs	r2, #4
 8004b36:	4973      	ldr	r1, [pc, #460]	; (8004d04 <d_print_comp+0x2180>)
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f7fb fbff 	bl	800033c <d_append_buffer>
 8004b3e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004b42:	b303      	cbz	r3, 8004b86 <d_print_comp+0x2002>
 8004b44:	465a      	mov	r2, fp
 8004b46:	4631      	mov	r1, r6
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f001 fd23 	bl	8006594 <d_print_subexpr>
 8004b4e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004b52:	2fff      	cmp	r7, #255	; 0xff
 8004b54:	d110      	bne.n	8004b78 <d_print_comp+0x1ff4>
 8004b56:	4639      	mov	r1, r7
 8004b58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004b5c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004b60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004b64:	4620      	mov	r0, r4
 8004b66:	4798      	blx	r3
 8004b68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004b6c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004b70:	3301      	adds	r3, #1
 8004b72:	4647      	mov	r7, r8
 8004b74:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004b78:	2320      	movs	r3, #32
 8004b7a:	1c7a      	adds	r2, r7, #1
 8004b7c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004b80:	55e3      	strb	r3, [r4, r7]
 8004b82:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004b86:	4652      	mov	r2, sl
 8004b88:	4631      	mov	r1, r6
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f7fd fffa 	bl	8002b84 <d_print_comp>
 8004b90:	f1b9 0f00 	cmp.w	r9, #0
 8004b94:	f000 8663 	beq.w	800585e <d_print_comp+0x2cda>
 8004b98:	464a      	mov	r2, r9
 8004b9a:	4631      	mov	r1, r6
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f001 fcf9 	bl	8006594 <d_print_subexpr>
 8004ba2:	9905      	ldr	r1, [sp, #20]
 8004ba4:	686a      	ldr	r2, [r5, #4]
 8004ba6:	f7fe b8e0 	b.w	8002d6a <d_print_comp+0x1e6>
 8004baa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004bae:	4956      	ldr	r1, [pc, #344]	; (8004d08 <d_print_comp+0x2184>)
 8004bb0:	f8d3 a000 	ldr.w	sl, [r3]
 8004bb4:	4650      	mov	r0, sl
 8004bb6:	f002 f8cb 	bl	8006d50 <strcmp>
 8004bba:	f898 3000 	ldrb.w	r3, [r8]
 8004bbe:	b910      	cbnz	r0, 8004bc6 <d_print_comp+0x2042>
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	f000 852b 	beq.w	800561c <d_print_comp+0x2a98>
 8004bc6:	2b38      	cmp	r3, #56	; 0x38
 8004bc8:	f000 850c 	beq.w	80055e4 <d_print_comp+0x2a60>
 8004bcc:	494f      	ldr	r1, [pc, #316]	; (8004d0c <d_print_comp+0x2188>)
 8004bce:	4650      	mov	r0, sl
 8004bd0:	f002 f8be 	bl	8006d50 <strcmp>
 8004bd4:	4607      	mov	r7, r0
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	f000 8513 	beq.w	8005602 <d_print_comp+0x2a7e>
 8004bdc:	494c      	ldr	r1, [pc, #304]	; (8004d10 <d_print_comp+0x218c>)
 8004bde:	4650      	mov	r0, sl
 8004be0:	f002 f8b6 	bl	8006d50 <strcmp>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	f000 8333 	beq.w	8005250 <d_print_comp+0x26cc>
 8004bea:	4631      	mov	r1, r6
 8004bec:	4620      	mov	r0, r4
 8004bee:	464a      	mov	r2, r9
 8004bf0:	f001 fc90 	bl	8006514 <d_print_expr_op>
 8004bf4:	4947      	ldr	r1, [pc, #284]	; (8004d14 <d_print_comp+0x2190>)
 8004bf6:	4650      	mov	r0, sl
 8004bf8:	f002 f8aa 	bl	8006d50 <strcmp>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	f000 83b0 	beq.w	8005362 <d_print_comp+0x27de>
 8004c02:	4650      	mov	r0, sl
 8004c04:	4944      	ldr	r1, [pc, #272]	; (8004d18 <d_print_comp+0x2194>)
 8004c06:	f002 f8a3 	bl	8006d50 <strcmp>
 8004c0a:	4681      	mov	r9, r0
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	f47e abd7 	bne.w	80033c0 <d_print_comp+0x83c>
 8004c12:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c16:	2fff      	cmp	r7, #255	; 0xff
 8004c18:	d110      	bne.n	8004c3c <d_print_comp+0x20b8>
 8004c1a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8004c1e:	4639      	mov	r1, r7
 8004c20:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c24:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c28:	4620      	mov	r0, r4
 8004c2a:	4798      	blx	r3
 8004c2c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c30:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8004c34:	3301      	adds	r3, #1
 8004c36:	464f      	mov	r7, r9
 8004c38:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004c3c:	1c78      	adds	r0, r7, #1
 8004c3e:	2328      	movs	r3, #40	; 0x28
 8004c40:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004c44:	4642      	mov	r2, r8
 8004c46:	55e3      	strb	r3, [r4, r7]
 8004c48:	4631      	mov	r1, r6
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004c50:	f7fd ff98 	bl	8002b84 <d_print_comp>
 8004c54:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c58:	2fff      	cmp	r7, #255	; 0xff
 8004c5a:	d111      	bne.n	8004c80 <d_print_comp+0x20fc>
 8004c5c:	2600      	movs	r6, #0
 8004c5e:	4639      	mov	r1, r7
 8004c60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c64:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004c68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	4798      	blx	r3
 8004c70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c74:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004c78:	3301      	adds	r3, #1
 8004c7a:	4637      	mov	r7, r6
 8004c7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004c80:	1c7a      	adds	r2, r7, #1
 8004c82:	2329      	movs	r3, #41	; 0x29
 8004c84:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004c88:	55e3      	strb	r3, [r4, r7]
 8004c8a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004c8e:	686a      	ldr	r2, [r5, #4]
 8004c90:	9905      	ldr	r1, [sp, #20]
 8004c92:	f7fe b86a 	b.w	8002d6a <d_print_comp+0x1e6>
 8004c96:	f105 020c 	add.w	r2, r5, #12
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f001 f935 	bl	8005f0c <d_print_function_type.isra.15>
 8004ca2:	68aa      	ldr	r2, [r5, #8]
 8004ca4:	2a00      	cmp	r2, #0
 8004ca6:	f000 83fd 	beq.w	80054a4 <d_print_comp+0x2920>
 8004caa:	4641      	mov	r1, r8
 8004cac:	4620      	mov	r0, r4
 8004cae:	f7fd ff69 	bl	8002b84 <d_print_comp>
 8004cb2:	9905      	ldr	r1, [sp, #20]
 8004cb4:	686a      	ldr	r2, [r5, #4]
 8004cb6:	f7fe b858 	b.w	8002d6a <d_print_comp+0x1e6>
 8004cba:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004cbe:	2fff      	cmp	r7, #255	; 0xff
 8004cc0:	d111      	bne.n	8004ce6 <d_print_comp+0x2162>
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	4639      	mov	r1, r7
 8004cc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cca:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004cce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	4798      	blx	r3
 8004cd6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004cda:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004cde:	3301      	adds	r3, #1
 8004ce0:	4637      	mov	r7, r6
 8004ce2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ce6:	2320      	movs	r3, #32
 8004ce8:	1c7a      	adds	r2, r7, #1
 8004cea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004cee:	55e3      	strb	r3, [r4, r7]
 8004cf0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004cf4:	f7fe bf72 	b.w	8003bdc <d_print_comp+0x1058>
 8004cf8:	08017ed8 	.word	0x08017ed8
 8004cfc:	08017c84 	.word	0x08017c84
 8004d00:	08017c98 	.word	0x08017c98
 8004d04:	08017e94 	.word	0x08017e94
 8004d08:	08017e7c 	.word	0x08017e7c
 8004d0c:	08017e80 	.word	0x08017e80
 8004d10:	08017c88 	.word	0x08017c88
 8004d14:	08017e84 	.word	0x08017e84
 8004d18:	080181a4 	.word	0x080181a4
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f893 8010 	ldrb.w	r8, [r3, #16]
 8004d22:	f1b8 0f00 	cmp.w	r8, #0
 8004d26:	f43e aa89 	beq.w	800323c <d_print_comp+0x6b8>
 8004d2a:	f1b8 0f06 	cmp.w	r8, #6
 8004d2e:	f240 843f 	bls.w	80055b0 <d_print_comp+0x2a2c>
 8004d32:	f1b8 0f07 	cmp.w	r8, #7
 8004d36:	f47e aa81 	bne.w	800323c <d_print_comp+0x6b8>
 8004d3a:	68eb      	ldr	r3, [r5, #12]
 8004d3c:	781a      	ldrb	r2, [r3, #0]
 8004d3e:	2a00      	cmp	r2, #0
 8004d40:	f47e aa7c 	bne.w	800323c <d_print_comp+0x6b8>
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	2a01      	cmp	r2, #1
 8004d48:	f47e aa78 	bne.w	800323c <d_print_comp+0x6b8>
 8004d4c:	283c      	cmp	r0, #60	; 0x3c
 8004d4e:	f47e aa75 	bne.w	800323c <d_print_comp+0x6b8>
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b30      	cmp	r3, #48	; 0x30
 8004d58:	f000 84b6 	beq.w	80056c8 <d_print_comp+0x2b44>
 8004d5c:	2b31      	cmp	r3, #49	; 0x31
 8004d5e:	f47e aa6d 	bne.w	800323c <d_print_comp+0x6b8>
 8004d62:	2204      	movs	r2, #4
 8004d64:	49c3      	ldr	r1, [pc, #780]	; (8005074 <d_print_comp+0x24f0>)
 8004d66:	4620      	mov	r0, r4
 8004d68:	f7fb fae8 	bl	800033c <d_append_buffer>
 8004d6c:	9905      	ldr	r1, [sp, #20]
 8004d6e:	686a      	ldr	r2, [r5, #4]
 8004d70:	f7fd bffb 	b.w	8002d6a <d_print_comp+0x1e6>
 8004d74:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004d78:	2fff      	cmp	r7, #255	; 0xff
 8004d7a:	d112      	bne.n	8004da2 <d_print_comp+0x221e>
 8004d7c:	f04f 0800 	mov.w	r8, #0
 8004d80:	4639      	mov	r1, r7
 8004d82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d86:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004d8a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d8e:	4620      	mov	r0, r4
 8004d90:	4798      	blx	r3
 8004d92:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d96:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	4647      	mov	r7, r8
 8004d9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004da2:	1c7a      	adds	r2, r7, #1
 8004da4:	235b      	movs	r3, #91	; 0x5b
 8004da6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004daa:	55e3      	strb	r3, [r4, r7]
 8004dac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004db0:	4631      	mov	r1, r6
 8004db2:	68ea      	ldr	r2, [r5, #12]
 8004db4:	4620      	mov	r0, r4
 8004db6:	f7fd fee5 	bl	8002b84 <d_print_comp>
 8004dba:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004dbe:	2fff      	cmp	r7, #255	; 0xff
 8004dc0:	d111      	bne.n	8004de6 <d_print_comp+0x2262>
 8004dc2:	2600      	movs	r6, #0
 8004dc4:	4639      	mov	r1, r7
 8004dc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004dca:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004dce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	4798      	blx	r3
 8004dd6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004dda:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004dde:	3301      	adds	r3, #1
 8004de0:	4637      	mov	r7, r6
 8004de2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004de6:	1c7a      	adds	r2, r7, #1
 8004de8:	235d      	movs	r3, #93	; 0x5d
 8004dea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004dee:	55e3      	strb	r3, [r4, r7]
 8004df0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004df4:	686a      	ldr	r2, [r5, #4]
 8004df6:	9905      	ldr	r1, [sp, #20]
 8004df8:	f7fd bfb7 	b.w	8002d6a <d_print_comp+0x1e6>
 8004dfc:	1c59      	adds	r1, r3, #1
 8004dfe:	2229      	movs	r2, #41	; 0x29
 8004e00:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e04:	54e2      	strb	r2, [r4, r3]
 8004e06:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004e0a:	782b      	ldrb	r3, [r5, #0]
 8004e0c:	2b3d      	cmp	r3, #61	; 0x3d
 8004e0e:	f47e aa57 	bne.w	80032c0 <d_print_comp+0x73c>
 8004e12:	29ff      	cmp	r1, #255	; 0xff
 8004e14:	d10f      	bne.n	8004e36 <d_print_comp+0x22b2>
 8004e16:	2700      	movs	r7, #0
 8004e18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e1c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004e20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e24:	4620      	mov	r0, r4
 8004e26:	4798      	blx	r3
 8004e28:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e2c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004e30:	3301      	adds	r3, #1
 8004e32:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e36:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004e3a:	232d      	movs	r3, #45	; 0x2d
 8004e3c:	1c51      	adds	r1, r2, #1
 8004e3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e42:	54a3      	strb	r3, [r4, r2]
 8004e44:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e48:	f7fe ba3a 	b.w	80032c0 <d_print_comp+0x73c>
 8004e4c:	4f8a      	ldr	r7, [pc, #552]	; (8005078 <d_print_comp+0x24f4>)
 8004e4e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004e52:	f107 0a02 	add.w	sl, r7, #2
 8004e56:	e016      	b.n	8004e86 <d_print_comp+0x2302>
 8004e58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e60:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004e64:	4798      	blx	r3
 8004e66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e70:	2200      	movs	r2, #0
 8004e72:	2301      	movs	r3, #1
 8004e74:	45ba      	cmp	sl, r7
 8004e76:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004e7a:	f804 8002 	strb.w	r8, [r4, r2]
 8004e7e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004e82:	f43f a980 	beq.w	8004186 <d_print_comp+0x1602>
 8004e86:	2bff      	cmp	r3, #255	; 0xff
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004e90:	d0e2      	beq.n	8004e58 <d_print_comp+0x22d4>
 8004e92:	461a      	mov	r2, r3
 8004e94:	3301      	adds	r3, #1
 8004e96:	e7ed      	b.n	8004e74 <d_print_comp+0x22f0>
 8004e98:	6892      	ldr	r2, [r2, #8]
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f7fd fe71 	bl	8002b84 <d_print_comp>
 8004ea2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004ea6:	b113      	cbz	r3, 8004eae <d_print_comp+0x232a>
 8004ea8:	9b08      	ldr	r3, [sp, #32]
 8004eaa:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004eae:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004eb2:	2b3c      	cmp	r3, #60	; 0x3c
 8004eb4:	f000 82c4 	beq.w	8005440 <d_print_comp+0x28bc>
 8004eb8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004ebc:	2fff      	cmp	r7, #255	; 0xff
 8004ebe:	d112      	bne.n	8004ee6 <d_print_comp+0x2362>
 8004ec0:	f04f 0800 	mov.w	r8, #0
 8004ec4:	4639      	mov	r1, r7
 8004ec6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004eca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004ece:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	4798      	blx	r3
 8004ed6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004eda:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004ede:	3301      	adds	r3, #1
 8004ee0:	4647      	mov	r7, r8
 8004ee2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ee6:	233c      	movs	r3, #60	; 0x3c
 8004ee8:	1c7a      	adds	r2, r7, #1
 8004eea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004eee:	55e3      	strb	r3, [r4, r7]
 8004ef0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004ef4:	68ab      	ldr	r3, [r5, #8]
 8004ef6:	4631      	mov	r1, r6
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	4620      	mov	r0, r4
 8004efc:	f7fd fe42 	bl	8002b84 <d_print_comp>
 8004f00:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004f04:	2b3e      	cmp	r3, #62	; 0x3e
 8004f06:	f000 827d 	beq.w	8005404 <d_print_comp+0x2880>
 8004f0a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004f0e:	2fff      	cmp	r7, #255	; 0xff
 8004f10:	d111      	bne.n	8004f36 <d_print_comp+0x23b2>
 8004f12:	2600      	movs	r6, #0
 8004f14:	4639      	mov	r1, r7
 8004f16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f1a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004f1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f22:	4620      	mov	r0, r4
 8004f24:	4798      	blx	r3
 8004f26:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f2a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004f2e:	3301      	adds	r3, #1
 8004f30:	4637      	mov	r7, r6
 8004f32:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f36:	233e      	movs	r3, #62	; 0x3e
 8004f38:	1c7a      	adds	r2, r7, #1
 8004f3a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f3e:	55e3      	strb	r3, [r4, r7]
 8004f40:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f44:	f7ff badc 	b.w	8004500 <d_print_comp+0x197c>
 8004f48:	4f4c      	ldr	r7, [pc, #304]	; (800507c <d_print_comp+0x24f8>)
 8004f4a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004f4e:	f107 0905 	add.w	r9, r7, #5
 8004f52:	f04f 0a00 	mov.w	sl, #0
 8004f56:	e016      	b.n	8004f86 <d_print_comp+0x2402>
 8004f58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f60:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004f64:	4798      	blx	r3
 8004f66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f70:	2200      	movs	r2, #0
 8004f72:	2301      	movs	r3, #1
 8004f74:	45b9      	cmp	r9, r7
 8004f76:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004f7a:	f804 8002 	strb.w	r8, [r4, r2]
 8004f7e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004f82:	f43e ab41 	beq.w	8003608 <d_print_comp+0xa84>
 8004f86:	2bff      	cmp	r3, #255	; 0xff
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004f90:	d0e2      	beq.n	8004f58 <d_print_comp+0x23d4>
 8004f92:	461a      	mov	r2, r3
 8004f94:	3301      	adds	r3, #1
 8004f96:	e7ed      	b.n	8004f74 <d_print_comp+0x23f0>
 8004f98:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004f9c:	2fff      	cmp	r7, #255	; 0xff
 8004f9e:	d112      	bne.n	8004fc6 <d_print_comp+0x2442>
 8004fa0:	f04f 0a00 	mov.w	sl, #0
 8004fa4:	4639      	mov	r1, r7
 8004fa6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004faa:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004fae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	4798      	blx	r3
 8004fb6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004fba:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	4657      	mov	r7, sl
 8004fc2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fc6:	2320      	movs	r3, #32
 8004fc8:	1c7a      	adds	r2, r7, #1
 8004fca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004fce:	55e3      	strb	r3, [r4, r7]
 8004fd0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004fd4:	f7fe bdda 	b.w	8003b8c <d_print_comp+0x1008>
 8004fd8:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	f6fe ad99 	blt.w	8003b14 <d_print_comp+0xf90>
 8004fe2:	f7fb fbc3 	bl	800076c <d_index_template_argument.part.9>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	f47e ad93 	bne.w	8003b14 <d_print_comp+0xf90>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8004ff4:	686a      	ldr	r2, [r5, #4]
 8004ff6:	9905      	ldr	r1, [sp, #20]
 8004ff8:	f7fd beb7 	b.w	8002d6a <d_print_comp+0x1e6>
 8004ffc:	9905      	ldr	r1, [sp, #20]
 8004ffe:	686a      	ldr	r2, [r5, #4]
 8005000:	f7fd beb3 	b.w	8002d6a <d_print_comp+0x1e6>
 8005004:	220d      	movs	r2, #13
 8005006:	491e      	ldr	r1, [pc, #120]	; (8005080 <d_print_comp+0x24fc>)
 8005008:	4620      	mov	r0, r4
 800500a:	f7fb f997 	bl	800033c <d_append_buffer>
 800500e:	68f9      	ldr	r1, [r7, #12]
 8005010:	4620      	mov	r0, r4
 8005012:	3101      	adds	r1, #1
 8005014:	f7fb fc84 	bl	8000920 <d_append_num>
 8005018:	2203      	movs	r2, #3
 800501a:	491a      	ldr	r1, [pc, #104]	; (8005084 <d_print_comp+0x2500>)
 800501c:	4620      	mov	r0, r4
 800501e:	f7fb f98d 	bl	800033c <d_append_buffer>
 8005022:	68bf      	ldr	r7, [r7, #8]
 8005024:	f7ff b8b4 	b.w	8004190 <d_print_comp+0x160c>
 8005028:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800502c:	9905      	ldr	r1, [sp, #20]
 800502e:	686a      	ldr	r2, [r5, #4]
 8005030:	42b8      	cmp	r0, r7
 8005032:	f47d ae9a 	bne.w	8002d6a <d_print_comp+0x1e6>
 8005036:	3b01      	subs	r3, #1
 8005038:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800503c:	f7fd be95 	b.w	8002d6a <d_print_comp+0x1e6>
 8005040:	4642      	mov	r2, r8
 8005042:	465b      	mov	r3, fp
 8005044:	46ab      	mov	fp, r5
 8005046:	f1bb 0f04 	cmp.w	fp, #4
 800504a:	46a0      	mov	r8, r4
 800504c:	461d      	mov	r5, r3
 800504e:	4614      	mov	r4, r2
 8005050:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
 8005054:	f000 82a3 	beq.w	800559e <d_print_comp+0x2a1a>
 8005058:	f1bb 0f02 	cmp.w	fp, #2
 800505c:	d137      	bne.n	80050ce <d_print_comp+0x254a>
 800505e:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8005062:	f89a 3000 	ldrb.w	r3, [sl]
 8005066:	2b46      	cmp	r3, #70	; 0x46
 8005068:	f000 8327 	beq.w	80056ba <d_print_comp+0x2b36>
 800506c:	eb09 1207 	add.w	r2, r9, r7, lsl #4
 8005070:	3a0c      	subs	r2, #12
 8005072:	e020      	b.n	80050b6 <d_print_comp+0x2532>
 8005074:	08017eb0 	.word	0x08017eb0
 8005078:	08017cd4 	.word	0x08017cd4
 800507c:	08017e48 	.word	0x08017e48
 8005080:	08017cd8 	.word	0x08017cd8
 8005084:	08017ce8 	.word	0x08017ce8
 8005088:	2f04      	cmp	r7, #4
 800508a:	f43f a81d 	beq.w	80040c8 <d_print_comp+0x1544>
 800508e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8005092:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8005096:	2300      	movs	r3, #0
 8005098:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800509c:	f84e ac10 	str.w	sl, [lr, #-16]
 80050a0:	9b01      	ldr	r3, [sp, #4]
 80050a2:	f8da a008 	ldr.w	sl, [sl, #8]
 80050a6:	f8c4 c114 	str.w	ip, [r4, #276]	; 0x114
 80050aa:	3701      	adds	r7, #1
 80050ac:	f84e bc04 	str.w	fp, [lr, #-4]
 80050b0:	f84e 3c08 	str.w	r3, [lr, #-8]
 80050b4:	4672      	mov	r2, lr
 80050b6:	f89a 0000 	ldrb.w	r0, [sl]
 80050ba:	f7fb f975 	bl	80003a8 <is_fnqual_component_type>
 80050be:	f1a2 0b04 	sub.w	fp, r2, #4
 80050c2:	f102 0e10 	add.w	lr, r2, #16
 80050c6:	f102 0c0c 	add.w	ip, r2, #12
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d1dc      	bne.n	8005088 <d_print_comp+0x2504>
 80050ce:	68ea      	ldr	r2, [r5, #12]
 80050d0:	4631      	mov	r1, r6
 80050d2:	4620      	mov	r0, r4
 80050d4:	f7fd fd56 	bl	8002b84 <d_print_comp>
 80050d8:	f898 3000 	ldrb.w	r3, [r8]
 80050dc:	2b04      	cmp	r3, #4
 80050de:	bf04      	itt	eq
 80050e0:	9b06      	ldreq	r3, [sp, #24]
 80050e2:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
 80050e6:	013f      	lsls	r7, r7, #4
 80050e8:	f04f 0a20 	mov.w	sl, #32
 80050ec:	46a8      	mov	r8, r5
 80050ee:	eb09 0b07 	add.w	fp, r9, r7
 80050f2:	f85b 5c08 	ldr.w	r5, [fp, #-8]
 80050f6:	bb0d      	cbnz	r5, 800513c <d_print_comp+0x25b8>
 80050f8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80050fc:	2bff      	cmp	r3, #255	; 0xff
 80050fe:	4620      	mov	r0, r4
 8005100:	4619      	mov	r1, r3
 8005102:	d10e      	bne.n	8005122 <d_print_comp+0x259e>
 8005104:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005108:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800510c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005110:	4798      	blx	r3
 8005112:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005116:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005120:	462b      	mov	r3, r5
 8005122:	1c59      	adds	r1, r3, #1
 8005124:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005128:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
 800512c:	f804 a003 	strb.w	sl, [r4, r3]
 8005130:	4631      	mov	r1, r6
 8005132:	4620      	mov	r0, r4
 8005134:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005138:	f000 fbba 	bl	80058b0 <d_print_mod>
 800513c:	3f10      	subs	r7, #16
 800513e:	d1d6      	bne.n	80050ee <d_print_comp+0x256a>
 8005140:	9b02      	ldr	r3, [sp, #8]
 8005142:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005146:	4645      	mov	r5, r8
 8005148:	f7fe bfc1 	b.w	80040ce <d_print_comp+0x154a>
 800514c:	4631      	mov	r1, r6
 800514e:	68aa      	ldr	r2, [r5, #8]
 8005150:	4620      	mov	r0, r4
 8005152:	f7fd fd17 	bl	8002b84 <d_print_comp>
 8005156:	9905      	ldr	r1, [sp, #20]
 8005158:	686a      	ldr	r2, [r5, #4]
 800515a:	f7fd be06 	b.w	8002d6a <d_print_comp+0x1e6>
 800515e:	460f      	mov	r7, r1
 8005160:	46a9      	mov	r9, r5
 8005162:	f7fe bebb 	b.w	8003edc <d_print_comp+0x1358>
 8005166:	4644      	mov	r4, r8
 8005168:	465d      	mov	r5, fp
 800516a:	f8c8 1114 	str.w	r1, [r8, #276]	; 0x114
 800516e:	f7fe bfab 	b.w	80040c8 <d_print_comp+0x1544>
 8005172:	68ea      	ldr	r2, [r5, #12]
 8005174:	4631      	mov	r1, r6
 8005176:	4620      	mov	r0, r4
 8005178:	f7fd fd04 	bl	8002b84 <d_print_comp>
 800517c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800517e:	9a01      	ldr	r2, [sp, #4]
 8005180:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8005184:	2b00      	cmp	r3, #0
 8005186:	f43e ab19 	beq.w	80037bc <d_print_comp+0xc38>
 800518a:	f7fe bb1f 	b.w	80037cc <d_print_comp+0xc48>
 800518e:	2301      	movs	r3, #1
 8005190:	4664      	mov	r4, ip
 8005192:	f8cc 3118 	str.w	r3, [ip, #280]	; 0x118
 8005196:	f7fe bb19 	b.w	80037cc <d_print_comp+0xc48>
 800519a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800519e:	f7fe bead 	b.w	8003efc <d_print_comp+0x1378>
 80051a2:	4631      	mov	r1, r6
 80051a4:	68aa      	ldr	r2, [r5, #8]
 80051a6:	4620      	mov	r0, r4
 80051a8:	f001 f9f4 	bl	8006594 <d_print_subexpr>
 80051ac:	2203      	movs	r2, #3
 80051ae:	49bf      	ldr	r1, [pc, #764]	; (80054ac <d_print_comp+0x2928>)
 80051b0:	4620      	mov	r0, r4
 80051b2:	f7fb f8c3 	bl	800033c <d_append_buffer>
 80051b6:	9905      	ldr	r1, [sp, #20]
 80051b8:	686a      	ldr	r2, [r5, #4]
 80051ba:	f7fd bdd6 	b.w	8002d6a <d_print_comp+0x1e6>
 80051be:	f8d4 e130 	ldr.w	lr, [r4, #304]	; 0x130
 80051c2:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 80051c6:	f1be 0f00 	cmp.w	lr, #0
 80051ca:	dd17      	ble.n	80051fc <d_print_comp+0x2678>
 80051cc:	6810      	ldr	r0, [r2, #0]
 80051ce:	4581      	cmp	r9, r0
 80051d0:	f000 81a7 	beq.w	8005522 <d_print_comp+0x299e>
 80051d4:	f102 0b08 	add.w	fp, r2, #8
 80051d8:	46bc      	mov	ip, r7
 80051da:	9101      	str	r1, [sp, #4]
 80051dc:	4670      	mov	r0, lr
 80051de:	e004      	b.n	80051ea <d_print_comp+0x2666>
 80051e0:	f852 103c 	ldr.w	r1, [r2, ip, lsl #3]
 80051e4:	4589      	cmp	r9, r1
 80051e6:	f000 819d 	beq.w	8005524 <d_print_comp+0x29a0>
 80051ea:	f10c 0c01 	add.w	ip, ip, #1
 80051ee:	4560      	cmp	r0, ip
 80051f0:	46da      	mov	sl, fp
 80051f2:	f10b 0b08 	add.w	fp, fp, #8
 80051f6:	d1f3      	bne.n	80051e0 <d_print_comp+0x265c>
 80051f8:	9901      	ldr	r1, [sp, #4]
 80051fa:	4686      	mov	lr, r0
 80051fc:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8005200:	459e      	cmp	lr, r3
 8005202:	f280 8344 	bge.w	800588e <d_print_comp+0x2d0a>
 8005206:	f10e 0301 	add.w	r3, lr, #1
 800520a:	eb02 0cce 	add.w	ip, r2, lr, lsl #3
 800520e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 8005212:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 8005216:	f842 903e 	str.w	r9, [r2, lr, lsl #3]
 800521a:	f10c 0c04 	add.w	ip, ip, #4
 800521e:	2800      	cmp	r0, #0
 8005220:	f000 825b 	beq.w	80056da <d_print_comp+0x2b56>
 8005224:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 8005228:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800522c:	429a      	cmp	r2, r3
 800522e:	f102 0e01 	add.w	lr, r2, #1
 8005232:	f280 832c 	bge.w	800588e <d_print_comp+0x2d0a>
 8005236:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800523a:	f8c4 e13c 	str.w	lr, [r4, #316]	; 0x13c
 800523e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005242:	6842      	ldr	r2, [r0, #4]
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	f8cc 3000 	str.w	r3, [ip]
 800524a:	6800      	ldr	r0, [r0, #0]
 800524c:	469c      	mov	ip, r3
 800524e:	e7e6      	b.n	800521e <d_print_comp+0x269a>
 8005250:	4606      	mov	r6, r0
 8005252:	4647      	mov	r7, r8
 8005254:	e001      	b.n	800525a <d_print_comp+0x26d6>
 8005256:	68ff      	ldr	r7, [r7, #12]
 8005258:	b31f      	cbz	r7, 80052a2 <d_print_comp+0x271e>
 800525a:	783b      	ldrb	r3, [r7, #0]
 800525c:	2b2f      	cmp	r3, #47	; 0x2f
 800525e:	d120      	bne.n	80052a2 <d_print_comp+0x271e>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	b1f3      	cbz	r3, 80052a2 <d_print_comp+0x271e>
 8005264:	781a      	ldrb	r2, [r3, #0]
 8005266:	2a4a      	cmp	r2, #74	; 0x4a
 8005268:	bf18      	it	ne
 800526a:	3601      	addne	r6, #1
 800526c:	d1f3      	bne.n	8005256 <d_print_comp+0x26d2>
 800526e:	6899      	ldr	r1, [r3, #8]
 8005270:	4620      	mov	r0, r4
 8005272:	f7fb faa1 	bl	80007b8 <d_find_pack>
 8005276:	2800      	cmp	r0, #0
 8005278:	f000 81ef 	beq.w	800565a <d_print_comp+0x2ad6>
 800527c:	7803      	ldrb	r3, [r0, #0]
 800527e:	2b2f      	cmp	r3, #47	; 0x2f
 8005280:	f040 81eb 	bne.w	800565a <d_print_comp+0x2ad6>
 8005284:	6883      	ldr	r3, [r0, #8]
 8005286:	b153      	cbz	r3, 800529e <d_print_comp+0x271a>
 8005288:	2300      	movs	r3, #0
 800528a:	e004      	b.n	8005296 <d_print_comp+0x2712>
 800528c:	7802      	ldrb	r2, [r0, #0]
 800528e:	2a2f      	cmp	r2, #47	; 0x2f
 8005290:	d105      	bne.n	800529e <d_print_comp+0x271a>
 8005292:	6882      	ldr	r2, [r0, #8]
 8005294:	b11a      	cbz	r2, 800529e <d_print_comp+0x271a>
 8005296:	68c0      	ldr	r0, [r0, #12]
 8005298:	3301      	adds	r3, #1
 800529a:	2800      	cmp	r0, #0
 800529c:	d1f6      	bne.n	800528c <d_print_comp+0x2708>
 800529e:	441e      	add	r6, r3
 80052a0:	e7d9      	b.n	8005256 <d_print_comp+0x26d2>
 80052a2:	4631      	mov	r1, r6
 80052a4:	4620      	mov	r0, r4
 80052a6:	f7fb fb3b 	bl	8000920 <d_append_num>
 80052aa:	9905      	ldr	r1, [sp, #20]
 80052ac:	686a      	ldr	r2, [r5, #4]
 80052ae:	f7fd bd5c 	b.w	8002d6a <d_print_comp+0x1e6>
 80052b2:	4631      	mov	r1, r6
 80052b4:	4620      	mov	r0, r4
 80052b6:	f001 f92d 	bl	8006514 <d_print_expr_op>
 80052ba:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80052be:	2fff      	cmp	r7, #255	; 0xff
 80052c0:	d112      	bne.n	80052e8 <d_print_comp+0x2764>
 80052c2:	f04f 0800 	mov.w	r8, #0
 80052c6:	4639      	mov	r1, r7
 80052c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052cc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80052d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052d4:	4620      	mov	r0, r4
 80052d6:	4798      	blx	r3
 80052d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80052dc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80052e0:	3301      	adds	r3, #1
 80052e2:	4647      	mov	r7, r8
 80052e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80052e8:	1c7a      	adds	r2, r7, #1
 80052ea:	233c      	movs	r3, #60	; 0x3c
 80052ec:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80052f0:	55e3      	strb	r3, [r4, r7]
 80052f2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80052f6:	68eb      	ldr	r3, [r5, #12]
 80052f8:	4631      	mov	r1, r6
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	4620      	mov	r0, r4
 80052fe:	f7fd fc41 	bl	8002b84 <d_print_comp>
 8005302:	2202      	movs	r2, #2
 8005304:	496a      	ldr	r1, [pc, #424]	; (80054b0 <d_print_comp+0x292c>)
 8005306:	4620      	mov	r0, r4
 8005308:	f7fb f818 	bl	800033c <d_append_buffer>
 800530c:	68eb      	ldr	r3, [r5, #12]
 800530e:	4631      	mov	r1, r6
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	4620      	mov	r0, r4
 8005314:	f7fd fc36 	bl	8002b84 <d_print_comp>
 8005318:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800531c:	2fff      	cmp	r7, #255	; 0xff
 800531e:	d111      	bne.n	8005344 <d_print_comp+0x27c0>
 8005320:	2600      	movs	r6, #0
 8005322:	4639      	mov	r1, r7
 8005324:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005328:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800532c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005330:	4620      	mov	r0, r4
 8005332:	4798      	blx	r3
 8005334:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005338:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800533c:	3301      	adds	r3, #1
 800533e:	4637      	mov	r7, r6
 8005340:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005344:	1c7a      	adds	r2, r7, #1
 8005346:	2329      	movs	r3, #41	; 0x29
 8005348:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800534c:	55e3      	strb	r3, [r4, r7]
 800534e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005352:	686a      	ldr	r2, [r5, #4]
 8005354:	9905      	ldr	r1, [sp, #20]
 8005356:	f7fd bd08 	b.w	8002d6a <d_print_comp+0x1e6>
 800535a:	9905      	ldr	r1, [sp, #20]
 800535c:	686a      	ldr	r2, [r5, #4]
 800535e:	f7fd bd04 	b.w	8002d6a <d_print_comp+0x1e6>
 8005362:	4642      	mov	r2, r8
 8005364:	4631      	mov	r1, r6
 8005366:	4620      	mov	r0, r4
 8005368:	f7fd fc0c 	bl	8002b84 <d_print_comp>
 800536c:	9905      	ldr	r1, [sp, #20]
 800536e:	686a      	ldr	r2, [r5, #4]
 8005370:	f7fd bcfb 	b.w	8002d6a <d_print_comp+0x1e6>
 8005374:	a918      	add	r1, sp, #96	; 0x60
 8005376:	4620      	mov	r0, r4
 8005378:	f841 3d40 	str.w	r3, [r1, #-64]!
 800537c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8005380:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 8005384:	4641      	mov	r1, r8
 8005386:	960a      	str	r6, [sp, #40]	; 0x28
 8005388:	930b      	str	r3, [sp, #44]	; 0x2c
 800538a:	9509      	str	r5, [sp, #36]	; 0x24
 800538c:	f7fd fbfa 	bl	8002b84 <d_print_comp>
 8005390:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005392:	9b08      	ldr	r3, [sp, #32]
 8005394:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005398:	b9ee      	cbnz	r6, 80053d6 <d_print_comp+0x2852>
 800539a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800539e:	2fff      	cmp	r7, #255	; 0xff
 80053a0:	d110      	bne.n	80053c4 <d_print_comp+0x2840>
 80053a2:	4639      	mov	r1, r7
 80053a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053a8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80053ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053b0:	4620      	mov	r0, r4
 80053b2:	4798      	blx	r3
 80053b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053b8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053bc:	3301      	adds	r3, #1
 80053be:	4637      	mov	r7, r6
 80053c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053c4:	2320      	movs	r3, #32
 80053c6:	1c7a      	adds	r2, r7, #1
 80053c8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80053cc:	55e3      	strb	r3, [r4, r7]
 80053ce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80053d2:	f7fe ba0c 	b.w	80037ee <d_print_comp+0xc6a>
 80053d6:	9905      	ldr	r1, [sp, #20]
 80053d8:	686a      	ldr	r2, [r5, #4]
 80053da:	f7fd bcc6 	b.w	8002d6a <d_print_comp+0x1e6>
 80053de:	4935      	ldr	r1, [pc, #212]	; (80054b4 <d_print_comp+0x2930>)
 80053e0:	68b8      	ldr	r0, [r7, #8]
 80053e2:	f00e f86e 	bl	80134c2 <strncmp>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	f47e abc6 	bne.w	8003b78 <d_print_comp+0xff4>
 80053ec:	4631      	mov	r1, r6
 80053ee:	68ea      	ldr	r2, [r5, #12]
 80053f0:	4620      	mov	r0, r4
 80053f2:	f7fd fbc7 	bl	8002b84 <d_print_comp>
 80053f6:	2202      	movs	r2, #2
 80053f8:	492f      	ldr	r1, [pc, #188]	; (80054b8 <d_print_comp+0x2934>)
 80053fa:	4620      	mov	r0, r4
 80053fc:	f7fa ff9e 	bl	800033c <d_append_buffer>
 8005400:	f7fe bc09 	b.w	8003c16 <d_print_comp+0x1092>
 8005404:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005408:	2fff      	cmp	r7, #255	; 0xff
 800540a:	d111      	bne.n	8005430 <d_print_comp+0x28ac>
 800540c:	2600      	movs	r6, #0
 800540e:	4639      	mov	r1, r7
 8005410:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005414:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005418:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800541c:	4620      	mov	r0, r4
 800541e:	4798      	blx	r3
 8005420:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005424:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005428:	3301      	adds	r3, #1
 800542a:	4637      	mov	r7, r6
 800542c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005430:	2320      	movs	r3, #32
 8005432:	1c7a      	adds	r2, r7, #1
 8005434:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005438:	55e3      	strb	r3, [r4, r7]
 800543a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800543e:	e564      	b.n	8004f0a <d_print_comp+0x2386>
 8005440:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005444:	2fff      	cmp	r7, #255	; 0xff
 8005446:	d112      	bne.n	800546e <d_print_comp+0x28ea>
 8005448:	f04f 0800 	mov.w	r8, #0
 800544c:	4639      	mov	r1, r7
 800544e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005452:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005456:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800545a:	4620      	mov	r0, r4
 800545c:	4798      	blx	r3
 800545e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005462:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005466:	3301      	adds	r3, #1
 8005468:	4647      	mov	r7, r8
 800546a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800546e:	2320      	movs	r3, #32
 8005470:	1c7a      	adds	r2, r7, #1
 8005472:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005476:	55e3      	strb	r3, [r4, r7]
 8005478:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800547c:	e51c      	b.n	8004eb8 <d_print_comp+0x2334>
 800547e:	4640      	mov	r0, r8
 8005480:	490e      	ldr	r1, [pc, #56]	; (80054bc <d_print_comp+0x2938>)
 8005482:	f001 fc65 	bl	8006d50 <strcmp>
 8005486:	2800      	cmp	r0, #0
 8005488:	f040 81fb 	bne.w	8005882 <d_print_comp+0x2cfe>
 800548c:	68eb      	ldr	r3, [r5, #12]
 800548e:	4631      	mov	r1, r6
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	4620      	mov	r0, r4
 8005494:	f001 f87e 	bl	8006594 <d_print_subexpr>
 8005498:	f7fd bc60 	b.w	8002d5c <d_print_comp+0x1d8>
 800549c:	9905      	ldr	r1, [sp, #20]
 800549e:	686a      	ldr	r2, [r5, #4]
 80054a0:	f7fd bc63 	b.w	8002d6a <d_print_comp+0x1e6>
 80054a4:	9905      	ldr	r1, [sp, #20]
 80054a6:	686a      	ldr	r2, [r5, #4]
 80054a8:	f7fd bc5f 	b.w	8002d6a <d_print_comp+0x1e6>
 80054ac:	08017ed4 	.word	0x08017ed4
 80054b0:	08017e88 	.word	0x08017e88
 80054b4:	08017cec 	.word	0x08017cec
 80054b8:	08017cf4 	.word	0x08017cf4
 80054bc:	08017c8c 	.word	0x08017c8c
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	2a01      	cmp	r2, #1
 80054c6:	f47d ac4e 	bne.w	8002d66 <d_print_comp+0x1e2>
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b3e      	cmp	r3, #62	; 0x3e
 80054d0:	f47d ac49 	bne.w	8002d66 <d_print_comp+0x1e2>
 80054d4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80054d8:	2fff      	cmp	r7, #255	; 0xff
 80054da:	d111      	bne.n	8005500 <d_print_comp+0x297c>
 80054dc:	2600      	movs	r6, #0
 80054de:	4639      	mov	r1, r7
 80054e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80054e4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80054e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80054ec:	4620      	mov	r0, r4
 80054ee:	4798      	blx	r3
 80054f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80054f4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80054f8:	3301      	adds	r3, #1
 80054fa:	4637      	mov	r7, r6
 80054fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005500:	1c7a      	adds	r2, r7, #1
 8005502:	2329      	movs	r3, #41	; 0x29
 8005504:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005508:	55e3      	strb	r3, [r4, r7]
 800550a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800550e:	686a      	ldr	r2, [r5, #4]
 8005510:	9905      	ldr	r1, [sp, #20]
 8005512:	f7fd bc2a 	b.w	8002d6a <d_print_comp+0x1e6>
 8005516:	2a05      	cmp	r2, #5
 8005518:	f200 80a9 	bhi.w	800566e <d_print_comp+0x2aea>
 800551c:	3b57      	subs	r3, #87	; 0x57
 800551e:	f7ff ba1d 	b.w	800495c <d_print_comp+0x1dd8>
 8005522:	4692      	mov	sl, r2
 8005524:	461a      	mov	r2, r3
 8005526:	e001      	b.n	800552c <d_print_comp+0x29a8>
 8005528:	6852      	ldr	r2, [r2, #4]
 800552a:	b342      	cbz	r2, 800557e <d_print_comp+0x29fa>
 800552c:	6811      	ldr	r1, [r2, #0]
 800552e:	4589      	cmp	r9, r1
 8005530:	d003      	beq.n	800553a <d_print_comp+0x29b6>
 8005532:	428d      	cmp	r5, r1
 8005534:	d1f8      	bne.n	8005528 <d_print_comp+0x29a4>
 8005536:	429a      	cmp	r2, r3
 8005538:	d0f6      	beq.n	8005528 <d_print_comp+0x29a4>
 800553a:	f109 0108 	add.w	r1, r9, #8
 800553e:	4620      	mov	r0, r4
 8005540:	f7fb f92a 	bl	8000798 <d_lookup_template_argument.isra.10>
 8005544:	4681      	mov	r9, r0
 8005546:	b198      	cbz	r0, 8005570 <d_print_comp+0x29ec>
 8005548:	f899 3000 	ldrb.w	r3, [r9]
 800554c:	2b2f      	cmp	r3, #47	; 0x2f
 800554e:	f47e acb6 	bne.w	8003ebe <d_print_comp+0x133a>
 8005552:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8005556:	2900      	cmp	r1, #0
 8005558:	f6fe acb6 	blt.w	8003ec8 <d_print_comp+0x1344>
 800555c:	4648      	mov	r0, r9
 800555e:	f7fb f905 	bl	800076c <d_index_template_argument.part.9>
 8005562:	4681      	mov	r9, r0
 8005564:	2800      	cmp	r0, #0
 8005566:	f47e acaa 	bne.w	8003ebe <d_print_comp+0x133a>
 800556a:	b10f      	cbz	r7, 8005570 <d_print_comp+0x29ec>
 800556c:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8005570:	2301      	movs	r3, #1
 8005572:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005576:	686a      	ldr	r2, [r5, #4]
 8005578:	9905      	ldr	r1, [sp, #20]
 800557a:	f7fd bbf6 	b.w	8002d6a <d_print_comp+0x1e6>
 800557e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005582:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 8005586:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800558a:	f109 0108 	add.w	r1, r9, #8
 800558e:	4620      	mov	r0, r4
 8005590:	f7fb f902 	bl	8000798 <d_lookup_template_argument.isra.10>
 8005594:	2701      	movs	r7, #1
 8005596:	4681      	mov	r9, r0
 8005598:	2800      	cmp	r0, #0
 800559a:	d1d5      	bne.n	8005548 <d_print_comp+0x29c4>
 800559c:	e7e6      	b.n	800556c <d_print_comp+0x29e8>
 800559e:	ab18      	add	r3, sp, #96	; 0x60
 80055a0:	9a01      	ldr	r2, [sp, #4]
 80055a2:	f843 2d48 	str.w	r2, [r3, #-72]!
 80055a6:	f8cd 801c 	str.w	r8, [sp, #28]
 80055aa:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80055ae:	e58e      	b.n	80050ce <d_print_comp+0x254a>
 80055b0:	68eb      	ldr	r3, [r5, #12]
 80055b2:	f893 9000 	ldrb.w	r9, [r3]
 80055b6:	f1b9 0f00 	cmp.w	r9, #0
 80055ba:	f47d ae3f 	bne.w	800323c <d_print_comp+0x6b8>
 80055be:	283d      	cmp	r0, #61	; 0x3d
 80055c0:	f000 80e6 	beq.w	8005790 <d_print_comp+0x2c0c>
 80055c4:	4631      	mov	r1, r6
 80055c6:	68ea      	ldr	r2, [r5, #12]
 80055c8:	4620      	mov	r0, r4
 80055ca:	f1a8 0802 	sub.w	r8, r8, #2
 80055ce:	f7fd fad9 	bl	8002b84 <d_print_comp>
 80055d2:	f1b8 0f04 	cmp.w	r8, #4
 80055d6:	f200 80d7 	bhi.w	8005788 <d_print_comp+0x2c04>
 80055da:	e8df f008 	tbb	[pc, r8]
 80055de:	93b4      	.short	0x93b4
 80055e0:	818a      	.short	0x818a
 80055e2:	35          	.byte	0x35
 80055e3:	00          	.byte	0x00
 80055e4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80055e8:	4631      	mov	r1, r6
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 ffd2 	bl	8006594 <d_print_subexpr>
 80055f0:	464a      	mov	r2, r9
 80055f2:	4631      	mov	r1, r6
 80055f4:	4620      	mov	r0, r4
 80055f6:	f000 ff8d 	bl	8006514 <d_print_expr_op>
 80055fa:	9905      	ldr	r1, [sp, #20]
 80055fc:	686a      	ldr	r2, [r5, #4]
 80055fe:	f7fd bbb4 	b.w	8002d6a <d_print_comp+0x1e6>
 8005602:	4641      	mov	r1, r8
 8005604:	4620      	mov	r0, r4
 8005606:	f7fb f8d7 	bl	80007b8 <d_find_pack>
 800560a:	b1a8      	cbz	r0, 8005638 <d_print_comp+0x2ab4>
 800560c:	7803      	ldrb	r3, [r0, #0]
 800560e:	2b2f      	cmp	r3, #47	; 0x2f
 8005610:	d112      	bne.n	8005638 <d_print_comp+0x2ab4>
 8005612:	6883      	ldr	r3, [r0, #8]
 8005614:	b183      	cbz	r3, 8005638 <d_print_comp+0x2ab4>
 8005616:	68c0      	ldr	r0, [r0, #12]
 8005618:	3701      	adds	r7, #1
 800561a:	e7f6      	b.n	800560a <d_print_comp+0x2a86>
 800561c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	2a01      	cmp	r2, #1
 8005624:	f47f aad2 	bne.w	8004bcc <d_print_comp+0x2048>
 8005628:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800562c:	7812      	ldrb	r2, [r2, #0]
 800562e:	2a29      	cmp	r2, #41	; 0x29
 8005630:	bf08      	it	eq
 8005632:	4698      	moveq	r8, r3
 8005634:	f7ff baca 	b.w	8004bcc <d_print_comp+0x2048>
 8005638:	4639      	mov	r1, r7
 800563a:	4620      	mov	r0, r4
 800563c:	f7fb f970 	bl	8000920 <d_append_num>
 8005640:	9905      	ldr	r1, [sp, #20]
 8005642:	686a      	ldr	r2, [r5, #4]
 8005644:	f7fd bb91 	b.w	8002d6a <d_print_comp+0x1e6>
 8005648:	2203      	movs	r2, #3
 800564a:	4994      	ldr	r1, [pc, #592]	; (800589c <d_print_comp+0x2d18>)
 800564c:	4620      	mov	r0, r4
 800564e:	f7fa fe75 	bl	800033c <d_append_buffer>
 8005652:	9905      	ldr	r1, [sp, #20]
 8005654:	686a      	ldr	r2, [r5, #4]
 8005656:	f7fd bb88 	b.w	8002d6a <d_print_comp+0x1e6>
 800565a:	2300      	movs	r3, #0
 800565c:	441e      	add	r6, r3
 800565e:	e5fa      	b.n	8005256 <d_print_comp+0x26d2>
 8005660:	464a      	mov	r2, r9
 8005662:	4631      	mov	r1, r6
 8005664:	4620      	mov	r0, r4
 8005666:	f000 ff55 	bl	8006514 <d_print_expr_op>
 800566a:	f7fd bea9 	b.w	80033c0 <d_print_comp+0x83c>
 800566e:	2b5f      	cmp	r3, #95	; 0x5f
 8005670:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005674:	f47f a964 	bne.w	8004940 <d_print_comp+0x1dbc>
 8005678:	28ff      	cmp	r0, #255	; 0xff
 800567a:	f63f a961 	bhi.w	8004940 <d_print_comp+0x1dbc>
 800567e:	29ff      	cmp	r1, #255	; 0xff
 8005680:	fa5f f980 	uxtb.w	r9, r0
 8005684:	d10f      	bne.n	80056a6 <d_print_comp+0x2b22>
 8005686:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800568a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800568e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005692:	4620      	mov	r0, r4
 8005694:	4798      	blx	r3
 8005696:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800569a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 800569e:	3301      	adds	r3, #1
 80056a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80056a4:	2100      	movs	r1, #0
 80056a6:	1c4b      	adds	r3, r1, #1
 80056a8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80056ac:	4657      	mov	r7, sl
 80056ae:	f804 9001 	strb.w	r9, [r4, r1]
 80056b2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80056b6:	f7ff b935 	b.w	8004924 <d_print_comp+0x1da0>
 80056ba:	f8da a008 	ldr.w	sl, [sl, #8]
 80056be:	f1ba 0f00 	cmp.w	sl, #0
 80056c2:	f43e ad01 	beq.w	80040c8 <d_print_comp+0x1544>
 80056c6:	e4d1      	b.n	800506c <d_print_comp+0x24e8>
 80056c8:	2205      	movs	r2, #5
 80056ca:	4975      	ldr	r1, [pc, #468]	; (80058a0 <d_print_comp+0x2d1c>)
 80056cc:	4620      	mov	r0, r4
 80056ce:	f7fa fe35 	bl	800033c <d_append_buffer>
 80056d2:	9905      	ldr	r1, [sp, #20]
 80056d4:	686a      	ldr	r2, [r5, #4]
 80056d6:	f7fd bb48 	b.w	8002d6a <d_print_comp+0x1e6>
 80056da:	f8cc 0000 	str.w	r0, [ip]
 80056de:	e72c      	b.n	800553a <d_print_comp+0x29b6>
 80056e0:	2202      	movs	r2, #2
 80056e2:	4970      	ldr	r1, [pc, #448]	; (80058a4 <d_print_comp+0x2d20>)
 80056e4:	4620      	mov	r0, r4
 80056e6:	f7fa fe29 	bl	800033c <d_append_buffer>
 80056ea:	9905      	ldr	r1, [sp, #20]
 80056ec:	686a      	ldr	r2, [r5, #4]
 80056ee:	f7fd bb3c 	b.w	8002d6a <d_print_comp+0x1e6>
 80056f2:	2202      	movs	r2, #2
 80056f4:	496c      	ldr	r1, [pc, #432]	; (80058a8 <d_print_comp+0x2d24>)
 80056f6:	4620      	mov	r0, r4
 80056f8:	f7fa fe20 	bl	800033c <d_append_buffer>
 80056fc:	9905      	ldr	r1, [sp, #20]
 80056fe:	686a      	ldr	r2, [r5, #4]
 8005700:	f7fd bb33 	b.w	8002d6a <d_print_comp+0x1e6>
 8005704:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005708:	2fff      	cmp	r7, #255	; 0xff
 800570a:	d111      	bne.n	8005730 <d_print_comp+0x2bac>
 800570c:	2600      	movs	r6, #0
 800570e:	4639      	mov	r1, r7
 8005710:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005714:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005718:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800571c:	4620      	mov	r0, r4
 800571e:	4798      	blx	r3
 8005720:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005724:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005728:	3301      	adds	r3, #1
 800572a:	4637      	mov	r7, r6
 800572c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005730:	1c7a      	adds	r2, r7, #1
 8005732:	236c      	movs	r3, #108	; 0x6c
 8005734:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005738:	55e3      	strb	r3, [r4, r7]
 800573a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800573e:	686a      	ldr	r2, [r5, #4]
 8005740:	9905      	ldr	r1, [sp, #20]
 8005742:	f7fd bb12 	b.w	8002d6a <d_print_comp+0x1e6>
 8005746:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800574a:	2fff      	cmp	r7, #255	; 0xff
 800574c:	d111      	bne.n	8005772 <d_print_comp+0x2bee>
 800574e:	2600      	movs	r6, #0
 8005750:	4639      	mov	r1, r7
 8005752:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005756:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800575a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800575e:	4620      	mov	r0, r4
 8005760:	4798      	blx	r3
 8005762:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005766:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800576a:	3301      	adds	r3, #1
 800576c:	4637      	mov	r7, r6
 800576e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005772:	1c7a      	adds	r2, r7, #1
 8005774:	2375      	movs	r3, #117	; 0x75
 8005776:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800577a:	55e3      	strb	r3, [r4, r7]
 800577c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005780:	686a      	ldr	r2, [r5, #4]
 8005782:	9905      	ldr	r1, [sp, #20]
 8005784:	f7fd baf1 	b.w	8002d6a <d_print_comp+0x1e6>
 8005788:	9905      	ldr	r1, [sp, #20]
 800578a:	686a      	ldr	r2, [r5, #4]
 800578c:	f7fd baed 	b.w	8002d6a <d_print_comp+0x1e6>
 8005790:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005794:	2fff      	cmp	r7, #255	; 0xff
 8005796:	d110      	bne.n	80057ba <d_print_comp+0x2c36>
 8005798:	4639      	mov	r1, r7
 800579a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800579e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80057a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057a6:	4620      	mov	r0, r4
 80057a8:	4798      	blx	r3
 80057aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057ae:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80057b2:	3301      	adds	r3, #1
 80057b4:	464f      	mov	r7, r9
 80057b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057ba:	232d      	movs	r3, #45	; 0x2d
 80057bc:	1c7a      	adds	r2, r7, #1
 80057be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80057c2:	55e3      	strb	r3, [r4, r7]
 80057c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80057c8:	e6fc      	b.n	80055c4 <d_print_comp+0x2a40>
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	6891      	ldr	r1, [r2, #8]
 80057ce:	2901      	cmp	r1, #1
 80057d0:	f47d aa69 	bne.w	8002ca6 <d_print_comp+0x122>
 80057d4:	6852      	ldr	r2, [r2, #4]
 80057d6:	7812      	ldrb	r2, [r2, #0]
 80057d8:	2a3e      	cmp	r2, #62	; 0x3e
 80057da:	f47d aa64 	bne.w	8002ca6 <d_print_comp+0x122>
 80057de:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80057e2:	2fff      	cmp	r7, #255	; 0xff
 80057e4:	d110      	bne.n	8005808 <d_print_comp+0x2c84>
 80057e6:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 80057ea:	4639      	mov	r1, r7
 80057ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057f4:	4620      	mov	r0, r4
 80057f6:	4798      	blx	r3
 80057f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057fc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005800:	3301      	adds	r3, #1
 8005802:	4647      	mov	r7, r8
 8005804:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005808:	2328      	movs	r3, #40	; 0x28
 800580a:	1c7a      	adds	r2, r7, #1
 800580c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005810:	55e3      	strb	r3, [r4, r7]
 8005812:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005816:	68ab      	ldr	r3, [r5, #8]
 8005818:	f7fd ba45 	b.w	8002ca6 <d_print_comp+0x122>
 800581c:	465a      	mov	r2, fp
 800581e:	4631      	mov	r1, r6
 8005820:	4620      	mov	r0, r4
 8005822:	f000 feb7 	bl	8006594 <d_print_subexpr>
 8005826:	463a      	mov	r2, r7
 8005828:	4631      	mov	r1, r6
 800582a:	4620      	mov	r0, r4
 800582c:	f000 fe72 	bl	8006514 <d_print_expr_op>
 8005830:	4652      	mov	r2, sl
 8005832:	4631      	mov	r1, r6
 8005834:	4620      	mov	r0, r4
 8005836:	f000 fead 	bl	8006594 <d_print_subexpr>
 800583a:	2203      	movs	r2, #3
 800583c:	491b      	ldr	r1, [pc, #108]	; (80058ac <d_print_comp+0x2d28>)
 800583e:	4620      	mov	r0, r4
 8005840:	f7fa fd7c 	bl	800033c <d_append_buffer>
 8005844:	464a      	mov	r2, r9
 8005846:	4631      	mov	r1, r6
 8005848:	4620      	mov	r0, r4
 800584a:	f000 fea3 	bl	8006594 <d_print_subexpr>
 800584e:	9905      	ldr	r1, [sp, #20]
 8005850:	686a      	ldr	r2, [r5, #4]
 8005852:	f7fd ba8a 	b.w	8002d6a <d_print_comp+0x1e6>
 8005856:	9905      	ldr	r1, [sp, #20]
 8005858:	686a      	ldr	r2, [r5, #4]
 800585a:	f7fd ba86 	b.w	8002d6a <d_print_comp+0x1e6>
 800585e:	9905      	ldr	r1, [sp, #20]
 8005860:	686a      	ldr	r2, [r5, #4]
 8005862:	f7fd ba82 	b.w	8002d6a <d_print_comp+0x1e6>
 8005866:	68d3      	ldr	r3, [r2, #12]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b29      	cmp	r3, #41	; 0x29
 800586c:	bf1c      	itt	ne
 800586e:	2301      	movne	r3, #1
 8005870:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8005874:	6892      	ldr	r2, [r2, #8]
 8005876:	4631      	mov	r1, r6
 8005878:	4620      	mov	r0, r4
 800587a:	f000 fe8b 	bl	8006594 <d_print_subexpr>
 800587e:	f7fd ba22 	b.w	8002cc6 <d_print_comp+0x142>
 8005882:	463a      	mov	r2, r7
 8005884:	4631      	mov	r1, r6
 8005886:	4620      	mov	r0, r4
 8005888:	f000 fe44 	bl	8006514 <d_print_expr_op>
 800588c:	e5fe      	b.n	800548c <d_print_comp+0x2908>
 800588e:	2301      	movs	r3, #1
 8005890:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005894:	686a      	ldr	r2, [r5, #4]
 8005896:	f7fd ba68 	b.w	8002d6a <d_print_comp+0x1e6>
 800589a:	bf00      	nop
 800589c:	08017ea4 	.word	0x08017ea4
 80058a0:	08017ea8 	.word	0x08017ea8
 80058a4:	08017ea0 	.word	0x08017ea0
 80058a8:	08017e9c 	.word	0x08017e9c
 80058ac:	08017e90 	.word	0x08017e90

080058b0 <d_print_mod>:
 80058b0:	7813      	ldrb	r3, [r2, #0]
 80058b2:	3b03      	subs	r3, #3
 80058b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b8:	4615      	mov	r5, r2
 80058ba:	4604      	mov	r4, r0
 80058bc:	460e      	mov	r6, r1
 80058be:	2b4c      	cmp	r3, #76	; 0x4c
 80058c0:	f200 82c8 	bhi.w	8005e54 <d_print_mod+0x5a4>
 80058c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80058c8:	02c60075 	.word	0x02c60075
 80058cc:	02c602c6 	.word	0x02c602c6
 80058d0:	02c602c6 	.word	0x02c602c6
 80058d4:	02c602c6 	.word	0x02c602c6
 80058d8:	02c602c6 	.word	0x02c602c6
 80058dc:	02c602c6 	.word	0x02c602c6
 80058e0:	02c602c6 	.word	0x02c602c6
 80058e4:	02c602c6 	.word	0x02c602c6
 80058e8:	02c602c6 	.word	0x02c602c6
 80058ec:	02c602c6 	.word	0x02c602c6
 80058f0:	02c602c6 	.word	0x02c602c6
 80058f4:	00a1007a 	.word	0x00a1007a
 80058f8:	007a00c8 	.word	0x007a00c8
 80058fc:	00c800a1 	.word	0x00c800a1
 8005900:	010a00ee 	.word	0x010a00ee
 8005904:	01480126 	.word	0x01480126
 8005908:	02790166 	.word	0x02790166
 800590c:	029f0252 	.word	0x029f0252
 8005910:	02c602c6 	.word	0x02c602c6
 8005914:	02c602c6 	.word	0x02c602c6
 8005918:	02c60184 	.word	0x02c60184
 800591c:	02c601cc 	.word	0x02c601cc
 8005920:	02c602c6 	.word	0x02c602c6
 8005924:	02c602c6 	.word	0x02c602c6
 8005928:	02c602c6 	.word	0x02c602c6
 800592c:	02c602c6 	.word	0x02c602c6
 8005930:	02c602c6 	.word	0x02c602c6
 8005934:	02c602c6 	.word	0x02c602c6
 8005938:	02c602c6 	.word	0x02c602c6
 800593c:	02c602c6 	.word	0x02c602c6
 8005940:	02c602c6 	.word	0x02c602c6
 8005944:	02c602c6 	.word	0x02c602c6
 8005948:	02c602c6 	.word	0x02c602c6
 800594c:	02c602c6 	.word	0x02c602c6
 8005950:	02c602c6 	.word	0x02c602c6
 8005954:	02c602c6 	.word	0x02c602c6
 8005958:	01f402c6 	.word	0x01f402c6
 800595c:	022a02c6 	.word	0x022a02c6
 8005960:	004d      	.short	0x004d
 8005962:	4fd7      	ldr	r7, [pc, #860]	; (8005cc0 <d_print_mod+0x410>)
 8005964:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005968:	f107 0806 	add.w	r8, r7, #6
 800596c:	f04f 0900 	mov.w	r9, #0
 8005970:	e016      	b.n	80059a0 <d_print_mod+0xf0>
 8005972:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005976:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800597a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800597e:	4798      	blx	r3
 8005980:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005984:	3301      	adds	r3, #1
 8005986:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800598a:	2200      	movs	r2, #0
 800598c:	2301      	movs	r3, #1
 800598e:	4547      	cmp	r7, r8
 8005990:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005994:	f804 a002 	strb.w	sl, [r4, r2]
 8005998:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800599c:	f000 825f 	beq.w	8005e5e <d_print_mod+0x5ae>
 80059a0:	2bff      	cmp	r3, #255	; 0xff
 80059a2:	4619      	mov	r1, r3
 80059a4:	4620      	mov	r0, r4
 80059a6:	f817 ab01 	ldrb.w	sl, [r7], #1
 80059aa:	d0e2      	beq.n	8005972 <d_print_mod+0xc2>
 80059ac:	461a      	mov	r2, r3
 80059ae:	3301      	adds	r3, #1
 80059b0:	e7ed      	b.n	800598e <d_print_mod+0xde>
 80059b2:	68aa      	ldr	r2, [r5, #8]
 80059b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b8:	f7fd b8e4 	b.w	8002b84 <d_print_comp>
 80059bc:	4dc1      	ldr	r5, [pc, #772]	; (8005cc4 <d_print_mod+0x414>)
 80059be:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80059c2:	f105 0609 	add.w	r6, r5, #9
 80059c6:	2700      	movs	r7, #0
 80059c8:	e016      	b.n	80059f8 <d_print_mod+0x148>
 80059ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059d2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80059d6:	4798      	blx	r3
 80059d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059dc:	3301      	adds	r3, #1
 80059de:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80059e2:	2200      	movs	r2, #0
 80059e4:	2301      	movs	r3, #1
 80059e6:	42ae      	cmp	r6, r5
 80059e8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80059ec:	f804 8002 	strb.w	r8, [r4, r2]
 80059f0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80059f4:	f000 80ea 	beq.w	8005bcc <d_print_mod+0x31c>
 80059f8:	2bff      	cmp	r3, #255	; 0xff
 80059fa:	4619      	mov	r1, r3
 80059fc:	4620      	mov	r0, r4
 80059fe:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a02:	d0e2      	beq.n	80059ca <d_print_mod+0x11a>
 8005a04:	461a      	mov	r2, r3
 8005a06:	3301      	adds	r3, #1
 8005a08:	e7ed      	b.n	80059e6 <d_print_mod+0x136>
 8005a0a:	4daf      	ldr	r5, [pc, #700]	; (8005cc8 <d_print_mod+0x418>)
 8005a0c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a10:	f105 0609 	add.w	r6, r5, #9
 8005a14:	2700      	movs	r7, #0
 8005a16:	e016      	b.n	8005a46 <d_print_mod+0x196>
 8005a18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a20:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a24:	4798      	blx	r3
 8005a26:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a30:	2200      	movs	r2, #0
 8005a32:	2301      	movs	r3, #1
 8005a34:	42ae      	cmp	r6, r5
 8005a36:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a3a:	f804 8002 	strb.w	r8, [r4, r2]
 8005a3e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a42:	f000 80c3 	beq.w	8005bcc <d_print_mod+0x31c>
 8005a46:	2bff      	cmp	r3, #255	; 0xff
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a50:	d0e2      	beq.n	8005a18 <d_print_mod+0x168>
 8005a52:	461a      	mov	r2, r3
 8005a54:	3301      	adds	r3, #1
 8005a56:	e7ed      	b.n	8005a34 <d_print_mod+0x184>
 8005a58:	4d9c      	ldr	r5, [pc, #624]	; (8005ccc <d_print_mod+0x41c>)
 8005a5a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a5e:	1dae      	adds	r6, r5, #6
 8005a60:	2700      	movs	r7, #0
 8005a62:	e016      	b.n	8005a92 <d_print_mod+0x1e2>
 8005a64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a6c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a70:	4798      	blx	r3
 8005a72:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a76:	3301      	adds	r3, #1
 8005a78:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	2301      	movs	r3, #1
 8005a80:	42b5      	cmp	r5, r6
 8005a82:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a86:	f804 8002 	strb.w	r8, [r4, r2]
 8005a8a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a8e:	f000 809d 	beq.w	8005bcc <d_print_mod+0x31c>
 8005a92:	2bff      	cmp	r3, #255	; 0xff
 8005a94:	4619      	mov	r1, r3
 8005a96:	4620      	mov	r0, r4
 8005a98:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005a9c:	d0e2      	beq.n	8005a64 <d_print_mod+0x1b4>
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	e7ed      	b.n	8005a80 <d_print_mod+0x1d0>
 8005aa4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005aa8:	29ff      	cmp	r1, #255	; 0xff
 8005aaa:	d10f      	bne.n	8005acc <d_print_mod+0x21c>
 8005aac:	2500      	movs	r5, #0
 8005aae:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005ab2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005ab6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005aba:	4798      	blx	r3
 8005abc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ac0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005acc:	2220      	movs	r2, #32
 8005ace:	1c4b      	adds	r3, r1, #1
 8005ad0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005ad4:	5462      	strb	r2, [r4, r1]
 8005ad6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005ada:	e05d      	b.n	8005b98 <d_print_mod+0x2e8>
 8005adc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ae0:	29ff      	cmp	r1, #255	; 0xff
 8005ae2:	d10f      	bne.n	8005b04 <d_print_mod+0x254>
 8005ae4:	2500      	movs	r5, #0
 8005ae6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005aea:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005aee:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005af2:	4798      	blx	r3
 8005af4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005af8:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005afc:	3301      	adds	r3, #1
 8005afe:	4629      	mov	r1, r5
 8005b00:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b04:	2220      	movs	r2, #32
 8005b06:	1c4b      	adds	r3, r1, #1
 8005b08:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005b0c:	5462      	strb	r2, [r4, r1]
 8005b0e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005b12:	e154      	b.n	8005dbe <d_print_mod+0x50e>
 8005b14:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b18:	29ff      	cmp	r1, #255	; 0xff
 8005b1a:	d10f      	bne.n	8005b3c <d_print_mod+0x28c>
 8005b1c:	2700      	movs	r7, #0
 8005b1e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b22:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005b26:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b2a:	4798      	blx	r3
 8005b2c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b30:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8005b34:	3301      	adds	r3, #1
 8005b36:	4639      	mov	r1, r7
 8005b38:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b3c:	1c4a      	adds	r2, r1, #1
 8005b3e:	2320      	movs	r3, #32
 8005b40:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005b44:	5463      	strb	r3, [r4, r1]
 8005b46:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	68ea      	ldr	r2, [r5, #12]
 8005b4e:	4620      	mov	r0, r4
 8005b50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b54:	f7fd b816 	b.w	8002b84 <d_print_comp>
 8005b58:	f011 0604 	ands.w	r6, r1, #4
 8005b5c:	d136      	bne.n	8005bcc <d_print_mod+0x31c>
 8005b5e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b62:	29ff      	cmp	r1, #255	; 0xff
 8005b64:	d10e      	bne.n	8005b84 <d_print_mod+0x2d4>
 8005b66:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b6a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005b6e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b72:	4798      	blx	r3
 8005b74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b78:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	4631      	mov	r1, r6
 8005b80:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b84:	232a      	movs	r3, #42	; 0x2a
 8005b86:	1c4a      	adds	r2, r1, #1
 8005b88:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005b8c:	5463      	strb	r3, [r4, r1]
 8005b8e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005b92:	e01b      	b.n	8005bcc <d_print_mod+0x31c>
 8005b94:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005b98:	2bff      	cmp	r3, #255	; 0xff
 8005b9a:	f040 81a9 	bne.w	8005ef0 <d_print_mod+0x640>
 8005b9e:	2500      	movs	r5, #0
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ba6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005baa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005bae:	4620      	mov	r0, r4
 8005bb0:	4798      	blx	r3
 8005bb2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	2226      	movs	r2, #38	; 0x26
 8005bc2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005bc6:	54e2      	strb	r2, [r4, r3]
 8005bc8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd0:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8005bd4:	2b28      	cmp	r3, #40	; 0x28
 8005bd6:	d019      	beq.n	8005c0c <d_print_mod+0x35c>
 8005bd8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005bdc:	29ff      	cmp	r1, #255	; 0xff
 8005bde:	f040 818b 	bne.w	8005ef8 <d_print_mod+0x648>
 8005be2:	2700      	movs	r7, #0
 8005be4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005be8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005bec:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005bf0:	4798      	blx	r3
 8005bf2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	4639      	mov	r1, r7
 8005bfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005bfe:	2201      	movs	r2, #1
 8005c00:	2320      	movs	r3, #32
 8005c02:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005c06:	5463      	strb	r3, [r4, r1]
 8005c08:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005c0c:	68aa      	ldr	r2, [r5, #8]
 8005c0e:	4d30      	ldr	r5, [pc, #192]	; (8005cd0 <d_print_mod+0x420>)
 8005c10:	4631      	mov	r1, r6
 8005c12:	4620      	mov	r0, r4
 8005c14:	f7fc ffb6 	bl	8002b84 <d_print_comp>
 8005c18:	1cee      	adds	r6, r5, #3
 8005c1a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005c1e:	2700      	movs	r7, #0
 8005c20:	e015      	b.n	8005c4e <d_print_mod+0x39e>
 8005c22:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c26:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c2a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005c2e:	4798      	blx	r3
 8005c30:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c34:	3301      	adds	r3, #1
 8005c36:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	42ae      	cmp	r6, r5
 8005c40:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005c44:	f804 8002 	strb.w	r8, [r4, r2]
 8005c48:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005c4c:	d0be      	beq.n	8005bcc <d_print_mod+0x31c>
 8005c4e:	2bff      	cmp	r3, #255	; 0xff
 8005c50:	4619      	mov	r1, r3
 8005c52:	4620      	mov	r0, r4
 8005c54:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005c58:	d0e3      	beq.n	8005c22 <d_print_mod+0x372>
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	e7ee      	b.n	8005c3e <d_print_mod+0x38e>
 8005c60:	4f1c      	ldr	r7, [pc, #112]	; (8005cd4 <d_print_mod+0x424>)
 8005c62:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005c66:	f107 080a 	add.w	r8, r7, #10
 8005c6a:	f04f 0900 	mov.w	r9, #0
 8005c6e:	e016      	b.n	8005c9e <d_print_mod+0x3ee>
 8005c70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c78:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005c7c:	4798      	blx	r3
 8005c7e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c82:	3301      	adds	r3, #1
 8005c84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	45b8      	cmp	r8, r7
 8005c8e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005c92:	f804 a002 	strb.w	sl, [r4, r2]
 8005c96:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005c9a:	f000 811e 	beq.w	8005eda <d_print_mod+0x62a>
 8005c9e:	2bff      	cmp	r3, #255	; 0xff
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f817 ab01 	ldrb.w	sl, [r7], #1
 8005ca8:	d0e2      	beq.n	8005c70 <d_print_mod+0x3c0>
 8005caa:	461a      	mov	r2, r3
 8005cac:	3301      	adds	r3, #1
 8005cae:	e7ed      	b.n	8005c8c <d_print_mod+0x3dc>
 8005cb0:	4d09      	ldr	r5, [pc, #36]	; (8005cd8 <d_print_mod+0x428>)
 8005cb2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005cb6:	f105 0611 	add.w	r6, r5, #17
 8005cba:	2700      	movs	r7, #0
 8005cbc:	e025      	b.n	8005d0a <d_print_mod+0x45a>
 8005cbe:	bf00      	nop
 8005cc0:	08017f94 	.word	0x08017f94
 8005cc4:	08017f53 	.word	0x08017f53
 8005cc8:	08017f5f 	.word	0x08017f5f
 8005ccc:	08017f6c 	.word	0x08017f6c
 8005cd0:	08017fb8 	.word	0x08017fb8
 8005cd4:	08017fbc 	.word	0x08017fbc
 8005cd8:	08017f73 	.word	0x08017f73
 8005cdc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ce0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ce4:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005ce8:	4798      	blx	r3
 8005cea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005cee:	3301      	adds	r3, #1
 8005cf0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	42ae      	cmp	r6, r5
 8005cfa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005cfe:	f804 8002 	strb.w	r8, [r4, r2]
 8005d02:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005d06:	f43f af61 	beq.w	8005bcc <d_print_mod+0x31c>
 8005d0a:	2bff      	cmp	r3, #255	; 0xff
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005d14:	d0e2      	beq.n	8005cdc <d_print_mod+0x42c>
 8005d16:	461a      	mov	r2, r3
 8005d18:	3301      	adds	r3, #1
 8005d1a:	e7ed      	b.n	8005cf8 <d_print_mod+0x448>
 8005d1c:	4f77      	ldr	r7, [pc, #476]	; (8005efc <d_print_mod+0x64c>)
 8005d1e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005d22:	f107 0809 	add.w	r8, r7, #9
 8005d26:	f04f 0900 	mov.w	r9, #0
 8005d2a:	e016      	b.n	8005d5a <d_print_mod+0x4aa>
 8005d2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d34:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005d38:	4798      	blx	r3
 8005d3a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d3e:	3301      	adds	r3, #1
 8005d40:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d44:	2200      	movs	r2, #0
 8005d46:	2301      	movs	r3, #1
 8005d48:	4547      	cmp	r7, r8
 8005d4a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d4e:	f804 a002 	strb.w	sl, [r4, r2]
 8005d52:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005d56:	f000 8082 	beq.w	8005e5e <d_print_mod+0x5ae>
 8005d5a:	2bff      	cmp	r3, #255	; 0xff
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8005d64:	d0e2      	beq.n	8005d2c <d_print_mod+0x47c>
 8005d66:	461a      	mov	r2, r3
 8005d68:	3301      	adds	r3, #1
 8005d6a:	e7ed      	b.n	8005d48 <d_print_mod+0x498>
 8005d6c:	4d64      	ldr	r5, [pc, #400]	; (8005f00 <d_print_mod+0x650>)
 8005d6e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005d72:	f105 0608 	add.w	r6, r5, #8
 8005d76:	2700      	movs	r7, #0
 8005d78:	e016      	b.n	8005da8 <d_print_mod+0x4f8>
 8005d7a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d7e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d82:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005d86:	4798      	blx	r3
 8005d88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d92:	2200      	movs	r2, #0
 8005d94:	2301      	movs	r3, #1
 8005d96:	42ae      	cmp	r6, r5
 8005d98:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d9c:	f804 8002 	strb.w	r8, [r4, r2]
 8005da0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005da4:	f43f af12 	beq.w	8005bcc <d_print_mod+0x31c>
 8005da8:	2bff      	cmp	r3, #255	; 0xff
 8005daa:	4619      	mov	r1, r3
 8005dac:	4620      	mov	r0, r4
 8005dae:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005db2:	d0e2      	beq.n	8005d7a <d_print_mod+0x4ca>
 8005db4:	461a      	mov	r2, r3
 8005db6:	3301      	adds	r3, #1
 8005db8:	e7ed      	b.n	8005d96 <d_print_mod+0x4e6>
 8005dba:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005dbe:	4d51      	ldr	r5, [pc, #324]	; (8005f04 <d_print_mod+0x654>)
 8005dc0:	2700      	movs	r7, #0
 8005dc2:	1cae      	adds	r6, r5, #2
 8005dc4:	e016      	b.n	8005df4 <d_print_mod+0x544>
 8005dc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005dca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005dce:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005dd2:	4798      	blx	r3
 8005dd4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005dd8:	3301      	adds	r3, #1
 8005dda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005dde:	2200      	movs	r2, #0
 8005de0:	2301      	movs	r3, #1
 8005de2:	42b5      	cmp	r5, r6
 8005de4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005de8:	f804 8002 	strb.w	r8, [r4, r2]
 8005dec:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005df0:	f43f aeec 	beq.w	8005bcc <d_print_mod+0x31c>
 8005df4:	2bff      	cmp	r3, #255	; 0xff
 8005df6:	4619      	mov	r1, r3
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005dfe:	d0e2      	beq.n	8005dc6 <d_print_mod+0x516>
 8005e00:	461a      	mov	r2, r3
 8005e02:	3301      	adds	r3, #1
 8005e04:	e7ed      	b.n	8005de2 <d_print_mod+0x532>
 8005e06:	4d40      	ldr	r5, [pc, #256]	; (8005f08 <d_print_mod+0x658>)
 8005e08:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005e0c:	f105 060a 	add.w	r6, r5, #10
 8005e10:	2700      	movs	r7, #0
 8005e12:	e016      	b.n	8005e42 <d_print_mod+0x592>
 8005e14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e18:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e1c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e20:	4798      	blx	r3
 8005e22:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e26:	3301      	adds	r3, #1
 8005e28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2301      	movs	r3, #1
 8005e30:	42b5      	cmp	r5, r6
 8005e32:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e36:	f804 8002 	strb.w	r8, [r4, r2]
 8005e3a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e3e:	f43f aec5 	beq.w	8005bcc <d_print_mod+0x31c>
 8005e42:	2bff      	cmp	r3, #255	; 0xff
 8005e44:	4619      	mov	r1, r3
 8005e46:	4620      	mov	r0, r4
 8005e48:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005e4c:	d0e2      	beq.n	8005e14 <d_print_mod+0x564>
 8005e4e:	461a      	mov	r2, r3
 8005e50:	3301      	adds	r3, #1
 8005e52:	e7ed      	b.n	8005e30 <d_print_mod+0x580>
 8005e54:	462a      	mov	r2, r5
 8005e56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e5a:	f7fc be93 	b.w	8002b84 <d_print_comp>
 8005e5e:	68ea      	ldr	r2, [r5, #12]
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	f43f aeb3 	beq.w	8005bcc <d_print_mod+0x31c>
 8005e66:	2bff      	cmp	r3, #255	; 0xff
 8005e68:	d144      	bne.n	8005ef4 <d_print_mod+0x644>
 8005e6a:	2700      	movs	r7, #0
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e76:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	4798      	blx	r3
 8005e7e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e82:	68ea      	ldr	r2, [r5, #12]
 8005e84:	1c59      	adds	r1, r3, #1
 8005e86:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	2528      	movs	r5, #40	; 0x28
 8005e90:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e94:	4620      	mov	r0, r4
 8005e96:	4631      	mov	r1, r6
 8005e98:	54e5      	strb	r5, [r4, r3]
 8005e9a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005e9e:	f7fc fe71 	bl	8002b84 <d_print_comp>
 8005ea2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005ea6:	29ff      	cmp	r1, #255	; 0xff
 8005ea8:	d120      	bne.n	8005eec <d_print_mod+0x63c>
 8005eaa:	2500      	movs	r5, #0
 8005eac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005eb0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005eb4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005eb8:	4620      	mov	r0, r4
 8005eba:	4798      	blx	r3
 8005ebc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005ec8:	2201      	movs	r2, #1
 8005eca:	2329      	movs	r3, #41	; 0x29
 8005ecc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005ed0:	5463      	strb	r3, [r4, r1]
 8005ed2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eda:	4631      	mov	r1, r6
 8005edc:	68aa      	ldr	r2, [r5, #8]
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f7fc fe50 	bl	8002b84 <d_print_comp>
 8005ee4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005ee8:	29ff      	cmp	r1, #255	; 0xff
 8005eea:	d0de      	beq.n	8005eaa <d_print_mod+0x5fa>
 8005eec:	1c4a      	adds	r2, r1, #1
 8005eee:	e7ec      	b.n	8005eca <d_print_mod+0x61a>
 8005ef0:	1c59      	adds	r1, r3, #1
 8005ef2:	e665      	b.n	8005bc0 <d_print_mod+0x310>
 8005ef4:	1c59      	adds	r1, r3, #1
 8005ef6:	e7ca      	b.n	8005e8e <d_print_mod+0x5de>
 8005ef8:	1c4a      	adds	r2, r1, #1
 8005efa:	e681      	b.n	8005c00 <d_print_mod+0x350>
 8005efc:	08017f87 	.word	0x08017f87
 8005f00:	08017f9f 	.word	0x08017f9f
 8005f04:	08017f9c 	.word	0x08017f9c
 8005f08:	08017fac 	.word	0x08017fac

08005f0c <d_print_function_type.isra.15>:
 8005f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f10:	4604      	mov	r4, r0
 8005f12:	460e      	mov	r6, r1
 8005f14:	4617      	mov	r7, r2
 8005f16:	461d      	mov	r5, r3
 8005f18:	b1d3      	cbz	r3, 8005f50 <d_print_function_type.isra.15+0x44>
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	b9c3      	cbnz	r3, 8005f50 <d_print_function_type.isra.15+0x44>
 8005f1e:	462a      	mov	r2, r5
 8005f20:	2001      	movs	r0, #1
 8005f22:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 80060ec <d_print_function_type.isra.15+0x1e0>
 8005f26:	e001      	b.n	8005f2c <d_print_function_type.isra.15+0x20>
 8005f28:	6893      	ldr	r3, [r2, #8]
 8005f2a:	b98b      	cbnz	r3, 8005f50 <d_print_function_type.isra.15+0x44>
 8005f2c:	6853      	ldr	r3, [r2, #4]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	3b19      	subs	r3, #25
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b12      	cmp	r3, #18
 8005f36:	fa00 f103 	lsl.w	r1, r0, r3
 8005f3a:	d806      	bhi.n	8005f4a <d_print_function_type.isra.15+0x3e>
 8005f3c:	ea11 0f0c 	tst.w	r1, ip
 8005f40:	f040 80c7 	bne.w	80060d2 <d_print_function_type.isra.15+0x1c6>
 8005f44:	f411 6f60 	tst.w	r1, #3584	; 0xe00
 8005f48:	d154      	bne.n	8005ff4 <d_print_function_type.isra.15+0xe8>
 8005f4a:	6812      	ldr	r2, [r2, #0]
 8005f4c:	2a00      	cmp	r2, #0
 8005f4e:	d1eb      	bne.n	8005f28 <d_print_function_type.isra.15+0x1c>
 8005f50:	2300      	movs	r3, #0
 8005f52:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005f56:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	462a      	mov	r2, r5
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f000 f8c6 	bl	80060f0 <d_print_mod_list>
 8005f64:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f68:	29ff      	cmp	r1, #255	; 0xff
 8005f6a:	f040 80a4 	bne.w	80060b6 <d_print_function_type.isra.15+0x1aa>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8005f74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005f78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	4798      	blx	r3
 8005f80:	2328      	movs	r3, #40	; 0x28
 8005f82:	7023      	strb	r3, [r4, #0]
 8005f84:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005f88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	1c59      	adds	r1, r3, #1
 8005f90:	2301      	movs	r3, #1
 8005f92:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005f96:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005f9a:	2a00      	cmp	r2, #0
 8005f9c:	f000 8097 	beq.w	80060ce <d_print_function_type.isra.15+0x1c2>
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f7fc fdee 	bl	8002b84 <d_print_comp>
 8005fa8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005fac:	2bff      	cmp	r3, #255	; 0xff
 8005fae:	f040 808e 	bne.w	80060ce <d_print_function_type.isra.15+0x1c2>
 8005fb2:	2700      	movs	r7, #0
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005fba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005fbe:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	4798      	blx	r3
 8005fc6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	2029      	movs	r0, #41	; 0x29
 8005fd6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005fda:	4631      	mov	r1, r6
 8005fdc:	54e0      	strb	r0, [r4, r3]
 8005fde:	462a      	mov	r2, r5
 8005fe0:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f000 f882 	bl	80060f0 <d_print_mod_list>
 8005fec:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8005ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005ff8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005ffc:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8006000:	2a28      	cmp	r2, #40	; 0x28
 8006002:	d01e      	beq.n	8006042 <d_print_function_type.isra.15+0x136>
 8006004:	2b20      	cmp	r3, #32
 8006006:	d01c      	beq.n	8006042 <d_print_function_type.isra.15+0x136>
 8006008:	29ff      	cmp	r1, #255	; 0xff
 800600a:	d112      	bne.n	8006032 <d_print_function_type.isra.15+0x126>
 800600c:	2300      	movs	r3, #0
 800600e:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006012:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006016:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800601a:	4620      	mov	r0, r4
 800601c:	4798      	blx	r3
 800601e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006022:	2220      	movs	r2, #32
 8006024:	3301      	adds	r3, #1
 8006026:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800602a:	7022      	strb	r2, [r4, #0]
 800602c:	2101      	movs	r1, #1
 800602e:	1c4a      	adds	r2, r1, #1
 8006030:	e01a      	b.n	8006068 <d_print_function_type.isra.15+0x15c>
 8006032:	1c4b      	adds	r3, r1, #1
 8006034:	2220      	movs	r2, #32
 8006036:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800603a:	5462      	strb	r2, [r4, r1]
 800603c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006040:	4619      	mov	r1, r3
 8006042:	29ff      	cmp	r1, #255	; 0xff
 8006044:	d1f3      	bne.n	800602e <d_print_function_type.isra.15+0x122>
 8006046:	f04f 0800 	mov.w	r8, #0
 800604a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800604e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006052:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006056:	4620      	mov	r0, r4
 8006058:	4798      	blx	r3
 800605a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800605e:	3301      	adds	r3, #1
 8006060:	4641      	mov	r1, r8
 8006062:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006066:	2201      	movs	r2, #1
 8006068:	2328      	movs	r3, #40	; 0x28
 800606a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800606e:	5463      	strb	r3, [r4, r1]
 8006070:	f04f 0900 	mov.w	r9, #0
 8006074:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006078:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 800607c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8006080:	464b      	mov	r3, r9
 8006082:	462a      	mov	r2, r5
 8006084:	4631      	mov	r1, r6
 8006086:	4620      	mov	r0, r4
 8006088:	f000 f832 	bl	80060f0 <d_print_mod_list>
 800608c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006090:	2bff      	cmp	r3, #255	; 0xff
 8006092:	d123      	bne.n	80060dc <d_print_function_type.isra.15+0x1d0>
 8006094:	4619      	mov	r1, r3
 8006096:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800609a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800609e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80060a2:	4620      	mov	r0, r4
 80060a4:	4798      	blx	r3
 80060a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060aa:	2229      	movs	r2, #41	; 0x29
 80060ac:	3301      	adds	r3, #1
 80060ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060b2:	7022      	strb	r2, [r4, #0]
 80060b4:	2101      	movs	r1, #1
 80060b6:	2228      	movs	r2, #40	; 0x28
 80060b8:	1c4b      	adds	r3, r1, #1
 80060ba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80060be:	5462      	strb	r2, [r4, r1]
 80060c0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	f43f af70 	beq.w	8005fac <d_print_function_type.isra.15+0xa0>
 80060cc:	e768      	b.n	8005fa0 <d_print_function_type.isra.15+0x94>
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	e780      	b.n	8005fd4 <d_print_function_type.isra.15+0xc8>
 80060d2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80060d6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80060da:	e793      	b.n	8006004 <d_print_function_type.isra.15+0xf8>
 80060dc:	2229      	movs	r2, #41	; 0x29
 80060de:	1c59      	adds	r1, r3, #1
 80060e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80060e4:	54e2      	strb	r2, [r4, r3]
 80060e6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80060ea:	e73d      	b.n	8005f68 <d_print_function_type.isra.15+0x5c>
 80060ec:	00043107 	.word	0x00043107

080060f0 <d_print_mod_list>:
 80060f0:	2a00      	cmp	r2, #0
 80060f2:	f000 80ac 	beq.w	800624e <d_print_mod_list+0x15e>
 80060f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fa:	461f      	mov	r7, r3
 80060fc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8006100:	b089      	sub	sp, #36	; 0x24
 8006102:	4605      	mov	r5, r0
 8006104:	bb4b      	cbnz	r3, 800615a <d_print_mod_list+0x6a>
 8006106:	4688      	mov	r8, r1
 8006108:	4614      	mov	r4, r2
 800610a:	f04f 0901 	mov.w	r9, #1
 800610e:	e002      	b.n	8006116 <d_print_mod_list+0x26>
 8006110:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8006114:	bb0b      	cbnz	r3, 800615a <d_print_mod_list+0x6a>
 8006116:	68a3      	ldr	r3, [r4, #8]
 8006118:	b9e3      	cbnz	r3, 8006154 <d_print_mod_list+0x64>
 800611a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800611e:	f89a 6000 	ldrb.w	r6, [sl]
 8006122:	4630      	mov	r0, r6
 8006124:	b917      	cbnz	r7, 800612c <d_print_mod_list+0x3c>
 8006126:	f7fa f93f 	bl	80003a8 <is_fnqual_component_type>
 800612a:	b998      	cbnz	r0, 8006154 <d_print_mod_list+0x64>
 800612c:	68e3      	ldr	r3, [r4, #12]
 800612e:	f8c4 9008 	str.w	r9, [r4, #8]
 8006132:	2e29      	cmp	r6, #41	; 0x29
 8006134:	f8d5 b110 	ldr.w	fp, [r5, #272]	; 0x110
 8006138:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 800613c:	4652      	mov	r2, sl
 800613e:	4641      	mov	r1, r8
 8006140:	4628      	mov	r0, r5
 8006142:	d00d      	beq.n	8006160 <d_print_mod_list+0x70>
 8006144:	2e2a      	cmp	r6, #42	; 0x2a
 8006146:	d015      	beq.n	8006174 <d_print_mod_list+0x84>
 8006148:	2e02      	cmp	r6, #2
 800614a:	d01d      	beq.n	8006188 <d_print_mod_list+0x98>
 800614c:	f7ff fbb0 	bl	80058b0 <d_print_mod>
 8006150:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 8006154:	6824      	ldr	r4, [r4, #0]
 8006156:	2c00      	cmp	r4, #0
 8006158:	d1da      	bne.n	8006110 <d_print_mod_list+0x20>
 800615a:	b009      	add	sp, #36	; 0x24
 800615c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	f10a 020c 	add.w	r2, sl, #12
 8006166:	f7ff fed1 	bl	8005f0c <d_print_function_type.isra.15>
 800616a:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 800616e:	b009      	add	sp, #36	; 0x24
 8006170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	f10a 0208 	add.w	r2, sl, #8
 800617a:	f000 f8f1 	bl	8006360 <d_print_array_type.isra.14>
 800617e:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 8006182:	b009      	add	sp, #36	; 0x24
 8006184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006188:	2600      	movs	r6, #0
 800618a:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
 800618e:	f8da 2008 	ldr.w	r2, [sl, #8]
 8006192:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 8006196:	f7fc fcf5 	bl	8002b84 <d_print_comp>
 800619a:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
 800619e:	f018 0704 	ands.w	r7, r8, #4
 80061a2:	d02f      	beq.n	8006204 <d_print_mod_list+0x114>
 80061a4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80061a8:	29ff      	cmp	r1, #255	; 0xff
 80061aa:	f040 80cf 	bne.w	800634c <d_print_mod_list+0x25c>
 80061ae:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80061b2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80061b6:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 80061ba:	4628      	mov	r0, r5
 80061bc:	4798      	blx	r3
 80061be:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80061c2:	3301      	adds	r3, #1
 80061c4:	4631      	mov	r1, r6
 80061c6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 80061ca:	2201      	movs	r2, #1
 80061cc:	232e      	movs	r3, #46	; 0x2e
 80061ce:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 80061d2:	546b      	strb	r3, [r5, r1]
 80061d4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 80061d8:	6863      	ldr	r3, [r4, #4]
 80061da:	68dc      	ldr	r4, [r3, #12]
 80061dc:	7820      	ldrb	r0, [r4, #0]
 80061de:	2846      	cmp	r0, #70	; 0x46
 80061e0:	d102      	bne.n	80061e8 <d_print_mod_list+0xf8>
 80061e2:	e035      	b.n	8006250 <d_print_mod_list+0x160>
 80061e4:	68a4      	ldr	r4, [r4, #8]
 80061e6:	7820      	ldrb	r0, [r4, #0]
 80061e8:	f7fa f8de 	bl	80003a8 <is_fnqual_component_type>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d1f9      	bne.n	80061e4 <d_print_mod_list+0xf4>
 80061f0:	4622      	mov	r2, r4
 80061f2:	4641      	mov	r1, r8
 80061f4:	4628      	mov	r0, r5
 80061f6:	f7fc fcc5 	bl	8002b84 <d_print_comp>
 80061fa:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 80061fe:	b009      	add	sp, #36	; 0x24
 8006200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006204:	4e52      	ldr	r6, [pc, #328]	; (8006350 <d_print_mod_list+0x260>)
 8006206:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 800620a:	f106 0902 	add.w	r9, r6, #2
 800620e:	e015      	b.n	800623c <d_print_mod_list+0x14c>
 8006210:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006214:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006218:	f885 70ff 	strb.w	r7, [r5, #255]	; 0xff
 800621c:	4798      	blx	r3
 800621e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006222:	3301      	adds	r3, #1
 8006224:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006228:	2200      	movs	r2, #0
 800622a:	2301      	movs	r3, #1
 800622c:	45b1      	cmp	r9, r6
 800622e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006232:	f805 a002 	strb.w	sl, [r5, r2]
 8006236:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800623a:	d0cd      	beq.n	80061d8 <d_print_mod_list+0xe8>
 800623c:	2bff      	cmp	r3, #255	; 0xff
 800623e:	4619      	mov	r1, r3
 8006240:	4628      	mov	r0, r5
 8006242:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006246:	d0e3      	beq.n	8006210 <d_print_mod_list+0x120>
 8006248:	461a      	mov	r2, r3
 800624a:	3301      	adds	r3, #1
 800624c:	e7ee      	b.n	800622c <d_print_mod_list+0x13c>
 800624e:	4770      	bx	lr
 8006250:	4e40      	ldr	r6, [pc, #256]	; (8006354 <d_print_mod_list+0x264>)
 8006252:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006256:	f106 070d 	add.w	r7, r6, #13
 800625a:	f04f 0900 	mov.w	r9, #0
 800625e:	e015      	b.n	800628c <d_print_mod_list+0x19c>
 8006260:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006264:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006268:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 800626c:	4798      	blx	r3
 800626e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006272:	3301      	adds	r3, #1
 8006274:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006278:	2200      	movs	r2, #0
 800627a:	2301      	movs	r3, #1
 800627c:	42b7      	cmp	r7, r6
 800627e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006282:	f805 a002 	strb.w	sl, [r5, r2]
 8006286:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800628a:	d008      	beq.n	800629e <d_print_mod_list+0x1ae>
 800628c:	2bff      	cmp	r3, #255	; 0xff
 800628e:	4619      	mov	r1, r3
 8006290:	4628      	mov	r0, r5
 8006292:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006296:	d0e3      	beq.n	8006260 <d_print_mod_list+0x170>
 8006298:	461a      	mov	r2, r3
 800629a:	3301      	adds	r3, #1
 800629c:	e7ee      	b.n	800627c <d_print_mod_list+0x18c>
 800629e:	68e2      	ldr	r2, [r4, #12]
 80062a0:	492d      	ldr	r1, [pc, #180]	; (8006358 <d_print_mod_list+0x268>)
 80062a2:	3201      	adds	r2, #1
 80062a4:	a801      	add	r0, sp, #4
 80062a6:	f00d f8a9 	bl	80133fc <sprintf>
 80062aa:	a801      	add	r0, sp, #4
 80062ac:	f000 fd5a 	bl	8006d64 <strlen>
 80062b0:	b328      	cbz	r0, 80062fe <d_print_mod_list+0x20e>
 80062b2:	ae01      	add	r6, sp, #4
 80062b4:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80062b8:	1837      	adds	r7, r6, r0
 80062ba:	f04f 0900 	mov.w	r9, #0
 80062be:	e015      	b.n	80062ec <d_print_mod_list+0x1fc>
 80062c0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80062c4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80062c8:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 80062cc:	4798      	blx	r3
 80062ce:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80062d2:	3301      	adds	r3, #1
 80062d4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 80062d8:	2200      	movs	r2, #0
 80062da:	2301      	movs	r3, #1
 80062dc:	42be      	cmp	r6, r7
 80062de:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 80062e2:	f805 a002 	strb.w	sl, [r5, r2]
 80062e6:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 80062ea:	d00a      	beq.n	8006302 <d_print_mod_list+0x212>
 80062ec:	2bff      	cmp	r3, #255	; 0xff
 80062ee:	4619      	mov	r1, r3
 80062f0:	4628      	mov	r0, r5
 80062f2:	f816 ab01 	ldrb.w	sl, [r6], #1
 80062f6:	d0e3      	beq.n	80062c0 <d_print_mod_list+0x1d0>
 80062f8:	461a      	mov	r2, r3
 80062fa:	3301      	adds	r3, #1
 80062fc:	e7ee      	b.n	80062dc <d_print_mod_list+0x1ec>
 80062fe:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006302:	4e16      	ldr	r6, [pc, #88]	; (800635c <d_print_mod_list+0x26c>)
 8006304:	f04f 0900 	mov.w	r9, #0
 8006308:	1cf7      	adds	r7, r6, #3
 800630a:	e016      	b.n	800633a <d_print_mod_list+0x24a>
 800630c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006310:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006314:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 8006318:	4798      	blx	r3
 800631a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800631e:	3301      	adds	r3, #1
 8006320:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006324:	2200      	movs	r2, #0
 8006326:	2301      	movs	r3, #1
 8006328:	42b7      	cmp	r7, r6
 800632a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 800632e:	f805 a002 	strb.w	sl, [r5, r2]
 8006332:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 8006336:	f43f af55 	beq.w	80061e4 <d_print_mod_list+0xf4>
 800633a:	2bff      	cmp	r3, #255	; 0xff
 800633c:	4619      	mov	r1, r3
 800633e:	4628      	mov	r0, r5
 8006340:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006344:	d0e2      	beq.n	800630c <d_print_mod_list+0x21c>
 8006346:	461a      	mov	r2, r3
 8006348:	3301      	adds	r3, #1
 800634a:	e7ed      	b.n	8006328 <d_print_mod_list+0x238>
 800634c:	1c4a      	adds	r2, r1, #1
 800634e:	e73d      	b.n	80061cc <d_print_mod_list+0xdc>
 8006350:	08017cd4 	.word	0x08017cd4
 8006354:	08017cd8 	.word	0x08017cd8
 8006358:	08017c84 	.word	0x08017c84
 800635c:	08017ce8 	.word	0x08017ce8

08006360 <d_print_array_type.isra.14>:
 8006360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006364:	4604      	mov	r4, r0
 8006366:	460f      	mov	r7, r1
 8006368:	4690      	mov	r8, r2
 800636a:	b15b      	cbz	r3, 8006384 <d_print_array_type.isra.14+0x24>
 800636c:	461e      	mov	r6, r3
 800636e:	689d      	ldr	r5, [r3, #8]
 8006370:	2d00      	cmp	r5, #0
 8006372:	d042      	beq.n	80063fa <d_print_array_type.isra.14+0x9a>
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f9      	bne.n	800636e <d_print_array_type.isra.14+0xe>
 800637a:	4632      	mov	r2, r6
 800637c:	4639      	mov	r1, r7
 800637e:	4620      	mov	r0, r4
 8006380:	f7ff feb6 	bl	80060f0 <d_print_mod_list>
 8006384:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006388:	29ff      	cmp	r1, #255	; 0xff
 800638a:	f040 80b1 	bne.w	80064f0 <d_print_array_type.isra.14+0x190>
 800638e:	2300      	movs	r3, #0
 8006390:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006394:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006398:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800639c:	4620      	mov	r0, r4
 800639e:	4798      	blx	r3
 80063a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063a4:	2220      	movs	r2, #32
 80063a6:	3301      	adds	r3, #1
 80063a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063ac:	7022      	strb	r2, [r4, #0]
 80063ae:	2301      	movs	r3, #1
 80063b0:	225b      	movs	r2, #91	; 0x5b
 80063b2:	1c59      	adds	r1, r3, #1
 80063b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80063b8:	54e2      	strb	r2, [r4, r3]
 80063ba:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80063be:	f8d8 2000 	ldr.w	r2, [r8]
 80063c2:	2a00      	cmp	r2, #0
 80063c4:	d140      	bne.n	8006448 <d_print_array_type.isra.14+0xe8>
 80063c6:	29ff      	cmp	r1, #255	; 0xff
 80063c8:	d145      	bne.n	8006456 <d_print_array_type.isra.14+0xf6>
 80063ca:	2500      	movs	r5, #0
 80063cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063d4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80063d8:	4620      	mov	r0, r4
 80063da:	4798      	blx	r3
 80063dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063e0:	3301      	adds	r3, #1
 80063e2:	4629      	mov	r1, r5
 80063e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063e8:	2201      	movs	r2, #1
 80063ea:	235d      	movs	r3, #93	; 0x5d
 80063ec:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80063f0:	5463      	strb	r3, [r4, r1]
 80063f2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80063f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006400:	d12b      	bne.n	800645a <d_print_array_type.isra.14+0xfa>
 8006402:	462b      	mov	r3, r5
 8006404:	4632      	mov	r2, r6
 8006406:	4639      	mov	r1, r7
 8006408:	4620      	mov	r0, r4
 800640a:	f7ff fe71 	bl	80060f0 <d_print_mod_list>
 800640e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006412:	2bff      	cmp	r3, #255	; 0xff
 8006414:	d1cc      	bne.n	80063b0 <d_print_array_type.isra.14+0x50>
 8006416:	2200      	movs	r2, #0
 8006418:	4619      	mov	r1, r3
 800641a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800641e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006422:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006426:	4620      	mov	r0, r4
 8006428:	4798      	blx	r3
 800642a:	235b      	movs	r3, #91	; 0x5b
 800642c:	7023      	strb	r3, [r4, #0]
 800642e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006432:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006436:	f8d8 2000 	ldr.w	r2, [r8]
 800643a:	3301      	adds	r3, #1
 800643c:	2101      	movs	r1, #1
 800643e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006442:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006446:	b132      	cbz	r2, 8006456 <d_print_array_type.isra.14+0xf6>
 8006448:	4639      	mov	r1, r7
 800644a:	4620      	mov	r0, r4
 800644c:	f7fc fb9a 	bl	8002b84 <d_print_comp>
 8006450:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006454:	e7b7      	b.n	80063c6 <d_print_array_type.isra.14+0x66>
 8006456:	1c4a      	adds	r2, r1, #1
 8006458:	e7c7      	b.n	80063ea <d_print_array_type.isra.14+0x8a>
 800645a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8006510 <d_print_array_type.isra.14+0x1b0>
 800645e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006462:	f109 0a02 	add.w	sl, r9, #2
 8006466:	e016      	b.n	8006496 <d_print_array_type.isra.14+0x136>
 8006468:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800646c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006470:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006474:	4798      	blx	r3
 8006476:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800647a:	2200      	movs	r2, #0
 800647c:	3301      	adds	r3, #1
 800647e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006482:	45ca      	cmp	sl, r9
 8006484:	f04f 0301 	mov.w	r3, #1
 8006488:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800648c:	f804 b002 	strb.w	fp, [r4, r2]
 8006490:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8006494:	d010      	beq.n	80064b8 <d_print_array_type.isra.14+0x158>
 8006496:	2bff      	cmp	r3, #255	; 0xff
 8006498:	4619      	mov	r1, r3
 800649a:	4620      	mov	r0, r4
 800649c:	f819 bb01 	ldrb.w	fp, [r9], #1
 80064a0:	d0e2      	beq.n	8006468 <d_print_array_type.isra.14+0x108>
 80064a2:	461a      	mov	r2, r3
 80064a4:	45ca      	cmp	sl, r9
 80064a6:	f103 0301 	add.w	r3, r3, #1
 80064aa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80064ae:	f804 b002 	strb.w	fp, [r4, r2]
 80064b2:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80064b6:	d1ee      	bne.n	8006496 <d_print_array_type.isra.14+0x136>
 80064b8:	2300      	movs	r3, #0
 80064ba:	4632      	mov	r2, r6
 80064bc:	4639      	mov	r1, r7
 80064be:	4620      	mov	r0, r4
 80064c0:	f7ff fe16 	bl	80060f0 <d_print_mod_list>
 80064c4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80064c8:	2bff      	cmp	r3, #255	; 0xff
 80064ca:	d119      	bne.n	8006500 <d_print_array_type.isra.14+0x1a0>
 80064cc:	2200      	movs	r2, #0
 80064ce:	4619      	mov	r1, r3
 80064d0:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 80064d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80064d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80064dc:	4620      	mov	r0, r4
 80064de:	4798      	blx	r3
 80064e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80064e4:	2229      	movs	r2, #41	; 0x29
 80064e6:	3301      	adds	r3, #1
 80064e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80064ec:	7022      	strb	r2, [r4, #0]
 80064ee:	2101      	movs	r1, #1
 80064f0:	2220      	movs	r2, #32
 80064f2:	1c4b      	adds	r3, r1, #1
 80064f4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80064f8:	5462      	strb	r2, [r4, r1]
 80064fa:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80064fe:	e788      	b.n	8006412 <d_print_array_type.isra.14+0xb2>
 8006500:	2229      	movs	r2, #41	; 0x29
 8006502:	1c59      	adds	r1, r3, #1
 8006504:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006508:	54e2      	strb	r2, [r4, r3]
 800650a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800650e:	e73b      	b.n	8006388 <d_print_array_type.isra.14+0x28>
 8006510:	08017ed0 	.word	0x08017ed0

08006514 <d_print_expr_op>:
 8006514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006518:	7815      	ldrb	r5, [r2, #0]
 800651a:	2d31      	cmp	r5, #49	; 0x31
 800651c:	d003      	beq.n	8006526 <d_print_expr_op+0x12>
 800651e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006522:	f7fc bb2f 	b.w	8002b84 <d_print_comp>
 8006526:	6893      	ldr	r3, [r2, #8]
 8006528:	e9d3 5601 	ldrd	r5, r6, [r3, #4]
 800652c:	b37e      	cbz	r6, 800658e <d_print_expr_op+0x7a>
 800652e:	442e      	add	r6, r5
 8006530:	4604      	mov	r4, r0
 8006532:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006536:	3e01      	subs	r6, #1
 8006538:	3d01      	subs	r5, #1
 800653a:	2700      	movs	r7, #0
 800653c:	e016      	b.n	800656c <d_print_expr_op+0x58>
 800653e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006542:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006546:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800654a:	4798      	blx	r3
 800654c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006550:	2200      	movs	r2, #0
 8006552:	3301      	adds	r3, #1
 8006554:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006558:	42b5      	cmp	r5, r6
 800655a:	f04f 0301 	mov.w	r3, #1
 800655e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006562:	f804 8002 	strb.w	r8, [r4, r2]
 8006566:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800656a:	d010      	beq.n	800658e <d_print_expr_op+0x7a>
 800656c:	2bff      	cmp	r3, #255	; 0xff
 800656e:	4619      	mov	r1, r3
 8006570:	4620      	mov	r0, r4
 8006572:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8006576:	d0e2      	beq.n	800653e <d_print_expr_op+0x2a>
 8006578:	461a      	mov	r2, r3
 800657a:	42b5      	cmp	r5, r6
 800657c:	f103 0301 	add.w	r3, r3, #1
 8006580:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006584:	f804 8002 	strb.w	r8, [r4, r2]
 8006588:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800658c:	d1ee      	bne.n	800656c <d_print_expr_op+0x58>
 800658e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006592:	bf00      	nop

08006594 <d_print_subexpr>:
 8006594:	7813      	ldrb	r3, [r2, #0]
 8006596:	2b01      	cmp	r3, #1
 8006598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800659c:	4604      	mov	r4, r0
 800659e:	d941      	bls.n	8006624 <d_print_subexpr+0x90>
 80065a0:	2b30      	cmp	r3, #48	; 0x30
 80065a2:	d03f      	beq.n	8006624 <d_print_subexpr+0x90>
 80065a4:	2b06      	cmp	r3, #6
 80065a6:	d03d      	beq.n	8006624 <d_print_subexpr+0x90>
 80065a8:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 80065ac:	2fff      	cmp	r7, #255	; 0xff
 80065ae:	460e      	mov	r6, r1
 80065b0:	4615      	mov	r5, r2
 80065b2:	d13e      	bne.n	8006632 <d_print_subexpr+0x9e>
 80065b4:	f04f 0800 	mov.w	r8, #0
 80065b8:	4639      	mov	r1, r7
 80065ba:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80065be:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80065c2:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 80065c6:	4798      	blx	r3
 80065c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80065cc:	3301      	adds	r3, #1
 80065ce:	4647      	mov	r7, r8
 80065d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80065d4:	2201      	movs	r2, #1
 80065d6:	2328      	movs	r3, #40	; 0x28
 80065d8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80065dc:	4631      	mov	r1, r6
 80065de:	55e3      	strb	r3, [r4, r7]
 80065e0:	462a      	mov	r2, r5
 80065e2:	4620      	mov	r0, r4
 80065e4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80065e8:	f7fc facc 	bl	8002b84 <d_print_comp>
 80065ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80065f0:	29ff      	cmp	r1, #255	; 0xff
 80065f2:	d11c      	bne.n	800662e <d_print_subexpr+0x9a>
 80065f4:	2500      	movs	r5, #0
 80065f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80065fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80065fe:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006602:	4620      	mov	r0, r4
 8006604:	4798      	blx	r3
 8006606:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800660a:	3301      	adds	r3, #1
 800660c:	4629      	mov	r1, r5
 800660e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006612:	2201      	movs	r2, #1
 8006614:	2329      	movs	r3, #41	; 0x29
 8006616:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800661a:	5463      	strb	r3, [r4, r1]
 800661c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006624:	4620      	mov	r0, r4
 8006626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800662a:	f7fc baab 	b.w	8002b84 <d_print_comp>
 800662e:	1c4a      	adds	r2, r1, #1
 8006630:	e7f0      	b.n	8006614 <d_print_subexpr+0x80>
 8006632:	1c7a      	adds	r2, r7, #1
 8006634:	e7cf      	b.n	80065d6 <d_print_subexpr+0x42>
 8006636:	bf00      	nop

08006638 <d_maybe_print_fold_expression.isra.20>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	6892      	ldr	r2, [r2, #8]
 800663e:	6812      	ldr	r2, [r2, #0]
 8006640:	7816      	ldrb	r6, [r2, #0]
 8006642:	2e66      	cmp	r6, #102	; 0x66
 8006644:	b083      	sub	sp, #12
 8006646:	d003      	beq.n	8006650 <d_maybe_print_fold_expression.isra.20+0x18>
 8006648:	2000      	movs	r0, #0
 800664a:	b003      	add	sp, #12
 800664c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8006656:	f899 3000 	ldrb.w	r3, [r9]
 800665a:	2b3b      	cmp	r3, #59	; 0x3b
 800665c:	f000 8110 	beq.w	8006880 <d_maybe_print_fold_expression.isra.20+0x248>
 8006660:	2300      	movs	r3, #0
 8006662:	9301      	str	r3, [sp, #4]
 8006664:	f04f 33ff 	mov.w	r3, #4294967295
 8006668:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 800666c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8006670:	7853      	ldrb	r3, [r2, #1]
 8006672:	3b4c      	subs	r3, #76	; 0x4c
 8006674:	460d      	mov	r5, r1
 8006676:	4604      	mov	r4, r0
 8006678:	2b26      	cmp	r3, #38	; 0x26
 800667a:	d83a      	bhi.n	80066f2 <d_maybe_print_fold_expression.isra.20+0xba>
 800667c:	e8df f003 	tbb	[pc, r3]
 8006680:	393939b0 	.word	0x393939b0
 8006684:	39b03939 	.word	0x39b03939
 8006688:	39393939 	.word	0x39393939
 800668c:	39393939 	.word	0x39393939
 8006690:	39393939 	.word	0x39393939
 8006694:	39393939 	.word	0x39393939
 8006698:	39393939 	.word	0x39393939
 800669c:	39393939 	.word	0x39393939
 80066a0:	39393989 	.word	0x39393989
 80066a4:	3939      	.short	0x3939
 80066a6:	3f          	.byte	0x3f
 80066a7:	00          	.byte	0x00
 80066a8:	4642      	mov	r2, r8
 80066aa:	4629      	mov	r1, r5
 80066ac:	4620      	mov	r0, r4
 80066ae:	f7ff ff31 	bl	8006514 <d_print_expr_op>
 80066b2:	9a01      	ldr	r2, [sp, #4]
 80066b4:	4629      	mov	r1, r5
 80066b6:	4620      	mov	r0, r4
 80066b8:	f7ff ff6c 	bl	8006594 <d_print_subexpr>
 80066bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80066c0:	29ff      	cmp	r1, #255	; 0xff
 80066c2:	f040 80ea 	bne.w	800689a <d_maybe_print_fold_expression.isra.20+0x262>
 80066c6:	2500      	movs	r5, #0
 80066c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80066cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80066d0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80066d4:	4620      	mov	r0, r4
 80066d6:	4798      	blx	r3
 80066d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80066dc:	3301      	adds	r3, #1
 80066de:	4629      	mov	r1, r5
 80066e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80066e4:	2201      	movs	r2, #1
 80066e6:	2329      	movs	r3, #41	; 0x29
 80066e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80066ec:	5463      	strb	r3, [r4, r1]
 80066ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80066f2:	2001      	movs	r0, #1
 80066f4:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 80066f8:	b003      	add	sp, #12
 80066fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006702:	29ff      	cmp	r1, #255	; 0xff
 8006704:	f040 80cb 	bne.w	800689e <d_maybe_print_fold_expression.isra.20+0x266>
 8006708:	2600      	movs	r6, #0
 800670a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800670e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006712:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006716:	4798      	blx	r3
 8006718:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800671c:	3301      	adds	r3, #1
 800671e:	4631      	mov	r1, r6
 8006720:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006724:	2201      	movs	r2, #1
 8006726:	2328      	movs	r3, #40	; 0x28
 8006728:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800672c:	4620      	mov	r0, r4
 800672e:	5463      	strb	r3, [r4, r1]
 8006730:	464a      	mov	r2, r9
 8006732:	4629      	mov	r1, r5
 8006734:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006738:	f7ff ff2c 	bl	8006594 <d_print_subexpr>
 800673c:	4629      	mov	r1, r5
 800673e:	4d59      	ldr	r5, [pc, #356]	; (80068a4 <d_maybe_print_fold_expression.isra.20+0x26c>)
 8006740:	4642      	mov	r2, r8
 8006742:	4620      	mov	r0, r4
 8006744:	f7ff fee6 	bl	8006514 <d_print_expr_op>
 8006748:	1d2e      	adds	r6, r5, #4
 800674a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800674e:	f04f 0800 	mov.w	r8, #0
 8006752:	e015      	b.n	8006780 <d_maybe_print_fold_expression.isra.20+0x148>
 8006754:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006758:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800675c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006760:	4798      	blx	r3
 8006762:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006766:	3301      	adds	r3, #1
 8006768:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800676c:	2200      	movs	r2, #0
 800676e:	2301      	movs	r3, #1
 8006770:	42ae      	cmp	r6, r5
 8006772:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006776:	f804 9002 	strb.w	r9, [r4, r2]
 800677a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800677e:	d0b8      	beq.n	80066f2 <d_maybe_print_fold_expression.isra.20+0xba>
 8006780:	2bff      	cmp	r3, #255	; 0xff
 8006782:	4619      	mov	r1, r3
 8006784:	4620      	mov	r0, r4
 8006786:	f815 9b01 	ldrb.w	r9, [r5], #1
 800678a:	d0e3      	beq.n	8006754 <d_maybe_print_fold_expression.isra.20+0x11c>
 800678c:	461a      	mov	r2, r3
 800678e:	3301      	adds	r3, #1
 8006790:	e7ee      	b.n	8006770 <d_maybe_print_fold_expression.isra.20+0x138>
 8006792:	4e45      	ldr	r6, [pc, #276]	; (80068a8 <d_maybe_print_fold_expression.isra.20+0x270>)
 8006794:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006798:	f106 0a04 	add.w	sl, r6, #4
 800679c:	e017      	b.n	80067ce <d_maybe_print_fold_expression.isra.20+0x196>
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80067a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80067aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80067ae:	4798      	blx	r3
 80067b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80067b4:	3301      	adds	r3, #1
 80067b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80067ba:	2200      	movs	r2, #0
 80067bc:	2301      	movs	r3, #1
 80067be:	45b2      	cmp	sl, r6
 80067c0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80067c4:	f804 b002 	strb.w	fp, [r4, r2]
 80067c8:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80067cc:	d05e      	beq.n	800688c <d_maybe_print_fold_expression.isra.20+0x254>
 80067ce:	2bff      	cmp	r3, #255	; 0xff
 80067d0:	4619      	mov	r1, r3
 80067d2:	4620      	mov	r0, r4
 80067d4:	f816 bb01 	ldrb.w	fp, [r6], #1
 80067d8:	d0e1      	beq.n	800679e <d_maybe_print_fold_expression.isra.20+0x166>
 80067da:	461a      	mov	r2, r3
 80067dc:	3301      	adds	r3, #1
 80067de:	e7ee      	b.n	80067be <d_maybe_print_fold_expression.isra.20+0x186>
 80067e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80067e4:	2bff      	cmp	r3, #255	; 0xff
 80067e6:	d110      	bne.n	800680a <d_maybe_print_fold_expression.isra.20+0x1d2>
 80067e8:	2600      	movs	r6, #0
 80067ea:	4619      	mov	r1, r3
 80067ec:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80067f0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80067f4:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80067f8:	4798      	blx	r3
 80067fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80067fe:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006808:	4633      	mov	r3, r6
 800680a:	1c59      	adds	r1, r3, #1
 800680c:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8006810:	464a      	mov	r2, r9
 8006812:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006816:	4620      	mov	r0, r4
 8006818:	f804 c003 	strb.w	ip, [r4, r3]
 800681c:	4629      	mov	r1, r5
 800681e:	f884 c104 	strb.w	ip, [r4, #260]	; 0x104
 8006822:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80068ac <d_maybe_print_fold_expression.isra.20+0x274>
 8006826:	f7ff feb5 	bl	8006594 <d_print_subexpr>
 800682a:	4642      	mov	r2, r8
 800682c:	4629      	mov	r1, r5
 800682e:	4620      	mov	r0, r4
 8006830:	f7ff fe70 	bl	8006514 <d_print_expr_op>
 8006834:	f109 0a03 	add.w	sl, r9, #3
 8006838:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800683c:	2600      	movs	r6, #0
 800683e:	e016      	b.n	800686e <d_maybe_print_fold_expression.isra.20+0x236>
 8006840:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006844:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006848:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800684c:	4798      	blx	r3
 800684e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006852:	3301      	adds	r3, #1
 8006854:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006858:	2200      	movs	r2, #0
 800685a:	2301      	movs	r3, #1
 800685c:	45d1      	cmp	r9, sl
 800685e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006862:	f804 b002 	strb.w	fp, [r4, r2]
 8006866:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 800686a:	f43f af1d 	beq.w	80066a8 <d_maybe_print_fold_expression.isra.20+0x70>
 800686e:	2bff      	cmp	r3, #255	; 0xff
 8006870:	4619      	mov	r1, r3
 8006872:	4620      	mov	r0, r4
 8006874:	f819 bb01 	ldrb.w	fp, [r9], #1
 8006878:	d0e2      	beq.n	8006840 <d_maybe_print_fold_expression.isra.20+0x208>
 800687a:	461a      	mov	r2, r3
 800687c:	3301      	adds	r3, #1
 800687e:	e7ed      	b.n	800685c <d_maybe_print_fold_expression.isra.20+0x224>
 8006880:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	f8d9 9008 	ldr.w	r9, [r9, #8]
 800688a:	e6eb      	b.n	8006664 <d_maybe_print_fold_expression.isra.20+0x2c>
 800688c:	4642      	mov	r2, r8
 800688e:	4629      	mov	r1, r5
 8006890:	4620      	mov	r0, r4
 8006892:	f7ff fe3f 	bl	8006514 <d_print_expr_op>
 8006896:	464a      	mov	r2, r9
 8006898:	e70c      	b.n	80066b4 <d_maybe_print_fold_expression.isra.20+0x7c>
 800689a:	1c4a      	adds	r2, r1, #1
 800689c:	e723      	b.n	80066e6 <d_maybe_print_fold_expression.isra.20+0xae>
 800689e:	1c4a      	adds	r2, r1, #1
 80068a0:	e741      	b.n	8006726 <d_maybe_print_fold_expression.isra.20+0xee>
 80068a2:	bf00      	nop
 80068a4:	08017fd0 	.word	0x08017fd0
 80068a8:	08017fc8 	.word	0x08017fc8
 80068ac:	08017ed4 	.word	0x08017ed4

080068b0 <d_demangle_callback.constprop.22>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	b0e5      	sub	sp, #404	; 0x194
 80068b6:	f890 a000 	ldrb.w	sl, [r0]
 80068ba:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 80068be:	af00      	add	r7, sp, #0
 80068c0:	4605      	mov	r5, r0
 80068c2:	4688      	mov	r8, r1
 80068c4:	4616      	mov	r6, r2
 80068c6:	f000 80f3 	beq.w	8006ab0 <d_demangle_callback.constprop.22+0x200>
 80068ca:	2208      	movs	r2, #8
 80068cc:	49bb      	ldr	r1, [pc, #748]	; (8006bbc <d_demangle_callback.constprop.22+0x30c>)
 80068ce:	4628      	mov	r0, r5
 80068d0:	f00c fdf7 	bl	80134c2 <strncmp>
 80068d4:	b948      	cbnz	r0, 80068ea <d_demangle_callback.constprop.22+0x3a>
 80068d6:	7a2b      	ldrb	r3, [r5, #8]
 80068d8:	2b2e      	cmp	r3, #46	; 0x2e
 80068da:	f000 80d8 	beq.w	8006a8e <d_demangle_callback.constprop.22+0x1de>
 80068de:	2b5f      	cmp	r3, #95	; 0x5f
 80068e0:	f000 80d5 	beq.w	8006a8e <d_demangle_callback.constprop.22+0x1de>
 80068e4:	2b24      	cmp	r3, #36	; 0x24
 80068e6:	f000 80d2 	beq.w	8006a8e <d_demangle_callback.constprop.22+0x1de>
 80068ea:	f04f 0900 	mov.w	r9, #0
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 fa38 	bl	8006d64 <strlen>
 80068f4:	0142      	lsls	r2, r0, #5
 80068f6:	0083      	lsls	r3, r0, #2
 80068f8:	3208      	adds	r2, #8
 80068fa:	330a      	adds	r3, #10
 80068fc:	ebad 0d02 	sub.w	sp, sp, r2
 8006900:	f023 0307 	bic.w	r3, r3, #7
 8006904:	2400      	movs	r4, #0
 8006906:	46eb      	mov	fp, sp
 8006908:	1829      	adds	r1, r5, r0
 800690a:	ebad 0d03 	sub.w	sp, sp, r3
 800690e:	2211      	movs	r2, #17
 8006910:	0043      	lsls	r3, r0, #1
 8006912:	f1b9 0f01 	cmp.w	r9, #1
 8006916:	f8c7 b01c 	str.w	fp, [r7, #28]
 800691a:	f8c7 d028 	str.w	sp, [r7, #40]	; 0x28
 800691e:	60fd      	str	r5, [r7, #12]
 8006920:	61bd      	str	r5, [r7, #24]
 8006922:	6338      	str	r0, [r7, #48]	; 0x30
 8006924:	6139      	str	r1, [r7, #16]
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
 8006928:	617a      	str	r2, [r7, #20]
 800692a:	623c      	str	r4, [r7, #32]
 800692c:	62fc      	str	r4, [r7, #44]	; 0x2c
 800692e:	e9c7 440d 	strd	r4, r4, [r7, #52]	; 0x34
 8006932:	e9c7 440f 	strd	r4, r4, [r7, #60]	; 0x3c
 8006936:	647c      	str	r4, [r7, #68]	; 0x44
 8006938:	f000 80a0 	beq.w	8006a7c <d_demangle_callback.constprop.22+0x1cc>
 800693c:	f0c0 80bf 	bcc.w	8006abe <d_demangle_callback.constprop.22+0x20e>
 8006940:	7aea      	ldrb	r2, [r5, #11]
 8006942:	f1b9 0f02 	cmp.w	r9, #2
 8006946:	f105 0a0b 	add.w	sl, r5, #11
 800694a:	bf14      	ite	ne
 800694c:	f04f 0944 	movne.w	r9, #68	; 0x44
 8006950:	f04f 0943 	moveq.w	r9, #67	; 0x43
 8006954:	2a5f      	cmp	r2, #95	; 0x5f
 8006956:	f8c7 a018 	str.w	sl, [r7, #24]
 800695a:	f000 80b9 	beq.w	8006ad0 <d_demangle_callback.constprop.22+0x220>
 800695e:	4650      	mov	r0, sl
 8006960:	607b      	str	r3, [r7, #4]
 8006962:	f000 f9ff 	bl	8006d64 <strlen>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	f340 8123 	ble.w	8006bb4 <d_demangle_callback.constprop.22+0x304>
 800696e:	2300      	movs	r3, #0
 8006970:	2201      	movs	r2, #1
 8006972:	f8cb 3004 	str.w	r3, [fp, #4]
 8006976:	623a      	str	r2, [r7, #32]
 8006978:	2800      	cmp	r0, #0
 800697a:	f000 811b 	beq.w	8006bb4 <d_demangle_callback.constprop.22+0x304>
 800697e:	e9cb a002 	strd	sl, r0, [fp, #8]
 8006982:	f88b 3000 	strb.w	r3, [fp]
 8006986:	4649      	mov	r1, r9
 8006988:	2300      	movs	r3, #0
 800698a:	465a      	mov	r2, fp
 800698c:	f107 000c 	add.w	r0, r7, #12
 8006990:	f7f9 fc1e 	bl	80001d0 <d_make_comp>
 8006994:	69bc      	ldr	r4, [r7, #24]
 8006996:	4605      	mov	r5, r0
 8006998:	4620      	mov	r0, r4
 800699a:	f000 f9e3 	bl	8006d64 <strlen>
 800699e:	1823      	adds	r3, r4, r0
 80069a0:	61bb      	str	r3, [r7, #24]
 80069a2:	f814 9000 	ldrb.w	r9, [r4, r0]
 80069a6:	f1b9 0f00 	cmp.w	r9, #0
 80069aa:	d16a      	bne.n	8006a82 <d_demangle_callback.constprop.22+0x1d2>
 80069ac:	2d00      	cmp	r5, #0
 80069ae:	d068      	beq.n	8006a82 <d_demangle_callback.constprop.22+0x1d2>
 80069b0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80069b4:	462a      	mov	r2, r5
 80069b6:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80069ba:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 80069be:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 80069c2:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 80069c6:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80069ca:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80069ce:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 80069d2:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80069d6:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 80069da:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 80069de:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 80069e2:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 80069e6:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 80069ea:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 80069ee:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 80069f2:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 80069f6:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 80069fa:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 80069fe:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 8006a02:	f7f9 fc49 	bl	8000298 <d_count_templates_scopes>
 8006a06:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8006a0a:	f8d4 6140 	ldr.w	r6, [r4, #320]	; 0x140
 8006a0e:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	fb06 f603 	mul.w	r6, r6, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	bfb8      	it	lt
 8006a1c:	2201      	movlt	r2, #1
 8006a1e:	00d2      	lsls	r2, r2, #3
 8006a20:	2e01      	cmp	r6, #1
 8006a22:	4633      	mov	r3, r6
 8006a24:	f102 0208 	add.w	r2, r2, #8
 8006a28:	bfb8      	it	lt
 8006a2a:	2301      	movlt	r3, #1
 8006a2c:	46e8      	mov	r8, sp
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	ebad 0d02 	sub.w	sp, sp, r2
 8006a34:	3308      	adds	r3, #8
 8006a36:	4669      	mov	r1, sp
 8006a38:	462a      	mov	r2, r5
 8006a3a:	ebad 0d03 	sub.w	sp, sp, r3
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8006a44:	2111      	movs	r1, #17
 8006a46:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
 8006a4a:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 8006a4e:	f7fc f899 	bl	8002b84 <d_print_comp>
 8006a52:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006a56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006a5a:	f804 9001 	strb.w	r9, [r4, r1]
 8006a5e:	4620      	mov	r0, r4
 8006a60:	46c5      	mov	sp, r8
 8006a62:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006a66:	4798      	blx	r3
 8006a68:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 8006a6c:	fab0 f080 	clz	r0, r0
 8006a70:	0940      	lsrs	r0, r0, #5
 8006a72:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006a76:	46bd      	mov	sp, r7
 8006a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7c:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 8006a80:	d033      	beq.n	8006aea <d_demangle_callback.constprop.22+0x23a>
 8006a82:	2000      	movs	r0, #0
 8006a84:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8e:	7a6b      	ldrb	r3, [r5, #9]
 8006a90:	2b44      	cmp	r3, #68	; 0x44
 8006a92:	d002      	beq.n	8006a9a <d_demangle_callback.constprop.22+0x1ea>
 8006a94:	2b49      	cmp	r3, #73	; 0x49
 8006a96:	f47f af28 	bne.w	80068ea <d_demangle_callback.constprop.22+0x3a>
 8006a9a:	7aaa      	ldrb	r2, [r5, #10]
 8006a9c:	2a5f      	cmp	r2, #95	; 0x5f
 8006a9e:	f47f af24 	bne.w	80068ea <d_demangle_callback.constprop.22+0x3a>
 8006aa2:	2b49      	cmp	r3, #73	; 0x49
 8006aa4:	bf14      	ite	ne
 8006aa6:	f04f 0903 	movne.w	r9, #3
 8006aaa:	f04f 0902 	moveq.w	r9, #2
 8006aae:	e71e      	b.n	80068ee <d_demangle_callback.constprop.22+0x3e>
 8006ab0:	7843      	ldrb	r3, [r0, #1]
 8006ab2:	2b5a      	cmp	r3, #90	; 0x5a
 8006ab4:	f47f af09 	bne.w	80068ca <d_demangle_callback.constprop.22+0x1a>
 8006ab8:	f04f 0901 	mov.w	r9, #1
 8006abc:	e717      	b.n	80068ee <d_demangle_callback.constprop.22+0x3e>
 8006abe:	f107 000c 	add.w	r0, r7, #12
 8006ac2:	f7fa fe05 	bl	80016d0 <d_type>
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	4605      	mov	r5, r0
 8006aca:	f893 9000 	ldrb.w	r9, [r3]
 8006ace:	e76a      	b.n	80069a6 <d_demangle_callback.constprop.22+0xf6>
 8006ad0:	7b2a      	ldrb	r2, [r5, #12]
 8006ad2:	2a5a      	cmp	r2, #90	; 0x5a
 8006ad4:	f47f af43 	bne.w	800695e <d_demangle_callback.constprop.22+0xae>
 8006ad8:	350d      	adds	r5, #13
 8006ada:	4621      	mov	r1, r4
 8006adc:	f107 000c 	add.w	r0, r7, #12
 8006ae0:	61bd      	str	r5, [r7, #24]
 8006ae2:	f7fb fd37 	bl	8002554 <d_encoding>
 8006ae6:	4683      	mov	fp, r0
 8006ae8:	e74d      	b.n	8006986 <d_demangle_callback.constprop.22+0xd6>
 8006aea:	786b      	ldrb	r3, [r5, #1]
 8006aec:	2b5a      	cmp	r3, #90	; 0x5a
 8006aee:	d1c8      	bne.n	8006a82 <d_demangle_callback.constprop.22+0x1d2>
 8006af0:	3502      	adds	r5, #2
 8006af2:	4649      	mov	r1, r9
 8006af4:	f107 000c 	add.w	r0, r7, #12
 8006af8:	61bd      	str	r5, [r7, #24]
 8006afa:	f7fb fd2b 	bl	8002554 <d_encoding>
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	07db      	lsls	r3, r3, #31
 8006b02:	4605      	mov	r5, r0
 8006b04:	d552      	bpl.n	8006bac <d_demangle_callback.constprop.22+0x2fc>
 8006b06:	69b8      	ldr	r0, [r7, #24]
 8006b08:	f890 9000 	ldrb.w	r9, [r0]
 8006b0c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8006b10:	f47f af49 	bne.w	80069a6 <d_demangle_callback.constprop.22+0xf6>
 8006b14:	7843      	ldrb	r3, [r0, #1]
 8006b16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b1a:	2a19      	cmp	r2, #25
 8006b1c:	d93a      	bls.n	8006b94 <d_demangle_callback.constprop.22+0x2e4>
 8006b1e:	2b5f      	cmp	r3, #95	; 0x5f
 8006b20:	d038      	beq.n	8006b94 <d_demangle_callback.constprop.22+0x2e4>
 8006b22:	3b30      	subs	r3, #48	; 0x30
 8006b24:	2b09      	cmp	r3, #9
 8006b26:	d841      	bhi.n	8006bac <d_demangle_callback.constprop.22+0x2fc>
 8006b28:	7803      	ldrb	r3, [r0, #0]
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b2e:	d112      	bne.n	8006b56 <d_demangle_callback.constprop.22+0x2a6>
 8006b30:	7853      	ldrb	r3, [r2, #1]
 8006b32:	3b30      	subs	r3, #48	; 0x30
 8006b34:	2b09      	cmp	r3, #9
 8006b36:	d80e      	bhi.n	8006b56 <d_demangle_callback.constprop.22+0x2a6>
 8006b38:	7893      	ldrb	r3, [r2, #2]
 8006b3a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b3e:	2909      	cmp	r1, #9
 8006b40:	f102 0202 	add.w	r2, r2, #2
 8006b44:	d8f2      	bhi.n	8006b2c <d_demangle_callback.constprop.22+0x27c>
 8006b46:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006b4a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b4e:	2909      	cmp	r1, #9
 8006b50:	d9f9      	bls.n	8006b46 <d_demangle_callback.constprop.22+0x296>
 8006b52:	2b2e      	cmp	r3, #46	; 0x2e
 8006b54:	d0ec      	beq.n	8006b30 <d_demangle_callback.constprop.22+0x280>
 8006b56:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
 8006b5a:	4299      	cmp	r1, r3
 8006b5c:	61ba      	str	r2, [r7, #24]
 8006b5e:	da17      	bge.n	8006b90 <d_demangle_callback.constprop.22+0x2e0>
 8006b60:	f8d7 e01c 	ldr.w	lr, [r7, #28]
 8006b64:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8006b68:	eb0e 030c 	add.w	r3, lr, ip
 8006b6c:	3101      	adds	r1, #1
 8006b6e:	1a12      	subs	r2, r2, r0
 8006b70:	605c      	str	r4, [r3, #4]
 8006b72:	6239      	str	r1, [r7, #32]
 8006b74:	d00c      	beq.n	8006b90 <d_demangle_callback.constprop.22+0x2e0>
 8006b76:	605c      	str	r4, [r3, #4]
 8006b78:	f80e 400c 	strb.w	r4, [lr, ip]
 8006b7c:	e9c3 0202 	strd	r0, r2, [r3, #8]
 8006b80:	462a      	mov	r2, r5
 8006b82:	214d      	movs	r1, #77	; 0x4d
 8006b84:	f107 000c 	add.w	r0, r7, #12
 8006b88:	f7f9 fb22 	bl	80001d0 <d_make_comp>
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	e7ba      	b.n	8006b06 <d_demangle_callback.constprop.22+0x256>
 8006b90:	2300      	movs	r3, #0
 8006b92:	e7f5      	b.n	8006b80 <d_demangle_callback.constprop.22+0x2d0>
 8006b94:	1c81      	adds	r1, r0, #2
 8006b96:	460a      	mov	r2, r1
 8006b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b9c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8006ba0:	f1bc 0f19 	cmp.w	ip, #25
 8006ba4:	d9f7      	bls.n	8006b96 <d_demangle_callback.constprop.22+0x2e6>
 8006ba6:	2b5f      	cmp	r3, #95	; 0x5f
 8006ba8:	d0f5      	beq.n	8006b96 <d_demangle_callback.constprop.22+0x2e6>
 8006baa:	e7bf      	b.n	8006b2c <d_demangle_callback.constprop.22+0x27c>
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	f893 9000 	ldrb.w	r9, [r3]
 8006bb2:	e6f8      	b.n	80069a6 <d_demangle_callback.constprop.22+0xf6>
 8006bb4:	f04f 0b00 	mov.w	fp, #0
 8006bb8:	e6e5      	b.n	8006986 <d_demangle_callback.constprop.22+0xd6>
 8006bba:	bf00      	nop
 8006bbc:	08017c60 	.word	0x08017c60

08006bc0 <__cxa_demangle>:
 8006bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	b380      	cbz	r0, 8006c2a <__cxa_demangle+0x6a>
 8006bc8:	b101      	cbz	r1, 8006bcc <__cxa_demangle+0xc>
 8006bca:	b372      	cbz	r2, 8006c2a <__cxa_demangle+0x6a>
 8006bcc:	2400      	movs	r4, #0
 8006bce:	4617      	mov	r7, r2
 8006bd0:	460e      	mov	r6, r1
 8006bd2:	466a      	mov	r2, sp
 8006bd4:	492b      	ldr	r1, [pc, #172]	; (8006c84 <__cxa_demangle+0xc4>)
 8006bd6:	461d      	mov	r5, r3
 8006bd8:	e9cd 4400 	strd	r4, r4, [sp]
 8006bdc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006be0:	f7ff fe66 	bl	80068b0 <d_demangle_callback.constprop.22>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d047      	beq.n	8006c78 <__cxa_demangle+0xb8>
 8006be8:	9b03      	ldr	r3, [sp, #12]
 8006bea:	9c00      	ldr	r4, [sp, #0]
 8006bec:	b9ab      	cbnz	r3, 8006c1a <__cxa_demangle+0x5a>
 8006bee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006bf2:	b36c      	cbz	r4, 8006c50 <__cxa_demangle+0x90>
 8006bf4:	b1b6      	cbz	r6, 8006c24 <__cxa_demangle+0x64>
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f000 f8b4 	bl	8006d64 <strlen>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	4298      	cmp	r0, r3
 8006c00:	d31c      	bcc.n	8006c3c <__cxa_demangle+0x7c>
 8006c02:	4630      	mov	r0, r6
 8006c04:	f00b ff02 	bl	8012a0c <free>
 8006c08:	f8c7 8000 	str.w	r8, [r7]
 8006c0c:	b195      	cbz	r5, 8006c34 <__cxa_demangle+0x74>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	4620      	mov	r0, r4
 8006c12:	602b      	str	r3, [r5, #0]
 8006c14:	b004      	add	sp, #16
 8006c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c1a:	b334      	cbz	r4, 8006c6a <__cxa_demangle+0xaa>
 8006c1c:	f04f 0801 	mov.w	r8, #1
 8006c20:	2e00      	cmp	r6, #0
 8006c22:	d1e8      	bne.n	8006bf6 <__cxa_demangle+0x36>
 8006c24:	2f00      	cmp	r7, #0
 8006c26:	d1ef      	bne.n	8006c08 <__cxa_demangle+0x48>
 8006c28:	e7f0      	b.n	8006c0c <__cxa_demangle+0x4c>
 8006c2a:	b113      	cbz	r3, 8006c32 <__cxa_demangle+0x72>
 8006c2c:	f06f 0202 	mvn.w	r2, #2
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	2400      	movs	r4, #0
 8006c34:	4620      	mov	r0, r4
 8006c36:	b004      	add	sp, #16
 8006c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c3c:	1c42      	adds	r2, r0, #1
 8006c3e:	4621      	mov	r1, r4
 8006c40:	4630      	mov	r0, r6
 8006c42:	f00c f930 	bl	8012ea6 <memcpy>
 8006c46:	4620      	mov	r0, r4
 8006c48:	f00b fee0 	bl	8012a0c <free>
 8006c4c:	4634      	mov	r4, r6
 8006c4e:	e7dd      	b.n	8006c0c <__cxa_demangle+0x4c>
 8006c50:	2d00      	cmp	r5, #0
 8006c52:	d0ee      	beq.n	8006c32 <__cxa_demangle+0x72>
 8006c54:	f1b8 0f01 	cmp.w	r8, #1
 8006c58:	d009      	beq.n	8006c6e <__cxa_demangle+0xae>
 8006c5a:	2400      	movs	r4, #0
 8006c5c:	f06f 0301 	mvn.w	r3, #1
 8006c60:	4620      	mov	r0, r4
 8006c62:	602b      	str	r3, [r5, #0]
 8006c64:	b004      	add	sp, #16
 8006c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c6a:	2d00      	cmp	r5, #0
 8006c6c:	d0e1      	beq.n	8006c32 <__cxa_demangle+0x72>
 8006c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c72:	602b      	str	r3, [r5, #0]
 8006c74:	2400      	movs	r4, #0
 8006c76:	e7dd      	b.n	8006c34 <__cxa_demangle+0x74>
 8006c78:	9800      	ldr	r0, [sp, #0]
 8006c7a:	f00b fec7 	bl	8012a0c <free>
 8006c7e:	2d00      	cmp	r5, #0
 8006c80:	d1eb      	bne.n	8006c5a <__cxa_demangle+0x9a>
 8006c82:	e7d6      	b.n	8006c32 <__cxa_demangle+0x72>
 8006c84:	08000849 	.word	0x08000849

08006c88 <__gcclibcxx_demangle_callback>:
 8006c88:	b160      	cbz	r0, 8006ca4 <__gcclibcxx_demangle_callback+0x1c>
 8006c8a:	b508      	push	{r3, lr}
 8006c8c:	b139      	cbz	r1, 8006c9e <__gcclibcxx_demangle_callback+0x16>
 8006c8e:	f7ff fe0f 	bl	80068b0 <d_demangle_callback.constprop.22>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	bf0c      	ite	eq
 8006c96:	f06f 0001 	mvneq.w	r0, #1
 8006c9a:	2000      	movne	r0, #0
 8006c9c:	bd08      	pop	{r3, pc}
 8006c9e:	f06f 0002 	mvn.w	r0, #2
 8006ca2:	bd08      	pop	{r3, pc}
 8006ca4:	f06f 0002 	mvn.w	r0, #2
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	0000      	movs	r0, r0
	...

08006cb0 <memchr>:
 8006cb0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006cb4:	2a10      	cmp	r2, #16
 8006cb6:	db2b      	blt.n	8006d10 <memchr+0x60>
 8006cb8:	f010 0f07 	tst.w	r0, #7
 8006cbc:	d008      	beq.n	8006cd0 <memchr+0x20>
 8006cbe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006cc2:	3a01      	subs	r2, #1
 8006cc4:	428b      	cmp	r3, r1
 8006cc6:	d02d      	beq.n	8006d24 <memchr+0x74>
 8006cc8:	f010 0f07 	tst.w	r0, #7
 8006ccc:	b342      	cbz	r2, 8006d20 <memchr+0x70>
 8006cce:	d1f6      	bne.n	8006cbe <memchr+0xe>
 8006cd0:	b4f0      	push	{r4, r5, r6, r7}
 8006cd2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006cd6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8006cda:	f022 0407 	bic.w	r4, r2, #7
 8006cde:	f07f 0700 	mvns.w	r7, #0
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006ce8:	3c08      	subs	r4, #8
 8006cea:	ea85 0501 	eor.w	r5, r5, r1
 8006cee:	ea86 0601 	eor.w	r6, r6, r1
 8006cf2:	fa85 f547 	uadd8	r5, r5, r7
 8006cf6:	faa3 f587 	sel	r5, r3, r7
 8006cfa:	fa86 f647 	uadd8	r6, r6, r7
 8006cfe:	faa5 f687 	sel	r6, r5, r7
 8006d02:	b98e      	cbnz	r6, 8006d28 <memchr+0x78>
 8006d04:	d1ee      	bne.n	8006ce4 <memchr+0x34>
 8006d06:	bcf0      	pop	{r4, r5, r6, r7}
 8006d08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006d0c:	f002 0207 	and.w	r2, r2, #7
 8006d10:	b132      	cbz	r2, 8006d20 <memchr+0x70>
 8006d12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d16:	3a01      	subs	r2, #1
 8006d18:	ea83 0301 	eor.w	r3, r3, r1
 8006d1c:	b113      	cbz	r3, 8006d24 <memchr+0x74>
 8006d1e:	d1f8      	bne.n	8006d12 <memchr+0x62>
 8006d20:	2000      	movs	r0, #0
 8006d22:	4770      	bx	lr
 8006d24:	3801      	subs	r0, #1
 8006d26:	4770      	bx	lr
 8006d28:	2d00      	cmp	r5, #0
 8006d2a:	bf06      	itte	eq
 8006d2c:	4635      	moveq	r5, r6
 8006d2e:	3803      	subeq	r0, #3
 8006d30:	3807      	subne	r0, #7
 8006d32:	f015 0f01 	tst.w	r5, #1
 8006d36:	d107      	bne.n	8006d48 <memchr+0x98>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006d3e:	bf02      	ittt	eq
 8006d40:	3001      	addeq	r0, #1
 8006d42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006d46:	3001      	addeq	r0, #1
 8006d48:	bcf0      	pop	{r4, r5, r6, r7}
 8006d4a:	3801      	subs	r0, #1
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop

08006d50 <strcmp>:
 8006d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d58:	2a01      	cmp	r2, #1
 8006d5a:	bf28      	it	cs
 8006d5c:	429a      	cmpcs	r2, r3
 8006d5e:	d0f7      	beq.n	8006d50 <strcmp>
 8006d60:	1ad0      	subs	r0, r2, r3
 8006d62:	4770      	bx	lr

08006d64 <strlen>:
 8006d64:	4603      	mov	r3, r0
 8006d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d6a:	2a00      	cmp	r2, #0
 8006d6c:	d1fb      	bne.n	8006d66 <strlen+0x2>
 8006d6e:	1a18      	subs	r0, r3, r0
 8006d70:	3801      	subs	r0, #1
 8006d72:	4770      	bx	lr

08006d74 <__aeabi_drsub>:
 8006d74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006d78:	e002      	b.n	8006d80 <__adddf3>
 8006d7a:	bf00      	nop

08006d7c <__aeabi_dsub>:
 8006d7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006d80 <__adddf3>:
 8006d80:	b530      	push	{r4, r5, lr}
 8006d82:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006d86:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006d8a:	ea94 0f05 	teq	r4, r5
 8006d8e:	bf08      	it	eq
 8006d90:	ea90 0f02 	teqeq	r0, r2
 8006d94:	bf1f      	itttt	ne
 8006d96:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006d9a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006d9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006da2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006da6:	f000 80e2 	beq.w	8006f6e <__adddf3+0x1ee>
 8006daa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006dae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006db2:	bfb8      	it	lt
 8006db4:	426d      	neglt	r5, r5
 8006db6:	dd0c      	ble.n	8006dd2 <__adddf3+0x52>
 8006db8:	442c      	add	r4, r5
 8006dba:	ea80 0202 	eor.w	r2, r0, r2
 8006dbe:	ea81 0303 	eor.w	r3, r1, r3
 8006dc2:	ea82 0000 	eor.w	r0, r2, r0
 8006dc6:	ea83 0101 	eor.w	r1, r3, r1
 8006dca:	ea80 0202 	eor.w	r2, r0, r2
 8006dce:	ea81 0303 	eor.w	r3, r1, r3
 8006dd2:	2d36      	cmp	r5, #54	; 0x36
 8006dd4:	bf88      	it	hi
 8006dd6:	bd30      	pophi	{r4, r5, pc}
 8006dd8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006ddc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006de0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006de4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006de8:	d002      	beq.n	8006df0 <__adddf3+0x70>
 8006dea:	4240      	negs	r0, r0
 8006dec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006df0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006df4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006df8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006dfc:	d002      	beq.n	8006e04 <__adddf3+0x84>
 8006dfe:	4252      	negs	r2, r2
 8006e00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006e04:	ea94 0f05 	teq	r4, r5
 8006e08:	f000 80a7 	beq.w	8006f5a <__adddf3+0x1da>
 8006e0c:	f1a4 0401 	sub.w	r4, r4, #1
 8006e10:	f1d5 0e20 	rsbs	lr, r5, #32
 8006e14:	db0d      	blt.n	8006e32 <__adddf3+0xb2>
 8006e16:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006e1a:	fa22 f205 	lsr.w	r2, r2, r5
 8006e1e:	1880      	adds	r0, r0, r2
 8006e20:	f141 0100 	adc.w	r1, r1, #0
 8006e24:	fa03 f20e 	lsl.w	r2, r3, lr
 8006e28:	1880      	adds	r0, r0, r2
 8006e2a:	fa43 f305 	asr.w	r3, r3, r5
 8006e2e:	4159      	adcs	r1, r3
 8006e30:	e00e      	b.n	8006e50 <__adddf3+0xd0>
 8006e32:	f1a5 0520 	sub.w	r5, r5, #32
 8006e36:	f10e 0e20 	add.w	lr, lr, #32
 8006e3a:	2a01      	cmp	r2, #1
 8006e3c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006e40:	bf28      	it	cs
 8006e42:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006e46:	fa43 f305 	asr.w	r3, r3, r5
 8006e4a:	18c0      	adds	r0, r0, r3
 8006e4c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006e50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006e54:	d507      	bpl.n	8006e66 <__adddf3+0xe6>
 8006e56:	f04f 0e00 	mov.w	lr, #0
 8006e5a:	f1dc 0c00 	rsbs	ip, ip, #0
 8006e5e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006e62:	eb6e 0101 	sbc.w	r1, lr, r1
 8006e66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006e6a:	d31b      	bcc.n	8006ea4 <__adddf3+0x124>
 8006e6c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006e70:	d30c      	bcc.n	8006e8c <__adddf3+0x10c>
 8006e72:	0849      	lsrs	r1, r1, #1
 8006e74:	ea5f 0030 	movs.w	r0, r0, rrx
 8006e78:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006e7c:	f104 0401 	add.w	r4, r4, #1
 8006e80:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006e84:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006e88:	f080 809a 	bcs.w	8006fc0 <__adddf3+0x240>
 8006e8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006e90:	bf08      	it	eq
 8006e92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006e96:	f150 0000 	adcs.w	r0, r0, #0
 8006e9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006e9e:	ea41 0105 	orr.w	r1, r1, r5
 8006ea2:	bd30      	pop	{r4, r5, pc}
 8006ea4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006ea8:	4140      	adcs	r0, r0
 8006eaa:	eb41 0101 	adc.w	r1, r1, r1
 8006eae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006eb2:	f1a4 0401 	sub.w	r4, r4, #1
 8006eb6:	d1e9      	bne.n	8006e8c <__adddf3+0x10c>
 8006eb8:	f091 0f00 	teq	r1, #0
 8006ebc:	bf04      	itt	eq
 8006ebe:	4601      	moveq	r1, r0
 8006ec0:	2000      	moveq	r0, #0
 8006ec2:	fab1 f381 	clz	r3, r1
 8006ec6:	bf08      	it	eq
 8006ec8:	3320      	addeq	r3, #32
 8006eca:	f1a3 030b 	sub.w	r3, r3, #11
 8006ece:	f1b3 0220 	subs.w	r2, r3, #32
 8006ed2:	da0c      	bge.n	8006eee <__adddf3+0x16e>
 8006ed4:	320c      	adds	r2, #12
 8006ed6:	dd08      	ble.n	8006eea <__adddf3+0x16a>
 8006ed8:	f102 0c14 	add.w	ip, r2, #20
 8006edc:	f1c2 020c 	rsb	r2, r2, #12
 8006ee0:	fa01 f00c 	lsl.w	r0, r1, ip
 8006ee4:	fa21 f102 	lsr.w	r1, r1, r2
 8006ee8:	e00c      	b.n	8006f04 <__adddf3+0x184>
 8006eea:	f102 0214 	add.w	r2, r2, #20
 8006eee:	bfd8      	it	le
 8006ef0:	f1c2 0c20 	rsble	ip, r2, #32
 8006ef4:	fa01 f102 	lsl.w	r1, r1, r2
 8006ef8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006efc:	bfdc      	itt	le
 8006efe:	ea41 010c 	orrle.w	r1, r1, ip
 8006f02:	4090      	lslle	r0, r2
 8006f04:	1ae4      	subs	r4, r4, r3
 8006f06:	bfa2      	ittt	ge
 8006f08:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006f0c:	4329      	orrge	r1, r5
 8006f0e:	bd30      	popge	{r4, r5, pc}
 8006f10:	ea6f 0404 	mvn.w	r4, r4
 8006f14:	3c1f      	subs	r4, #31
 8006f16:	da1c      	bge.n	8006f52 <__adddf3+0x1d2>
 8006f18:	340c      	adds	r4, #12
 8006f1a:	dc0e      	bgt.n	8006f3a <__adddf3+0x1ba>
 8006f1c:	f104 0414 	add.w	r4, r4, #20
 8006f20:	f1c4 0220 	rsb	r2, r4, #32
 8006f24:	fa20 f004 	lsr.w	r0, r0, r4
 8006f28:	fa01 f302 	lsl.w	r3, r1, r2
 8006f2c:	ea40 0003 	orr.w	r0, r0, r3
 8006f30:	fa21 f304 	lsr.w	r3, r1, r4
 8006f34:	ea45 0103 	orr.w	r1, r5, r3
 8006f38:	bd30      	pop	{r4, r5, pc}
 8006f3a:	f1c4 040c 	rsb	r4, r4, #12
 8006f3e:	f1c4 0220 	rsb	r2, r4, #32
 8006f42:	fa20 f002 	lsr.w	r0, r0, r2
 8006f46:	fa01 f304 	lsl.w	r3, r1, r4
 8006f4a:	ea40 0003 	orr.w	r0, r0, r3
 8006f4e:	4629      	mov	r1, r5
 8006f50:	bd30      	pop	{r4, r5, pc}
 8006f52:	fa21 f004 	lsr.w	r0, r1, r4
 8006f56:	4629      	mov	r1, r5
 8006f58:	bd30      	pop	{r4, r5, pc}
 8006f5a:	f094 0f00 	teq	r4, #0
 8006f5e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006f62:	bf06      	itte	eq
 8006f64:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006f68:	3401      	addeq	r4, #1
 8006f6a:	3d01      	subne	r5, #1
 8006f6c:	e74e      	b.n	8006e0c <__adddf3+0x8c>
 8006f6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006f72:	bf18      	it	ne
 8006f74:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006f78:	d029      	beq.n	8006fce <__adddf3+0x24e>
 8006f7a:	ea94 0f05 	teq	r4, r5
 8006f7e:	bf08      	it	eq
 8006f80:	ea90 0f02 	teqeq	r0, r2
 8006f84:	d005      	beq.n	8006f92 <__adddf3+0x212>
 8006f86:	ea54 0c00 	orrs.w	ip, r4, r0
 8006f8a:	bf04      	itt	eq
 8006f8c:	4619      	moveq	r1, r3
 8006f8e:	4610      	moveq	r0, r2
 8006f90:	bd30      	pop	{r4, r5, pc}
 8006f92:	ea91 0f03 	teq	r1, r3
 8006f96:	bf1e      	ittt	ne
 8006f98:	2100      	movne	r1, #0
 8006f9a:	2000      	movne	r0, #0
 8006f9c:	bd30      	popne	{r4, r5, pc}
 8006f9e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006fa2:	d105      	bne.n	8006fb0 <__adddf3+0x230>
 8006fa4:	0040      	lsls	r0, r0, #1
 8006fa6:	4149      	adcs	r1, r1
 8006fa8:	bf28      	it	cs
 8006faa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006fae:	bd30      	pop	{r4, r5, pc}
 8006fb0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006fb4:	bf3c      	itt	cc
 8006fb6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006fba:	bd30      	popcc	{r4, r5, pc}
 8006fbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006fc0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006fc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fc8:	f04f 0000 	mov.w	r0, #0
 8006fcc:	bd30      	pop	{r4, r5, pc}
 8006fce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006fd2:	bf1a      	itte	ne
 8006fd4:	4619      	movne	r1, r3
 8006fd6:	4610      	movne	r0, r2
 8006fd8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006fdc:	bf1c      	itt	ne
 8006fde:	460b      	movne	r3, r1
 8006fe0:	4602      	movne	r2, r0
 8006fe2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006fe6:	bf06      	itte	eq
 8006fe8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006fec:	ea91 0f03 	teqeq	r1, r3
 8006ff0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006ff4:	bd30      	pop	{r4, r5, pc}
 8006ff6:	bf00      	nop

08006ff8 <__aeabi_ui2d>:
 8006ff8:	f090 0f00 	teq	r0, #0
 8006ffc:	bf04      	itt	eq
 8006ffe:	2100      	moveq	r1, #0
 8007000:	4770      	bxeq	lr
 8007002:	b530      	push	{r4, r5, lr}
 8007004:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007008:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800700c:	f04f 0500 	mov.w	r5, #0
 8007010:	f04f 0100 	mov.w	r1, #0
 8007014:	e750      	b.n	8006eb8 <__adddf3+0x138>
 8007016:	bf00      	nop

08007018 <__aeabi_i2d>:
 8007018:	f090 0f00 	teq	r0, #0
 800701c:	bf04      	itt	eq
 800701e:	2100      	moveq	r1, #0
 8007020:	4770      	bxeq	lr
 8007022:	b530      	push	{r4, r5, lr}
 8007024:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007028:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800702c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007030:	bf48      	it	mi
 8007032:	4240      	negmi	r0, r0
 8007034:	f04f 0100 	mov.w	r1, #0
 8007038:	e73e      	b.n	8006eb8 <__adddf3+0x138>
 800703a:	bf00      	nop

0800703c <__aeabi_f2d>:
 800703c:	0042      	lsls	r2, r0, #1
 800703e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007042:	ea4f 0131 	mov.w	r1, r1, rrx
 8007046:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800704a:	bf1f      	itttt	ne
 800704c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007050:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007054:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007058:	4770      	bxne	lr
 800705a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800705e:	bf08      	it	eq
 8007060:	4770      	bxeq	lr
 8007062:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007066:	bf04      	itt	eq
 8007068:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800706c:	4770      	bxeq	lr
 800706e:	b530      	push	{r4, r5, lr}
 8007070:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007074:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007078:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800707c:	e71c      	b.n	8006eb8 <__adddf3+0x138>
 800707e:	bf00      	nop

08007080 <__aeabi_ul2d>:
 8007080:	ea50 0201 	orrs.w	r2, r0, r1
 8007084:	bf08      	it	eq
 8007086:	4770      	bxeq	lr
 8007088:	b530      	push	{r4, r5, lr}
 800708a:	f04f 0500 	mov.w	r5, #0
 800708e:	e00a      	b.n	80070a6 <__aeabi_l2d+0x16>

08007090 <__aeabi_l2d>:
 8007090:	ea50 0201 	orrs.w	r2, r0, r1
 8007094:	bf08      	it	eq
 8007096:	4770      	bxeq	lr
 8007098:	b530      	push	{r4, r5, lr}
 800709a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800709e:	d502      	bpl.n	80070a6 <__aeabi_l2d+0x16>
 80070a0:	4240      	negs	r0, r0
 80070a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80070a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80070aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80070ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80070b2:	f43f aed8 	beq.w	8006e66 <__adddf3+0xe6>
 80070b6:	f04f 0203 	mov.w	r2, #3
 80070ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80070be:	bf18      	it	ne
 80070c0:	3203      	addne	r2, #3
 80070c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80070c6:	bf18      	it	ne
 80070c8:	3203      	addne	r2, #3
 80070ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80070ce:	f1c2 0320 	rsb	r3, r2, #32
 80070d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80070d6:	fa20 f002 	lsr.w	r0, r0, r2
 80070da:	fa01 fe03 	lsl.w	lr, r1, r3
 80070de:	ea40 000e 	orr.w	r0, r0, lr
 80070e2:	fa21 f102 	lsr.w	r1, r1, r2
 80070e6:	4414      	add	r4, r2
 80070e8:	e6bd      	b.n	8006e66 <__adddf3+0xe6>
 80070ea:	bf00      	nop

080070ec <__aeabi_dmul>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80070f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80070f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80070fa:	bf1d      	ittte	ne
 80070fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007100:	ea94 0f0c 	teqne	r4, ip
 8007104:	ea95 0f0c 	teqne	r5, ip
 8007108:	f000 f8de 	bleq	80072c8 <__aeabi_dmul+0x1dc>
 800710c:	442c      	add	r4, r5
 800710e:	ea81 0603 	eor.w	r6, r1, r3
 8007112:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007116:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800711a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800711e:	bf18      	it	ne
 8007120:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007124:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007128:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800712c:	d038      	beq.n	80071a0 <__aeabi_dmul+0xb4>
 800712e:	fba0 ce02 	umull	ip, lr, r0, r2
 8007132:	f04f 0500 	mov.w	r5, #0
 8007136:	fbe1 e502 	umlal	lr, r5, r1, r2
 800713a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800713e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007142:	f04f 0600 	mov.w	r6, #0
 8007146:	fbe1 5603 	umlal	r5, r6, r1, r3
 800714a:	f09c 0f00 	teq	ip, #0
 800714e:	bf18      	it	ne
 8007150:	f04e 0e01 	orrne.w	lr, lr, #1
 8007154:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007158:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800715c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8007160:	d204      	bcs.n	800716c <__aeabi_dmul+0x80>
 8007162:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007166:	416d      	adcs	r5, r5
 8007168:	eb46 0606 	adc.w	r6, r6, r6
 800716c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8007170:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007174:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007178:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800717c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007180:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007184:	bf88      	it	hi
 8007186:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800718a:	d81e      	bhi.n	80071ca <__aeabi_dmul+0xde>
 800718c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8007190:	bf08      	it	eq
 8007192:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8007196:	f150 0000 	adcs.w	r0, r0, #0
 800719a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80071a4:	ea46 0101 	orr.w	r1, r6, r1
 80071a8:	ea40 0002 	orr.w	r0, r0, r2
 80071ac:	ea81 0103 	eor.w	r1, r1, r3
 80071b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80071b4:	bfc2      	ittt	gt
 80071b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80071ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80071be:	bd70      	popgt	{r4, r5, r6, pc}
 80071c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80071c4:	f04f 0e00 	mov.w	lr, #0
 80071c8:	3c01      	subs	r4, #1
 80071ca:	f300 80ab 	bgt.w	8007324 <__aeabi_dmul+0x238>
 80071ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80071d2:	bfde      	ittt	le
 80071d4:	2000      	movle	r0, #0
 80071d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80071da:	bd70      	pople	{r4, r5, r6, pc}
 80071dc:	f1c4 0400 	rsb	r4, r4, #0
 80071e0:	3c20      	subs	r4, #32
 80071e2:	da35      	bge.n	8007250 <__aeabi_dmul+0x164>
 80071e4:	340c      	adds	r4, #12
 80071e6:	dc1b      	bgt.n	8007220 <__aeabi_dmul+0x134>
 80071e8:	f104 0414 	add.w	r4, r4, #20
 80071ec:	f1c4 0520 	rsb	r5, r4, #32
 80071f0:	fa00 f305 	lsl.w	r3, r0, r5
 80071f4:	fa20 f004 	lsr.w	r0, r0, r4
 80071f8:	fa01 f205 	lsl.w	r2, r1, r5
 80071fc:	ea40 0002 	orr.w	r0, r0, r2
 8007200:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007204:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007208:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800720c:	fa21 f604 	lsr.w	r6, r1, r4
 8007210:	eb42 0106 	adc.w	r1, r2, r6
 8007214:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007218:	bf08      	it	eq
 800721a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	f1c4 040c 	rsb	r4, r4, #12
 8007224:	f1c4 0520 	rsb	r5, r4, #32
 8007228:	fa00 f304 	lsl.w	r3, r0, r4
 800722c:	fa20 f005 	lsr.w	r0, r0, r5
 8007230:	fa01 f204 	lsl.w	r2, r1, r4
 8007234:	ea40 0002 	orr.w	r0, r0, r2
 8007238:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800723c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007240:	f141 0100 	adc.w	r1, r1, #0
 8007244:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007248:	bf08      	it	eq
 800724a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800724e:	bd70      	pop	{r4, r5, r6, pc}
 8007250:	f1c4 0520 	rsb	r5, r4, #32
 8007254:	fa00 f205 	lsl.w	r2, r0, r5
 8007258:	ea4e 0e02 	orr.w	lr, lr, r2
 800725c:	fa20 f304 	lsr.w	r3, r0, r4
 8007260:	fa01 f205 	lsl.w	r2, r1, r5
 8007264:	ea43 0302 	orr.w	r3, r3, r2
 8007268:	fa21 f004 	lsr.w	r0, r1, r4
 800726c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007270:	fa21 f204 	lsr.w	r2, r1, r4
 8007274:	ea20 0002 	bic.w	r0, r0, r2
 8007278:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800727c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007280:	bf08      	it	eq
 8007282:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	f094 0f00 	teq	r4, #0
 800728c:	d10f      	bne.n	80072ae <__aeabi_dmul+0x1c2>
 800728e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8007292:	0040      	lsls	r0, r0, #1
 8007294:	eb41 0101 	adc.w	r1, r1, r1
 8007298:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800729c:	bf08      	it	eq
 800729e:	3c01      	subeq	r4, #1
 80072a0:	d0f7      	beq.n	8007292 <__aeabi_dmul+0x1a6>
 80072a2:	ea41 0106 	orr.w	r1, r1, r6
 80072a6:	f095 0f00 	teq	r5, #0
 80072aa:	bf18      	it	ne
 80072ac:	4770      	bxne	lr
 80072ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80072b2:	0052      	lsls	r2, r2, #1
 80072b4:	eb43 0303 	adc.w	r3, r3, r3
 80072b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80072bc:	bf08      	it	eq
 80072be:	3d01      	subeq	r5, #1
 80072c0:	d0f7      	beq.n	80072b2 <__aeabi_dmul+0x1c6>
 80072c2:	ea43 0306 	orr.w	r3, r3, r6
 80072c6:	4770      	bx	lr
 80072c8:	ea94 0f0c 	teq	r4, ip
 80072cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80072d0:	bf18      	it	ne
 80072d2:	ea95 0f0c 	teqne	r5, ip
 80072d6:	d00c      	beq.n	80072f2 <__aeabi_dmul+0x206>
 80072d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80072dc:	bf18      	it	ne
 80072de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80072e2:	d1d1      	bne.n	8007288 <__aeabi_dmul+0x19c>
 80072e4:	ea81 0103 	eor.w	r1, r1, r3
 80072e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80072ec:	f04f 0000 	mov.w	r0, #0
 80072f0:	bd70      	pop	{r4, r5, r6, pc}
 80072f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80072f6:	bf06      	itte	eq
 80072f8:	4610      	moveq	r0, r2
 80072fa:	4619      	moveq	r1, r3
 80072fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007300:	d019      	beq.n	8007336 <__aeabi_dmul+0x24a>
 8007302:	ea94 0f0c 	teq	r4, ip
 8007306:	d102      	bne.n	800730e <__aeabi_dmul+0x222>
 8007308:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800730c:	d113      	bne.n	8007336 <__aeabi_dmul+0x24a>
 800730e:	ea95 0f0c 	teq	r5, ip
 8007312:	d105      	bne.n	8007320 <__aeabi_dmul+0x234>
 8007314:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007318:	bf1c      	itt	ne
 800731a:	4610      	movne	r0, r2
 800731c:	4619      	movne	r1, r3
 800731e:	d10a      	bne.n	8007336 <__aeabi_dmul+0x24a>
 8007320:	ea81 0103 	eor.w	r1, r1, r3
 8007324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007328:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800732c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007330:	f04f 0000 	mov.w	r0, #0
 8007334:	bd70      	pop	{r4, r5, r6, pc}
 8007336:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800733a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800733e:	bd70      	pop	{r4, r5, r6, pc}

08007340 <__aeabi_ddiv>:
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007346:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800734a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800734e:	bf1d      	ittte	ne
 8007350:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007354:	ea94 0f0c 	teqne	r4, ip
 8007358:	ea95 0f0c 	teqne	r5, ip
 800735c:	f000 f8a7 	bleq	80074ae <__aeabi_ddiv+0x16e>
 8007360:	eba4 0405 	sub.w	r4, r4, r5
 8007364:	ea81 0e03 	eor.w	lr, r1, r3
 8007368:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800736c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007370:	f000 8088 	beq.w	8007484 <__aeabi_ddiv+0x144>
 8007374:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007378:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800737c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8007380:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007384:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8007388:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800738c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8007390:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007394:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8007398:	429d      	cmp	r5, r3
 800739a:	bf08      	it	eq
 800739c:	4296      	cmpeq	r6, r2
 800739e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80073a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80073a6:	d202      	bcs.n	80073ae <__aeabi_ddiv+0x6e>
 80073a8:	085b      	lsrs	r3, r3, #1
 80073aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80073ae:	1ab6      	subs	r6, r6, r2
 80073b0:	eb65 0503 	sbc.w	r5, r5, r3
 80073b4:	085b      	lsrs	r3, r3, #1
 80073b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80073ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80073be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80073c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80073c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80073ca:	bf22      	ittt	cs
 80073cc:	1ab6      	subcs	r6, r6, r2
 80073ce:	4675      	movcs	r5, lr
 80073d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80073d4:	085b      	lsrs	r3, r3, #1
 80073d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80073da:	ebb6 0e02 	subs.w	lr, r6, r2
 80073de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80073e2:	bf22      	ittt	cs
 80073e4:	1ab6      	subcs	r6, r6, r2
 80073e6:	4675      	movcs	r5, lr
 80073e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80073ec:	085b      	lsrs	r3, r3, #1
 80073ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80073f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80073f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80073fa:	bf22      	ittt	cs
 80073fc:	1ab6      	subcs	r6, r6, r2
 80073fe:	4675      	movcs	r5, lr
 8007400:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007404:	085b      	lsrs	r3, r3, #1
 8007406:	ea4f 0232 	mov.w	r2, r2, rrx
 800740a:	ebb6 0e02 	subs.w	lr, r6, r2
 800740e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007412:	bf22      	ittt	cs
 8007414:	1ab6      	subcs	r6, r6, r2
 8007416:	4675      	movcs	r5, lr
 8007418:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800741c:	ea55 0e06 	orrs.w	lr, r5, r6
 8007420:	d018      	beq.n	8007454 <__aeabi_ddiv+0x114>
 8007422:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007426:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800742a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800742e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007432:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007436:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800743a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800743e:	d1c0      	bne.n	80073c2 <__aeabi_ddiv+0x82>
 8007440:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007444:	d10b      	bne.n	800745e <__aeabi_ddiv+0x11e>
 8007446:	ea41 0100 	orr.w	r1, r1, r0
 800744a:	f04f 0000 	mov.w	r0, #0
 800744e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007452:	e7b6      	b.n	80073c2 <__aeabi_ddiv+0x82>
 8007454:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007458:	bf04      	itt	eq
 800745a:	4301      	orreq	r1, r0
 800745c:	2000      	moveq	r0, #0
 800745e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007462:	bf88      	it	hi
 8007464:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007468:	f63f aeaf 	bhi.w	80071ca <__aeabi_dmul+0xde>
 800746c:	ebb5 0c03 	subs.w	ip, r5, r3
 8007470:	bf04      	itt	eq
 8007472:	ebb6 0c02 	subseq.w	ip, r6, r2
 8007476:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800747a:	f150 0000 	adcs.w	r0, r0, #0
 800747e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007482:	bd70      	pop	{r4, r5, r6, pc}
 8007484:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007488:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800748c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8007490:	bfc2      	ittt	gt
 8007492:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007496:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800749a:	bd70      	popgt	{r4, r5, r6, pc}
 800749c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80074a0:	f04f 0e00 	mov.w	lr, #0
 80074a4:	3c01      	subs	r4, #1
 80074a6:	e690      	b.n	80071ca <__aeabi_dmul+0xde>
 80074a8:	ea45 0e06 	orr.w	lr, r5, r6
 80074ac:	e68d      	b.n	80071ca <__aeabi_dmul+0xde>
 80074ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80074b2:	ea94 0f0c 	teq	r4, ip
 80074b6:	bf08      	it	eq
 80074b8:	ea95 0f0c 	teqeq	r5, ip
 80074bc:	f43f af3b 	beq.w	8007336 <__aeabi_dmul+0x24a>
 80074c0:	ea94 0f0c 	teq	r4, ip
 80074c4:	d10a      	bne.n	80074dc <__aeabi_ddiv+0x19c>
 80074c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80074ca:	f47f af34 	bne.w	8007336 <__aeabi_dmul+0x24a>
 80074ce:	ea95 0f0c 	teq	r5, ip
 80074d2:	f47f af25 	bne.w	8007320 <__aeabi_dmul+0x234>
 80074d6:	4610      	mov	r0, r2
 80074d8:	4619      	mov	r1, r3
 80074da:	e72c      	b.n	8007336 <__aeabi_dmul+0x24a>
 80074dc:	ea95 0f0c 	teq	r5, ip
 80074e0:	d106      	bne.n	80074f0 <__aeabi_ddiv+0x1b0>
 80074e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80074e6:	f43f aefd 	beq.w	80072e4 <__aeabi_dmul+0x1f8>
 80074ea:	4610      	mov	r0, r2
 80074ec:	4619      	mov	r1, r3
 80074ee:	e722      	b.n	8007336 <__aeabi_dmul+0x24a>
 80074f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80074f4:	bf18      	it	ne
 80074f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80074fa:	f47f aec5 	bne.w	8007288 <__aeabi_dmul+0x19c>
 80074fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8007502:	f47f af0d 	bne.w	8007320 <__aeabi_dmul+0x234>
 8007506:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800750a:	f47f aeeb 	bne.w	80072e4 <__aeabi_dmul+0x1f8>
 800750e:	e712      	b.n	8007336 <__aeabi_dmul+0x24a>

08007510 <__gedf2>:
 8007510:	f04f 3cff 	mov.w	ip, #4294967295
 8007514:	e006      	b.n	8007524 <__cmpdf2+0x4>
 8007516:	bf00      	nop

08007518 <__ledf2>:
 8007518:	f04f 0c01 	mov.w	ip, #1
 800751c:	e002      	b.n	8007524 <__cmpdf2+0x4>
 800751e:	bf00      	nop

08007520 <__cmpdf2>:
 8007520:	f04f 0c01 	mov.w	ip, #1
 8007524:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800752c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007530:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007534:	bf18      	it	ne
 8007536:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800753a:	d01b      	beq.n	8007574 <__cmpdf2+0x54>
 800753c:	b001      	add	sp, #4
 800753e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8007542:	bf0c      	ite	eq
 8007544:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007548:	ea91 0f03 	teqne	r1, r3
 800754c:	bf02      	ittt	eq
 800754e:	ea90 0f02 	teqeq	r0, r2
 8007552:	2000      	moveq	r0, #0
 8007554:	4770      	bxeq	lr
 8007556:	f110 0f00 	cmn.w	r0, #0
 800755a:	ea91 0f03 	teq	r1, r3
 800755e:	bf58      	it	pl
 8007560:	4299      	cmppl	r1, r3
 8007562:	bf08      	it	eq
 8007564:	4290      	cmpeq	r0, r2
 8007566:	bf2c      	ite	cs
 8007568:	17d8      	asrcs	r0, r3, #31
 800756a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800756e:	f040 0001 	orr.w	r0, r0, #1
 8007572:	4770      	bx	lr
 8007574:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800757c:	d102      	bne.n	8007584 <__cmpdf2+0x64>
 800757e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8007582:	d107      	bne.n	8007594 <__cmpdf2+0x74>
 8007584:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007588:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800758c:	d1d6      	bne.n	800753c <__cmpdf2+0x1c>
 800758e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007592:	d0d3      	beq.n	800753c <__cmpdf2+0x1c>
 8007594:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop

0800759c <__aeabi_cdrcmple>:
 800759c:	4684      	mov	ip, r0
 800759e:	4610      	mov	r0, r2
 80075a0:	4662      	mov	r2, ip
 80075a2:	468c      	mov	ip, r1
 80075a4:	4619      	mov	r1, r3
 80075a6:	4663      	mov	r3, ip
 80075a8:	e000      	b.n	80075ac <__aeabi_cdcmpeq>
 80075aa:	bf00      	nop

080075ac <__aeabi_cdcmpeq>:
 80075ac:	b501      	push	{r0, lr}
 80075ae:	f7ff ffb7 	bl	8007520 <__cmpdf2>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	bf48      	it	mi
 80075b6:	f110 0f00 	cmnmi.w	r0, #0
 80075ba:	bd01      	pop	{r0, pc}

080075bc <__aeabi_dcmpeq>:
 80075bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80075c0:	f7ff fff4 	bl	80075ac <__aeabi_cdcmpeq>
 80075c4:	bf0c      	ite	eq
 80075c6:	2001      	moveq	r0, #1
 80075c8:	2000      	movne	r0, #0
 80075ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80075ce:	bf00      	nop

080075d0 <__aeabi_dcmplt>:
 80075d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80075d4:	f7ff ffea 	bl	80075ac <__aeabi_cdcmpeq>
 80075d8:	bf34      	ite	cc
 80075da:	2001      	movcc	r0, #1
 80075dc:	2000      	movcs	r0, #0
 80075de:	f85d fb08 	ldr.w	pc, [sp], #8
 80075e2:	bf00      	nop

080075e4 <__aeabi_dcmple>:
 80075e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80075e8:	f7ff ffe0 	bl	80075ac <__aeabi_cdcmpeq>
 80075ec:	bf94      	ite	ls
 80075ee:	2001      	movls	r0, #1
 80075f0:	2000      	movhi	r0, #0
 80075f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80075f6:	bf00      	nop

080075f8 <__aeabi_dcmpge>:
 80075f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80075fc:	f7ff ffce 	bl	800759c <__aeabi_cdrcmple>
 8007600:	bf94      	ite	ls
 8007602:	2001      	movls	r0, #1
 8007604:	2000      	movhi	r0, #0
 8007606:	f85d fb08 	ldr.w	pc, [sp], #8
 800760a:	bf00      	nop

0800760c <__aeabi_dcmpgt>:
 800760c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007610:	f7ff ffc4 	bl	800759c <__aeabi_cdrcmple>
 8007614:	bf34      	ite	cc
 8007616:	2001      	movcc	r0, #1
 8007618:	2000      	movcs	r0, #0
 800761a:	f85d fb08 	ldr.w	pc, [sp], #8
 800761e:	bf00      	nop

08007620 <__aeabi_dcmpun>:
 8007620:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007628:	d102      	bne.n	8007630 <__aeabi_dcmpun+0x10>
 800762a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800762e:	d10a      	bne.n	8007646 <__aeabi_dcmpun+0x26>
 8007630:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007634:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007638:	d102      	bne.n	8007640 <__aeabi_dcmpun+0x20>
 800763a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800763e:	d102      	bne.n	8007646 <__aeabi_dcmpun+0x26>
 8007640:	f04f 0000 	mov.w	r0, #0
 8007644:	4770      	bx	lr
 8007646:	f04f 0001 	mov.w	r0, #1
 800764a:	4770      	bx	lr

0800764c <__aeabi_d2iz>:
 800764c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007650:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007654:	d215      	bcs.n	8007682 <__aeabi_d2iz+0x36>
 8007656:	d511      	bpl.n	800767c <__aeabi_d2iz+0x30>
 8007658:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800765c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007660:	d912      	bls.n	8007688 <__aeabi_d2iz+0x3c>
 8007662:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007666:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800766a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800766e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007672:	fa23 f002 	lsr.w	r0, r3, r2
 8007676:	bf18      	it	ne
 8007678:	4240      	negne	r0, r0
 800767a:	4770      	bx	lr
 800767c:	f04f 0000 	mov.w	r0, #0
 8007680:	4770      	bx	lr
 8007682:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007686:	d105      	bne.n	8007694 <__aeabi_d2iz+0x48>
 8007688:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800768c:	bf08      	it	eq
 800768e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007692:	4770      	bx	lr
 8007694:	f04f 0000 	mov.w	r0, #0
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop

0800769c <__aeabi_uldivmod>:
 800769c:	b953      	cbnz	r3, 80076b4 <__aeabi_uldivmod+0x18>
 800769e:	b94a      	cbnz	r2, 80076b4 <__aeabi_uldivmod+0x18>
 80076a0:	2900      	cmp	r1, #0
 80076a2:	bf08      	it	eq
 80076a4:	2800      	cmpeq	r0, #0
 80076a6:	bf1c      	itt	ne
 80076a8:	f04f 31ff 	movne.w	r1, #4294967295
 80076ac:	f04f 30ff 	movne.w	r0, #4294967295
 80076b0:	f001 b8f8 	b.w	80088a4 <__aeabi_idiv0>
 80076b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80076b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80076bc:	f000 f806 	bl	80076cc <__udivmoddi4>
 80076c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80076c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076c8:	b004      	add	sp, #16
 80076ca:	4770      	bx	lr

080076cc <__udivmoddi4>:
 80076cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d0:	9e08      	ldr	r6, [sp, #32]
 80076d2:	4604      	mov	r4, r0
 80076d4:	4688      	mov	r8, r1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d14b      	bne.n	8007772 <__udivmoddi4+0xa6>
 80076da:	428a      	cmp	r2, r1
 80076dc:	4615      	mov	r5, r2
 80076de:	d967      	bls.n	80077b0 <__udivmoddi4+0xe4>
 80076e0:	fab2 f282 	clz	r2, r2
 80076e4:	b14a      	cbz	r2, 80076fa <__udivmoddi4+0x2e>
 80076e6:	f1c2 0720 	rsb	r7, r2, #32
 80076ea:	fa01 f302 	lsl.w	r3, r1, r2
 80076ee:	fa20 f707 	lsr.w	r7, r0, r7
 80076f2:	4095      	lsls	r5, r2
 80076f4:	ea47 0803 	orr.w	r8, r7, r3
 80076f8:	4094      	lsls	r4, r2
 80076fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80076fe:	0c23      	lsrs	r3, r4, #16
 8007700:	fbb8 f7fe 	udiv	r7, r8, lr
 8007704:	fa1f fc85 	uxth.w	ip, r5
 8007708:	fb0e 8817 	mls	r8, lr, r7, r8
 800770c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007710:	fb07 f10c 	mul.w	r1, r7, ip
 8007714:	4299      	cmp	r1, r3
 8007716:	d909      	bls.n	800772c <__udivmoddi4+0x60>
 8007718:	18eb      	adds	r3, r5, r3
 800771a:	f107 30ff 	add.w	r0, r7, #4294967295
 800771e:	f080 811b 	bcs.w	8007958 <__udivmoddi4+0x28c>
 8007722:	4299      	cmp	r1, r3
 8007724:	f240 8118 	bls.w	8007958 <__udivmoddi4+0x28c>
 8007728:	3f02      	subs	r7, #2
 800772a:	442b      	add	r3, r5
 800772c:	1a5b      	subs	r3, r3, r1
 800772e:	b2a4      	uxth	r4, r4
 8007730:	fbb3 f0fe 	udiv	r0, r3, lr
 8007734:	fb0e 3310 	mls	r3, lr, r0, r3
 8007738:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800773c:	fb00 fc0c 	mul.w	ip, r0, ip
 8007740:	45a4      	cmp	ip, r4
 8007742:	d909      	bls.n	8007758 <__udivmoddi4+0x8c>
 8007744:	192c      	adds	r4, r5, r4
 8007746:	f100 33ff 	add.w	r3, r0, #4294967295
 800774a:	f080 8107 	bcs.w	800795c <__udivmoddi4+0x290>
 800774e:	45a4      	cmp	ip, r4
 8007750:	f240 8104 	bls.w	800795c <__udivmoddi4+0x290>
 8007754:	3802      	subs	r0, #2
 8007756:	442c      	add	r4, r5
 8007758:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800775c:	eba4 040c 	sub.w	r4, r4, ip
 8007760:	2700      	movs	r7, #0
 8007762:	b11e      	cbz	r6, 800776c <__udivmoddi4+0xa0>
 8007764:	40d4      	lsrs	r4, r2
 8007766:	2300      	movs	r3, #0
 8007768:	e9c6 4300 	strd	r4, r3, [r6]
 800776c:	4639      	mov	r1, r7
 800776e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007772:	428b      	cmp	r3, r1
 8007774:	d909      	bls.n	800778a <__udivmoddi4+0xbe>
 8007776:	2e00      	cmp	r6, #0
 8007778:	f000 80eb 	beq.w	8007952 <__udivmoddi4+0x286>
 800777c:	2700      	movs	r7, #0
 800777e:	e9c6 0100 	strd	r0, r1, [r6]
 8007782:	4638      	mov	r0, r7
 8007784:	4639      	mov	r1, r7
 8007786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778a:	fab3 f783 	clz	r7, r3
 800778e:	2f00      	cmp	r7, #0
 8007790:	d147      	bne.n	8007822 <__udivmoddi4+0x156>
 8007792:	428b      	cmp	r3, r1
 8007794:	d302      	bcc.n	800779c <__udivmoddi4+0xd0>
 8007796:	4282      	cmp	r2, r0
 8007798:	f200 80fa 	bhi.w	8007990 <__udivmoddi4+0x2c4>
 800779c:	1a84      	subs	r4, r0, r2
 800779e:	eb61 0303 	sbc.w	r3, r1, r3
 80077a2:	2001      	movs	r0, #1
 80077a4:	4698      	mov	r8, r3
 80077a6:	2e00      	cmp	r6, #0
 80077a8:	d0e0      	beq.n	800776c <__udivmoddi4+0xa0>
 80077aa:	e9c6 4800 	strd	r4, r8, [r6]
 80077ae:	e7dd      	b.n	800776c <__udivmoddi4+0xa0>
 80077b0:	b902      	cbnz	r2, 80077b4 <__udivmoddi4+0xe8>
 80077b2:	deff      	udf	#255	; 0xff
 80077b4:	fab2 f282 	clz	r2, r2
 80077b8:	2a00      	cmp	r2, #0
 80077ba:	f040 808f 	bne.w	80078dc <__udivmoddi4+0x210>
 80077be:	1b49      	subs	r1, r1, r5
 80077c0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80077c4:	fa1f f885 	uxth.w	r8, r5
 80077c8:	2701      	movs	r7, #1
 80077ca:	fbb1 fcfe 	udiv	ip, r1, lr
 80077ce:	0c23      	lsrs	r3, r4, #16
 80077d0:	fb0e 111c 	mls	r1, lr, ip, r1
 80077d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80077d8:	fb08 f10c 	mul.w	r1, r8, ip
 80077dc:	4299      	cmp	r1, r3
 80077de:	d907      	bls.n	80077f0 <__udivmoddi4+0x124>
 80077e0:	18eb      	adds	r3, r5, r3
 80077e2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80077e6:	d202      	bcs.n	80077ee <__udivmoddi4+0x122>
 80077e8:	4299      	cmp	r1, r3
 80077ea:	f200 80cd 	bhi.w	8007988 <__udivmoddi4+0x2bc>
 80077ee:	4684      	mov	ip, r0
 80077f0:	1a59      	subs	r1, r3, r1
 80077f2:	b2a3      	uxth	r3, r4
 80077f4:	fbb1 f0fe 	udiv	r0, r1, lr
 80077f8:	fb0e 1410 	mls	r4, lr, r0, r1
 80077fc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007800:	fb08 f800 	mul.w	r8, r8, r0
 8007804:	45a0      	cmp	r8, r4
 8007806:	d907      	bls.n	8007818 <__udivmoddi4+0x14c>
 8007808:	192c      	adds	r4, r5, r4
 800780a:	f100 33ff 	add.w	r3, r0, #4294967295
 800780e:	d202      	bcs.n	8007816 <__udivmoddi4+0x14a>
 8007810:	45a0      	cmp	r8, r4
 8007812:	f200 80b6 	bhi.w	8007982 <__udivmoddi4+0x2b6>
 8007816:	4618      	mov	r0, r3
 8007818:	eba4 0408 	sub.w	r4, r4, r8
 800781c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8007820:	e79f      	b.n	8007762 <__udivmoddi4+0x96>
 8007822:	f1c7 0c20 	rsb	ip, r7, #32
 8007826:	40bb      	lsls	r3, r7
 8007828:	fa22 fe0c 	lsr.w	lr, r2, ip
 800782c:	ea4e 0e03 	orr.w	lr, lr, r3
 8007830:	fa01 f407 	lsl.w	r4, r1, r7
 8007834:	fa20 f50c 	lsr.w	r5, r0, ip
 8007838:	fa21 f30c 	lsr.w	r3, r1, ip
 800783c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8007840:	4325      	orrs	r5, r4
 8007842:	fbb3 f9f8 	udiv	r9, r3, r8
 8007846:	0c2c      	lsrs	r4, r5, #16
 8007848:	fb08 3319 	mls	r3, r8, r9, r3
 800784c:	fa1f fa8e 	uxth.w	sl, lr
 8007850:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8007854:	fb09 f40a 	mul.w	r4, r9, sl
 8007858:	429c      	cmp	r4, r3
 800785a:	fa02 f207 	lsl.w	r2, r2, r7
 800785e:	fa00 f107 	lsl.w	r1, r0, r7
 8007862:	d90b      	bls.n	800787c <__udivmoddi4+0x1b0>
 8007864:	eb1e 0303 	adds.w	r3, lr, r3
 8007868:	f109 30ff 	add.w	r0, r9, #4294967295
 800786c:	f080 8087 	bcs.w	800797e <__udivmoddi4+0x2b2>
 8007870:	429c      	cmp	r4, r3
 8007872:	f240 8084 	bls.w	800797e <__udivmoddi4+0x2b2>
 8007876:	f1a9 0902 	sub.w	r9, r9, #2
 800787a:	4473      	add	r3, lr
 800787c:	1b1b      	subs	r3, r3, r4
 800787e:	b2ad      	uxth	r5, r5
 8007880:	fbb3 f0f8 	udiv	r0, r3, r8
 8007884:	fb08 3310 	mls	r3, r8, r0, r3
 8007888:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800788c:	fb00 fa0a 	mul.w	sl, r0, sl
 8007890:	45a2      	cmp	sl, r4
 8007892:	d908      	bls.n	80078a6 <__udivmoddi4+0x1da>
 8007894:	eb1e 0404 	adds.w	r4, lr, r4
 8007898:	f100 33ff 	add.w	r3, r0, #4294967295
 800789c:	d26b      	bcs.n	8007976 <__udivmoddi4+0x2aa>
 800789e:	45a2      	cmp	sl, r4
 80078a0:	d969      	bls.n	8007976 <__udivmoddi4+0x2aa>
 80078a2:	3802      	subs	r0, #2
 80078a4:	4474      	add	r4, lr
 80078a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80078aa:	fba0 8902 	umull	r8, r9, r0, r2
 80078ae:	eba4 040a 	sub.w	r4, r4, sl
 80078b2:	454c      	cmp	r4, r9
 80078b4:	46c2      	mov	sl, r8
 80078b6:	464b      	mov	r3, r9
 80078b8:	d354      	bcc.n	8007964 <__udivmoddi4+0x298>
 80078ba:	d051      	beq.n	8007960 <__udivmoddi4+0x294>
 80078bc:	2e00      	cmp	r6, #0
 80078be:	d069      	beq.n	8007994 <__udivmoddi4+0x2c8>
 80078c0:	ebb1 050a 	subs.w	r5, r1, sl
 80078c4:	eb64 0403 	sbc.w	r4, r4, r3
 80078c8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80078cc:	40fd      	lsrs	r5, r7
 80078ce:	40fc      	lsrs	r4, r7
 80078d0:	ea4c 0505 	orr.w	r5, ip, r5
 80078d4:	e9c6 5400 	strd	r5, r4, [r6]
 80078d8:	2700      	movs	r7, #0
 80078da:	e747      	b.n	800776c <__udivmoddi4+0xa0>
 80078dc:	f1c2 0320 	rsb	r3, r2, #32
 80078e0:	fa20 f703 	lsr.w	r7, r0, r3
 80078e4:	4095      	lsls	r5, r2
 80078e6:	fa01 f002 	lsl.w	r0, r1, r2
 80078ea:	fa21 f303 	lsr.w	r3, r1, r3
 80078ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80078f2:	4338      	orrs	r0, r7
 80078f4:	0c01      	lsrs	r1, r0, #16
 80078f6:	fbb3 f7fe 	udiv	r7, r3, lr
 80078fa:	fa1f f885 	uxth.w	r8, r5
 80078fe:	fb0e 3317 	mls	r3, lr, r7, r3
 8007902:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007906:	fb07 f308 	mul.w	r3, r7, r8
 800790a:	428b      	cmp	r3, r1
 800790c:	fa04 f402 	lsl.w	r4, r4, r2
 8007910:	d907      	bls.n	8007922 <__udivmoddi4+0x256>
 8007912:	1869      	adds	r1, r5, r1
 8007914:	f107 3cff 	add.w	ip, r7, #4294967295
 8007918:	d22f      	bcs.n	800797a <__udivmoddi4+0x2ae>
 800791a:	428b      	cmp	r3, r1
 800791c:	d92d      	bls.n	800797a <__udivmoddi4+0x2ae>
 800791e:	3f02      	subs	r7, #2
 8007920:	4429      	add	r1, r5
 8007922:	1acb      	subs	r3, r1, r3
 8007924:	b281      	uxth	r1, r0
 8007926:	fbb3 f0fe 	udiv	r0, r3, lr
 800792a:	fb0e 3310 	mls	r3, lr, r0, r3
 800792e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007932:	fb00 f308 	mul.w	r3, r0, r8
 8007936:	428b      	cmp	r3, r1
 8007938:	d907      	bls.n	800794a <__udivmoddi4+0x27e>
 800793a:	1869      	adds	r1, r5, r1
 800793c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007940:	d217      	bcs.n	8007972 <__udivmoddi4+0x2a6>
 8007942:	428b      	cmp	r3, r1
 8007944:	d915      	bls.n	8007972 <__udivmoddi4+0x2a6>
 8007946:	3802      	subs	r0, #2
 8007948:	4429      	add	r1, r5
 800794a:	1ac9      	subs	r1, r1, r3
 800794c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8007950:	e73b      	b.n	80077ca <__udivmoddi4+0xfe>
 8007952:	4637      	mov	r7, r6
 8007954:	4630      	mov	r0, r6
 8007956:	e709      	b.n	800776c <__udivmoddi4+0xa0>
 8007958:	4607      	mov	r7, r0
 800795a:	e6e7      	b.n	800772c <__udivmoddi4+0x60>
 800795c:	4618      	mov	r0, r3
 800795e:	e6fb      	b.n	8007758 <__udivmoddi4+0x8c>
 8007960:	4541      	cmp	r1, r8
 8007962:	d2ab      	bcs.n	80078bc <__udivmoddi4+0x1f0>
 8007964:	ebb8 0a02 	subs.w	sl, r8, r2
 8007968:	eb69 020e 	sbc.w	r2, r9, lr
 800796c:	3801      	subs	r0, #1
 800796e:	4613      	mov	r3, r2
 8007970:	e7a4      	b.n	80078bc <__udivmoddi4+0x1f0>
 8007972:	4660      	mov	r0, ip
 8007974:	e7e9      	b.n	800794a <__udivmoddi4+0x27e>
 8007976:	4618      	mov	r0, r3
 8007978:	e795      	b.n	80078a6 <__udivmoddi4+0x1da>
 800797a:	4667      	mov	r7, ip
 800797c:	e7d1      	b.n	8007922 <__udivmoddi4+0x256>
 800797e:	4681      	mov	r9, r0
 8007980:	e77c      	b.n	800787c <__udivmoddi4+0x1b0>
 8007982:	3802      	subs	r0, #2
 8007984:	442c      	add	r4, r5
 8007986:	e747      	b.n	8007818 <__udivmoddi4+0x14c>
 8007988:	f1ac 0c02 	sub.w	ip, ip, #2
 800798c:	442b      	add	r3, r5
 800798e:	e72f      	b.n	80077f0 <__udivmoddi4+0x124>
 8007990:	4638      	mov	r0, r7
 8007992:	e708      	b.n	80077a6 <__udivmoddi4+0xda>
 8007994:	4637      	mov	r7, r6
 8007996:	e6e9      	b.n	800776c <__udivmoddi4+0xa0>

08007998 <selfrel_offset31>:
 8007998:	6803      	ldr	r3, [r0, #0]
 800799a:	005a      	lsls	r2, r3, #1
 800799c:	bf4c      	ite	mi
 800799e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80079a2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80079a6:	4418      	add	r0, r3
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop

080079ac <search_EIT_table>:
 80079ac:	b361      	cbz	r1, 8007a08 <search_EIT_table+0x5c>
 80079ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b2:	f101 3aff 	add.w	sl, r1, #4294967295
 80079b6:	4690      	mov	r8, r2
 80079b8:	4606      	mov	r6, r0
 80079ba:	46d1      	mov	r9, sl
 80079bc:	2700      	movs	r7, #0
 80079be:	eb07 0409 	add.w	r4, r7, r9
 80079c2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80079c6:	1064      	asrs	r4, r4, #1
 80079c8:	00e5      	lsls	r5, r4, #3
 80079ca:	1971      	adds	r1, r6, r5
 80079cc:	4608      	mov	r0, r1
 80079ce:	f7ff ffe3 	bl	8007998 <selfrel_offset31>
 80079d2:	45a2      	cmp	sl, r4
 80079d4:	4683      	mov	fp, r0
 80079d6:	f105 0008 	add.w	r0, r5, #8
 80079da:	4430      	add	r0, r6
 80079dc:	d009      	beq.n	80079f2 <search_EIT_table+0x46>
 80079de:	f7ff ffdb 	bl	8007998 <selfrel_offset31>
 80079e2:	45c3      	cmp	fp, r8
 80079e4:	f100 30ff 	add.w	r0, r0, #4294967295
 80079e8:	d805      	bhi.n	80079f6 <search_EIT_table+0x4a>
 80079ea:	4540      	cmp	r0, r8
 80079ec:	d209      	bcs.n	8007a02 <search_EIT_table+0x56>
 80079ee:	1c67      	adds	r7, r4, #1
 80079f0:	e7e5      	b.n	80079be <search_EIT_table+0x12>
 80079f2:	45c3      	cmp	fp, r8
 80079f4:	d905      	bls.n	8007a02 <search_EIT_table+0x56>
 80079f6:	42a7      	cmp	r7, r4
 80079f8:	d002      	beq.n	8007a00 <search_EIT_table+0x54>
 80079fa:	f104 39ff 	add.w	r9, r4, #4294967295
 80079fe:	e7de      	b.n	80079be <search_EIT_table+0x12>
 8007a00:	2100      	movs	r1, #0
 8007a02:	4608      	mov	r0, r1
 8007a04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a08:	4608      	mov	r0, r1
 8007a0a:	4770      	bx	lr

08007a0c <__gnu_unwind_get_pr_addr>:
 8007a0c:	2801      	cmp	r0, #1
 8007a0e:	d007      	beq.n	8007a20 <__gnu_unwind_get_pr_addr+0x14>
 8007a10:	2802      	cmp	r0, #2
 8007a12:	d007      	beq.n	8007a24 <__gnu_unwind_get_pr_addr+0x18>
 8007a14:	4b04      	ldr	r3, [pc, #16]	; (8007a28 <__gnu_unwind_get_pr_addr+0x1c>)
 8007a16:	2800      	cmp	r0, #0
 8007a18:	bf0c      	ite	eq
 8007a1a:	4618      	moveq	r0, r3
 8007a1c:	2000      	movne	r0, #0
 8007a1e:	4770      	bx	lr
 8007a20:	4802      	ldr	r0, [pc, #8]	; (8007a2c <__gnu_unwind_get_pr_addr+0x20>)
 8007a22:	4770      	bx	lr
 8007a24:	4802      	ldr	r0, [pc, #8]	; (8007a30 <__gnu_unwind_get_pr_addr+0x24>)
 8007a26:	4770      	bx	lr
 8007a28:	080080f9 	.word	0x080080f9
 8007a2c:	080080fd 	.word	0x080080fd
 8007a30:	08008101 	.word	0x08008101

08007a34 <get_eit_entry>:
 8007a34:	b530      	push	{r4, r5, lr}
 8007a36:	4b25      	ldr	r3, [pc, #148]	; (8007acc <get_eit_entry+0x98>)
 8007a38:	b083      	sub	sp, #12
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	1e8d      	subs	r5, r1, #2
 8007a3e:	b34b      	cbz	r3, 8007a94 <get_eit_entry+0x60>
 8007a40:	a901      	add	r1, sp, #4
 8007a42:	4628      	mov	r0, r5
 8007a44:	f3af 8000 	nop.w
 8007a48:	b1f0      	cbz	r0, 8007a88 <get_eit_entry+0x54>
 8007a4a:	9901      	ldr	r1, [sp, #4]
 8007a4c:	462a      	mov	r2, r5
 8007a4e:	f7ff ffad 	bl	80079ac <search_EIT_table>
 8007a52:	4601      	mov	r1, r0
 8007a54:	b1c0      	cbz	r0, 8007a88 <get_eit_entry+0x54>
 8007a56:	f7ff ff9f 	bl	8007998 <selfrel_offset31>
 8007a5a:	684b      	ldr	r3, [r1, #4]
 8007a5c:	64a0      	str	r0, [r4, #72]	; 0x48
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d02e      	beq.n	8007ac0 <get_eit_entry+0x8c>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f101 0004 	add.w	r0, r1, #4
 8007a68:	db26      	blt.n	8007ab8 <get_eit_entry+0x84>
 8007a6a:	f7ff ff95 	bl	8007998 <selfrel_offset31>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8007a74:	6803      	ldr	r3, [r0, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	db12      	blt.n	8007aa0 <get_eit_entry+0x6c>
 8007a7a:	f7ff ff8d 	bl	8007998 <selfrel_offset31>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	6120      	str	r0, [r4, #16]
 8007a82:	4618      	mov	r0, r3
 8007a84:	b003      	add	sp, #12
 8007a86:	bd30      	pop	{r4, r5, pc}
 8007a88:	2300      	movs	r3, #0
 8007a8a:	6123      	str	r3, [r4, #16]
 8007a8c:	2309      	movs	r3, #9
 8007a8e:	4618      	mov	r0, r3
 8007a90:	b003      	add	sp, #12
 8007a92:	bd30      	pop	{r4, r5, pc}
 8007a94:	490e      	ldr	r1, [pc, #56]	; (8007ad0 <get_eit_entry+0x9c>)
 8007a96:	480f      	ldr	r0, [pc, #60]	; (8007ad4 <get_eit_entry+0xa0>)
 8007a98:	1a09      	subs	r1, r1, r0
 8007a9a:	10c9      	asrs	r1, r1, #3
 8007a9c:	9101      	str	r1, [sp, #4]
 8007a9e:	e7d5      	b.n	8007a4c <get_eit_entry+0x18>
 8007aa0:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007aa4:	f7ff ffb2 	bl	8007a0c <__gnu_unwind_get_pr_addr>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	bf14      	ite	ne
 8007aac:	2300      	movne	r3, #0
 8007aae:	2309      	moveq	r3, #9
 8007ab0:	6120      	str	r0, [r4, #16]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	b003      	add	sp, #12
 8007ab6:	bd30      	pop	{r4, r5, pc}
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8007abe:	e7d9      	b.n	8007a74 <get_eit_entry+0x40>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	6123      	str	r3, [r4, #16]
 8007ac4:	2305      	movs	r3, #5
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	b003      	add	sp, #12
 8007aca:	bd30      	pop	{r4, r5, pc}
 8007acc:	00000000 	.word	0x00000000
 8007ad0:	08018a6c 	.word	0x08018a6c
 8007ad4:	08018894 	.word	0x08018894

08007ad8 <restore_non_core_regs>:
 8007ad8:	6803      	ldr	r3, [r0, #0]
 8007ada:	07da      	lsls	r2, r3, #31
 8007adc:	b510      	push	{r4, lr}
 8007ade:	4604      	mov	r4, r0
 8007ae0:	d406      	bmi.n	8007af0 <restore_non_core_regs+0x18>
 8007ae2:	079b      	lsls	r3, r3, #30
 8007ae4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8007ae8:	d509      	bpl.n	8007afe <restore_non_core_regs+0x26>
 8007aea:	f000 fc5f 	bl	80083ac <__gnu_Unwind_Restore_VFP_D>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	0759      	lsls	r1, r3, #29
 8007af2:	d509      	bpl.n	8007b08 <restore_non_core_regs+0x30>
 8007af4:	071a      	lsls	r2, r3, #28
 8007af6:	d50e      	bpl.n	8007b16 <restore_non_core_regs+0x3e>
 8007af8:	06db      	lsls	r3, r3, #27
 8007afa:	d513      	bpl.n	8007b24 <restore_non_core_regs+0x4c>
 8007afc:	bd10      	pop	{r4, pc}
 8007afe:	f000 fc4d 	bl	800839c <__gnu_Unwind_Restore_VFP>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	0759      	lsls	r1, r3, #29
 8007b06:	d4f5      	bmi.n	8007af4 <restore_non_core_regs+0x1c>
 8007b08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007b0c:	f000 fc56 	bl	80083bc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	071a      	lsls	r2, r3, #28
 8007b14:	d4f0      	bmi.n	8007af8 <restore_non_core_regs+0x20>
 8007b16:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007b1a:	f000 fc57 	bl	80083cc <__gnu_Unwind_Restore_WMMXD>
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	06db      	lsls	r3, r3, #27
 8007b22:	d4eb      	bmi.n	8007afc <restore_non_core_regs+0x24>
 8007b24:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b2c:	f000 bc92 	b.w	8008454 <__gnu_Unwind_Restore_WMMXC>

08007b30 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8007b30:	6803      	ldr	r3, [r0, #0]
 8007b32:	b103      	cbz	r3, 8007b36 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8007b34:	4403      	add	r3, r0
 8007b36:	4618      	mov	r0, r3
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop

08007b3c <__gnu_unwind_24bit.isra.1>:
 8007b3c:	2009      	movs	r0, #9
 8007b3e:	4770      	bx	lr

08007b40 <_Unwind_DebugHook>:
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop

08007b44 <unwind_phase2>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	4604      	mov	r4, r0
 8007b48:	460d      	mov	r5, r1
 8007b4a:	e008      	b.n	8007b5e <unwind_phase2+0x1a>
 8007b4c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007b4e:	6163      	str	r3, [r4, #20]
 8007b50:	462a      	mov	r2, r5
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	4621      	mov	r1, r4
 8007b56:	2001      	movs	r0, #1
 8007b58:	4798      	blx	r3
 8007b5a:	2808      	cmp	r0, #8
 8007b5c:	d108      	bne.n	8007b70 <unwind_phase2+0x2c>
 8007b5e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007b60:	4620      	mov	r0, r4
 8007b62:	f7ff ff67 	bl	8007a34 <get_eit_entry>
 8007b66:	4606      	mov	r6, r0
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d0ef      	beq.n	8007b4c <unwind_phase2+0x8>
 8007b6c:	f00a fc7e 	bl	801246c <abort>
 8007b70:	2807      	cmp	r0, #7
 8007b72:	d1fb      	bne.n	8007b6c <unwind_phase2+0x28>
 8007b74:	4630      	mov	r0, r6
 8007b76:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007b78:	f7ff ffe2 	bl	8007b40 <_Unwind_DebugHook>
 8007b7c:	1d28      	adds	r0, r5, #4
 8007b7e:	f000 fc01 	bl	8008384 <__restore_core_regs>
 8007b82:	bf00      	nop

08007b84 <unwind_phase2_forced>:
 8007b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b88:	1d0c      	adds	r4, r1, #4
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	4617      	mov	r7, r2
 8007b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b90:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8007b94:	ae03      	add	r6, sp, #12
 8007b96:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b9a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b9e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007ba0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007ba4:	ac02      	add	r4, sp, #8
 8007ba6:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007baa:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8007bae:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	6023      	str	r3, [r4, #0]
 8007bb6:	e021      	b.n	8007bfc <unwind_phase2_forced+0x78>
 8007bb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bba:	616b      	str	r3, [r5, #20]
 8007bbc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	a87a      	add	r0, sp, #488	; 0x1e8
 8007bc4:	f00b f96f 	bl	8012ea6 <memcpy>
 8007bc8:	692b      	ldr	r3, [r5, #16]
 8007bca:	aa7a      	add	r2, sp, #488	; 0x1e8
 8007bcc:	4629      	mov	r1, r5
 8007bce:	4630      	mov	r0, r6
 8007bd0:	4798      	blx	r3
 8007bd2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8007bd4:	e9cd 4900 	strd	r4, r9, [sp]
 8007bd8:	4682      	mov	sl, r0
 8007bda:	6463      	str	r3, [r4, #68]	; 0x44
 8007bdc:	4631      	mov	r1, r6
 8007bde:	462b      	mov	r3, r5
 8007be0:	462a      	mov	r2, r5
 8007be2:	2001      	movs	r0, #1
 8007be4:	47c0      	blx	r8
 8007be6:	4607      	mov	r7, r0
 8007be8:	b9f8      	cbnz	r0, 8007c2a <unwind_phase2_forced+0xa6>
 8007bea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007bee:	a97a      	add	r1, sp, #488	; 0x1e8
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f00b f958 	bl	8012ea6 <memcpy>
 8007bf6:	f1ba 0f08 	cmp.w	sl, #8
 8007bfa:	d11c      	bne.n	8007c36 <unwind_phase2_forced+0xb2>
 8007bfc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f7ff ff18 	bl	8007a34 <get_eit_entry>
 8007c04:	2f00      	cmp	r7, #0
 8007c06:	bf08      	it	eq
 8007c08:	2609      	moveq	r6, #9
 8007c0a:	4607      	mov	r7, r0
 8007c0c:	bf18      	it	ne
 8007c0e:	260a      	movne	r6, #10
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d0d1      	beq.n	8007bb8 <unwind_phase2_forced+0x34>
 8007c14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c16:	f046 0110 	orr.w	r1, r6, #16
 8007c1a:	e9cd 4900 	strd	r4, r9, [sp]
 8007c1e:	462a      	mov	r2, r5
 8007c20:	6463      	str	r3, [r4, #68]	; 0x44
 8007c22:	2001      	movs	r0, #1
 8007c24:	462b      	mov	r3, r5
 8007c26:	47c0      	blx	r8
 8007c28:	b100      	cbz	r0, 8007c2c <unwind_phase2_forced+0xa8>
 8007c2a:	2709      	movs	r7, #9
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8007c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c36:	f1ba 0f07 	cmp.w	sl, #7
 8007c3a:	d1f6      	bne.n	8007c2a <unwind_phase2_forced+0xa6>
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007c40:	f7ff ff7e 	bl	8007b40 <_Unwind_DebugHook>
 8007c44:	a803      	add	r0, sp, #12
 8007c46:	f000 fb9d 	bl	8008384 <__restore_core_regs>
 8007c4a:	bf00      	nop

08007c4c <_Unwind_GetCFA>:
 8007c4c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8007c4e:	4770      	bx	lr

08007c50 <__gnu_Unwind_RaiseException>:
 8007c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c52:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007c54:	640b      	str	r3, [r1, #64]	; 0x40
 8007c56:	1d0d      	adds	r5, r1, #4
 8007c58:	460f      	mov	r7, r1
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c5e:	b0f9      	sub	sp, #484	; 0x1e4
 8007c60:	ac01      	add	r4, sp, #4
 8007c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007c70:	f04f 35ff 	mov.w	r5, #4294967295
 8007c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007c78:	9500      	str	r5, [sp, #0]
 8007c7a:	e006      	b.n	8007c8a <__gnu_Unwind_RaiseException+0x3a>
 8007c7c:	6933      	ldr	r3, [r6, #16]
 8007c7e:	466a      	mov	r2, sp
 8007c80:	4631      	mov	r1, r6
 8007c82:	4798      	blx	r3
 8007c84:	2808      	cmp	r0, #8
 8007c86:	4604      	mov	r4, r0
 8007c88:	d108      	bne.n	8007c9c <__gnu_Unwind_RaiseException+0x4c>
 8007c8a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7ff fed1 	bl	8007a34 <get_eit_entry>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d0f2      	beq.n	8007c7c <__gnu_Unwind_RaiseException+0x2c>
 8007c96:	2009      	movs	r0, #9
 8007c98:	b079      	add	sp, #484	; 0x1e4
 8007c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c9c:	4668      	mov	r0, sp
 8007c9e:	f7ff ff1b 	bl	8007ad8 <restore_non_core_regs>
 8007ca2:	2c06      	cmp	r4, #6
 8007ca4:	d1f7      	bne.n	8007c96 <__gnu_Unwind_RaiseException+0x46>
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f7ff ff4b 	bl	8007b44 <unwind_phase2>
 8007cae:	bf00      	nop

08007cb0 <__gnu_Unwind_ForcedUnwind>:
 8007cb0:	b430      	push	{r4, r5}
 8007cb2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8007cb4:	60c1      	str	r1, [r0, #12]
 8007cb6:	6182      	str	r2, [r0, #24]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	641d      	str	r5, [r3, #64]	; 0x40
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	bc30      	pop	{r4, r5}
 8007cc0:	e760      	b.n	8007b84 <unwind_phase2_forced>
 8007cc2:	bf00      	nop

08007cc4 <__gnu_Unwind_Resume>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	68c6      	ldr	r6, [r0, #12]
 8007cc8:	6943      	ldr	r3, [r0, #20]
 8007cca:	640b      	str	r3, [r1, #64]	; 0x40
 8007ccc:	b9be      	cbnz	r6, 8007cfe <__gnu_Unwind_Resume+0x3a>
 8007cce:	6903      	ldr	r3, [r0, #16]
 8007cd0:	460a      	mov	r2, r1
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	460d      	mov	r5, r1
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	2002      	movs	r0, #2
 8007cda:	4798      	blx	r3
 8007cdc:	2807      	cmp	r0, #7
 8007cde:	d007      	beq.n	8007cf0 <__gnu_Unwind_Resume+0x2c>
 8007ce0:	2808      	cmp	r0, #8
 8007ce2:	d103      	bne.n	8007cec <__gnu_Unwind_Resume+0x28>
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f7ff ff2c 	bl	8007b44 <unwind_phase2>
 8007cec:	f00a fbbe 	bl	801246c <abort>
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007cf4:	f7ff ff24 	bl	8007b40 <_Unwind_DebugHook>
 8007cf8:	1d28      	adds	r0, r5, #4
 8007cfa:	f000 fb43 	bl	8008384 <__restore_core_regs>
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f7ff ff40 	bl	8007b84 <unwind_phase2_forced>
 8007d04:	f00a fbb2 	bl	801246c <abort>

08007d08 <__gnu_Unwind_Resume_or_Rethrow>:
 8007d08:	68c2      	ldr	r2, [r0, #12]
 8007d0a:	b11a      	cbz	r2, 8007d14 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8007d0c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8007d0e:	640a      	str	r2, [r1, #64]	; 0x40
 8007d10:	2200      	movs	r2, #0
 8007d12:	e737      	b.n	8007b84 <unwind_phase2_forced>
 8007d14:	e79c      	b.n	8007c50 <__gnu_Unwind_RaiseException>
 8007d16:	bf00      	nop

08007d18 <_Unwind_Complete>:
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop

08007d1c <_Unwind_DeleteException>:
 8007d1c:	6883      	ldr	r3, [r0, #8]
 8007d1e:	b113      	cbz	r3, 8007d26 <_Unwind_DeleteException+0xa>
 8007d20:	4601      	mov	r1, r0
 8007d22:	2001      	movs	r0, #1
 8007d24:	4718      	bx	r3
 8007d26:	4770      	bx	lr

08007d28 <_Unwind_VRS_Get>:
 8007d28:	2904      	cmp	r1, #4
 8007d2a:	d807      	bhi.n	8007d3c <_Unwind_VRS_Get+0x14>
 8007d2c:	e8df f001 	tbb	[pc, r1]
 8007d30:	08060803 	.word	0x08060803
 8007d34:	08          	.byte	0x08
 8007d35:	00          	.byte	0x00
 8007d36:	b90b      	cbnz	r3, 8007d3c <_Unwind_VRS_Get+0x14>
 8007d38:	2a0f      	cmp	r2, #15
 8007d3a:	d903      	bls.n	8007d44 <_Unwind_VRS_Get+0x1c>
 8007d3c:	2002      	movs	r0, #2
 8007d3e:	4770      	bx	lr
 8007d40:	2001      	movs	r0, #1
 8007d42:	4770      	bx	lr
 8007d44:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007d48:	4618      	mov	r0, r3
 8007d4a:	6853      	ldr	r3, [r2, #4]
 8007d4c:	9a00      	ldr	r2, [sp, #0]
 8007d4e:	6013      	str	r3, [r2, #0]
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop

08007d54 <_Unwind_GetGR>:
 8007d54:	b510      	push	{r4, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	2300      	movs	r3, #0
 8007d5a:	ac03      	add	r4, sp, #12
 8007d5c:	460a      	mov	r2, r1
 8007d5e:	9400      	str	r4, [sp, #0]
 8007d60:	4619      	mov	r1, r3
 8007d62:	f7ff ffe1 	bl	8007d28 <_Unwind_VRS_Get>
 8007d66:	9803      	ldr	r0, [sp, #12]
 8007d68:	b004      	add	sp, #16
 8007d6a:	bd10      	pop	{r4, pc}

08007d6c <_Unwind_VRS_Set>:
 8007d6c:	2904      	cmp	r1, #4
 8007d6e:	d807      	bhi.n	8007d80 <_Unwind_VRS_Set+0x14>
 8007d70:	e8df f001 	tbb	[pc, r1]
 8007d74:	08060803 	.word	0x08060803
 8007d78:	08          	.byte	0x08
 8007d79:	00          	.byte	0x00
 8007d7a:	b90b      	cbnz	r3, 8007d80 <_Unwind_VRS_Set+0x14>
 8007d7c:	2a0f      	cmp	r2, #15
 8007d7e:	d903      	bls.n	8007d88 <_Unwind_VRS_Set+0x1c>
 8007d80:	2002      	movs	r0, #2
 8007d82:	4770      	bx	lr
 8007d84:	2001      	movs	r0, #1
 8007d86:	4770      	bx	lr
 8007d88:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007d8c:	9a00      	ldr	r2, [sp, #0]
 8007d8e:	6812      	ldr	r2, [r2, #0]
 8007d90:	6042      	str	r2, [r0, #4]
 8007d92:	4618      	mov	r0, r3
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop

08007d98 <_Unwind_SetGR>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	ac04      	add	r4, sp, #16
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f844 2d04 	str.w	r2, [r4, #-4]!
 8007da4:	460a      	mov	r2, r1
 8007da6:	9400      	str	r4, [sp, #0]
 8007da8:	4619      	mov	r1, r3
 8007daa:	f7ff ffdf 	bl	8007d6c <_Unwind_VRS_Set>
 8007dae:	b004      	add	sp, #16
 8007db0:	bd10      	pop	{r4, pc}
 8007db2:	bf00      	nop

08007db4 <__gnu_Unwind_Backtrace>:
 8007db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007db6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007db8:	6413      	str	r3, [r2, #64]	; 0x40
 8007dba:	1d15      	adds	r5, r2, #4
 8007dbc:	4607      	mov	r7, r0
 8007dbe:	460e      	mov	r6, r1
 8007dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dc2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8007dc6:	ac17      	add	r4, sp, #92	; 0x5c
 8007dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007dd6:	f04f 35ff 	mov.w	r5, #4294967295
 8007dda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007dde:	9516      	str	r5, [sp, #88]	; 0x58
 8007de0:	e010      	b.n	8007e04 <__gnu_Unwind_Backtrace+0x50>
 8007de2:	a816      	add	r0, sp, #88	; 0x58
 8007de4:	f7ff ffd8 	bl	8007d98 <_Unwind_SetGR>
 8007de8:	4631      	mov	r1, r6
 8007dea:	a816      	add	r0, sp, #88	; 0x58
 8007dec:	47b8      	blx	r7
 8007dee:	aa16      	add	r2, sp, #88	; 0x58
 8007df0:	4669      	mov	r1, sp
 8007df2:	b978      	cbnz	r0, 8007e14 <__gnu_Unwind_Backtrace+0x60>
 8007df4:	9b04      	ldr	r3, [sp, #16]
 8007df6:	2008      	movs	r0, #8
 8007df8:	4798      	blx	r3
 8007dfa:	2805      	cmp	r0, #5
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	d00a      	beq.n	8007e16 <__gnu_Unwind_Backtrace+0x62>
 8007e00:	2809      	cmp	r0, #9
 8007e02:	d007      	beq.n	8007e14 <__gnu_Unwind_Backtrace+0x60>
 8007e04:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007e06:	4668      	mov	r0, sp
 8007e08:	f7ff fe14 	bl	8007a34 <get_eit_entry>
 8007e0c:	466a      	mov	r2, sp
 8007e0e:	210c      	movs	r1, #12
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d0e6      	beq.n	8007de2 <__gnu_Unwind_Backtrace+0x2e>
 8007e14:	2409      	movs	r4, #9
 8007e16:	a816      	add	r0, sp, #88	; 0x58
 8007e18:	f7ff fe5e 	bl	8007ad8 <restore_non_core_regs>
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8007e22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e24 <__gnu_unwind_pr_common>:
 8007e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e28:	460d      	mov	r5, r1
 8007e2a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007e2c:	b089      	sub	sp, #36	; 0x24
 8007e2e:	1d0c      	adds	r4, r1, #4
 8007e30:	4616      	mov	r6, r2
 8007e32:	f000 0b03 	and.w	fp, r0, #3
 8007e36:	680a      	ldr	r2, [r1, #0]
 8007e38:	9406      	str	r4, [sp, #24]
 8007e3a:	461f      	mov	r7, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d068      	beq.n	8007f12 <__gnu_unwind_pr_common+0xee>
 8007e40:	0c13      	lsrs	r3, r2, #16
 8007e42:	b2d9      	uxtb	r1, r3
 8007e44:	0412      	lsls	r2, r2, #16
 8007e46:	f88d 301d 	strb.w	r3, [sp, #29]
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8007e50:	9205      	str	r2, [sp, #20]
 8007e52:	f88d 301c 	strb.w	r3, [sp, #28]
 8007e56:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007e58:	f1bb 0f02 	cmp.w	fp, #2
 8007e5c:	bf08      	it	eq
 8007e5e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8007e60:	f013 0301 	ands.w	r3, r3, #1
 8007e64:	d146      	bne.n	8007ef4 <__gnu_unwind_pr_common+0xd0>
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	f000 0308 	and.w	r3, r0, #8
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	f8d4 9000 	ldr.w	r9, [r4]
 8007e72:	f1b9 0f00 	cmp.w	r9, #0
 8007e76:	f000 80f3 	beq.w	8008060 <__gnu_unwind_pr_common+0x23c>
 8007e7a:	2f02      	cmp	r7, #2
 8007e7c:	d045      	beq.n	8007f0a <__gnu_unwind_pr_common+0xe6>
 8007e7e:	f8b4 9000 	ldrh.w	r9, [r4]
 8007e82:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8007e86:	3404      	adds	r4, #4
 8007e88:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007e8a:	f028 0a01 	bic.w	sl, r8, #1
 8007e8e:	210f      	movs	r1, #15
 8007e90:	4630      	mov	r0, r6
 8007e92:	449a      	add	sl, r3
 8007e94:	f7ff ff5e 	bl	8007d54 <_Unwind_GetGR>
 8007e98:	4582      	cmp	sl, r0
 8007e9a:	d834      	bhi.n	8007f06 <__gnu_unwind_pr_common+0xe2>
 8007e9c:	f029 0301 	bic.w	r3, r9, #1
 8007ea0:	4453      	add	r3, sl
 8007ea2:	4283      	cmp	r3, r0
 8007ea4:	bf94      	ite	ls
 8007ea6:	2000      	movls	r0, #0
 8007ea8:	2001      	movhi	r0, #1
 8007eaa:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8007eae:	f008 0802 	and.w	r8, r8, #2
 8007eb2:	f009 0901 	and.w	r9, r9, #1
 8007eb6:	ea48 0809 	orr.w	r8, r8, r9
 8007eba:	f1b8 0f01 	cmp.w	r8, #1
 8007ebe:	d03a      	beq.n	8007f36 <__gnu_unwind_pr_common+0x112>
 8007ec0:	d331      	bcc.n	8007f26 <__gnu_unwind_pr_common+0x102>
 8007ec2:	f1b8 0f02 	cmp.w	r8, #2
 8007ec6:	d11a      	bne.n	8007efe <__gnu_unwind_pr_common+0xda>
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8007ece:	f1bb 0f00 	cmp.w	fp, #0
 8007ed2:	d166      	bne.n	8007fa2 <__gnu_unwind_pr_common+0x17e>
 8007ed4:	b130      	cbz	r0, 8007ee4 <__gnu_unwind_pr_common+0xc0>
 8007ed6:	9a00      	ldr	r2, [sp, #0]
 8007ed8:	2a00      	cmp	r2, #0
 8007eda:	d06c      	beq.n	8007fb6 <__gnu_unwind_pr_common+0x192>
 8007edc:	f1ba 0f00 	cmp.w	sl, #0
 8007ee0:	f000 8090 	beq.w	8008004 <__gnu_unwind_pr_common+0x1e0>
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	da00      	bge.n	8007eea <__gnu_unwind_pr_common+0xc6>
 8007ee8:	3404      	adds	r4, #4
 8007eea:	f10a 0301 	add.w	r3, sl, #1
 8007eee:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007ef2:	e7bc      	b.n	8007e6e <__gnu_unwind_pr_common+0x4a>
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	a905      	add	r1, sp, #20
 8007ef8:	f000 fb46 	bl	8008588 <__gnu_unwind_execute>
 8007efc:	b178      	cbz	r0, 8007f1e <__gnu_unwind_pr_common+0xfa>
 8007efe:	2009      	movs	r0, #9
 8007f00:	b009      	add	sp, #36	; 0x24
 8007f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f06:	2000      	movs	r0, #0
 8007f08:	e7cf      	b.n	8007eaa <__gnu_unwind_pr_common+0x86>
 8007f0a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8007f0e:	3408      	adds	r4, #8
 8007f10:	e7ba      	b.n	8007e88 <__gnu_unwind_pr_common+0x64>
 8007f12:	0212      	lsls	r2, r2, #8
 8007f14:	2303      	movs	r3, #3
 8007f16:	9205      	str	r2, [sp, #20]
 8007f18:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007f1c:	e79b      	b.n	8007e56 <__gnu_unwind_pr_common+0x32>
 8007f1e:	2008      	movs	r0, #8
 8007f20:	b009      	add	sp, #36	; 0x24
 8007f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f26:	f1bb 0f00 	cmp.w	fp, #0
 8007f2a:	d002      	beq.n	8007f32 <__gnu_unwind_pr_common+0x10e>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	f040 80b4 	bne.w	800809a <__gnu_unwind_pr_common+0x276>
 8007f32:	3404      	adds	r4, #4
 8007f34:	e79b      	b.n	8007e6e <__gnu_unwind_pr_common+0x4a>
 8007f36:	f1bb 0f00 	cmp.w	fp, #0
 8007f3a:	d118      	bne.n	8007f6e <__gnu_unwind_pr_common+0x14a>
 8007f3c:	b1a8      	cbz	r0, 8007f6a <__gnu_unwind_pr_common+0x146>
 8007f3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f42:	1c99      	adds	r1, r3, #2
 8007f44:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007f48:	d0d9      	beq.n	8007efe <__gnu_unwind_pr_common+0xda>
 8007f4a:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8007f4e:	3301      	adds	r3, #1
 8007f50:	9104      	str	r1, [sp, #16]
 8007f52:	f000 80b5 	beq.w	80080c0 <__gnu_unwind_pr_common+0x29c>
 8007f56:	1d20      	adds	r0, r4, #4
 8007f58:	f7ff fdea 	bl	8007b30 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007f5c:	ab04      	add	r3, sp, #16
 8007f5e:	4601      	mov	r1, r0
 8007f60:	4628      	mov	r0, r5
 8007f62:	f009 f8fd 	bl	8011160 <__cxa_type_match>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d167      	bne.n	800803a <__gnu_unwind_pr_common+0x216>
 8007f6a:	3408      	adds	r4, #8
 8007f6c:	e77f      	b.n	8007e6e <__gnu_unwind_pr_common+0x4a>
 8007f6e:	210d      	movs	r1, #13
 8007f70:	4630      	mov	r0, r6
 8007f72:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8007f76:	f7ff feed 	bl	8007d54 <_Unwind_GetGR>
 8007f7a:	4580      	cmp	r8, r0
 8007f7c:	d1f5      	bne.n	8007f6a <__gnu_unwind_pr_common+0x146>
 8007f7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007f80:	429c      	cmp	r4, r3
 8007f82:	d1f2      	bne.n	8007f6a <__gnu_unwind_pr_common+0x146>
 8007f84:	4620      	mov	r0, r4
 8007f86:	f7ff fd07 	bl	8007998 <selfrel_offset31>
 8007f8a:	210f      	movs	r1, #15
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f7ff ff02 	bl	8007d98 <_Unwind_SetGR>
 8007f94:	4630      	mov	r0, r6
 8007f96:	462a      	mov	r2, r5
 8007f98:	2100      	movs	r1, #0
 8007f9a:	f7ff fefd 	bl	8007d98 <_Unwind_SetGR>
 8007f9e:	2007      	movs	r0, #7
 8007fa0:	e7ae      	b.n	8007f00 <__gnu_unwind_pr_common+0xdc>
 8007fa2:	210d      	movs	r1, #13
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8007faa:	f7ff fed3 	bl	8007d54 <_Unwind_GetGR>
 8007fae:	4580      	cmp	r8, r0
 8007fb0:	d032      	beq.n	8008018 <__gnu_unwind_pr_common+0x1f4>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	e796      	b.n	8007ee4 <__gnu_unwind_pr_common+0xc0>
 8007fb6:	f1ba 0f00 	cmp.w	sl, #0
 8007fba:	d023      	beq.n	8008004 <__gnu_unwind_pr_common+0x1e0>
 8007fbc:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007fc0:	f104 0804 	add.w	r8, r4, #4
 8007fc4:	f8cd b008 	str.w	fp, [sp, #8]
 8007fc8:	f8dd 9000 	ldr.w	r9, [sp]
 8007fcc:	9703      	str	r7, [sp, #12]
 8007fce:	46a3      	mov	fp, r4
 8007fd0:	461c      	mov	r4, r3
 8007fd2:	e002      	b.n	8007fda <__gnu_unwind_pr_common+0x1b6>
 8007fd4:	4557      	cmp	r7, sl
 8007fd6:	46b9      	mov	r9, r7
 8007fd8:	d040      	beq.n	800805c <__gnu_unwind_pr_common+0x238>
 8007fda:	4640      	mov	r0, r8
 8007fdc:	9404      	str	r4, [sp, #16]
 8007fde:	f7ff fda7 	bl	8007b30 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007fe2:	ab04      	add	r3, sp, #16
 8007fe4:	4601      	mov	r1, r0
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f009 f8b9 	bl	8011160 <__cxa_type_match>
 8007fee:	f109 0701 	add.w	r7, r9, #1
 8007ff2:	f108 0804 	add.w	r8, r8, #4
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d0ec      	beq.n	8007fd4 <__gnu_unwind_pr_common+0x1b0>
 8007ffa:	45d1      	cmp	r9, sl
 8007ffc:	465c      	mov	r4, fp
 8007ffe:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 8008002:	d1d6      	bne.n	8007fb2 <__gnu_unwind_pr_common+0x18e>
 8008004:	4630      	mov	r0, r6
 8008006:	210d      	movs	r1, #13
 8008008:	f7ff fea4 	bl	8007d54 <_Unwind_GetGR>
 800800c:	9b04      	ldr	r3, [sp, #16]
 800800e:	6228      	str	r0, [r5, #32]
 8008010:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8008014:	2006      	movs	r0, #6
 8008016:	e773      	b.n	8007f00 <__gnu_unwind_pr_common+0xdc>
 8008018:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800801a:	429c      	cmp	r4, r3
 800801c:	d1c9      	bne.n	8007fb2 <__gnu_unwind_pr_common+0x18e>
 800801e:	2204      	movs	r2, #4
 8008020:	f04f 0800 	mov.w	r8, #0
 8008024:	18a3      	adds	r3, r4, r2
 8008026:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
 800802a:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	4543      	cmp	r3, r8
 8008032:	db4d      	blt.n	80080d0 <__gnu_unwind_pr_common+0x2ac>
 8008034:	2301      	movs	r3, #1
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	e757      	b.n	8007eea <__gnu_unwind_pr_common+0xc6>
 800803a:	4680      	mov	r8, r0
 800803c:	210d      	movs	r1, #13
 800803e:	4630      	mov	r0, r6
 8008040:	f7ff fe88 	bl	8007d54 <_Unwind_GetGR>
 8008044:	f1b8 0f02 	cmp.w	r8, #2
 8008048:	6228      	str	r0, [r5, #32]
 800804a:	d13e      	bne.n	80080ca <__gnu_unwind_pr_common+0x2a6>
 800804c:	462b      	mov	r3, r5
 800804e:	9a04      	ldr	r2, [sp, #16]
 8008050:	f843 2f2c 	str.w	r2, [r3, #44]!
 8008054:	626b      	str	r3, [r5, #36]	; 0x24
 8008056:	62ac      	str	r4, [r5, #40]	; 0x28
 8008058:	2006      	movs	r0, #6
 800805a:	e751      	b.n	8007f00 <__gnu_unwind_pr_common+0xdc>
 800805c:	465c      	mov	r4, fp
 800805e:	e7d1      	b.n	8008004 <__gnu_unwind_pr_common+0x1e0>
 8008060:	a905      	add	r1, sp, #20
 8008062:	4630      	mov	r0, r6
 8008064:	f000 fa90 	bl	8008588 <__gnu_unwind_execute>
 8008068:	2800      	cmp	r0, #0
 800806a:	f47f af48 	bne.w	8007efe <__gnu_unwind_pr_common+0xda>
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	f43f af54 	beq.w	8007f1e <__gnu_unwind_pr_common+0xfa>
 8008076:	210f      	movs	r1, #15
 8008078:	4630      	mov	r0, r6
 800807a:	f7ff fe6b 	bl	8007d54 <_Unwind_GetGR>
 800807e:	210e      	movs	r1, #14
 8008080:	4602      	mov	r2, r0
 8008082:	4630      	mov	r0, r6
 8008084:	f7ff fe88 	bl	8007d98 <_Unwind_SetGR>
 8008088:	4630      	mov	r0, r6
 800808a:	4a1a      	ldr	r2, [pc, #104]	; (80080f4 <__gnu_unwind_pr_common+0x2d0>)
 800808c:	210f      	movs	r1, #15
 800808e:	f7ff fe83 	bl	8007d98 <_Unwind_SetGR>
 8008092:	2007      	movs	r0, #7
 8008094:	b009      	add	sp, #36	; 0x24
 8008096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809a:	4620      	mov	r0, r4
 800809c:	f7ff fc7c 	bl	8007998 <selfrel_offset31>
 80080a0:	3404      	adds	r4, #4
 80080a2:	4607      	mov	r7, r0
 80080a4:	63ac      	str	r4, [r5, #56]	; 0x38
 80080a6:	4628      	mov	r0, r5
 80080a8:	f009 f8b2 	bl	8011210 <__cxa_begin_cleanup>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	f43f af26 	beq.w	8007efe <__gnu_unwind_pr_common+0xda>
 80080b2:	4630      	mov	r0, r6
 80080b4:	463a      	mov	r2, r7
 80080b6:	210f      	movs	r1, #15
 80080b8:	f7ff fe6e 	bl	8007d98 <_Unwind_SetGR>
 80080bc:	2007      	movs	r0, #7
 80080be:	e71f      	b.n	8007f00 <__gnu_unwind_pr_common+0xdc>
 80080c0:	4630      	mov	r0, r6
 80080c2:	210d      	movs	r1, #13
 80080c4:	f7ff fe46 	bl	8007d54 <_Unwind_GetGR>
 80080c8:	6228      	str	r0, [r5, #32]
 80080ca:	9b04      	ldr	r3, [sp, #16]
 80080cc:	626b      	str	r3, [r5, #36]	; 0x24
 80080ce:	e7c2      	b.n	8008056 <__gnu_unwind_pr_common+0x232>
 80080d0:	f10a 0001 	add.w	r0, sl, #1
 80080d4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80080d8:	f7ff fc5e 	bl	8007998 <selfrel_offset31>
 80080dc:	210f      	movs	r1, #15
 80080de:	4602      	mov	r2, r0
 80080e0:	4630      	mov	r0, r6
 80080e2:	f7ff fe59 	bl	8007d98 <_Unwind_SetGR>
 80080e6:	4630      	mov	r0, r6
 80080e8:	462a      	mov	r2, r5
 80080ea:	4641      	mov	r1, r8
 80080ec:	f7ff fe54 	bl	8007d98 <_Unwind_SetGR>
 80080f0:	2007      	movs	r0, #7
 80080f2:	e705      	b.n	8007f00 <__gnu_unwind_pr_common+0xdc>
 80080f4:	08012265 	.word	0x08012265

080080f8 <__aeabi_unwind_cpp_pr0>:
 80080f8:	2300      	movs	r3, #0
 80080fa:	e693      	b.n	8007e24 <__gnu_unwind_pr_common>

080080fc <__aeabi_unwind_cpp_pr1>:
 80080fc:	2301      	movs	r3, #1
 80080fe:	e691      	b.n	8007e24 <__gnu_unwind_pr_common>

08008100 <__aeabi_unwind_cpp_pr2>:
 8008100:	2302      	movs	r3, #2
 8008102:	e68f      	b.n	8007e24 <__gnu_unwind_pr_common>

08008104 <_Unwind_VRS_Pop>:
 8008104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008108:	4605      	mov	r5, r0
 800810a:	b0c4      	sub	sp, #272	; 0x110
 800810c:	2904      	cmp	r1, #4
 800810e:	d806      	bhi.n	800811e <_Unwind_VRS_Pop+0x1a>
 8008110:	e8df f001 	tbb	[pc, r1]
 8008114:	03052b4d 	.word	0x03052b4d
 8008118:	09          	.byte	0x09
 8008119:	00          	.byte	0x00
 800811a:	2b03      	cmp	r3, #3
 800811c:	d05f      	beq.n	80081de <_Unwind_VRS_Pop+0xda>
 800811e:	2002      	movs	r0, #2
 8008120:	b044      	add	sp, #272	; 0x110
 8008122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f9      	bne.n	800811e <_Unwind_VRS_Pop+0x1a>
 800812a:	2a10      	cmp	r2, #16
 800812c:	d8f7      	bhi.n	800811e <_Unwind_VRS_Pop+0x1a>
 800812e:	682b      	ldr	r3, [r5, #0]
 8008130:	06dc      	lsls	r4, r3, #27
 8008132:	f100 80f4 	bmi.w	800831e <_Unwind_VRS_Pop+0x21a>
 8008136:	ac22      	add	r4, sp, #136	; 0x88
 8008138:	4620      	mov	r0, r4
 800813a:	9201      	str	r2, [sp, #4]
 800813c:	f000 f994 	bl	8008468 <__gnu_Unwind_Save_WMMXC>
 8008140:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8008142:	9a01      	ldr	r2, [sp, #4]
 8008144:	2300      	movs	r3, #0
 8008146:	2601      	movs	r6, #1
 8008148:	fa06 f103 	lsl.w	r1, r6, r3
 800814c:	4211      	tst	r1, r2
 800814e:	d003      	beq.n	8008158 <_Unwind_VRS_Pop+0x54>
 8008150:	6801      	ldr	r1, [r0, #0]
 8008152:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8008156:	3004      	adds	r0, #4
 8008158:	3301      	adds	r3, #1
 800815a:	2b04      	cmp	r3, #4
 800815c:	d1f4      	bne.n	8008148 <_Unwind_VRS_Pop+0x44>
 800815e:	63a8      	str	r0, [r5, #56]	; 0x38
 8008160:	4620      	mov	r0, r4
 8008162:	f000 f977 	bl	8008454 <__gnu_Unwind_Restore_WMMXC>
 8008166:	2000      	movs	r0, #0
 8008168:	e7da      	b.n	8008120 <_Unwind_VRS_Pop+0x1c>
 800816a:	2b01      	cmp	r3, #1
 800816c:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8008170:	b297      	uxth	r7, r2
 8008172:	d052      	beq.n	800821a <_Unwind_VRS_Pop+0x116>
 8008174:	2b05      	cmp	r3, #5
 8008176:	d1d2      	bne.n	800811e <_Unwind_VRS_Pop+0x1a>
 8008178:	eb06 0807 	add.w	r8, r6, r7
 800817c:	f1b8 0f20 	cmp.w	r8, #32
 8008180:	d8cd      	bhi.n	800811e <_Unwind_VRS_Pop+0x1a>
 8008182:	2e0f      	cmp	r6, #15
 8008184:	f240 8099 	bls.w	80082ba <_Unwind_VRS_Pop+0x1b6>
 8008188:	46b8      	mov	r8, r7
 800818a:	2f00      	cmp	r7, #0
 800818c:	f040 80db 	bne.w	8008346 <_Unwind_VRS_Pop+0x242>
 8008190:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008192:	63aa      	str	r2, [r5, #56]	; 0x38
 8008194:	2e0f      	cmp	r6, #15
 8008196:	f240 80be 	bls.w	8008316 <_Unwind_VRS_Pop+0x212>
 800819a:	f1b8 0f00 	cmp.w	r8, #0
 800819e:	d002      	beq.n	80081a6 <_Unwind_VRS_Pop+0xa2>
 80081a0:	a802      	add	r0, sp, #8
 80081a2:	f000 f90b 	bl	80083bc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80081a6:	2000      	movs	r0, #0
 80081a8:	b044      	add	sp, #272	; 0x110
 80081aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1b5      	bne.n	800811e <_Unwind_VRS_Pop+0x1a>
 80081b2:	6bac      	ldr	r4, [r5, #56]	; 0x38
 80081b4:	b297      	uxth	r7, r2
 80081b6:	1d28      	adds	r0, r5, #4
 80081b8:	2601      	movs	r6, #1
 80081ba:	fa06 f103 	lsl.w	r1, r6, r3
 80081be:	4239      	tst	r1, r7
 80081c0:	f103 0301 	add.w	r3, r3, #1
 80081c4:	d002      	beq.n	80081cc <_Unwind_VRS_Pop+0xc8>
 80081c6:	6821      	ldr	r1, [r4, #0]
 80081c8:	6001      	str	r1, [r0, #0]
 80081ca:	3404      	adds	r4, #4
 80081cc:	2b10      	cmp	r3, #16
 80081ce:	f100 0004 	add.w	r0, r0, #4
 80081d2:	d1f2      	bne.n	80081ba <_Unwind_VRS_Pop+0xb6>
 80081d4:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80081d8:	d1e5      	bne.n	80081a6 <_Unwind_VRS_Pop+0xa2>
 80081da:	63ac      	str	r4, [r5, #56]	; 0x38
 80081dc:	e7a0      	b.n	8008120 <_Unwind_VRS_Pop+0x1c>
 80081de:	0c16      	lsrs	r6, r2, #16
 80081e0:	b297      	uxth	r7, r2
 80081e2:	19f3      	adds	r3, r6, r7
 80081e4:	2b10      	cmp	r3, #16
 80081e6:	d89a      	bhi.n	800811e <_Unwind_VRS_Pop+0x1a>
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	071a      	lsls	r2, r3, #28
 80081ec:	d45d      	bmi.n	80082aa <_Unwind_VRS_Pop+0x1a6>
 80081ee:	ac22      	add	r4, sp, #136	; 0x88
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 f90d 	bl	8008410 <__gnu_Unwind_Save_WMMXD>
 80081f6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80081fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80081fc:	b13f      	cbz	r7, 800820e <_Unwind_VRS_Pop+0x10a>
 80081fe:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 8008202:	6818      	ldr	r0, [r3, #0]
 8008204:	f841 0b04 	str.w	r0, [r1], #4
 8008208:	3304      	adds	r3, #4
 800820a:	4293      	cmp	r3, r2
 800820c:	d1f9      	bne.n	8008202 <_Unwind_VRS_Pop+0xfe>
 800820e:	4620      	mov	r0, r4
 8008210:	63ab      	str	r3, [r5, #56]	; 0x38
 8008212:	f000 f8db 	bl	80083cc <__gnu_Unwind_Restore_WMMXD>
 8008216:	2000      	movs	r0, #0
 8008218:	e782      	b.n	8008120 <_Unwind_VRS_Pop+0x1c>
 800821a:	19f2      	adds	r2, r6, r7
 800821c:	2a10      	cmp	r2, #16
 800821e:	f63f af7e 	bhi.w	800811e <_Unwind_VRS_Pop+0x1a>
 8008222:	2e0f      	cmp	r6, #15
 8008224:	f63f af7b 	bhi.w	800811e <_Unwind_VRS_Pop+0x1a>
 8008228:	682a      	ldr	r2, [r5, #0]
 800822a:	07d1      	lsls	r1, r2, #31
 800822c:	d508      	bpl.n	8008240 <_Unwind_VRS_Pop+0x13c>
 800822e:	4628      	mov	r0, r5
 8008230:	f022 0203 	bic.w	r2, r2, #3
 8008234:	f840 2b48 	str.w	r2, [r0], #72
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	f000 f8b3 	bl	80083a4 <__gnu_Unwind_Save_VFP>
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	ac22      	add	r4, sp, #136	; 0x88
 8008244:	4620      	mov	r0, r4
 8008246:	f000 f8ad 	bl	80083a4 <__gnu_Unwind_Save_VFP>
 800824a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800824c:	9b01      	ldr	r3, [sp, #4]
 800824e:	2f00      	cmp	r7, #0
 8008250:	f000 8095 	beq.w	800837e <_Unwind_VRS_Pop+0x27a>
 8008254:	007f      	lsls	r7, r7, #1
 8008256:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800825a:	f04f 0800 	mov.w	r8, #0
 800825e:	3c04      	subs	r4, #4
 8008260:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 8008264:	f851 0b04 	ldr.w	r0, [r1], #4
 8008268:	f844 0f04 	str.w	r0, [r4, #4]!
 800826c:	4291      	cmp	r1, r2
 800826e:	d1f9      	bne.n	8008264 <_Unwind_VRS_Pop+0x160>
 8008270:	f1b8 0f00 	cmp.w	r8, #0
 8008274:	d00f      	beq.n	8008296 <_Unwind_VRS_Pop+0x192>
 8008276:	ac02      	add	r4, sp, #8
 8008278:	2e10      	cmp	r6, #16
 800827a:	4631      	mov	r1, r6
 800827c:	bf38      	it	cc
 800827e:	2110      	movcc	r1, #16
 8008280:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008284:	3984      	subs	r1, #132	; 0x84
 8008286:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
 800828a:	f852 0b04 	ldr.w	r0, [r2], #4
 800828e:	f841 0f04 	str.w	r0, [r1, #4]!
 8008292:	4294      	cmp	r4, r2
 8008294:	d1f9      	bne.n	800828a <_Unwind_VRS_Pop+0x186>
 8008296:	2b01      	cmp	r3, #1
 8008298:	f47f af7b 	bne.w	8008192 <_Unwind_VRS_Pop+0x8e>
 800829c:	ac22      	add	r4, sp, #136	; 0x88
 800829e:	3204      	adds	r2, #4
 80082a0:	63aa      	str	r2, [r5, #56]	; 0x38
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 f87a 	bl	800839c <__gnu_Unwind_Restore_VFP>
 80082a8:	e77d      	b.n	80081a6 <_Unwind_VRS_Pop+0xa2>
 80082aa:	f023 0308 	bic.w	r3, r3, #8
 80082ae:	602b      	str	r3, [r5, #0]
 80082b0:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 80082b4:	f000 f8ac 	bl	8008410 <__gnu_Unwind_Save_WMMXD>
 80082b8:	e799      	b.n	80081ee <_Unwind_VRS_Pop+0xea>
 80082ba:	f1b8 0f10 	cmp.w	r8, #16
 80082be:	682a      	ldr	r2, [r5, #0]
 80082c0:	d943      	bls.n	800834a <_Unwind_VRS_Pop+0x246>
 80082c2:	07d0      	lsls	r0, r2, #31
 80082c4:	f1a8 0810 	sub.w	r8, r8, #16
 80082c8:	d50b      	bpl.n	80082e2 <_Unwind_VRS_Pop+0x1de>
 80082ca:	4628      	mov	r0, r5
 80082cc:	f022 0201 	bic.w	r2, r2, #1
 80082d0:	f042 0202 	orr.w	r2, r2, #2
 80082d4:	f840 2b48 	str.w	r2, [r0], #72
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	f000 f86b 	bl	80083b4 <__gnu_Unwind_Save_VFP_D>
 80082de:	682a      	ldr	r2, [r5, #0]
 80082e0:	9b01      	ldr	r3, [sp, #4]
 80082e2:	0751      	lsls	r1, r2, #29
 80082e4:	d425      	bmi.n	8008332 <_Unwind_VRS_Pop+0x22e>
 80082e6:	2e0f      	cmp	r6, #15
 80082e8:	d804      	bhi.n	80082f4 <_Unwind_VRS_Pop+0x1f0>
 80082ea:	a822      	add	r0, sp, #136	; 0x88
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	f000 f861 	bl	80083b4 <__gnu_Unwind_Save_VFP_D>
 80082f2:	9b01      	ldr	r3, [sp, #4]
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	ac02      	add	r4, sp, #8
 80082f8:	4620      	mov	r0, r4
 80082fa:	f000 f863 	bl	80083c4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80082fe:	f1c6 0110 	rsb	r1, r6, #16
 8008302:	2900      	cmp	r1, #0
 8008304:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008306:	9b01      	ldr	r3, [sp, #4]
 8008308:	ddb6      	ble.n	8008278 <_Unwind_VRS_Pop+0x174>
 800830a:	ac22      	add	r4, sp, #136	; 0x88
 800830c:	004f      	lsls	r7, r1, #1
 800830e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008312:	4611      	mov	r1, r2
 8008314:	e7a3      	b.n	800825e <_Unwind_VRS_Pop+0x15a>
 8008316:	a822      	add	r0, sp, #136	; 0x88
 8008318:	f000 f848 	bl	80083ac <__gnu_Unwind_Restore_VFP_D>
 800831c:	e73d      	b.n	800819a <_Unwind_VRS_Pop+0x96>
 800831e:	f023 0310 	bic.w	r3, r3, #16
 8008322:	602b      	str	r3, [r5, #0]
 8008324:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 8008328:	9201      	str	r2, [sp, #4]
 800832a:	f000 f89d 	bl	8008468 <__gnu_Unwind_Save_WMMXC>
 800832e:	9a01      	ldr	r2, [sp, #4]
 8008330:	e701      	b.n	8008136 <_Unwind_VRS_Pop+0x32>
 8008332:	4628      	mov	r0, r5
 8008334:	f022 0204 	bic.w	r2, r2, #4
 8008338:	f840 2bd0 	str.w	r2, [r0], #208
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	f000 f841 	bl	80083c4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8008342:	9b01      	ldr	r3, [sp, #4]
 8008344:	e7cf      	b.n	80082e6 <_Unwind_VRS_Pop+0x1e2>
 8008346:	682a      	ldr	r2, [r5, #0]
 8008348:	e7cb      	b.n	80082e2 <_Unwind_VRS_Pop+0x1de>
 800834a:	07d0      	lsls	r0, r2, #31
 800834c:	d50a      	bpl.n	8008364 <_Unwind_VRS_Pop+0x260>
 800834e:	4628      	mov	r0, r5
 8008350:	f022 0201 	bic.w	r2, r2, #1
 8008354:	f042 0202 	orr.w	r2, r2, #2
 8008358:	f840 2b48 	str.w	r2, [r0], #72
 800835c:	9301      	str	r3, [sp, #4]
 800835e:	f000 f829 	bl	80083b4 <__gnu_Unwind_Save_VFP_D>
 8008362:	9b01      	ldr	r3, [sp, #4]
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	ac22      	add	r4, sp, #136	; 0x88
 8008368:	4620      	mov	r0, r4
 800836a:	f000 f823 	bl	80083b4 <__gnu_Unwind_Save_VFP_D>
 800836e:	46b8      	mov	r8, r7
 8008370:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8008372:	9b01      	ldr	r3, [sp, #4]
 8008374:	2f00      	cmp	r7, #0
 8008376:	f47f af6d 	bne.w	8008254 <_Unwind_VRS_Pop+0x150>
 800837a:	460a      	mov	r2, r1
 800837c:	e709      	b.n	8008192 <_Unwind_VRS_Pop+0x8e>
 800837e:	460a      	mov	r2, r1
 8008380:	e78d      	b.n	800829e <_Unwind_VRS_Pop+0x19a>
 8008382:	bf00      	nop

08008384 <__restore_core_regs>:
 8008384:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8008388:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 800838c:	469c      	mov	ip, r3
 800838e:	46a6      	mov	lr, r4
 8008390:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8008394:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8008398:	46e5      	mov	sp, ip
 800839a:	bd00      	pop	{pc}

0800839c <__gnu_Unwind_Restore_VFP>:
 800839c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop

080083a4 <__gnu_Unwind_Save_VFP>:
 80083a4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop

080083ac <__gnu_Unwind_Restore_VFP_D>:
 80083ac:	ec90 0b20 	vldmia	r0, {d0-d15}
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop

080083b4 <__gnu_Unwind_Save_VFP_D>:
 80083b4:	ec80 0b20 	vstmia	r0, {d0-d15}
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop

080083bc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80083bc:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop

080083c4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80083c4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop

080083cc <__gnu_Unwind_Restore_WMMXD>:
 80083cc:	ecf0 0102 	ldfe	f0, [r0], #8
 80083d0:	ecf0 1102 	ldfe	f1, [r0], #8
 80083d4:	ecf0 2102 	ldfe	f2, [r0], #8
 80083d8:	ecf0 3102 	ldfe	f3, [r0], #8
 80083dc:	ecf0 4102 	ldfe	f4, [r0], #8
 80083e0:	ecf0 5102 	ldfe	f5, [r0], #8
 80083e4:	ecf0 6102 	ldfe	f6, [r0], #8
 80083e8:	ecf0 7102 	ldfe	f7, [r0], #8
 80083ec:	ecf0 8102 	ldfp	f0, [r0], #8
 80083f0:	ecf0 9102 	ldfp	f1, [r0], #8
 80083f4:	ecf0 a102 	ldfp	f2, [r0], #8
 80083f8:	ecf0 b102 	ldfp	f3, [r0], #8
 80083fc:	ecf0 c102 	ldfp	f4, [r0], #8
 8008400:	ecf0 d102 	ldfp	f5, [r0], #8
 8008404:	ecf0 e102 	ldfp	f6, [r0], #8
 8008408:	ecf0 f102 	ldfp	f7, [r0], #8
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop

08008410 <__gnu_Unwind_Save_WMMXD>:
 8008410:	ece0 0102 	stfe	f0, [r0], #8
 8008414:	ece0 1102 	stfe	f1, [r0], #8
 8008418:	ece0 2102 	stfe	f2, [r0], #8
 800841c:	ece0 3102 	stfe	f3, [r0], #8
 8008420:	ece0 4102 	stfe	f4, [r0], #8
 8008424:	ece0 5102 	stfe	f5, [r0], #8
 8008428:	ece0 6102 	stfe	f6, [r0], #8
 800842c:	ece0 7102 	stfe	f7, [r0], #8
 8008430:	ece0 8102 	stfp	f0, [r0], #8
 8008434:	ece0 9102 	stfp	f1, [r0], #8
 8008438:	ece0 a102 	stfp	f2, [r0], #8
 800843c:	ece0 b102 	stfp	f3, [r0], #8
 8008440:	ece0 c102 	stfp	f4, [r0], #8
 8008444:	ece0 d102 	stfp	f5, [r0], #8
 8008448:	ece0 e102 	stfp	f6, [r0], #8
 800844c:	ece0 f102 	stfp	f7, [r0], #8
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop

08008454 <__gnu_Unwind_Restore_WMMXC>:
 8008454:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8008458:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800845c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8008460:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop

08008468 <__gnu_Unwind_Save_WMMXC>:
 8008468:	fca0 8101 	stc2	1, cr8, [r0], #4
 800846c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8008470:	fca0 a101 	stc2	1, cr10, [r0], #4
 8008474:	fca0 b101 	stc2	1, cr11, [r0], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop

0800847c <_Unwind_RaiseException>:
 800847c:	46ec      	mov	ip, sp
 800847e:	b500      	push	{lr}
 8008480:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008484:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008488:	f04f 0300 	mov.w	r3, #0
 800848c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008490:	a901      	add	r1, sp, #4
 8008492:	f7ff fbdd 	bl	8007c50 <__gnu_Unwind_RaiseException>
 8008496:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800849a:	b012      	add	sp, #72	; 0x48
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop

080084a0 <_Unwind_Resume>:
 80084a0:	46ec      	mov	ip, sp
 80084a2:	b500      	push	{lr}
 80084a4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80084a8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80084ac:	f04f 0300 	mov.w	r3, #0
 80084b0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80084b4:	a901      	add	r1, sp, #4
 80084b6:	f7ff fc05 	bl	8007cc4 <__gnu_Unwind_Resume>
 80084ba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80084be:	b012      	add	sp, #72	; 0x48
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop

080084c4 <_Unwind_Resume_or_Rethrow>:
 80084c4:	46ec      	mov	ip, sp
 80084c6:	b500      	push	{lr}
 80084c8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80084cc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80084d0:	f04f 0300 	mov.w	r3, #0
 80084d4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80084d8:	a901      	add	r1, sp, #4
 80084da:	f7ff fc15 	bl	8007d08 <__gnu_Unwind_Resume_or_Rethrow>
 80084de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80084e2:	b012      	add	sp, #72	; 0x48
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop

080084e8 <_Unwind_ForcedUnwind>:
 80084e8:	46ec      	mov	ip, sp
 80084ea:	b500      	push	{lr}
 80084ec:	e92d 5000 	stmdb	sp!, {ip, lr}
 80084f0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80084f4:	f04f 0300 	mov.w	r3, #0
 80084f8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80084fc:	ab01      	add	r3, sp, #4
 80084fe:	f7ff fbd7 	bl	8007cb0 <__gnu_Unwind_ForcedUnwind>
 8008502:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008506:	b012      	add	sp, #72	; 0x48
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop

0800850c <_Unwind_Backtrace>:
 800850c:	46ec      	mov	ip, sp
 800850e:	b500      	push	{lr}
 8008510:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008514:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008518:	f04f 0300 	mov.w	r3, #0
 800851c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008520:	aa01      	add	r2, sp, #4
 8008522:	f7ff fc47 	bl	8007db4 <__gnu_Unwind_Backtrace>
 8008526:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800852a:	b012      	add	sp, #72	; 0x48
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop

08008530 <next_unwind_byte>:
 8008530:	7a02      	ldrb	r2, [r0, #8]
 8008532:	b982      	cbnz	r2, 8008556 <next_unwind_byte+0x26>
 8008534:	7a43      	ldrb	r3, [r0, #9]
 8008536:	b1ab      	cbz	r3, 8008564 <next_unwind_byte+0x34>
 8008538:	6842      	ldr	r2, [r0, #4]
 800853a:	3b01      	subs	r3, #1
 800853c:	b410      	push	{r4}
 800853e:	7243      	strb	r3, [r0, #9]
 8008540:	6813      	ldr	r3, [r2, #0]
 8008542:	2103      	movs	r1, #3
 8008544:	1d14      	adds	r4, r2, #4
 8008546:	7201      	strb	r1, [r0, #8]
 8008548:	021a      	lsls	r2, r3, #8
 800854a:	6044      	str	r4, [r0, #4]
 800854c:	6002      	str	r2, [r0, #0]
 800854e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008552:	0e18      	lsrs	r0, r3, #24
 8008554:	4770      	bx	lr
 8008556:	6803      	ldr	r3, [r0, #0]
 8008558:	3a01      	subs	r2, #1
 800855a:	7202      	strb	r2, [r0, #8]
 800855c:	021a      	lsls	r2, r3, #8
 800855e:	6002      	str	r2, [r0, #0]
 8008560:	0e18      	lsrs	r0, r3, #24
 8008562:	4770      	bx	lr
 8008564:	20b0      	movs	r0, #176	; 0xb0
 8008566:	4770      	bx	lr

08008568 <_Unwind_GetGR.constprop.0>:
 8008568:	b500      	push	{lr}
 800856a:	b085      	sub	sp, #20
 800856c:	aa03      	add	r2, sp, #12
 800856e:	2300      	movs	r3, #0
 8008570:	9200      	str	r2, [sp, #0]
 8008572:	4619      	mov	r1, r3
 8008574:	220c      	movs	r2, #12
 8008576:	f7ff fbd7 	bl	8007d28 <_Unwind_VRS_Get>
 800857a:	9803      	ldr	r0, [sp, #12]
 800857c:	b005      	add	sp, #20
 800857e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008582:	bf00      	nop

08008584 <unwind_UCB_from_context>:
 8008584:	e7f0      	b.n	8008568 <_Unwind_GetGR.constprop.0>
 8008586:	bf00      	nop

08008588 <__gnu_unwind_execute>:
 8008588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800858c:	4605      	mov	r5, r0
 800858e:	b085      	sub	sp, #20
 8008590:	460e      	mov	r6, r1
 8008592:	f04f 0800 	mov.w	r8, #0
 8008596:	4630      	mov	r0, r6
 8008598:	f7ff ffca 	bl	8008530 <next_unwind_byte>
 800859c:	28b0      	cmp	r0, #176	; 0xb0
 800859e:	4604      	mov	r4, r0
 80085a0:	f000 80b1 	beq.w	8008706 <__gnu_unwind_execute+0x17e>
 80085a4:	0607      	lsls	r7, r0, #24
 80085a6:	d520      	bpl.n	80085ea <__gnu_unwind_execute+0x62>
 80085a8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80085ac:	2b80      	cmp	r3, #128	; 0x80
 80085ae:	d065      	beq.n	800867c <__gnu_unwind_execute+0xf4>
 80085b0:	2b90      	cmp	r3, #144	; 0x90
 80085b2:	d036      	beq.n	8008622 <__gnu_unwind_execute+0x9a>
 80085b4:	2ba0      	cmp	r3, #160	; 0xa0
 80085b6:	d078      	beq.n	80086aa <__gnu_unwind_execute+0x122>
 80085b8:	2bb0      	cmp	r3, #176	; 0xb0
 80085ba:	d047      	beq.n	800864c <__gnu_unwind_execute+0xc4>
 80085bc:	2bc0      	cmp	r3, #192	; 0xc0
 80085be:	f000 808a 	beq.w	80086d6 <__gnu_unwind_execute+0x14e>
 80085c2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80085c6:	2bd0      	cmp	r3, #208	; 0xd0
 80085c8:	d10b      	bne.n	80085e2 <__gnu_unwind_execute+0x5a>
 80085ca:	f000 0207 	and.w	r2, r0, #7
 80085ce:	3201      	adds	r2, #1
 80085d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80085d4:	2305      	movs	r3, #5
 80085d6:	2101      	movs	r1, #1
 80085d8:	4628      	mov	r0, r5
 80085da:	f7ff fd93 	bl	8008104 <_Unwind_VRS_Pop>
 80085de:	2800      	cmp	r0, #0
 80085e0:	d0d9      	beq.n	8008596 <__gnu_unwind_execute+0xe>
 80085e2:	2009      	movs	r0, #9
 80085e4:	b005      	add	sp, #20
 80085e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085ea:	f10d 090c 	add.w	r9, sp, #12
 80085ee:	2300      	movs	r3, #0
 80085f0:	4619      	mov	r1, r3
 80085f2:	0087      	lsls	r7, r0, #2
 80085f4:	f8cd 9000 	str.w	r9, [sp]
 80085f8:	220d      	movs	r2, #13
 80085fa:	4628      	mov	r0, r5
 80085fc:	f7ff fb94 	bl	8007d28 <_Unwind_VRS_Get>
 8008600:	b2ff      	uxtb	r7, r7
 8008602:	9b03      	ldr	r3, [sp, #12]
 8008604:	f8cd 9000 	str.w	r9, [sp]
 8008608:	3704      	adds	r7, #4
 800860a:	0660      	lsls	r0, r4, #25
 800860c:	bf4c      	ite	mi
 800860e:	1bdf      	submi	r7, r3, r7
 8008610:	18ff      	addpl	r7, r7, r3
 8008612:	2300      	movs	r3, #0
 8008614:	4619      	mov	r1, r3
 8008616:	220d      	movs	r2, #13
 8008618:	4628      	mov	r0, r5
 800861a:	9703      	str	r7, [sp, #12]
 800861c:	f7ff fba6 	bl	8007d6c <_Unwind_VRS_Set>
 8008620:	e7b9      	b.n	8008596 <__gnu_unwind_execute+0xe>
 8008622:	f000 030d 	and.w	r3, r0, #13
 8008626:	2b0d      	cmp	r3, #13
 8008628:	d0db      	beq.n	80085e2 <__gnu_unwind_execute+0x5a>
 800862a:	af03      	add	r7, sp, #12
 800862c:	2300      	movs	r3, #0
 800862e:	f000 020f 	and.w	r2, r0, #15
 8008632:	4619      	mov	r1, r3
 8008634:	9700      	str	r7, [sp, #0]
 8008636:	4628      	mov	r0, r5
 8008638:	f7ff fb76 	bl	8007d28 <_Unwind_VRS_Get>
 800863c:	2300      	movs	r3, #0
 800863e:	9700      	str	r7, [sp, #0]
 8008640:	4619      	mov	r1, r3
 8008642:	220d      	movs	r2, #13
 8008644:	4628      	mov	r0, r5
 8008646:	f7ff fb91 	bl	8007d6c <_Unwind_VRS_Set>
 800864a:	e7a4      	b.n	8008596 <__gnu_unwind_execute+0xe>
 800864c:	28b1      	cmp	r0, #177	; 0xb1
 800864e:	d05f      	beq.n	8008710 <__gnu_unwind_execute+0x188>
 8008650:	28b2      	cmp	r0, #178	; 0xb2
 8008652:	f000 80cc 	beq.w	80087ee <__gnu_unwind_execute+0x266>
 8008656:	28b3      	cmp	r0, #179	; 0xb3
 8008658:	d07e      	beq.n	8008758 <__gnu_unwind_execute+0x1d0>
 800865a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800865e:	2bb4      	cmp	r3, #180	; 0xb4
 8008660:	d0bf      	beq.n	80085e2 <__gnu_unwind_execute+0x5a>
 8008662:	f000 0207 	and.w	r2, r0, #7
 8008666:	3201      	adds	r2, #1
 8008668:	2301      	movs	r3, #1
 800866a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800866e:	4619      	mov	r1, r3
 8008670:	4628      	mov	r0, r5
 8008672:	f7ff fd47 	bl	8008104 <_Unwind_VRS_Pop>
 8008676:	2800      	cmp	r0, #0
 8008678:	d08d      	beq.n	8008596 <__gnu_unwind_execute+0xe>
 800867a:	e7b2      	b.n	80085e2 <__gnu_unwind_execute+0x5a>
 800867c:	4630      	mov	r0, r6
 800867e:	f7ff ff57 	bl	8008530 <next_unwind_byte>
 8008682:	0224      	lsls	r4, r4, #8
 8008684:	4304      	orrs	r4, r0
 8008686:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800868a:	d0aa      	beq.n	80085e2 <__gnu_unwind_execute+0x5a>
 800868c:	0124      	lsls	r4, r4, #4
 800868e:	2300      	movs	r3, #0
 8008690:	b2a2      	uxth	r2, r4
 8008692:	4619      	mov	r1, r3
 8008694:	4628      	mov	r0, r5
 8008696:	f7ff fd35 	bl	8008104 <_Unwind_VRS_Pop>
 800869a:	2800      	cmp	r0, #0
 800869c:	d1a1      	bne.n	80085e2 <__gnu_unwind_execute+0x5a>
 800869e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80086a2:	bf18      	it	ne
 80086a4:	f04f 0801 	movne.w	r8, #1
 80086a8:	e775      	b.n	8008596 <__gnu_unwind_execute+0xe>
 80086aa:	43c2      	mvns	r2, r0
 80086ac:	f002 0307 	and.w	r3, r2, #7
 80086b0:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80086b4:	411a      	asrs	r2, r3
 80086b6:	0701      	lsls	r1, r0, #28
 80086b8:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80086bc:	f04f 0300 	mov.w	r3, #0
 80086c0:	bf48      	it	mi
 80086c2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80086c6:	4619      	mov	r1, r3
 80086c8:	4628      	mov	r0, r5
 80086ca:	f7ff fd1b 	bl	8008104 <_Unwind_VRS_Pop>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	f43f af61 	beq.w	8008596 <__gnu_unwind_execute+0xe>
 80086d4:	e785      	b.n	80085e2 <__gnu_unwind_execute+0x5a>
 80086d6:	28c6      	cmp	r0, #198	; 0xc6
 80086d8:	d051      	beq.n	800877e <__gnu_unwind_execute+0x1f6>
 80086da:	28c7      	cmp	r0, #199	; 0xc7
 80086dc:	d05a      	beq.n	8008794 <__gnu_unwind_execute+0x20c>
 80086de:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80086e2:	2bc0      	cmp	r3, #192	; 0xc0
 80086e4:	d069      	beq.n	80087ba <__gnu_unwind_execute+0x232>
 80086e6:	28c8      	cmp	r0, #200	; 0xc8
 80086e8:	d075      	beq.n	80087d6 <__gnu_unwind_execute+0x24e>
 80086ea:	28c9      	cmp	r0, #201	; 0xc9
 80086ec:	f47f af79 	bne.w	80085e2 <__gnu_unwind_execute+0x5a>
 80086f0:	4630      	mov	r0, r6
 80086f2:	f7ff ff1d 	bl	8008530 <next_unwind_byte>
 80086f6:	0302      	lsls	r2, r0, #12
 80086f8:	f000 000f 	and.w	r0, r0, #15
 80086fc:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8008700:	3001      	adds	r0, #1
 8008702:	4302      	orrs	r2, r0
 8008704:	e766      	b.n	80085d4 <__gnu_unwind_execute+0x4c>
 8008706:	f1b8 0f00 	cmp.w	r8, #0
 800870a:	d014      	beq.n	8008736 <__gnu_unwind_execute+0x1ae>
 800870c:	2000      	movs	r0, #0
 800870e:	e769      	b.n	80085e4 <__gnu_unwind_execute+0x5c>
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff ff0d 	bl	8008530 <next_unwind_byte>
 8008716:	2800      	cmp	r0, #0
 8008718:	f43f af63 	beq.w	80085e2 <__gnu_unwind_execute+0x5a>
 800871c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008720:	f47f af5f 	bne.w	80085e2 <__gnu_unwind_execute+0x5a>
 8008724:	4602      	mov	r2, r0
 8008726:	4619      	mov	r1, r3
 8008728:	4628      	mov	r0, r5
 800872a:	f7ff fceb 	bl	8008104 <_Unwind_VRS_Pop>
 800872e:	2800      	cmp	r0, #0
 8008730:	f43f af31 	beq.w	8008596 <__gnu_unwind_execute+0xe>
 8008734:	e755      	b.n	80085e2 <__gnu_unwind_execute+0x5a>
 8008736:	ac03      	add	r4, sp, #12
 8008738:	4643      	mov	r3, r8
 800873a:	220e      	movs	r2, #14
 800873c:	4641      	mov	r1, r8
 800873e:	9400      	str	r4, [sp, #0]
 8008740:	4628      	mov	r0, r5
 8008742:	f7ff faf1 	bl	8007d28 <_Unwind_VRS_Get>
 8008746:	9400      	str	r4, [sp, #0]
 8008748:	4628      	mov	r0, r5
 800874a:	4643      	mov	r3, r8
 800874c:	220f      	movs	r2, #15
 800874e:	4641      	mov	r1, r8
 8008750:	f7ff fb0c 	bl	8007d6c <_Unwind_VRS_Set>
 8008754:	4640      	mov	r0, r8
 8008756:	e745      	b.n	80085e4 <__gnu_unwind_execute+0x5c>
 8008758:	4630      	mov	r0, r6
 800875a:	f7ff fee9 	bl	8008530 <next_unwind_byte>
 800875e:	0301      	lsls	r1, r0, #12
 8008760:	f000 000f 	and.w	r0, r0, #15
 8008764:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8008768:	1c42      	adds	r2, r0, #1
 800876a:	2301      	movs	r3, #1
 800876c:	430a      	orrs	r2, r1
 800876e:	4628      	mov	r0, r5
 8008770:	4619      	mov	r1, r3
 8008772:	f7ff fcc7 	bl	8008104 <_Unwind_VRS_Pop>
 8008776:	2800      	cmp	r0, #0
 8008778:	f43f af0d 	beq.w	8008596 <__gnu_unwind_execute+0xe>
 800877c:	e731      	b.n	80085e2 <__gnu_unwind_execute+0x5a>
 800877e:	4630      	mov	r0, r6
 8008780:	f7ff fed6 	bl	8008530 <next_unwind_byte>
 8008784:	0301      	lsls	r1, r0, #12
 8008786:	f000 000f 	and.w	r0, r0, #15
 800878a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800878e:	1c42      	adds	r2, r0, #1
 8008790:	2303      	movs	r3, #3
 8008792:	e7eb      	b.n	800876c <__gnu_unwind_execute+0x1e4>
 8008794:	4630      	mov	r0, r6
 8008796:	f7ff fecb 	bl	8008530 <next_unwind_byte>
 800879a:	4602      	mov	r2, r0
 800879c:	2800      	cmp	r0, #0
 800879e:	f43f af20 	beq.w	80085e2 <__gnu_unwind_execute+0x5a>
 80087a2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80087a6:	f47f af1c 	bne.w	80085e2 <__gnu_unwind_execute+0x5a>
 80087aa:	2104      	movs	r1, #4
 80087ac:	4628      	mov	r0, r5
 80087ae:	f7ff fca9 	bl	8008104 <_Unwind_VRS_Pop>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	f43f aeef 	beq.w	8008596 <__gnu_unwind_execute+0xe>
 80087b8:	e713      	b.n	80085e2 <__gnu_unwind_execute+0x5a>
 80087ba:	f000 020f 	and.w	r2, r0, #15
 80087be:	3201      	adds	r2, #1
 80087c0:	2303      	movs	r3, #3
 80087c2:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80087c6:	4619      	mov	r1, r3
 80087c8:	4628      	mov	r0, r5
 80087ca:	f7ff fc9b 	bl	8008104 <_Unwind_VRS_Pop>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	f43f aee1 	beq.w	8008596 <__gnu_unwind_execute+0xe>
 80087d4:	e705      	b.n	80085e2 <__gnu_unwind_execute+0x5a>
 80087d6:	4630      	mov	r0, r6
 80087d8:	f7ff feaa 	bl	8008530 <next_unwind_byte>
 80087dc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80087e0:	f000 030f 	and.w	r3, r0, #15
 80087e4:	3210      	adds	r2, #16
 80087e6:	3301      	adds	r3, #1
 80087e8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80087ec:	e6f2      	b.n	80085d4 <__gnu_unwind_execute+0x4c>
 80087ee:	2300      	movs	r3, #0
 80087f0:	f10d 090c 	add.w	r9, sp, #12
 80087f4:	220d      	movs	r2, #13
 80087f6:	4619      	mov	r1, r3
 80087f8:	f8cd 9000 	str.w	r9, [sp]
 80087fc:	4628      	mov	r0, r5
 80087fe:	f7ff fa93 	bl	8007d28 <_Unwind_VRS_Get>
 8008802:	4630      	mov	r0, r6
 8008804:	f7ff fe94 	bl	8008530 <next_unwind_byte>
 8008808:	0602      	lsls	r2, r0, #24
 800880a:	f04f 0702 	mov.w	r7, #2
 800880e:	d50c      	bpl.n	800882a <__gnu_unwind_execute+0x2a2>
 8008810:	9b03      	ldr	r3, [sp, #12]
 8008812:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008816:	40b8      	lsls	r0, r7
 8008818:	4403      	add	r3, r0
 800881a:	4630      	mov	r0, r6
 800881c:	9303      	str	r3, [sp, #12]
 800881e:	f7ff fe87 	bl	8008530 <next_unwind_byte>
 8008822:	0603      	lsls	r3, r0, #24
 8008824:	f107 0707 	add.w	r7, r7, #7
 8008828:	d4f2      	bmi.n	8008810 <__gnu_unwind_execute+0x288>
 800882a:	9b03      	ldr	r3, [sp, #12]
 800882c:	f8cd 9000 	str.w	r9, [sp]
 8008830:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8008834:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8008838:	40bc      	lsls	r4, r7
 800883a:	2300      	movs	r3, #0
 800883c:	4414      	add	r4, r2
 800883e:	4619      	mov	r1, r3
 8008840:	220d      	movs	r2, #13
 8008842:	4628      	mov	r0, r5
 8008844:	9403      	str	r4, [sp, #12]
 8008846:	f7ff fa91 	bl	8007d6c <_Unwind_VRS_Set>
 800884a:	e6a4      	b.n	8008596 <__gnu_unwind_execute+0xe>

0800884c <__gnu_unwind_frame>:
 800884c:	b510      	push	{r4, lr}
 800884e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008850:	b084      	sub	sp, #16
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	2003      	movs	r0, #3
 8008856:	f88d 000c 	strb.w	r0, [sp, #12]
 800885a:	79dc      	ldrb	r4, [r3, #7]
 800885c:	f88d 400d 	strb.w	r4, [sp, #13]
 8008860:	0212      	lsls	r2, r2, #8
 8008862:	3308      	adds	r3, #8
 8008864:	4608      	mov	r0, r1
 8008866:	a901      	add	r1, sp, #4
 8008868:	9201      	str	r2, [sp, #4]
 800886a:	9302      	str	r3, [sp, #8]
 800886c:	f7ff fe8c 	bl	8008588 <__gnu_unwind_execute>
 8008870:	b004      	add	sp, #16
 8008872:	bd10      	pop	{r4, pc}

08008874 <_Unwind_GetRegionStart>:
 8008874:	b508      	push	{r3, lr}
 8008876:	f7ff fe85 	bl	8008584 <unwind_UCB_from_context>
 800887a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800887c:	bd08      	pop	{r3, pc}
 800887e:	bf00      	nop

08008880 <_Unwind_GetLanguageSpecificData>:
 8008880:	b508      	push	{r3, lr}
 8008882:	f7ff fe7f 	bl	8008584 <unwind_UCB_from_context>
 8008886:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008888:	79c3      	ldrb	r3, [r0, #7]
 800888a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800888e:	3008      	adds	r0, #8
 8008890:	bd08      	pop	{r3, pc}
 8008892:	bf00      	nop

08008894 <_Unwind_GetDataRelBase>:
 8008894:	b508      	push	{r3, lr}
 8008896:	f009 fde9 	bl	801246c <abort>
 800889a:	bf00      	nop

0800889c <_Unwind_GetTextRelBase>:
 800889c:	b508      	push	{r3, lr}
 800889e:	f7ff fff9 	bl	8008894 <_Unwind_GetDataRelBase>
 80088a2:	bf00      	nop

080088a4 <__aeabi_idiv0>:
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop

080088a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80088ae:	2300      	movs	r3, #0
 80088b0:	607b      	str	r3, [r7, #4]
 80088b2:	4b10      	ldr	r3, [pc, #64]	; (80088f4 <MX_DMA_Init+0x4c>)
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	4a0f      	ldr	r2, [pc, #60]	; (80088f4 <MX_DMA_Init+0x4c>)
 80088b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80088bc:	6313      	str	r3, [r2, #48]	; 0x30
 80088be:	4b0d      	ldr	r3, [pc, #52]	; (80088f4 <MX_DMA_Init+0x4c>)
 80088c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088c6:	607b      	str	r3, [r7, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80088ca:	2200      	movs	r2, #0
 80088cc:	2100      	movs	r1, #0
 80088ce:	203a      	movs	r0, #58	; 0x3a
 80088d0:	f000 fc54 	bl	800917c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80088d4:	203a      	movs	r0, #58	; 0x3a
 80088d6:	f000 fc7d 	bl	80091d4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80088da:	2200      	movs	r2, #0
 80088dc:	2100      	movs	r1, #0
 80088de:	2046      	movs	r0, #70	; 0x46
 80088e0:	f000 fc4c 	bl	800917c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80088e4:	2046      	movs	r0, #70	; 0x46
 80088e6:	f000 fc75 	bl	80091d4 <HAL_NVIC_EnableIRQ>

}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	40023800 	.word	0x40023800

080088f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80088fe:	2300      	movs	r3, #0
 8008900:	607b      	str	r3, [r7, #4]
 8008902:	4b10      	ldr	r3, [pc, #64]	; (8008944 <MX_GPIO_Init+0x4c>)
 8008904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008906:	4a0f      	ldr	r2, [pc, #60]	; (8008944 <MX_GPIO_Init+0x4c>)
 8008908:	f043 0301 	orr.w	r3, r3, #1
 800890c:	6313      	str	r3, [r2, #48]	; 0x30
 800890e:	4b0d      	ldr	r3, [pc, #52]	; (8008944 <MX_GPIO_Init+0x4c>)
 8008910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	607b      	str	r3, [r7, #4]
 8008918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800891a:	2300      	movs	r3, #0
 800891c:	603b      	str	r3, [r7, #0]
 800891e:	4b09      	ldr	r3, [pc, #36]	; (8008944 <MX_GPIO_Init+0x4c>)
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	4a08      	ldr	r2, [pc, #32]	; (8008944 <MX_GPIO_Init+0x4c>)
 8008924:	f043 0302 	orr.w	r3, r3, #2
 8008928:	6313      	str	r3, [r2, #48]	; 0x30
 800892a:	4b06      	ldr	r3, [pc, #24]	; (8008944 <MX_GPIO_Init+0x4c>)
 800892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	603b      	str	r3, [r7, #0]
 8008934:	683b      	ldr	r3, [r7, #0]

}
 8008936:	bf00      	nop
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	40023800 	.word	0x40023800

08008948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800894e:	2300      	movs	r3, #0
 8008950:	607b      	str	r3, [r7, #4]
 8008952:	4b10      	ldr	r3, [pc, #64]	; (8008994 <HAL_MspInit+0x4c>)
 8008954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008956:	4a0f      	ldr	r2, [pc, #60]	; (8008994 <HAL_MspInit+0x4c>)
 8008958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800895c:	6453      	str	r3, [r2, #68]	; 0x44
 800895e:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <HAL_MspInit+0x4c>)
 8008960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008966:	607b      	str	r3, [r7, #4]
 8008968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800896a:	2300      	movs	r3, #0
 800896c:	603b      	str	r3, [r7, #0]
 800896e:	4b09      	ldr	r3, [pc, #36]	; (8008994 <HAL_MspInit+0x4c>)
 8008970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008972:	4a08      	ldr	r2, [pc, #32]	; (8008994 <HAL_MspInit+0x4c>)
 8008974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008978:	6413      	str	r3, [r2, #64]	; 0x40
 800897a:	4b06      	ldr	r3, [pc, #24]	; (8008994 <HAL_MspInit+0x4c>)
 800897c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	40023800 	.word	0x40023800

08008998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008998:	b480      	push	{r7}
 800899a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800899c:	bf00      	nop
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80089a6:	b480      	push	{r7}
 80089a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80089aa:	e7fe      	b.n	80089aa <HardFault_Handler+0x4>

080089ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80089ac:	b480      	push	{r7}
 80089ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80089b0:	e7fe      	b.n	80089b0 <MemManage_Handler+0x4>

080089b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80089b2:	b480      	push	{r7}
 80089b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80089b6:	e7fe      	b.n	80089b6 <BusFault_Handler+0x4>

080089b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80089b8:	b480      	push	{r7}
 80089ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80089bc:	e7fe      	b.n	80089bc <UsageFault_Handler+0x4>

080089be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80089be:	b480      	push	{r7}
 80089c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80089c2:	bf00      	nop
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80089cc:	b480      	push	{r7}
 80089ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80089d0:	bf00      	nop
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80089da:	b480      	push	{r7}
 80089dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80089de:	bf00      	nop
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80089ec:	f000 fa80 	bl	8008ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80089f0:	bf00      	nop
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80089f8:	4802      	ldr	r0, [pc, #8]	; (8008a04 <USART1_IRQHandler+0x10>)
 80089fa:	f002 fc89 	bl	800b310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80089fe:	bf00      	nop
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	2000100c 	.word	0x2000100c

08008a08 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008a0c:	4802      	ldr	r0, [pc, #8]	; (8008a18 <DMA2_Stream2_IRQHandler+0x10>)
 8008a0e:	f000 ff35 	bl	800987c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008a12:	bf00      	nop
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	20000fac 	.word	0x20000fac

08008a1c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008a20:	4802      	ldr	r0, [pc, #8]	; (8008a2c <DMA2_Stream7_IRQHandler+0x10>)
 8008a22:	f000 ff2b 	bl	800987c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8008a26:	bf00      	nop
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20000f4c 	.word	0x20000f4c

08008a30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008a30:	b480      	push	{r7}
 8008a32:	af00      	add	r7, sp, #0
	return 1;
 8008a34:	2301      	movs	r3, #1
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <_kill>:

int _kill(int pid, int sig)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008a4a:	f009 fd17 	bl	801247c <__errno>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	2316      	movs	r3, #22
 8008a52:	6013      	str	r3, [r2, #0]
	return -1;
 8008a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <_exit>:

void _exit (int status)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008a68:	f04f 31ff 	mov.w	r1, #4294967295
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff ffe7 	bl	8008a40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008a72:	e7fe      	b.n	8008a72 <_exit+0x12>

08008a74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a80:	2300      	movs	r3, #0
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	e00a      	b.n	8008a9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008a86:	f3af 8000 	nop.w
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	60ba      	str	r2, [r7, #8]
 8008a92:	b2ca      	uxtb	r2, r1
 8008a94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	dbf0      	blt.n	8008a86 <_read+0x12>
	}

return len;
 8008aa4:	687b      	ldr	r3, [r7, #4]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b086      	sub	sp, #24
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	60f8      	str	r0, [r7, #12]
 8008ab6:	60b9      	str	r1, [r7, #8]
 8008ab8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008aba:	2300      	movs	r3, #0
 8008abc:	617b      	str	r3, [r7, #20]
 8008abe:	e009      	b.n	8008ad4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	1c5a      	adds	r2, r3, #1
 8008ac4:	60ba      	str	r2, [r7, #8]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	617b      	str	r3, [r7, #20]
 8008ad4:	697a      	ldr	r2, [r7, #20]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	dbf1      	blt.n	8008ac0 <_write+0x12>
	}
	return len;
 8008adc:	687b      	ldr	r3, [r7, #4]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <_close>:

int _close(int file)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
	return -1;
 8008aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b0e:	605a      	str	r2, [r3, #4]
	return 0;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <_isatty>:

int _isatty(int file)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
	return 1;
 8008b26:	2301      	movs	r3, #1
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
	return 0;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
	...

08008b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008b58:	4a14      	ldr	r2, [pc, #80]	; (8008bac <_sbrk+0x5c>)
 8008b5a:	4b15      	ldr	r3, [pc, #84]	; (8008bb0 <_sbrk+0x60>)
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008b64:	4b13      	ldr	r3, [pc, #76]	; (8008bb4 <_sbrk+0x64>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d102      	bne.n	8008b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008b6c:	4b11      	ldr	r3, [pc, #68]	; (8008bb4 <_sbrk+0x64>)
 8008b6e:	4a12      	ldr	r2, [pc, #72]	; (8008bb8 <_sbrk+0x68>)
 8008b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008b72:	4b10      	ldr	r3, [pc, #64]	; (8008bb4 <_sbrk+0x64>)
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4413      	add	r3, r2
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d207      	bcs.n	8008b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008b80:	f009 fc7c 	bl	801247c <__errno>
 8008b84:	4602      	mov	r2, r0
 8008b86:	230c      	movs	r3, #12
 8008b88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8008b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8e:	e009      	b.n	8008ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008b90:	4b08      	ldr	r3, [pc, #32]	; (8008bb4 <_sbrk+0x64>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008b96:	4b07      	ldr	r3, [pc, #28]	; (8008bb4 <_sbrk+0x64>)
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	4a05      	ldr	r2, [pc, #20]	; (8008bb4 <_sbrk+0x64>)
 8008ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	20020000 	.word	0x20020000
 8008bb0:	00000400 	.word	0x00000400
 8008bb4:	200009dc 	.word	0x200009dc
 8008bb8:	20001060 	.word	0x20001060

08008bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008bc0:	4b08      	ldr	r3, [pc, #32]	; (8008be4 <SystemInit+0x28>)
 8008bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bc6:	4a07      	ldr	r2, [pc, #28]	; (8008be4 <SystemInit+0x28>)
 8008bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008bd0:	4b04      	ldr	r3, [pc, #16]	; (8008be4 <SystemInit+0x28>)
 8008bd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008bd6:	609a      	str	r2, [r3, #8]
#endif
}
 8008bd8:	bf00      	nop
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	e000ed00 	.word	0xe000ed00

08008be8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008bec:	4b11      	ldr	r3, [pc, #68]	; (8008c34 <MX_USART1_UART_Init+0x4c>)
 8008bee:	4a12      	ldr	r2, [pc, #72]	; (8008c38 <MX_USART1_UART_Init+0x50>)
 8008bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8008bf2:	4b10      	ldr	r3, [pc, #64]	; (8008c34 <MX_USART1_UART_Init+0x4c>)
 8008bf4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8008bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008bfa:	4b0e      	ldr	r3, [pc, #56]	; (8008c34 <MX_USART1_UART_Init+0x4c>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008c00:	4b0c      	ldr	r3, [pc, #48]	; (8008c34 <MX_USART1_UART_Init+0x4c>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008c06:	4b0b      	ldr	r3, [pc, #44]	; (8008c34 <MX_USART1_UART_Init+0x4c>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008c0c:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <MX_USART1_UART_Init+0x4c>)
 8008c0e:	220c      	movs	r2, #12
 8008c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c12:	4b08      	ldr	r3, [pc, #32]	; (8008c34 <MX_USART1_UART_Init+0x4c>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c18:	4b06      	ldr	r3, [pc, #24]	; (8008c34 <MX_USART1_UART_Init+0x4c>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008c1e:	4805      	ldr	r0, [pc, #20]	; (8008c34 <MX_USART1_UART_Init+0x4c>)
 8008c20:	f002 fa02 	bl	800b028 <HAL_UART_Init>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008c2a:	f003 fa67 	bl	800c0fc <Error_Handler>
  }

}
 8008c2e:	bf00      	nop
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	2000100c 	.word	0x2000100c
 8008c38:	40011000 	.word	0x40011000

08008c3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08a      	sub	sp, #40	; 0x28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c44:	f107 0314 	add.w	r3, r7, #20
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]
 8008c4c:	605a      	str	r2, [r3, #4]
 8008c4e:	609a      	str	r2, [r3, #8]
 8008c50:	60da      	str	r2, [r3, #12]
 8008c52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a4b      	ldr	r2, [pc, #300]	; (8008d88 <HAL_UART_MspInit+0x14c>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	f040 8090 	bne.w	8008d80 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008c60:	2300      	movs	r3, #0
 8008c62:	613b      	str	r3, [r7, #16]
 8008c64:	4b49      	ldr	r3, [pc, #292]	; (8008d8c <HAL_UART_MspInit+0x150>)
 8008c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c68:	4a48      	ldr	r2, [pc, #288]	; (8008d8c <HAL_UART_MspInit+0x150>)
 8008c6a:	f043 0310 	orr.w	r3, r3, #16
 8008c6e:	6453      	str	r3, [r2, #68]	; 0x44
 8008c70:	4b46      	ldr	r3, [pc, #280]	; (8008d8c <HAL_UART_MspInit+0x150>)
 8008c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c74:	f003 0310 	and.w	r3, r3, #16
 8008c78:	613b      	str	r3, [r7, #16]
 8008c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	4b42      	ldr	r3, [pc, #264]	; (8008d8c <HAL_UART_MspInit+0x150>)
 8008c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c84:	4a41      	ldr	r2, [pc, #260]	; (8008d8c <HAL_UART_MspInit+0x150>)
 8008c86:	f043 0302 	orr.w	r3, r3, #2
 8008c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8008c8c:	4b3f      	ldr	r3, [pc, #252]	; (8008d8c <HAL_UART_MspInit+0x150>)
 8008c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008c98:	23c0      	movs	r3, #192	; 0xc0
 8008c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008ca8:	2307      	movs	r3, #7
 8008caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008cac:	f107 0314 	add.w	r3, r7, #20
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4837      	ldr	r0, [pc, #220]	; (8008d90 <HAL_UART_MspInit+0x154>)
 8008cb4:	f001 f81c 	bl	8009cf0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8008cb8:	4b36      	ldr	r3, [pc, #216]	; (8008d94 <HAL_UART_MspInit+0x158>)
 8008cba:	4a37      	ldr	r2, [pc, #220]	; (8008d98 <HAL_UART_MspInit+0x15c>)
 8008cbc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8008cbe:	4b35      	ldr	r3, [pc, #212]	; (8008d94 <HAL_UART_MspInit+0x158>)
 8008cc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008cc4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008cc6:	4b33      	ldr	r3, [pc, #204]	; (8008d94 <HAL_UART_MspInit+0x158>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ccc:	4b31      	ldr	r3, [pc, #196]	; (8008d94 <HAL_UART_MspInit+0x158>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008cd2:	4b30      	ldr	r3, [pc, #192]	; (8008d94 <HAL_UART_MspInit+0x158>)
 8008cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008cd8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008cda:	4b2e      	ldr	r3, [pc, #184]	; (8008d94 <HAL_UART_MspInit+0x158>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ce0:	4b2c      	ldr	r3, [pc, #176]	; (8008d94 <HAL_UART_MspInit+0x158>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008ce6:	4b2b      	ldr	r3, [pc, #172]	; (8008d94 <HAL_UART_MspInit+0x158>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008cec:	4b29      	ldr	r3, [pc, #164]	; (8008d94 <HAL_UART_MspInit+0x158>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008cf2:	4b28      	ldr	r3, [pc, #160]	; (8008d94 <HAL_UART_MspInit+0x158>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008cf8:	4826      	ldr	r0, [pc, #152]	; (8008d94 <HAL_UART_MspInit+0x158>)
 8008cfa:	f000 faab 	bl	8009254 <HAL_DMA_Init>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8008d04:	f003 f9fa 	bl	800c0fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a22      	ldr	r2, [pc, #136]	; (8008d94 <HAL_UART_MspInit+0x158>)
 8008d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8008d0e:	4a21      	ldr	r2, [pc, #132]	; (8008d94 <HAL_UART_MspInit+0x158>)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8008d14:	4b21      	ldr	r3, [pc, #132]	; (8008d9c <HAL_UART_MspInit+0x160>)
 8008d16:	4a22      	ldr	r2, [pc, #136]	; (8008da0 <HAL_UART_MspInit+0x164>)
 8008d18:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8008d1a:	4b20      	ldr	r3, [pc, #128]	; (8008d9c <HAL_UART_MspInit+0x160>)
 8008d1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008d20:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008d22:	4b1e      	ldr	r3, [pc, #120]	; (8008d9c <HAL_UART_MspInit+0x160>)
 8008d24:	2240      	movs	r2, #64	; 0x40
 8008d26:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d28:	4b1c      	ldr	r3, [pc, #112]	; (8008d9c <HAL_UART_MspInit+0x160>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008d2e:	4b1b      	ldr	r3, [pc, #108]	; (8008d9c <HAL_UART_MspInit+0x160>)
 8008d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008d34:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008d36:	4b19      	ldr	r3, [pc, #100]	; (8008d9c <HAL_UART_MspInit+0x160>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008d3c:	4b17      	ldr	r3, [pc, #92]	; (8008d9c <HAL_UART_MspInit+0x160>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008d42:	4b16      	ldr	r3, [pc, #88]	; (8008d9c <HAL_UART_MspInit+0x160>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008d48:	4b14      	ldr	r3, [pc, #80]	; (8008d9c <HAL_UART_MspInit+0x160>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008d4e:	4b13      	ldr	r3, [pc, #76]	; (8008d9c <HAL_UART_MspInit+0x160>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008d54:	4811      	ldr	r0, [pc, #68]	; (8008d9c <HAL_UART_MspInit+0x160>)
 8008d56:	f000 fa7d 	bl	8009254 <HAL_DMA_Init>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8008d60:	f003 f9cc 	bl	800c0fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a0d      	ldr	r2, [pc, #52]	; (8008d9c <HAL_UART_MspInit+0x160>)
 8008d68:	631a      	str	r2, [r3, #48]	; 0x30
 8008d6a:	4a0c      	ldr	r2, [pc, #48]	; (8008d9c <HAL_UART_MspInit+0x160>)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008d70:	2200      	movs	r2, #0
 8008d72:	2100      	movs	r1, #0
 8008d74:	2025      	movs	r0, #37	; 0x25
 8008d76:	f000 fa01 	bl	800917c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008d7a:	2025      	movs	r0, #37	; 0x25
 8008d7c:	f000 fa2a 	bl	80091d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008d80:	bf00      	nop
 8008d82:	3728      	adds	r7, #40	; 0x28
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	40011000 	.word	0x40011000
 8008d8c:	40023800 	.word	0x40023800
 8008d90:	40020400 	.word	0x40020400
 8008d94:	20000fac 	.word	0x20000fac
 8008d98:	40026440 	.word	0x40026440
 8008d9c:	20000f4c 	.word	0x20000f4c
 8008da0:	400264b8 	.word	0x400264b8

08008da4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a0e      	ldr	r2, [pc, #56]	; (8008dec <HAL_UART_MspDeInit+0x48>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d116      	bne.n	8008de4 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8008db6:	4b0e      	ldr	r3, [pc, #56]	; (8008df0 <HAL_UART_MspDeInit+0x4c>)
 8008db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dba:	4a0d      	ldr	r2, [pc, #52]	; (8008df0 <HAL_UART_MspDeInit+0x4c>)
 8008dbc:	f023 0310 	bic.w	r3, r3, #16
 8008dc0:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8008dc2:	21c0      	movs	r1, #192	; 0xc0
 8008dc4:	480b      	ldr	r0, [pc, #44]	; (8008df4 <HAL_UART_MspDeInit+0x50>)
 8008dc6:	f001 fa75 	bl	800a2b4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 fc5c 	bl	800968c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 fc57 	bl	800968c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8008dde:	2025      	movs	r0, #37	; 0x25
 8008de0:	f000 fa10 	bl	8009204 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8008de4:	bf00      	nop
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	40011000 	.word	0x40011000
 8008df0:	40023800 	.word	0x40023800
 8008df4:	40020400 	.word	0x40020400

08008df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008dfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008dfe:	e003      	b.n	8008e08 <LoopCopyDataInit>

08008e00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008e00:	4b0c      	ldr	r3, [pc, #48]	; (8008e34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008e02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008e04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008e06:	3104      	adds	r1, #4

08008e08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008e08:	480b      	ldr	r0, [pc, #44]	; (8008e38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008e0a:	4b0c      	ldr	r3, [pc, #48]	; (8008e3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008e0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008e0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008e10:	d3f6      	bcc.n	8008e00 <CopyDataInit>
  ldr  r2, =_sbss
 8008e12:	4a0b      	ldr	r2, [pc, #44]	; (8008e40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008e14:	e002      	b.n	8008e1c <LoopFillZerobss>

08008e16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008e16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008e18:	f842 3b04 	str.w	r3, [r2], #4

08008e1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008e1c:	4b09      	ldr	r3, [pc, #36]	; (8008e44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008e1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008e20:	d3f9      	bcc.n	8008e16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008e22:	f7ff fecb 	bl	8008bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e26:	f009 fd55 	bl	80128d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e2a:	f003 f87f 	bl	800bf2c <main>
  bx  lr    
 8008e2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008e30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008e34:	08018a7c 	.word	0x08018a7c
  ldr  r0, =_sdata
 8008e38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008e3c:	200009c0 	.word	0x200009c0
  ldr  r2, =_sbss
 8008e40:	200009c0 	.word	0x200009c0
  ldr  r3, = _ebss
 8008e44:	20001060 	.word	0x20001060

08008e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e48:	e7fe      	b.n	8008e48 <ADC_IRQHandler>
	...

08008e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e50:	4b0e      	ldr	r3, [pc, #56]	; (8008e8c <HAL_Init+0x40>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a0d      	ldr	r2, [pc, #52]	; (8008e8c <HAL_Init+0x40>)
 8008e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e5c:	4b0b      	ldr	r3, [pc, #44]	; (8008e8c <HAL_Init+0x40>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a0a      	ldr	r2, [pc, #40]	; (8008e8c <HAL_Init+0x40>)
 8008e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e68:	4b08      	ldr	r3, [pc, #32]	; (8008e8c <HAL_Init+0x40>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a07      	ldr	r2, [pc, #28]	; (8008e8c <HAL_Init+0x40>)
 8008e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e74:	2003      	movs	r0, #3
 8008e76:	f000 f961 	bl	800913c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	f000 f808 	bl	8008e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e80:	f7ff fd62 	bl	8008948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	40023c00 	.word	0x40023c00

08008e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e98:	4b12      	ldr	r3, [pc, #72]	; (8008ee4 <HAL_InitTick+0x54>)
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	4b12      	ldr	r3, [pc, #72]	; (8008ee8 <HAL_InitTick+0x58>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 f9c4 	bl	800923c <HAL_SYSTICK_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e00e      	b.n	8008edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b0f      	cmp	r3, #15
 8008ec2:	d80a      	bhi.n	8008eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ecc:	f000 f956 	bl	800917c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ed0:	4a06      	ldr	r2, [pc, #24]	; (8008eec <HAL_InitTick+0x5c>)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	e000      	b.n	8008edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000000 	.word	0x20000000
 8008ee8:	20000008 	.word	0x20000008
 8008eec:	20000004 	.word	0x20000004

08008ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008ef4:	4b06      	ldr	r3, [pc, #24]	; (8008f10 <HAL_IncTick+0x20>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4b06      	ldr	r3, [pc, #24]	; (8008f14 <HAL_IncTick+0x24>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4413      	add	r3, r2
 8008f00:	4a04      	ldr	r2, [pc, #16]	; (8008f14 <HAL_IncTick+0x24>)
 8008f02:	6013      	str	r3, [r2, #0]
}
 8008f04:	bf00      	nop
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	20000008 	.word	0x20000008
 8008f14:	2000104c 	.word	0x2000104c

08008f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8008f1c:	4b03      	ldr	r3, [pc, #12]	; (8008f2c <HAL_GetTick+0x14>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	2000104c 	.word	0x2000104c

08008f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f003 0307 	and.w	r3, r3, #7
 8008f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f40:	4b0c      	ldr	r3, [pc, #48]	; (8008f74 <__NVIC_SetPriorityGrouping+0x44>)
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f62:	4a04      	ldr	r2, [pc, #16]	; (8008f74 <__NVIC_SetPriorityGrouping+0x44>)
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	60d3      	str	r3, [r2, #12]
}
 8008f68:	bf00      	nop
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	e000ed00 	.word	0xe000ed00

08008f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f7c:	4b04      	ldr	r3, [pc, #16]	; (8008f90 <__NVIC_GetPriorityGrouping+0x18>)
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	0a1b      	lsrs	r3, r3, #8
 8008f82:	f003 0307 	and.w	r3, r3, #7
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	e000ed00 	.word	0xe000ed00

08008f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	db0b      	blt.n	8008fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fa6:	79fb      	ldrb	r3, [r7, #7]
 8008fa8:	f003 021f 	and.w	r2, r3, #31
 8008fac:	4907      	ldr	r1, [pc, #28]	; (8008fcc <__NVIC_EnableIRQ+0x38>)
 8008fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fb2:	095b      	lsrs	r3, r3, #5
 8008fb4:	2001      	movs	r0, #1
 8008fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8008fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	e000e100 	.word	0xe000e100

08008fd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	db10      	blt.n	8009004 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fe2:	79fb      	ldrb	r3, [r7, #7]
 8008fe4:	f003 021f 	and.w	r2, r3, #31
 8008fe8:	4909      	ldr	r1, [pc, #36]	; (8009010 <__NVIC_DisableIRQ+0x40>)
 8008fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fee:	095b      	lsrs	r3, r3, #5
 8008ff0:	2001      	movs	r0, #1
 8008ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8008ff6:	3320      	adds	r3, #32
 8008ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008ffc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009000:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	e000e100 	.word	0xe000e100

08009014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	6039      	str	r1, [r7, #0]
 800901e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009024:	2b00      	cmp	r3, #0
 8009026:	db0a      	blt.n	800903e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	b2da      	uxtb	r2, r3
 800902c:	490c      	ldr	r1, [pc, #48]	; (8009060 <__NVIC_SetPriority+0x4c>)
 800902e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009032:	0112      	lsls	r2, r2, #4
 8009034:	b2d2      	uxtb	r2, r2
 8009036:	440b      	add	r3, r1
 8009038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800903c:	e00a      	b.n	8009054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	b2da      	uxtb	r2, r3
 8009042:	4908      	ldr	r1, [pc, #32]	; (8009064 <__NVIC_SetPriority+0x50>)
 8009044:	79fb      	ldrb	r3, [r7, #7]
 8009046:	f003 030f 	and.w	r3, r3, #15
 800904a:	3b04      	subs	r3, #4
 800904c:	0112      	lsls	r2, r2, #4
 800904e:	b2d2      	uxtb	r2, r2
 8009050:	440b      	add	r3, r1
 8009052:	761a      	strb	r2, [r3, #24]
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	e000e100 	.word	0xe000e100
 8009064:	e000ed00 	.word	0xe000ed00

08009068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009068:	b480      	push	{r7}
 800906a:	b089      	sub	sp, #36	; 0x24
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	f1c3 0307 	rsb	r3, r3, #7
 8009082:	2b04      	cmp	r3, #4
 8009084:	bf28      	it	cs
 8009086:	2304      	movcs	r3, #4
 8009088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	3304      	adds	r3, #4
 800908e:	2b06      	cmp	r3, #6
 8009090:	d902      	bls.n	8009098 <NVIC_EncodePriority+0x30>
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	3b03      	subs	r3, #3
 8009096:	e000      	b.n	800909a <NVIC_EncodePriority+0x32>
 8009098:	2300      	movs	r3, #0
 800909a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800909c:	f04f 32ff 	mov.w	r2, #4294967295
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	fa02 f303 	lsl.w	r3, r2, r3
 80090a6:	43da      	mvns	r2, r3
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	401a      	ands	r2, r3
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090b0:	f04f 31ff 	mov.w	r1, #4294967295
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	fa01 f303 	lsl.w	r3, r1, r3
 80090ba:	43d9      	mvns	r1, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090c0:	4313      	orrs	r3, r2
         );
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3724      	adds	r7, #36	; 0x24
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
	...

080090d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80090d0:	b480      	push	{r7}
 80090d2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80090d4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80090d8:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <__NVIC_SystemReset+0x20>)
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80090e0:	4903      	ldr	r1, [pc, #12]	; (80090f0 <__NVIC_SystemReset+0x20>)
 80090e2:	4b04      	ldr	r3, [pc, #16]	; (80090f4 <__NVIC_SystemReset+0x24>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	60cb      	str	r3, [r1, #12]
 80090e8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80090ec:	bf00      	nop
 80090ee:	e7fd      	b.n	80090ec <__NVIC_SystemReset+0x1c>
 80090f0:	e000ed00 	.word	0xe000ed00
 80090f4:	05fa0004 	.word	0x05fa0004

080090f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	3b01      	subs	r3, #1
 8009104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009108:	d301      	bcc.n	800910e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800910a:	2301      	movs	r3, #1
 800910c:	e00f      	b.n	800912e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800910e:	4a0a      	ldr	r2, [pc, #40]	; (8009138 <SysTick_Config+0x40>)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3b01      	subs	r3, #1
 8009114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009116:	210f      	movs	r1, #15
 8009118:	f04f 30ff 	mov.w	r0, #4294967295
 800911c:	f7ff ff7a 	bl	8009014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009120:	4b05      	ldr	r3, [pc, #20]	; (8009138 <SysTick_Config+0x40>)
 8009122:	2200      	movs	r2, #0
 8009124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009126:	4b04      	ldr	r3, [pc, #16]	; (8009138 <SysTick_Config+0x40>)
 8009128:	2207      	movs	r2, #7
 800912a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	e000e010 	.word	0xe000e010

0800913c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b07      	cmp	r3, #7
 8009148:	d00f      	beq.n	800916a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b06      	cmp	r3, #6
 800914e:	d00c      	beq.n	800916a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b05      	cmp	r3, #5
 8009154:	d009      	beq.n	800916a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b04      	cmp	r3, #4
 800915a:	d006      	beq.n	800916a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b03      	cmp	r3, #3
 8009160:	d003      	beq.n	800916a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009162:	2192      	movs	r1, #146	; 0x92
 8009164:	4804      	ldr	r0, [pc, #16]	; (8009178 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8009166:	f002 ffce 	bl	800c106 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff fee0 	bl	8008f30 <__NVIC_SetPriorityGrouping>
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	08016608 	.word	0x08016608

0800917c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800918a:	2300      	movs	r3, #0
 800918c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b0f      	cmp	r3, #15
 8009192:	d903      	bls.n	800919c <HAL_NVIC_SetPriority+0x20>
 8009194:	21aa      	movs	r1, #170	; 0xaa
 8009196:	480e      	ldr	r0, [pc, #56]	; (80091d0 <HAL_NVIC_SetPriority+0x54>)
 8009198:	f002 ffb5 	bl	800c106 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2b0f      	cmp	r3, #15
 80091a0:	d903      	bls.n	80091aa <HAL_NVIC_SetPriority+0x2e>
 80091a2:	21ab      	movs	r1, #171	; 0xab
 80091a4:	480a      	ldr	r0, [pc, #40]	; (80091d0 <HAL_NVIC_SetPriority+0x54>)
 80091a6:	f002 ffae 	bl	800c106 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80091aa:	f7ff fee5 	bl	8008f78 <__NVIC_GetPriorityGrouping>
 80091ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	6978      	ldr	r0, [r7, #20]
 80091b6:	f7ff ff57 	bl	8009068 <NVIC_EncodePriority>
 80091ba:	4602      	mov	r2, r0
 80091bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091c0:	4611      	mov	r1, r2
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7ff ff26 	bl	8009014 <__NVIC_SetPriority>
}
 80091c8:	bf00      	nop
 80091ca:	3718      	adds	r7, #24
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	08016608 	.word	0x08016608

080091d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80091de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	da03      	bge.n	80091ee <HAL_NVIC_EnableIRQ+0x1a>
 80091e6:	21be      	movs	r1, #190	; 0xbe
 80091e8:	4805      	ldr	r0, [pc, #20]	; (8009200 <HAL_NVIC_EnableIRQ+0x2c>)
 80091ea:	f002 ff8c 	bl	800c106 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80091ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7ff fece 	bl	8008f94 <__NVIC_EnableIRQ>
}
 80091f8:	bf00      	nop
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	08016608 	.word	0x08016608

08009204 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800920e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009212:	2b00      	cmp	r3, #0
 8009214:	da03      	bge.n	800921e <HAL_NVIC_DisableIRQ+0x1a>
 8009216:	21ce      	movs	r1, #206	; 0xce
 8009218:	4805      	ldr	r0, [pc, #20]	; (8009230 <HAL_NVIC_DisableIRQ+0x2c>)
 800921a:	f002 ff74 	bl	800c106 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800921e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009222:	4618      	mov	r0, r3
 8009224:	f7ff fed4 	bl	8008fd0 <__NVIC_DisableIRQ>
}
 8009228:	bf00      	nop
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	08016608 	.word	0x08016608

08009234 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009238:	f7ff ff4a 	bl	80090d0 <__NVIC_SystemReset>

0800923c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff ff57 	bl	80090f8 <SysTick_Config>
 800924a:	4603      	mov	r3, r0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800925c:	2300      	movs	r3, #0
 800925e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009260:	f7ff fe5a 	bl	8008f18 <HAL_GetTick>
 8009264:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e204      	b.n	800967a <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a97      	ldr	r2, [pc, #604]	; (80094d4 <HAL_DMA_Init+0x280>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d04e      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a96      	ldr	r2, [pc, #600]	; (80094d8 <HAL_DMA_Init+0x284>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d049      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a94      	ldr	r2, [pc, #592]	; (80094dc <HAL_DMA_Init+0x288>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d044      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a93      	ldr	r2, [pc, #588]	; (80094e0 <HAL_DMA_Init+0x28c>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d03f      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a91      	ldr	r2, [pc, #580]	; (80094e4 <HAL_DMA_Init+0x290>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d03a      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a90      	ldr	r2, [pc, #576]	; (80094e8 <HAL_DMA_Init+0x294>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d035      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a8e      	ldr	r2, [pc, #568]	; (80094ec <HAL_DMA_Init+0x298>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d030      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a8d      	ldr	r2, [pc, #564]	; (80094f0 <HAL_DMA_Init+0x29c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d02b      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a8b      	ldr	r2, [pc, #556]	; (80094f4 <HAL_DMA_Init+0x2a0>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d026      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a8a      	ldr	r2, [pc, #552]	; (80094f8 <HAL_DMA_Init+0x2a4>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d021      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a88      	ldr	r2, [pc, #544]	; (80094fc <HAL_DMA_Init+0x2a8>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d01c      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a87      	ldr	r2, [pc, #540]	; (8009500 <HAL_DMA_Init+0x2ac>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d017      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a85      	ldr	r2, [pc, #532]	; (8009504 <HAL_DMA_Init+0x2b0>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d012      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a84      	ldr	r2, [pc, #528]	; (8009508 <HAL_DMA_Init+0x2b4>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d00d      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a82      	ldr	r2, [pc, #520]	; (800950c <HAL_DMA_Init+0x2b8>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d008      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a81      	ldr	r2, [pc, #516]	; (8009510 <HAL_DMA_Init+0x2bc>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d003      	beq.n	8009318 <HAL_DMA_Init+0xc4>
 8009310:	21b8      	movs	r1, #184	; 0xb8
 8009312:	4880      	ldr	r0, [pc, #512]	; (8009514 <HAL_DMA_Init+0x2c0>)
 8009314:	f002 fef7 	bl	800c106 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d026      	beq.n	800936e <HAL_DMA_Init+0x11a>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009328:	d021      	beq.n	800936e <HAL_DMA_Init+0x11a>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009332:	d01c      	beq.n	800936e <HAL_DMA_Init+0x11a>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800933c:	d017      	beq.n	800936e <HAL_DMA_Init+0x11a>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009346:	d012      	beq.n	800936e <HAL_DMA_Init+0x11a>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8009350:	d00d      	beq.n	800936e <HAL_DMA_Init+0x11a>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800935a:	d008      	beq.n	800936e <HAL_DMA_Init+0x11a>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8009364:	d003      	beq.n	800936e <HAL_DMA_Init+0x11a>
 8009366:	21b9      	movs	r1, #185	; 0xb9
 8009368:	486a      	ldr	r0, [pc, #424]	; (8009514 <HAL_DMA_Init+0x2c0>)
 800936a:	f002 fecc 	bl	800c106 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00b      	beq.n	800938e <HAL_DMA_Init+0x13a>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	2b40      	cmp	r3, #64	; 0x40
 800937c:	d007      	beq.n	800938e <HAL_DMA_Init+0x13a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	2b80      	cmp	r3, #128	; 0x80
 8009384:	d003      	beq.n	800938e <HAL_DMA_Init+0x13a>
 8009386:	21ba      	movs	r1, #186	; 0xba
 8009388:	4862      	ldr	r0, [pc, #392]	; (8009514 <HAL_DMA_Init+0x2c0>)
 800938a:	f002 febc 	bl	800c106 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009396:	d007      	beq.n	80093a8 <HAL_DMA_Init+0x154>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d003      	beq.n	80093a8 <HAL_DMA_Init+0x154>
 80093a0:	21bb      	movs	r1, #187	; 0xbb
 80093a2:	485c      	ldr	r0, [pc, #368]	; (8009514 <HAL_DMA_Init+0x2c0>)
 80093a4:	f002 feaf 	bl	800c106 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093b0:	d007      	beq.n	80093c2 <HAL_DMA_Init+0x16e>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <HAL_DMA_Init+0x16e>
 80093ba:	21bc      	movs	r1, #188	; 0xbc
 80093bc:	4855      	ldr	r0, [pc, #340]	; (8009514 <HAL_DMA_Init+0x2c0>)
 80093be:	f002 fea2 	bl	800c106 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00d      	beq.n	80093e6 <HAL_DMA_Init+0x192>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093d2:	d008      	beq.n	80093e6 <HAL_DMA_Init+0x192>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093dc:	d003      	beq.n	80093e6 <HAL_DMA_Init+0x192>
 80093de:	21bd      	movs	r1, #189	; 0xbd
 80093e0:	484c      	ldr	r0, [pc, #304]	; (8009514 <HAL_DMA_Init+0x2c0>)
 80093e2:	f002 fe90 	bl	800c106 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00d      	beq.n	800940a <HAL_DMA_Init+0x1b6>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093f6:	d008      	beq.n	800940a <HAL_DMA_Init+0x1b6>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009400:	d003      	beq.n	800940a <HAL_DMA_Init+0x1b6>
 8009402:	21be      	movs	r1, #190	; 0xbe
 8009404:	4843      	ldr	r0, [pc, #268]	; (8009514 <HAL_DMA_Init+0x2c0>)
 8009406:	f002 fe7e 	bl	800c106 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	69db      	ldr	r3, [r3, #28]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00c      	beq.n	800942c <HAL_DMA_Init+0x1d8>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800941a:	d007      	beq.n	800942c <HAL_DMA_Init+0x1d8>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	69db      	ldr	r3, [r3, #28]
 8009420:	2b20      	cmp	r3, #32
 8009422:	d003      	beq.n	800942c <HAL_DMA_Init+0x1d8>
 8009424:	21bf      	movs	r1, #191	; 0xbf
 8009426:	483b      	ldr	r0, [pc, #236]	; (8009514 <HAL_DMA_Init+0x2c0>)
 8009428:	f002 fe6d 	bl	800c106 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a1b      	ldr	r3, [r3, #32]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d012      	beq.n	800945a <HAL_DMA_Init+0x206>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a1b      	ldr	r3, [r3, #32]
 8009438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800943c:	d00d      	beq.n	800945a <HAL_DMA_Init+0x206>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009446:	d008      	beq.n	800945a <HAL_DMA_Init+0x206>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009450:	d003      	beq.n	800945a <HAL_DMA_Init+0x206>
 8009452:	21c0      	movs	r1, #192	; 0xc0
 8009454:	482f      	ldr	r0, [pc, #188]	; (8009514 <HAL_DMA_Init+0x2c0>)
 8009456:	f002 fe56 	bl	800c106 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	2b00      	cmp	r3, #0
 8009460:	d007      	beq.n	8009472 <HAL_DMA_Init+0x21e>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	2b04      	cmp	r3, #4
 8009468:	d003      	beq.n	8009472 <HAL_DMA_Init+0x21e>
 800946a:	21c1      	movs	r1, #193	; 0xc1
 800946c:	4829      	ldr	r0, [pc, #164]	; (8009514 <HAL_DMA_Init+0x2c0>)
 800946e:	f002 fe4a 	bl	800c106 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009476:	2b00      	cmp	r3, #0
 8009478:	d065      	beq.n	8009546 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00f      	beq.n	80094a2 <HAL_DMA_Init+0x24e>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009486:	2b01      	cmp	r3, #1
 8009488:	d00b      	beq.n	80094a2 <HAL_DMA_Init+0x24e>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948e:	2b02      	cmp	r3, #2
 8009490:	d007      	beq.n	80094a2 <HAL_DMA_Init+0x24e>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009496:	2b03      	cmp	r3, #3
 8009498:	d003      	beq.n	80094a2 <HAL_DMA_Init+0x24e>
 800949a:	21c6      	movs	r1, #198	; 0xc6
 800949c:	481d      	ldr	r0, [pc, #116]	; (8009514 <HAL_DMA_Init+0x2c0>)
 800949e:	f002 fe32 	bl	800c106 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d036      	beq.n	8009518 <HAL_DMA_Init+0x2c4>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094b2:	d031      	beq.n	8009518 <HAL_DMA_Init+0x2c4>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80094bc:	d02c      	beq.n	8009518 <HAL_DMA_Init+0x2c4>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80094c6:	d027      	beq.n	8009518 <HAL_DMA_Init+0x2c4>
 80094c8:	21c7      	movs	r1, #199	; 0xc7
 80094ca:	4812      	ldr	r0, [pc, #72]	; (8009514 <HAL_DMA_Init+0x2c0>)
 80094cc:	f002 fe1b 	bl	800c106 <assert_failed>
 80094d0:	e022      	b.n	8009518 <HAL_DMA_Init+0x2c4>
 80094d2:	bf00      	nop
 80094d4:	40026010 	.word	0x40026010
 80094d8:	40026028 	.word	0x40026028
 80094dc:	40026040 	.word	0x40026040
 80094e0:	40026058 	.word	0x40026058
 80094e4:	40026070 	.word	0x40026070
 80094e8:	40026088 	.word	0x40026088
 80094ec:	400260a0 	.word	0x400260a0
 80094f0:	400260b8 	.word	0x400260b8
 80094f4:	40026410 	.word	0x40026410
 80094f8:	40026428 	.word	0x40026428
 80094fc:	40026440 	.word	0x40026440
 8009500:	40026458 	.word	0x40026458
 8009504:	40026470 	.word	0x40026470
 8009508:	40026488 	.word	0x40026488
 800950c:	400264a0 	.word	0x400264a0
 8009510:	400264b8 	.word	0x400264b8
 8009514:	08016644 	.word	0x08016644
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951c:	2b00      	cmp	r3, #0
 800951e:	d012      	beq.n	8009546 <HAL_DMA_Init+0x2f2>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009528:	d00d      	beq.n	8009546 <HAL_DMA_Init+0x2f2>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009532:	d008      	beq.n	8009546 <HAL_DMA_Init+0x2f2>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009538:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800953c:	d003      	beq.n	8009546 <HAL_DMA_Init+0x2f2>
 800953e:	21c8      	movs	r1, #200	; 0xc8
 8009540:	4850      	ldr	r0, [pc, #320]	; (8009684 <HAL_DMA_Init+0x430>)
 8009542:	f002 fde0 	bl	800c106 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2202      	movs	r2, #2
 8009552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f022 0201 	bic.w	r2, r2, #1
 8009564:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009566:	e00f      	b.n	8009588 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009568:	f7ff fcd6 	bl	8008f18 <HAL_GetTick>
 800956c:	4602      	mov	r2, r0
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	2b05      	cmp	r3, #5
 8009574:	d908      	bls.n	8009588 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2220      	movs	r2, #32
 800957a:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2203      	movs	r2, #3
 8009580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009584:	2303      	movs	r3, #3
 8009586:	e078      	b.n	800967a <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1e8      	bne.n	8009568 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	4b39      	ldr	r3, [pc, #228]	; (8009688 <HAL_DMA_Init+0x434>)
 80095a2:	4013      	ands	r3, r2
 80095a4:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80095b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80095c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80095cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	2b04      	cmp	r3, #4
 80095e0:	d107      	bne.n	80095f2 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ea:	4313      	orrs	r3, r2
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	695b      	ldr	r3, [r3, #20]
 8009600:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f023 0307 	bic.w	r3, r3, #7
 8009608:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	4313      	orrs	r3, r2
 8009612:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	2b04      	cmp	r3, #4
 800961a:	d117      	bne.n	800964c <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	4313      	orrs	r3, r2
 8009624:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00e      	beq.n	800964c <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fae4 	bl	8009bfc <DMA_CheckFifoParam>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d008      	beq.n	800964c <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2240      	movs	r2, #64	; 0x40
 800963e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009648:	2301      	movs	r3, #1
 800964a:	e016      	b.n	800967a <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fa9b 	bl	8009b90 <DMA_CalcBaseAndBitshift>
 800965a:	4603      	mov	r3, r0
 800965c:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009662:	223f      	movs	r2, #63	; 0x3f
 8009664:	409a      	lsls	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	08016644 	.word	0x08016644
 8009688:	f010803f 	.word	0xf010803f

0800968c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d101      	bne.n	800969e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e0a5      	b.n	80097ea <HAL_DMA_DeInit+0x15e>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d101      	bne.n	80096ae <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80096aa:	2302      	movs	r3, #2
 80096ac:	e09d      	b.n	80097ea <HAL_DMA_DeInit+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a50      	ldr	r2, [pc, #320]	; (80097f4 <HAL_DMA_DeInit+0x168>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d04f      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a4e      	ldr	r2, [pc, #312]	; (80097f8 <HAL_DMA_DeInit+0x16c>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d04a      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a4d      	ldr	r2, [pc, #308]	; (80097fc <HAL_DMA_DeInit+0x170>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d045      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a4b      	ldr	r2, [pc, #300]	; (8009800 <HAL_DMA_DeInit+0x174>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d040      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a4a      	ldr	r2, [pc, #296]	; (8009804 <HAL_DMA_DeInit+0x178>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d03b      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a48      	ldr	r2, [pc, #288]	; (8009808 <HAL_DMA_DeInit+0x17c>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d036      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a47      	ldr	r2, [pc, #284]	; (800980c <HAL_DMA_DeInit+0x180>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d031      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a45      	ldr	r2, [pc, #276]	; (8009810 <HAL_DMA_DeInit+0x184>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d02c      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a44      	ldr	r2, [pc, #272]	; (8009814 <HAL_DMA_DeInit+0x188>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d027      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a42      	ldr	r2, [pc, #264]	; (8009818 <HAL_DMA_DeInit+0x18c>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d022      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a41      	ldr	r2, [pc, #260]	; (800981c <HAL_DMA_DeInit+0x190>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d01d      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a3f      	ldr	r2, [pc, #252]	; (8009820 <HAL_DMA_DeInit+0x194>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d018      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a3e      	ldr	r2, [pc, #248]	; (8009824 <HAL_DMA_DeInit+0x198>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d013      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a3c      	ldr	r2, [pc, #240]	; (8009828 <HAL_DMA_DeInit+0x19c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d00e      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a3b      	ldr	r2, [pc, #236]	; (800982c <HAL_DMA_DeInit+0x1a0>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d009      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a39      	ldr	r2, [pc, #228]	; (8009830 <HAL_DMA_DeInit+0x1a4>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d004      	beq.n	8009758 <HAL_DMA_DeInit+0xcc>
 800974e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009752:	4838      	ldr	r0, [pc, #224]	; (8009834 <HAL_DMA_DeInit+0x1a8>)
 8009754:	f002 fcd7 	bl	800c106 <assert_failed>

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 0201 	bic.w	r2, r2, #1
 8009766:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2200      	movs	r2, #0
 800976e:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2200      	movs	r2, #0
 8009776:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2200      	movs	r2, #0
 800977e:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2200      	movs	r2, #0
 8009786:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2200      	movs	r2, #0
 800978e:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2221      	movs	r2, #33	; 0x21
 8009796:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f9f9 	bl	8009b90 <DMA_CalcBaseAndBitshift>
 800979e:	4603      	mov	r3, r0
 80097a0:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ca:	223f      	movs	r2, #63	; 0x3f
 80097cc:	409a      	lsls	r2, r3
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	40026010 	.word	0x40026010
 80097f8:	40026028 	.word	0x40026028
 80097fc:	40026040 	.word	0x40026040
 8009800:	40026058 	.word	0x40026058
 8009804:	40026070 	.word	0x40026070
 8009808:	40026088 	.word	0x40026088
 800980c:	400260a0 	.word	0x400260a0
 8009810:	400260b8 	.word	0x400260b8
 8009814:	40026410 	.word	0x40026410
 8009818:	40026428 	.word	0x40026428
 800981c:	40026440 	.word	0x40026440
 8009820:	40026458 	.word	0x40026458
 8009824:	40026470 	.word	0x40026470
 8009828:	40026488 	.word	0x40026488
 800982c:	400264a0 	.word	0x400264a0
 8009830:	400264b8 	.word	0x400264b8
 8009834:	08016644 	.word	0x08016644

08009838 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b02      	cmp	r3, #2
 800984a:	d004      	beq.n	8009856 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2280      	movs	r2, #128	; 0x80
 8009850:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e00c      	b.n	8009870 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2205      	movs	r2, #5
 800985a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f022 0201 	bic.w	r2, r2, #1
 800986c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009884:	2300      	movs	r3, #0
 8009886:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009888:	4b92      	ldr	r3, [pc, #584]	; (8009ad4 <HAL_DMA_IRQHandler+0x258>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a92      	ldr	r2, [pc, #584]	; (8009ad8 <HAL_DMA_IRQHandler+0x25c>)
 800988e:	fba2 2303 	umull	r2, r3, r2, r3
 8009892:	0a9b      	lsrs	r3, r3, #10
 8009894:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098a6:	2208      	movs	r2, #8
 80098a8:	409a      	lsls	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4013      	ands	r3, r2
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d01a      	beq.n	80098e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 0304 	and.w	r3, r3, #4
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d013      	beq.n	80098e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f022 0204 	bic.w	r2, r2, #4
 80098ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098d4:	2208      	movs	r2, #8
 80098d6:	409a      	lsls	r2, r3
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e0:	f043 0201 	orr.w	r2, r3, #1
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ec:	2201      	movs	r2, #1
 80098ee:	409a      	lsls	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4013      	ands	r3, r2
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d012      	beq.n	800991e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00b      	beq.n	800991e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800990a:	2201      	movs	r2, #1
 800990c:	409a      	lsls	r2, r3
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009916:	f043 0202 	orr.w	r2, r3, #2
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009922:	2204      	movs	r2, #4
 8009924:	409a      	lsls	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	4013      	ands	r3, r2
 800992a:	2b00      	cmp	r3, #0
 800992c:	d012      	beq.n	8009954 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00b      	beq.n	8009954 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009940:	2204      	movs	r2, #4
 8009942:	409a      	lsls	r2, r3
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800994c:	f043 0204 	orr.w	r2, r3, #4
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009958:	2210      	movs	r2, #16
 800995a:	409a      	lsls	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4013      	ands	r3, r2
 8009960:	2b00      	cmp	r3, #0
 8009962:	d043      	beq.n	80099ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0308 	and.w	r3, r3, #8
 800996e:	2b00      	cmp	r3, #0
 8009970:	d03c      	beq.n	80099ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009976:	2210      	movs	r2, #16
 8009978:	409a      	lsls	r2, r3
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009988:	2b00      	cmp	r3, #0
 800998a:	d018      	beq.n	80099be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d108      	bne.n	80099ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d024      	beq.n	80099ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	4798      	blx	r3
 80099aa:	e01f      	b.n	80099ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d01b      	beq.n	80099ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	4798      	blx	r3
 80099bc:	e016      	b.n	80099ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d107      	bne.n	80099dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f022 0208 	bic.w	r2, r2, #8
 80099da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d003      	beq.n	80099ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099f0:	2220      	movs	r2, #32
 80099f2:	409a      	lsls	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	4013      	ands	r3, r2
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f000 808e 	beq.w	8009b1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0310 	and.w	r3, r3, #16
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 8086 	beq.w	8009b1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a12:	2220      	movs	r2, #32
 8009a14:	409a      	lsls	r2, r3
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	2b05      	cmp	r3, #5
 8009a24:	d136      	bne.n	8009a94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f022 0216 	bic.w	r2, r2, #22
 8009a34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	695a      	ldr	r2, [r3, #20]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d103      	bne.n	8009a56 <HAL_DMA_IRQHandler+0x1da>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d007      	beq.n	8009a66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 0208 	bic.w	r2, r2, #8
 8009a64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a6a:	223f      	movs	r2, #63	; 0x3f
 8009a6c:	409a      	lsls	r2, r3
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d07d      	beq.n	8009b86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	4798      	blx	r3
        }
        return;
 8009a92:	e078      	b.n	8009b86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d01c      	beq.n	8009adc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d108      	bne.n	8009ac2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d030      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	4798      	blx	r3
 8009ac0:	e02b      	b.n	8009b1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d027      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	4798      	blx	r3
 8009ad2:	e022      	b.n	8009b1a <HAL_DMA_IRQHandler+0x29e>
 8009ad4:	20000000 	.word	0x20000000
 8009ad8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10f      	bne.n	8009b0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f022 0210 	bic.w	r2, r2, #16
 8009af8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d003      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d032      	beq.n	8009b88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d022      	beq.n	8009b74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2205      	movs	r2, #5
 8009b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f022 0201 	bic.w	r2, r2, #1
 8009b44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	60bb      	str	r3, [r7, #8]
 8009b4c:	697a      	ldr	r2, [r7, #20]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d307      	bcc.n	8009b62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1f2      	bne.n	8009b46 <HAL_DMA_IRQHandler+0x2ca>
 8009b60:	e000      	b.n	8009b64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009b62:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d005      	beq.n	8009b88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	4798      	blx	r3
 8009b84:	e000      	b.n	8009b88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009b86:	bf00      	nop
    }
  }
}
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop

08009b90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	3b10      	subs	r3, #16
 8009ba0:	4a14      	ldr	r2, [pc, #80]	; (8009bf4 <DMA_CalcBaseAndBitshift+0x64>)
 8009ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba6:	091b      	lsrs	r3, r3, #4
 8009ba8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009baa:	4a13      	ldr	r2, [pc, #76]	; (8009bf8 <DMA_CalcBaseAndBitshift+0x68>)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4413      	add	r3, r2
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	d909      	bls.n	8009bd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009bc6:	f023 0303 	bic.w	r3, r3, #3
 8009bca:	1d1a      	adds	r2, r3, #4
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	659a      	str	r2, [r3, #88]	; 0x58
 8009bd0:	e007      	b.n	8009be2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009bda:	f023 0303 	bic.w	r3, r3, #3
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	aaaaaaab 	.word	0xaaaaaaab
 8009bf8:	08017860 	.word	0x08017860

08009bfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d11f      	bne.n	8009c56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	2b03      	cmp	r3, #3
 8009c1a:	d855      	bhi.n	8009cc8 <DMA_CheckFifoParam+0xcc>
 8009c1c:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <DMA_CheckFifoParam+0x28>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009c35 	.word	0x08009c35
 8009c28:	08009c47 	.word	0x08009c47
 8009c2c:	08009c35 	.word	0x08009c35
 8009c30:	08009cc9 	.word	0x08009cc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d045      	beq.n	8009ccc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c44:	e042      	b.n	8009ccc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009c4e:	d13f      	bne.n	8009cd0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c54:	e03c      	b.n	8009cd0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c5e:	d121      	bne.n	8009ca4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2b03      	cmp	r3, #3
 8009c64:	d836      	bhi.n	8009cd4 <DMA_CheckFifoParam+0xd8>
 8009c66:	a201      	add	r2, pc, #4	; (adr r2, 8009c6c <DMA_CheckFifoParam+0x70>)
 8009c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6c:	08009c7d 	.word	0x08009c7d
 8009c70:	08009c83 	.word	0x08009c83
 8009c74:	08009c7d 	.word	0x08009c7d
 8009c78:	08009c95 	.word	0x08009c95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c80:	e02f      	b.n	8009ce2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d024      	beq.n	8009cd8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c92:	e021      	b.n	8009cd8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009c9c:	d11e      	bne.n	8009cdc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009ca2:	e01b      	b.n	8009cdc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d902      	bls.n	8009cb0 <DMA_CheckFifoParam+0xb4>
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d003      	beq.n	8009cb6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009cae:	e018      	b.n	8009ce2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8009cb4:	e015      	b.n	8009ce2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00e      	beq.n	8009ce0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8009cc6:	e00b      	b.n	8009ce0 <DMA_CheckFifoParam+0xe4>
      break;
 8009cc8:	bf00      	nop
 8009cca:	e00a      	b.n	8009ce2 <DMA_CheckFifoParam+0xe6>
      break;
 8009ccc:	bf00      	nop
 8009cce:	e008      	b.n	8009ce2 <DMA_CheckFifoParam+0xe6>
      break;
 8009cd0:	bf00      	nop
 8009cd2:	e006      	b.n	8009ce2 <DMA_CheckFifoParam+0xe6>
      break;
 8009cd4:	bf00      	nop
 8009cd6:	e004      	b.n	8009ce2 <DMA_CheckFifoParam+0xe6>
      break;
 8009cd8:	bf00      	nop
 8009cda:	e002      	b.n	8009ce2 <DMA_CheckFifoParam+0xe6>
      break;   
 8009cdc:	bf00      	nop
 8009cde:	e000      	b.n	8009ce2 <DMA_CheckFifoParam+0xe6>
      break;
 8009ce0:	bf00      	nop
    }
  } 
  
  return status; 
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b088      	sub	sp, #32
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009d02:	2300      	movs	r3, #0
 8009d04:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a41      	ldr	r2, [pc, #260]	; (8009e10 <HAL_GPIO_Init+0x120>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d023      	beq.n	8009d56 <HAL_GPIO_Init+0x66>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a40      	ldr	r2, [pc, #256]	; (8009e14 <HAL_GPIO_Init+0x124>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d01f      	beq.n	8009d56 <HAL_GPIO_Init+0x66>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a3f      	ldr	r2, [pc, #252]	; (8009e18 <HAL_GPIO_Init+0x128>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d01b      	beq.n	8009d56 <HAL_GPIO_Init+0x66>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a3e      	ldr	r2, [pc, #248]	; (8009e1c <HAL_GPIO_Init+0x12c>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d017      	beq.n	8009d56 <HAL_GPIO_Init+0x66>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a3d      	ldr	r2, [pc, #244]	; (8009e20 <HAL_GPIO_Init+0x130>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d013      	beq.n	8009d56 <HAL_GPIO_Init+0x66>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a3c      	ldr	r2, [pc, #240]	; (8009e24 <HAL_GPIO_Init+0x134>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d00f      	beq.n	8009d56 <HAL_GPIO_Init+0x66>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a3b      	ldr	r2, [pc, #236]	; (8009e28 <HAL_GPIO_Init+0x138>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d00b      	beq.n	8009d56 <HAL_GPIO_Init+0x66>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a3a      	ldr	r2, [pc, #232]	; (8009e2c <HAL_GPIO_Init+0x13c>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d007      	beq.n	8009d56 <HAL_GPIO_Init+0x66>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a39      	ldr	r2, [pc, #228]	; (8009e30 <HAL_GPIO_Init+0x140>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d003      	beq.n	8009d56 <HAL_GPIO_Init+0x66>
 8009d4e:	21b3      	movs	r1, #179	; 0xb3
 8009d50:	4838      	ldr	r0, [pc, #224]	; (8009e34 <HAL_GPIO_Init+0x144>)
 8009d52:	f002 f9d8 	bl	800c106 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d005      	beq.n	8009d6c <HAL_GPIO_Init+0x7c>
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	0c1b      	lsrs	r3, r3, #16
 8009d66:	041b      	lsls	r3, r3, #16
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d003      	beq.n	8009d74 <HAL_GPIO_Init+0x84>
 8009d6c:	21b4      	movs	r1, #180	; 0xb4
 8009d6e:	4831      	ldr	r0, [pc, #196]	; (8009e34 <HAL_GPIO_Init+0x144>)
 8009d70:	f002 f9c9 	bl	800c106 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d035      	beq.n	8009de8 <HAL_GPIO_Init+0xf8>
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d031      	beq.n	8009de8 <HAL_GPIO_Init+0xf8>
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	2b11      	cmp	r3, #17
 8009d8a:	d02d      	beq.n	8009de8 <HAL_GPIO_Init+0xf8>
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d029      	beq.n	8009de8 <HAL_GPIO_Init+0xf8>
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	2b12      	cmp	r3, #18
 8009d9a:	d025      	beq.n	8009de8 <HAL_GPIO_Init+0xf8>
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	4a25      	ldr	r2, [pc, #148]	; (8009e38 <HAL_GPIO_Init+0x148>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d020      	beq.n	8009de8 <HAL_GPIO_Init+0xf8>
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	4a24      	ldr	r2, [pc, #144]	; (8009e3c <HAL_GPIO_Init+0x14c>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d01b      	beq.n	8009de8 <HAL_GPIO_Init+0xf8>
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	4a22      	ldr	r2, [pc, #136]	; (8009e40 <HAL_GPIO_Init+0x150>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d016      	beq.n	8009de8 <HAL_GPIO_Init+0xf8>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	4a21      	ldr	r2, [pc, #132]	; (8009e44 <HAL_GPIO_Init+0x154>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d011      	beq.n	8009de8 <HAL_GPIO_Init+0xf8>
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	4a1f      	ldr	r2, [pc, #124]	; (8009e48 <HAL_GPIO_Init+0x158>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d00c      	beq.n	8009de8 <HAL_GPIO_Init+0xf8>
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	4a1e      	ldr	r2, [pc, #120]	; (8009e4c <HAL_GPIO_Init+0x15c>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d007      	beq.n	8009de8 <HAL_GPIO_Init+0xf8>
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d003      	beq.n	8009de8 <HAL_GPIO_Init+0xf8>
 8009de0:	21b5      	movs	r1, #181	; 0xb5
 8009de2:	4814      	ldr	r0, [pc, #80]	; (8009e34 <HAL_GPIO_Init+0x144>)
 8009de4:	f002 f98f 	bl	800c106 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00b      	beq.n	8009e08 <HAL_GPIO_Init+0x118>
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d007      	beq.n	8009e08 <HAL_GPIO_Init+0x118>
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d003      	beq.n	8009e08 <HAL_GPIO_Init+0x118>
 8009e00:	21b6      	movs	r1, #182	; 0xb6
 8009e02:	480c      	ldr	r0, [pc, #48]	; (8009e34 <HAL_GPIO_Init+0x144>)
 8009e04:	f002 f97f 	bl	800c106 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009e08:	2300      	movs	r3, #0
 8009e0a:	61fb      	str	r3, [r7, #28]
 8009e0c:	e236      	b.n	800a27c <HAL_GPIO_Init+0x58c>
 8009e0e:	bf00      	nop
 8009e10:	40020000 	.word	0x40020000
 8009e14:	40020400 	.word	0x40020400
 8009e18:	40020800 	.word	0x40020800
 8009e1c:	40020c00 	.word	0x40020c00
 8009e20:	40021000 	.word	0x40021000
 8009e24:	40021400 	.word	0x40021400
 8009e28:	40021800 	.word	0x40021800
 8009e2c:	40021c00 	.word	0x40021c00
 8009e30:	40022000 	.word	0x40022000
 8009e34:	0801667c 	.word	0x0801667c
 8009e38:	10110000 	.word	0x10110000
 8009e3c:	10210000 	.word	0x10210000
 8009e40:	10310000 	.word	0x10310000
 8009e44:	10120000 	.word	0x10120000
 8009e48:	10220000 	.word	0x10220000
 8009e4c:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009e50:	2201      	movs	r2, #1
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	fa02 f303 	lsl.w	r3, r2, r3
 8009e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	4013      	ands	r3, r2
 8009e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009e64:	693a      	ldr	r2, [r7, #16]
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	f040 8204 	bne.w	800a276 <HAL_GPIO_Init+0x586>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d00b      	beq.n	8009e8e <HAL_GPIO_Init+0x19e>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d007      	beq.n	8009e8e <HAL_GPIO_Init+0x19e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009e82:	2b11      	cmp	r3, #17
 8009e84:	d003      	beq.n	8009e8e <HAL_GPIO_Init+0x19e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	2b12      	cmp	r3, #18
 8009e8c:	d144      	bne.n	8009f18 <HAL_GPIO_Init+0x228>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00f      	beq.n	8009eb6 <HAL_GPIO_Init+0x1c6>
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d00b      	beq.n	8009eb6 <HAL_GPIO_Init+0x1c6>
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d007      	beq.n	8009eb6 <HAL_GPIO_Init+0x1c6>
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	d003      	beq.n	8009eb6 <HAL_GPIO_Init+0x1c6>
 8009eae:	21c8      	movs	r1, #200	; 0xc8
 8009eb0:	489e      	ldr	r0, [pc, #632]	; (800a12c <HAL_GPIO_Init+0x43c>)
 8009eb2:	f002 f928 	bl	800c106 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	2203      	movs	r2, #3
 8009ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec6:	43db      	mvns	r3, r3
 8009ec8:	69ba      	ldr	r2, [r7, #24]
 8009eca:	4013      	ands	r3, r2
 8009ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	68da      	ldr	r2, [r3, #12]
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	005b      	lsls	r3, r3, #1
 8009ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eda:	69ba      	ldr	r2, [r7, #24]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	69ba      	ldr	r2, [r7, #24]
 8009ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009eec:	2201      	movs	r2, #1
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef4:	43db      	mvns	r3, r3
 8009ef6:	69ba      	ldr	r2, [r7, #24]
 8009ef8:	4013      	ands	r3, r2
 8009efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	091b      	lsrs	r3, r3, #4
 8009f02:	f003 0201 	and.w	r2, r3, #1
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0c:	69ba      	ldr	r2, [r7, #24]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	69ba      	ldr	r2, [r7, #24]
 8009f16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	005b      	lsls	r3, r3, #1
 8009f22:	2203      	movs	r2, #3
 8009f24:	fa02 f303 	lsl.w	r3, r2, r3
 8009f28:	43db      	mvns	r3, r3
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	689a      	ldr	r2, [r3, #8]
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	fa02 f303 	lsl.w	r3, r2, r3
 8009f3c:	69ba      	ldr	r2, [r7, #24]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	69ba      	ldr	r2, [r7, #24]
 8009f46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d004      	beq.n	8009f5a <HAL_GPIO_Init+0x26a>
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	2b12      	cmp	r3, #18
 8009f56:	f040 80b2 	bne.w	800a0be <HAL_GPIO_Init+0x3ce>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f000 8089 	beq.w	800a076 <HAL_GPIO_Init+0x386>
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	2b09      	cmp	r3, #9
 8009f6a:	f000 8084 	beq.w	800a076 <HAL_GPIO_Init+0x386>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d07f      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d07b      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d077      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d073      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d06f      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d06b      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d067      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d063      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d05f      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	2b03      	cmp	r3, #3
 8009fbc:	d05b      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	2b04      	cmp	r3, #4
 8009fc4:	d057      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	2b04      	cmp	r3, #4
 8009fcc:	d053      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d04f      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	2b05      	cmp	r3, #5
 8009fdc:	d04b      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	2b05      	cmp	r3, #5
 8009fe4:	d047      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	2b09      	cmp	r3, #9
 8009fec:	d043      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	2b06      	cmp	r3, #6
 8009ff4:	d03f      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	2b09      	cmp	r3, #9
 8009ffc:	d03b      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	2b07      	cmp	r3, #7
 800a004:	d037      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	2b07      	cmp	r3, #7
 800a00c:	d033      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	2b07      	cmp	r3, #7
 800a014:	d02f      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	2b08      	cmp	r3, #8
 800a01c:	d02b      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	2b08      	cmp	r3, #8
 800a024:	d027      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	2b08      	cmp	r3, #8
 800a02c:	d023      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	2b09      	cmp	r3, #9
 800a034:	d01f      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	2b09      	cmp	r3, #9
 800a03c:	d01b      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	2b0a      	cmp	r3, #10
 800a044:	d017      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	2b0a      	cmp	r3, #10
 800a04c:	d013      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	2b0c      	cmp	r3, #12
 800a054:	d00f      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	2b0c      	cmp	r3, #12
 800a05c:	d00b      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	2b0c      	cmp	r3, #12
 800a064:	d007      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	2b0f      	cmp	r3, #15
 800a06c:	d003      	beq.n	800a076 <HAL_GPIO_Init+0x386>
 800a06e:	21e0      	movs	r1, #224	; 0xe0
 800a070:	482e      	ldr	r0, [pc, #184]	; (800a12c <HAL_GPIO_Init+0x43c>)
 800a072:	f002 f848 	bl	800c106 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	08da      	lsrs	r2, r3, #3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	3208      	adds	r2, #8
 800a07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	f003 0307 	and.w	r3, r3, #7
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	220f      	movs	r2, #15
 800a08e:	fa02 f303 	lsl.w	r3, r2, r3
 800a092:	43db      	mvns	r3, r3
 800a094:	69ba      	ldr	r2, [r7, #24]
 800a096:	4013      	ands	r3, r2
 800a098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	691a      	ldr	r2, [r3, #16]
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	f003 0307 	and.w	r3, r3, #7
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0aa:	69ba      	ldr	r2, [r7, #24]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	08da      	lsrs	r2, r3, #3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3208      	adds	r2, #8
 800a0b8:	69b9      	ldr	r1, [r7, #24]
 800a0ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	005b      	lsls	r3, r3, #1
 800a0c8:	2203      	movs	r2, #3
 800a0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ce:	43db      	mvns	r3, r3
 800a0d0:	69ba      	ldr	r2, [r7, #24]
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	f003 0203 	and.w	r2, r3, #3
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	005b      	lsls	r3, r3, #1
 800a0e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e6:	69ba      	ldr	r2, [r7, #24]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	69ba      	ldr	r2, [r7, #24]
 800a0f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 80bb 	beq.w	800a276 <HAL_GPIO_Init+0x586>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a100:	2300      	movs	r3, #0
 800a102:	60fb      	str	r3, [r7, #12]
 800a104:	4b0a      	ldr	r3, [pc, #40]	; (800a130 <HAL_GPIO_Init+0x440>)
 800a106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a108:	4a09      	ldr	r2, [pc, #36]	; (800a130 <HAL_GPIO_Init+0x440>)
 800a10a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a10e:	6453      	str	r3, [r2, #68]	; 0x44
 800a110:	4b07      	ldr	r3, [pc, #28]	; (800a130 <HAL_GPIO_Init+0x440>)
 800a112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a118:	60fb      	str	r3, [r7, #12]
 800a11a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a11c:	4a05      	ldr	r2, [pc, #20]	; (800a134 <HAL_GPIO_Init+0x444>)
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	089b      	lsrs	r3, r3, #2
 800a122:	3302      	adds	r3, #2
 800a124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a128:	61bb      	str	r3, [r7, #24]
 800a12a:	e005      	b.n	800a138 <HAL_GPIO_Init+0x448>
 800a12c:	0801667c 	.word	0x0801667c
 800a130:	40023800 	.word	0x40023800
 800a134:	40013800 	.word	0x40013800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	f003 0303 	and.w	r3, r3, #3
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	220f      	movs	r2, #15
 800a142:	fa02 f303 	lsl.w	r3, r2, r3
 800a146:	43db      	mvns	r3, r3
 800a148:	69ba      	ldr	r2, [r7, #24]
 800a14a:	4013      	ands	r3, r2
 800a14c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a4e      	ldr	r2, [pc, #312]	; (800a28c <HAL_GPIO_Init+0x59c>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d02b      	beq.n	800a1ae <HAL_GPIO_Init+0x4be>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a4d      	ldr	r2, [pc, #308]	; (800a290 <HAL_GPIO_Init+0x5a0>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d025      	beq.n	800a1aa <HAL_GPIO_Init+0x4ba>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a4c      	ldr	r2, [pc, #304]	; (800a294 <HAL_GPIO_Init+0x5a4>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d01f      	beq.n	800a1a6 <HAL_GPIO_Init+0x4b6>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a4b      	ldr	r2, [pc, #300]	; (800a298 <HAL_GPIO_Init+0x5a8>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d019      	beq.n	800a1a2 <HAL_GPIO_Init+0x4b2>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a4a      	ldr	r2, [pc, #296]	; (800a29c <HAL_GPIO_Init+0x5ac>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d013      	beq.n	800a19e <HAL_GPIO_Init+0x4ae>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a49      	ldr	r2, [pc, #292]	; (800a2a0 <HAL_GPIO_Init+0x5b0>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d00d      	beq.n	800a19a <HAL_GPIO_Init+0x4aa>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a48      	ldr	r2, [pc, #288]	; (800a2a4 <HAL_GPIO_Init+0x5b4>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d007      	beq.n	800a196 <HAL_GPIO_Init+0x4a6>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a47      	ldr	r2, [pc, #284]	; (800a2a8 <HAL_GPIO_Init+0x5b8>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d101      	bne.n	800a192 <HAL_GPIO_Init+0x4a2>
 800a18e:	2307      	movs	r3, #7
 800a190:	e00e      	b.n	800a1b0 <HAL_GPIO_Init+0x4c0>
 800a192:	2308      	movs	r3, #8
 800a194:	e00c      	b.n	800a1b0 <HAL_GPIO_Init+0x4c0>
 800a196:	2306      	movs	r3, #6
 800a198:	e00a      	b.n	800a1b0 <HAL_GPIO_Init+0x4c0>
 800a19a:	2305      	movs	r3, #5
 800a19c:	e008      	b.n	800a1b0 <HAL_GPIO_Init+0x4c0>
 800a19e:	2304      	movs	r3, #4
 800a1a0:	e006      	b.n	800a1b0 <HAL_GPIO_Init+0x4c0>
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e004      	b.n	800a1b0 <HAL_GPIO_Init+0x4c0>
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	e002      	b.n	800a1b0 <HAL_GPIO_Init+0x4c0>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e000      	b.n	800a1b0 <HAL_GPIO_Init+0x4c0>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	69fa      	ldr	r2, [r7, #28]
 800a1b2:	f002 0203 	and.w	r2, r2, #3
 800a1b6:	0092      	lsls	r2, r2, #2
 800a1b8:	4093      	lsls	r3, r2
 800a1ba:	69ba      	ldr	r2, [r7, #24]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a1c0:	493a      	ldr	r1, [pc, #232]	; (800a2ac <HAL_GPIO_Init+0x5bc>)
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	089b      	lsrs	r3, r3, #2
 800a1c6:	3302      	adds	r3, #2
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a1ce:	4b38      	ldr	r3, [pc, #224]	; (800a2b0 <HAL_GPIO_Init+0x5c0>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	43db      	mvns	r3, r3
 800a1d8:	69ba      	ldr	r2, [r7, #24]
 800a1da:	4013      	ands	r3, r2
 800a1dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <HAL_GPIO_Init+0x502>
        {
          temp |= iocurrent;
 800a1ea:	69ba      	ldr	r2, [r7, #24]
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a1f2:	4a2f      	ldr	r2, [pc, #188]	; (800a2b0 <HAL_GPIO_Init+0x5c0>)
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a1f8:	4b2d      	ldr	r3, [pc, #180]	; (800a2b0 <HAL_GPIO_Init+0x5c0>)
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	43db      	mvns	r3, r3
 800a202:	69ba      	ldr	r2, [r7, #24]
 800a204:	4013      	ands	r3, r2
 800a206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a210:	2b00      	cmp	r3, #0
 800a212:	d003      	beq.n	800a21c <HAL_GPIO_Init+0x52c>
        {
          temp |= iocurrent;
 800a214:	69ba      	ldr	r2, [r7, #24]
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	4313      	orrs	r3, r2
 800a21a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a21c:	4a24      	ldr	r2, [pc, #144]	; (800a2b0 <HAL_GPIO_Init+0x5c0>)
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a222:	4b23      	ldr	r3, [pc, #140]	; (800a2b0 <HAL_GPIO_Init+0x5c0>)
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	43db      	mvns	r3, r3
 800a22c:	69ba      	ldr	r2, [r7, #24]
 800a22e:	4013      	ands	r3, r2
 800a230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <HAL_GPIO_Init+0x556>
        {
          temp |= iocurrent;
 800a23e:	69ba      	ldr	r2, [r7, #24]
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	4313      	orrs	r3, r2
 800a244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a246:	4a1a      	ldr	r2, [pc, #104]	; (800a2b0 <HAL_GPIO_Init+0x5c0>)
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a24c:	4b18      	ldr	r3, [pc, #96]	; (800a2b0 <HAL_GPIO_Init+0x5c0>)
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	43db      	mvns	r3, r3
 800a256:	69ba      	ldr	r2, [r7, #24]
 800a258:	4013      	ands	r3, r2
 800a25a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 800a268:	69ba      	ldr	r2, [r7, #24]
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a270:	4a0f      	ldr	r2, [pc, #60]	; (800a2b0 <HAL_GPIO_Init+0x5c0>)
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	3301      	adds	r3, #1
 800a27a:	61fb      	str	r3, [r7, #28]
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	2b0f      	cmp	r3, #15
 800a280:	f67f ade6 	bls.w	8009e50 <HAL_GPIO_Init+0x160>
      }
    }
  }
}
 800a284:	bf00      	nop
 800a286:	3720      	adds	r7, #32
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	40020000 	.word	0x40020000
 800a290:	40020400 	.word	0x40020400
 800a294:	40020800 	.word	0x40020800
 800a298:	40020c00 	.word	0x40020c00
 800a29c:	40021000 	.word	0x40021000
 800a2a0:	40021400 	.word	0x40021400
 800a2a4:	40021800 	.word	0x40021800
 800a2a8:	40021c00 	.word	0x40021c00
 800a2ac:	40013800 	.word	0x40013800
 800a2b0:	40013c00 	.word	0x40013c00

0800a2b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a80      	ldr	r2, [pc, #512]	; (800a4d0 <HAL_GPIO_DeInit+0x21c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d024      	beq.n	800a31c <HAL_GPIO_DeInit+0x68>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a7f      	ldr	r2, [pc, #508]	; (800a4d4 <HAL_GPIO_DeInit+0x220>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d020      	beq.n	800a31c <HAL_GPIO_DeInit+0x68>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a7e      	ldr	r2, [pc, #504]	; (800a4d8 <HAL_GPIO_DeInit+0x224>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d01c      	beq.n	800a31c <HAL_GPIO_DeInit+0x68>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a7d      	ldr	r2, [pc, #500]	; (800a4dc <HAL_GPIO_DeInit+0x228>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d018      	beq.n	800a31c <HAL_GPIO_DeInit+0x68>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a7c      	ldr	r2, [pc, #496]	; (800a4e0 <HAL_GPIO_DeInit+0x22c>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d014      	beq.n	800a31c <HAL_GPIO_DeInit+0x68>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a7b      	ldr	r2, [pc, #492]	; (800a4e4 <HAL_GPIO_DeInit+0x230>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d010      	beq.n	800a31c <HAL_GPIO_DeInit+0x68>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a7a      	ldr	r2, [pc, #488]	; (800a4e8 <HAL_GPIO_DeInit+0x234>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d00c      	beq.n	800a31c <HAL_GPIO_DeInit+0x68>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a79      	ldr	r2, [pc, #484]	; (800a4ec <HAL_GPIO_DeInit+0x238>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d008      	beq.n	800a31c <HAL_GPIO_DeInit+0x68>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a78      	ldr	r2, [pc, #480]	; (800a4f0 <HAL_GPIO_DeInit+0x23c>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d004      	beq.n	800a31c <HAL_GPIO_DeInit+0x68>
 800a312:	f44f 7198 	mov.w	r1, #304	; 0x130
 800a316:	4877      	ldr	r0, [pc, #476]	; (800a4f4 <HAL_GPIO_DeInit+0x240>)
 800a318:	f001 fef5 	bl	800c106 <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a31c:	2300      	movs	r3, #0
 800a31e:	617b      	str	r3, [r7, #20]
 800a320:	e0cd      	b.n	800a4be <HAL_GPIO_DeInit+0x20a>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a322:	2201      	movs	r2, #1
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	fa02 f303 	lsl.w	r3, r2, r3
 800a32a:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	4013      	ands	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	429a      	cmp	r2, r3
 800a33a:	f040 80bd 	bne.w	800a4b8 <HAL_GPIO_DeInit+0x204>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a33e:	4a6e      	ldr	r2, [pc, #440]	; (800a4f8 <HAL_GPIO_DeInit+0x244>)
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	089b      	lsrs	r3, r3, #2
 800a344:	3302      	adds	r3, #2
 800a346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a34a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	f003 0303 	and.w	r3, r3, #3
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	220f      	movs	r2, #15
 800a356:	fa02 f303 	lsl.w	r3, r2, r3
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	4013      	ands	r3, r2
 800a35e:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a5b      	ldr	r2, [pc, #364]	; (800a4d0 <HAL_GPIO_DeInit+0x21c>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d02b      	beq.n	800a3c0 <HAL_GPIO_DeInit+0x10c>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a5a      	ldr	r2, [pc, #360]	; (800a4d4 <HAL_GPIO_DeInit+0x220>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d025      	beq.n	800a3bc <HAL_GPIO_DeInit+0x108>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a59      	ldr	r2, [pc, #356]	; (800a4d8 <HAL_GPIO_DeInit+0x224>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d01f      	beq.n	800a3b8 <HAL_GPIO_DeInit+0x104>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a58      	ldr	r2, [pc, #352]	; (800a4dc <HAL_GPIO_DeInit+0x228>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d019      	beq.n	800a3b4 <HAL_GPIO_DeInit+0x100>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a57      	ldr	r2, [pc, #348]	; (800a4e0 <HAL_GPIO_DeInit+0x22c>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d013      	beq.n	800a3b0 <HAL_GPIO_DeInit+0xfc>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a56      	ldr	r2, [pc, #344]	; (800a4e4 <HAL_GPIO_DeInit+0x230>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d00d      	beq.n	800a3ac <HAL_GPIO_DeInit+0xf8>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a55      	ldr	r2, [pc, #340]	; (800a4e8 <HAL_GPIO_DeInit+0x234>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d007      	beq.n	800a3a8 <HAL_GPIO_DeInit+0xf4>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a54      	ldr	r2, [pc, #336]	; (800a4ec <HAL_GPIO_DeInit+0x238>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d101      	bne.n	800a3a4 <HAL_GPIO_DeInit+0xf0>
 800a3a0:	2307      	movs	r3, #7
 800a3a2:	e00e      	b.n	800a3c2 <HAL_GPIO_DeInit+0x10e>
 800a3a4:	2308      	movs	r3, #8
 800a3a6:	e00c      	b.n	800a3c2 <HAL_GPIO_DeInit+0x10e>
 800a3a8:	2306      	movs	r3, #6
 800a3aa:	e00a      	b.n	800a3c2 <HAL_GPIO_DeInit+0x10e>
 800a3ac:	2305      	movs	r3, #5
 800a3ae:	e008      	b.n	800a3c2 <HAL_GPIO_DeInit+0x10e>
 800a3b0:	2304      	movs	r3, #4
 800a3b2:	e006      	b.n	800a3c2 <HAL_GPIO_DeInit+0x10e>
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e004      	b.n	800a3c2 <HAL_GPIO_DeInit+0x10e>
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	e002      	b.n	800a3c2 <HAL_GPIO_DeInit+0x10e>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e000      	b.n	800a3c2 <HAL_GPIO_DeInit+0x10e>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	f002 0203 	and.w	r2, r2, #3
 800a3c8:	0092      	lsls	r2, r2, #2
 800a3ca:	4093      	lsls	r3, r2
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d132      	bne.n	800a438 <HAL_GPIO_DeInit+0x184>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a3d2:	4b4a      	ldr	r3, [pc, #296]	; (800a4fc <HAL_GPIO_DeInit+0x248>)
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	43db      	mvns	r3, r3
 800a3da:	4948      	ldr	r1, [pc, #288]	; (800a4fc <HAL_GPIO_DeInit+0x248>)
 800a3dc:	4013      	ands	r3, r2
 800a3de:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a3e0:	4b46      	ldr	r3, [pc, #280]	; (800a4fc <HAL_GPIO_DeInit+0x248>)
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	43db      	mvns	r3, r3
 800a3e8:	4944      	ldr	r1, [pc, #272]	; (800a4fc <HAL_GPIO_DeInit+0x248>)
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a3ee:	4b43      	ldr	r3, [pc, #268]	; (800a4fc <HAL_GPIO_DeInit+0x248>)
 800a3f0:	689a      	ldr	r2, [r3, #8]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	43db      	mvns	r3, r3
 800a3f6:	4941      	ldr	r1, [pc, #260]	; (800a4fc <HAL_GPIO_DeInit+0x248>)
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a3fc:	4b3f      	ldr	r3, [pc, #252]	; (800a4fc <HAL_GPIO_DeInit+0x248>)
 800a3fe:	68da      	ldr	r2, [r3, #12]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	43db      	mvns	r3, r3
 800a404:	493d      	ldr	r1, [pc, #244]	; (800a4fc <HAL_GPIO_DeInit+0x248>)
 800a406:	4013      	ands	r3, r2
 800a408:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f003 0303 	and.w	r3, r3, #3
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	220f      	movs	r2, #15
 800a414:	fa02 f303 	lsl.w	r3, r2, r3
 800a418:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a41a:	4a37      	ldr	r2, [pc, #220]	; (800a4f8 <HAL_GPIO_DeInit+0x244>)
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	089b      	lsrs	r3, r3, #2
 800a420:	3302      	adds	r3, #2
 800a422:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	43da      	mvns	r2, r3
 800a42a:	4833      	ldr	r0, [pc, #204]	; (800a4f8 <HAL_GPIO_DeInit+0x244>)
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	089b      	lsrs	r3, r3, #2
 800a430:	400a      	ands	r2, r1
 800a432:	3302      	adds	r3, #2
 800a434:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	005b      	lsls	r3, r3, #1
 800a440:	2103      	movs	r1, #3
 800a442:	fa01 f303 	lsl.w	r3, r1, r3
 800a446:	43db      	mvns	r3, r3
 800a448:	401a      	ands	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	08da      	lsrs	r2, r3, #3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	3208      	adds	r2, #8
 800a456:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f003 0307 	and.w	r3, r3, #7
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	220f      	movs	r2, #15
 800a464:	fa02 f303 	lsl.w	r3, r2, r3
 800a468:	43db      	mvns	r3, r3
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	08d2      	lsrs	r2, r2, #3
 800a46e:	4019      	ands	r1, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	3208      	adds	r2, #8
 800a474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	68da      	ldr	r2, [r3, #12]
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	005b      	lsls	r3, r3, #1
 800a480:	2103      	movs	r1, #3
 800a482:	fa01 f303 	lsl.w	r3, r1, r3
 800a486:	43db      	mvns	r3, r3
 800a488:	401a      	ands	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	2101      	movs	r1, #1
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	fa01 f303 	lsl.w	r3, r1, r3
 800a49a:	43db      	mvns	r3, r3
 800a49c:	401a      	ands	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	689a      	ldr	r2, [r3, #8]
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	005b      	lsls	r3, r3, #1
 800a4aa:	2103      	movs	r1, #3
 800a4ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a4b0:	43db      	mvns	r3, r3
 800a4b2:	401a      	ands	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	617b      	str	r3, [r7, #20]
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	2b0f      	cmp	r3, #15
 800a4c2:	f67f af2e 	bls.w	800a322 <HAL_GPIO_DeInit+0x6e>
    }
  }
}
 800a4c6:	bf00      	nop
 800a4c8:	3718      	adds	r7, #24
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	40020000 	.word	0x40020000
 800a4d4:	40020400 	.word	0x40020400
 800a4d8:	40020800 	.word	0x40020800
 800a4dc:	40020c00 	.word	0x40020c00
 800a4e0:	40021000 	.word	0x40021000
 800a4e4:	40021400 	.word	0x40021400
 800a4e8:	40021800 	.word	0x40021800
 800a4ec:	40021c00 	.word	0x40021c00
 800a4f0:	40022000 	.word	0x40022000
 800a4f4:	0801667c 	.word	0x0801667c
 800a4f8:	40013800 	.word	0x40013800
 800a4fc:	40013c00 	.word	0x40013c00

0800a500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e30d      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b0f      	cmp	r3, #15
 800a518:	d903      	bls.n	800a522 <HAL_RCC_OscConfig+0x22>
 800a51a:	21e8      	movs	r1, #232	; 0xe8
 800a51c:	48a3      	ldr	r0, [pc, #652]	; (800a7ac <HAL_RCC_OscConfig+0x2ac>)
 800a51e:	f001 fdf2 	bl	800c106 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f000 8088 	beq.w	800a640 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00d      	beq.n	800a554 <HAL_RCC_OscConfig+0x54>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a540:	d008      	beq.n	800a554 <HAL_RCC_OscConfig+0x54>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a54a:	d003      	beq.n	800a554 <HAL_RCC_OscConfig+0x54>
 800a54c:	21ed      	movs	r1, #237	; 0xed
 800a54e:	4897      	ldr	r0, [pc, #604]	; (800a7ac <HAL_RCC_OscConfig+0x2ac>)
 800a550:	f001 fdd9 	bl	800c106 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a554:	4b96      	ldr	r3, [pc, #600]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	f003 030c 	and.w	r3, r3, #12
 800a55c:	2b04      	cmp	r3, #4
 800a55e:	d00c      	beq.n	800a57a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a560:	4b93      	ldr	r3, [pc, #588]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a568:	2b08      	cmp	r3, #8
 800a56a:	d112      	bne.n	800a592 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a56c:	4b90      	ldr	r3, [pc, #576]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a578:	d10b      	bne.n	800a592 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a57a:	4b8d      	ldr	r3, [pc, #564]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a582:	2b00      	cmp	r3, #0
 800a584:	d05b      	beq.n	800a63e <HAL_RCC_OscConfig+0x13e>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d157      	bne.n	800a63e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e2cd      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a59a:	d106      	bne.n	800a5aa <HAL_RCC_OscConfig+0xaa>
 800a59c:	4b84      	ldr	r3, [pc, #528]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a83      	ldr	r2, [pc, #524]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a5a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	e01d      	b.n	800a5e6 <HAL_RCC_OscConfig+0xe6>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a5b2:	d10c      	bne.n	800a5ce <HAL_RCC_OscConfig+0xce>
 800a5b4:	4b7e      	ldr	r3, [pc, #504]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a7d      	ldr	r2, [pc, #500]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a5ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	4b7b      	ldr	r3, [pc, #492]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a7a      	ldr	r2, [pc, #488]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a5c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5ca:	6013      	str	r3, [r2, #0]
 800a5cc:	e00b      	b.n	800a5e6 <HAL_RCC_OscConfig+0xe6>
 800a5ce:	4b78      	ldr	r3, [pc, #480]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a77      	ldr	r2, [pc, #476]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a5d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5d8:	6013      	str	r3, [r2, #0]
 800a5da:	4b75      	ldr	r3, [pc, #468]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a74      	ldr	r2, [pc, #464]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a5e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d013      	beq.n	800a616 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5ee:	f7fe fc93 	bl	8008f18 <HAL_GetTick>
 800a5f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5f4:	e008      	b.n	800a608 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a5f6:	f7fe fc8f 	bl	8008f18 <HAL_GetTick>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	2b64      	cmp	r3, #100	; 0x64
 800a602:	d901      	bls.n	800a608 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800a604:	2303      	movs	r3, #3
 800a606:	e292      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a608:	4b69      	ldr	r3, [pc, #420]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d0f0      	beq.n	800a5f6 <HAL_RCC_OscConfig+0xf6>
 800a614:	e014      	b.n	800a640 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a616:	f7fe fc7f 	bl	8008f18 <HAL_GetTick>
 800a61a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a61c:	e008      	b.n	800a630 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a61e:	f7fe fc7b 	bl	8008f18 <HAL_GetTick>
 800a622:	4602      	mov	r2, r0
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	2b64      	cmp	r3, #100	; 0x64
 800a62a:	d901      	bls.n	800a630 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800a62c:	2303      	movs	r3, #3
 800a62e:	e27e      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a630:	4b5f      	ldr	r3, [pc, #380]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1f0      	bne.n	800a61e <HAL_RCC_OscConfig+0x11e>
 800a63c:	e000      	b.n	800a640 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a63e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f003 0302 	and.w	r3, r3, #2
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d079      	beq.n	800a740 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d008      	beq.n	800a666 <HAL_RCC_OscConfig+0x166>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d004      	beq.n	800a666 <HAL_RCC_OscConfig+0x166>
 800a65c:	f240 111f 	movw	r1, #287	; 0x11f
 800a660:	4852      	ldr	r0, [pc, #328]	; (800a7ac <HAL_RCC_OscConfig+0x2ac>)
 800a662:	f001 fd50 	bl	800c106 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	2b1f      	cmp	r3, #31
 800a66c:	d904      	bls.n	800a678 <HAL_RCC_OscConfig+0x178>
 800a66e:	f44f 7190 	mov.w	r1, #288	; 0x120
 800a672:	484e      	ldr	r0, [pc, #312]	; (800a7ac <HAL_RCC_OscConfig+0x2ac>)
 800a674:	f001 fd47 	bl	800c106 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a678:	4b4d      	ldr	r3, [pc, #308]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	f003 030c 	and.w	r3, r3, #12
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00b      	beq.n	800a69c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a684:	4b4a      	ldr	r3, [pc, #296]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a68c:	2b08      	cmp	r3, #8
 800a68e:	d11c      	bne.n	800a6ca <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a690:	4b47      	ldr	r3, [pc, #284]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d116      	bne.n	800a6ca <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a69c:	4b44      	ldr	r3, [pc, #272]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 0302 	and.w	r3, r3, #2
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d005      	beq.n	800a6b4 <HAL_RCC_OscConfig+0x1b4>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d001      	beq.n	800a6b4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e23c      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6b4:	4b3e      	ldr	r3, [pc, #248]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	691b      	ldr	r3, [r3, #16]
 800a6c0:	00db      	lsls	r3, r3, #3
 800a6c2:	493b      	ldr	r1, [pc, #236]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6c8:	e03a      	b.n	800a740 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d020      	beq.n	800a714 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a6d2:	4b38      	ldr	r3, [pc, #224]	; (800a7b4 <HAL_RCC_OscConfig+0x2b4>)
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d8:	f7fe fc1e 	bl	8008f18 <HAL_GetTick>
 800a6dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6de:	e008      	b.n	800a6f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a6e0:	f7fe fc1a 	bl	8008f18 <HAL_GetTick>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d901      	bls.n	800a6f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e21d      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6f2:	4b2f      	ldr	r3, [pc, #188]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0302 	and.w	r3, r3, #2
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d0f0      	beq.n	800a6e0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6fe:	4b2c      	ldr	r3, [pc, #176]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	00db      	lsls	r3, r3, #3
 800a70c:	4928      	ldr	r1, [pc, #160]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a70e:	4313      	orrs	r3, r2
 800a710:	600b      	str	r3, [r1, #0]
 800a712:	e015      	b.n	800a740 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a714:	4b27      	ldr	r3, [pc, #156]	; (800a7b4 <HAL_RCC_OscConfig+0x2b4>)
 800a716:	2200      	movs	r2, #0
 800a718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a71a:	f7fe fbfd 	bl	8008f18 <HAL_GetTick>
 800a71e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a720:	e008      	b.n	800a734 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a722:	f7fe fbf9 	bl	8008f18 <HAL_GetTick>
 800a726:	4602      	mov	r2, r0
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	1ad3      	subs	r3, r2, r3
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d901      	bls.n	800a734 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800a730:	2303      	movs	r3, #3
 800a732:	e1fc      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a734:	4b1e      	ldr	r3, [pc, #120]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0302 	and.w	r3, r3, #2
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1f0      	bne.n	800a722 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 0308 	and.w	r3, r3, #8
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d046      	beq.n	800a7da <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d008      	beq.n	800a766 <HAL_RCC_OscConfig+0x266>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	695b      	ldr	r3, [r3, #20]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d004      	beq.n	800a766 <HAL_RCC_OscConfig+0x266>
 800a75c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800a760:	4812      	ldr	r0, [pc, #72]	; (800a7ac <HAL_RCC_OscConfig+0x2ac>)
 800a762:	f001 fcd0 	bl	800c106 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d016      	beq.n	800a79c <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a76e:	4b12      	ldr	r3, [pc, #72]	; (800a7b8 <HAL_RCC_OscConfig+0x2b8>)
 800a770:	2201      	movs	r2, #1
 800a772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a774:	f7fe fbd0 	bl	8008f18 <HAL_GetTick>
 800a778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a77a:	e008      	b.n	800a78e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a77c:	f7fe fbcc 	bl	8008f18 <HAL_GetTick>
 800a780:	4602      	mov	r2, r0
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	2b02      	cmp	r3, #2
 800a788:	d901      	bls.n	800a78e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e1cf      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a78e:	4b08      	ldr	r3, [pc, #32]	; (800a7b0 <HAL_RCC_OscConfig+0x2b0>)
 800a790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a792:	f003 0302 	and.w	r3, r3, #2
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0f0      	beq.n	800a77c <HAL_RCC_OscConfig+0x27c>
 800a79a:	e01e      	b.n	800a7da <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a79c:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <HAL_RCC_OscConfig+0x2b8>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a7a2:	f7fe fbb9 	bl	8008f18 <HAL_GetTick>
 800a7a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7a8:	e011      	b.n	800a7ce <HAL_RCC_OscConfig+0x2ce>
 800a7aa:	bf00      	nop
 800a7ac:	080166b8 	.word	0x080166b8
 800a7b0:	40023800 	.word	0x40023800
 800a7b4:	42470000 	.word	0x42470000
 800a7b8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a7bc:	f7fe fbac 	bl	8008f18 <HAL_GetTick>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d901      	bls.n	800a7ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e1af      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7ce:	4b97      	ldr	r3, [pc, #604]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a7d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1f0      	bne.n	800a7bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0304 	and.w	r3, r3, #4
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 80a8 	beq.w	800a938 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00c      	beq.n	800a80e <HAL_RCC_OscConfig+0x30e>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d008      	beq.n	800a80e <HAL_RCC_OscConfig+0x30e>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	2b05      	cmp	r3, #5
 800a802:	d004      	beq.n	800a80e <HAL_RCC_OscConfig+0x30e>
 800a804:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800a808:	4889      	ldr	r0, [pc, #548]	; (800aa30 <HAL_RCC_OscConfig+0x530>)
 800a80a:	f001 fc7c 	bl	800c106 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a80e:	4b87      	ldr	r3, [pc, #540]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10f      	bne.n	800a83a <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a81a:	2300      	movs	r3, #0
 800a81c:	60bb      	str	r3, [r7, #8]
 800a81e:	4b83      	ldr	r3, [pc, #524]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a822:	4a82      	ldr	r2, [pc, #520]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a828:	6413      	str	r3, [r2, #64]	; 0x40
 800a82a:	4b80      	ldr	r3, [pc, #512]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a832:	60bb      	str	r3, [r7, #8]
 800a834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a836:	2301      	movs	r3, #1
 800a838:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a83a:	4b7e      	ldr	r3, [pc, #504]	; (800aa34 <HAL_RCC_OscConfig+0x534>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a842:	2b00      	cmp	r3, #0
 800a844:	d118      	bne.n	800a878 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a846:	4b7b      	ldr	r3, [pc, #492]	; (800aa34 <HAL_RCC_OscConfig+0x534>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a7a      	ldr	r2, [pc, #488]	; (800aa34 <HAL_RCC_OscConfig+0x534>)
 800a84c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a852:	f7fe fb61 	bl	8008f18 <HAL_GetTick>
 800a856:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a858:	e008      	b.n	800a86c <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a85a:	f7fe fb5d 	bl	8008f18 <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	2b02      	cmp	r3, #2
 800a866:	d901      	bls.n	800a86c <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 800a868:	2303      	movs	r3, #3
 800a86a:	e160      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a86c:	4b71      	ldr	r3, [pc, #452]	; (800aa34 <HAL_RCC_OscConfig+0x534>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a874:	2b00      	cmp	r3, #0
 800a876:	d0f0      	beq.n	800a85a <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d106      	bne.n	800a88e <HAL_RCC_OscConfig+0x38e>
 800a880:	4b6a      	ldr	r3, [pc, #424]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a884:	4a69      	ldr	r2, [pc, #420]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a886:	f043 0301 	orr.w	r3, r3, #1
 800a88a:	6713      	str	r3, [r2, #112]	; 0x70
 800a88c:	e01c      	b.n	800a8c8 <HAL_RCC_OscConfig+0x3c8>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	2b05      	cmp	r3, #5
 800a894:	d10c      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x3b0>
 800a896:	4b65      	ldr	r3, [pc, #404]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a89a:	4a64      	ldr	r2, [pc, #400]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a89c:	f043 0304 	orr.w	r3, r3, #4
 800a8a0:	6713      	str	r3, [r2, #112]	; 0x70
 800a8a2:	4b62      	ldr	r3, [pc, #392]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a8a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8a6:	4a61      	ldr	r2, [pc, #388]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a8a8:	f043 0301 	orr.w	r3, r3, #1
 800a8ac:	6713      	str	r3, [r2, #112]	; 0x70
 800a8ae:	e00b      	b.n	800a8c8 <HAL_RCC_OscConfig+0x3c8>
 800a8b0:	4b5e      	ldr	r3, [pc, #376]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a8b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b4:	4a5d      	ldr	r2, [pc, #372]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a8b6:	f023 0301 	bic.w	r3, r3, #1
 800a8ba:	6713      	str	r3, [r2, #112]	; 0x70
 800a8bc:	4b5b      	ldr	r3, [pc, #364]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c0:	4a5a      	ldr	r2, [pc, #360]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a8c2:	f023 0304 	bic.w	r3, r3, #4
 800a8c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d015      	beq.n	800a8fc <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8d0:	f7fe fb22 	bl	8008f18 <HAL_GetTick>
 800a8d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8d6:	e00a      	b.n	800a8ee <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a8d8:	f7fe fb1e 	bl	8008f18 <HAL_GetTick>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d901      	bls.n	800a8ee <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e11f      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8ee:	4b4f      	ldr	r3, [pc, #316]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f2:	f003 0302 	and.w	r3, r3, #2
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d0ee      	beq.n	800a8d8 <HAL_RCC_OscConfig+0x3d8>
 800a8fa:	e014      	b.n	800a926 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8fc:	f7fe fb0c 	bl	8008f18 <HAL_GetTick>
 800a900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a902:	e00a      	b.n	800a91a <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a904:	f7fe fb08 	bl	8008f18 <HAL_GetTick>
 800a908:	4602      	mov	r2, r0
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a912:	4293      	cmp	r3, r2
 800a914:	d901      	bls.n	800a91a <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e109      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a91a:	4b44      	ldr	r3, [pc, #272]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a91c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a91e:	f003 0302 	and.w	r3, r3, #2
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1ee      	bne.n	800a904 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a926:	7dfb      	ldrb	r3, [r7, #23]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d105      	bne.n	800a938 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a92c:	4b3f      	ldr	r3, [pc, #252]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a930:	4a3e      	ldr	r2, [pc, #248]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a936:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00c      	beq.n	800a95a <HAL_RCC_OscConfig+0x45a>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d008      	beq.n	800a95a <HAL_RCC_OscConfig+0x45a>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d004      	beq.n	800a95a <HAL_RCC_OscConfig+0x45a>
 800a950:	f240 11cf 	movw	r1, #463	; 0x1cf
 800a954:	4836      	ldr	r0, [pc, #216]	; (800aa30 <HAL_RCC_OscConfig+0x530>)
 800a956:	f001 fbd6 	bl	800c106 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 80e4 	beq.w	800ab2c <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a964:	4b31      	ldr	r3, [pc, #196]	; (800aa2c <HAL_RCC_OscConfig+0x52c>)
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	f003 030c 	and.w	r3, r3, #12
 800a96c:	2b08      	cmp	r3, #8
 800a96e:	f000 80ae 	beq.w	800aace <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	2b02      	cmp	r3, #2
 800a978:	f040 8092 	bne.w	800aaa0 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	69db      	ldr	r3, [r3, #28]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d009      	beq.n	800a998 <HAL_RCC_OscConfig+0x498>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	69db      	ldr	r3, [r3, #28]
 800a988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a98c:	d004      	beq.n	800a998 <HAL_RCC_OscConfig+0x498>
 800a98e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800a992:	4827      	ldr	r0, [pc, #156]	; (800aa30 <HAL_RCC_OscConfig+0x530>)
 800a994:	f001 fbb7 	bl	800c106 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a1b      	ldr	r3, [r3, #32]
 800a99c:	2b3f      	cmp	r3, #63	; 0x3f
 800a99e:	d904      	bls.n	800a9aa <HAL_RCC_OscConfig+0x4aa>
 800a9a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a9a4:	4822      	ldr	r0, [pc, #136]	; (800aa30 <HAL_RCC_OscConfig+0x530>)
 800a9a6:	f001 fbae 	bl	800c106 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ae:	2b31      	cmp	r3, #49	; 0x31
 800a9b0:	d904      	bls.n	800a9bc <HAL_RCC_OscConfig+0x4bc>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b6:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800a9ba:	d904      	bls.n	800a9c6 <HAL_RCC_OscConfig+0x4c6>
 800a9bc:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800a9c0:	481b      	ldr	r0, [pc, #108]	; (800aa30 <HAL_RCC_OscConfig+0x530>)
 800a9c2:	f001 fba0 	bl	800c106 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d010      	beq.n	800a9f0 <HAL_RCC_OscConfig+0x4f0>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d2:	2b04      	cmp	r3, #4
 800a9d4:	d00c      	beq.n	800a9f0 <HAL_RCC_OscConfig+0x4f0>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9da:	2b06      	cmp	r3, #6
 800a9dc:	d008      	beq.n	800a9f0 <HAL_RCC_OscConfig+0x4f0>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e2:	2b08      	cmp	r3, #8
 800a9e4:	d004      	beq.n	800a9f0 <HAL_RCC_OscConfig+0x4f0>
 800a9e6:	f240 11db 	movw	r1, #475	; 0x1db
 800a9ea:	4811      	ldr	r0, [pc, #68]	; (800aa30 <HAL_RCC_OscConfig+0x530>)
 800a9ec:	f001 fb8b 	bl	800c106 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d903      	bls.n	800aa00 <HAL_RCC_OscConfig+0x500>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	2b0f      	cmp	r3, #15
 800a9fe:	d904      	bls.n	800aa0a <HAL_RCC_OscConfig+0x50a>
 800aa00:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800aa04:	480a      	ldr	r0, [pc, #40]	; (800aa30 <HAL_RCC_OscConfig+0x530>)
 800aa06:	f001 fb7e 	bl	800c106 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa0a:	4b0b      	ldr	r3, [pc, #44]	; (800aa38 <HAL_RCC_OscConfig+0x538>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa10:	f7fe fa82 	bl	8008f18 <HAL_GetTick>
 800aa14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa16:	e011      	b.n	800aa3c <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa18:	f7fe fa7e 	bl	8008f18 <HAL_GetTick>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d90a      	bls.n	800aa3c <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	e081      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
 800aa2a:	bf00      	nop
 800aa2c:	40023800 	.word	0x40023800
 800aa30:	080166b8 	.word	0x080166b8
 800aa34:	40007000 	.word	0x40007000
 800aa38:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa3c:	4b3e      	ldr	r3, [pc, #248]	; (800ab38 <HAL_RCC_OscConfig+0x638>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1e7      	bne.n	800aa18 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	69da      	ldr	r2, [r3, #28]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	431a      	orrs	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	019b      	lsls	r3, r3, #6
 800aa58:	431a      	orrs	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa5e:	085b      	lsrs	r3, r3, #1
 800aa60:	3b01      	subs	r3, #1
 800aa62:	041b      	lsls	r3, r3, #16
 800aa64:	431a      	orrs	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6a:	061b      	lsls	r3, r3, #24
 800aa6c:	4932      	ldr	r1, [pc, #200]	; (800ab38 <HAL_RCC_OscConfig+0x638>)
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa72:	4b32      	ldr	r3, [pc, #200]	; (800ab3c <HAL_RCC_OscConfig+0x63c>)
 800aa74:	2201      	movs	r2, #1
 800aa76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa78:	f7fe fa4e 	bl	8008f18 <HAL_GetTick>
 800aa7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa7e:	e008      	b.n	800aa92 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa80:	f7fe fa4a 	bl	8008f18 <HAL_GetTick>
 800aa84:	4602      	mov	r2, r0
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d901      	bls.n	800aa92 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	e04d      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa92:	4b29      	ldr	r3, [pc, #164]	; (800ab38 <HAL_RCC_OscConfig+0x638>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d0f0      	beq.n	800aa80 <HAL_RCC_OscConfig+0x580>
 800aa9e:	e045      	b.n	800ab2c <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaa0:	4b26      	ldr	r3, [pc, #152]	; (800ab3c <HAL_RCC_OscConfig+0x63c>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaa6:	f7fe fa37 	bl	8008f18 <HAL_GetTick>
 800aaaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aaac:	e008      	b.n	800aac0 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aaae:	f7fe fa33 	bl	8008f18 <HAL_GetTick>
 800aab2:	4602      	mov	r2, r0
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d901      	bls.n	800aac0 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800aabc:	2303      	movs	r3, #3
 800aabe:	e036      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aac0:	4b1d      	ldr	r3, [pc, #116]	; (800ab38 <HAL_RCC_OscConfig+0x638>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1f0      	bne.n	800aaae <HAL_RCC_OscConfig+0x5ae>
 800aacc:	e02e      	b.n	800ab2c <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d101      	bne.n	800aada <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e029      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800aada:	4b17      	ldr	r3, [pc, #92]	; (800ab38 <HAL_RCC_OscConfig+0x638>)
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	69db      	ldr	r3, [r3, #28]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d11c      	bne.n	800ab28 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d115      	bne.n	800ab28 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ab02:	4013      	ands	r3, r2
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d10d      	bne.n	800ab28 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d106      	bne.n	800ab28 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d001      	beq.n	800ab2c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e000      	b.n	800ab2e <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	40023800 	.word	0x40023800
 800ab3c:	42470060 	.word	0x42470060

0800ab40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	e174      	b.n	800ae3e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d003      	beq.n	800ab64 <HAL_RCC_ClockConfig+0x24>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b0f      	cmp	r3, #15
 800ab62:	d904      	bls.n	800ab6e <HAL_RCC_ClockConfig+0x2e>
 800ab64:	f240 2151 	movw	r1, #593	; 0x251
 800ab68:	487b      	ldr	r0, [pc, #492]	; (800ad58 <HAL_RCC_ClockConfig+0x218>)
 800ab6a:	f001 facc 	bl	800c106 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d019      	beq.n	800aba8 <HAL_RCC_ClockConfig+0x68>
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d016      	beq.n	800aba8 <HAL_RCC_ClockConfig+0x68>
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d013      	beq.n	800aba8 <HAL_RCC_ClockConfig+0x68>
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	2b03      	cmp	r3, #3
 800ab84:	d010      	beq.n	800aba8 <HAL_RCC_ClockConfig+0x68>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	d00d      	beq.n	800aba8 <HAL_RCC_ClockConfig+0x68>
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	2b05      	cmp	r3, #5
 800ab90:	d00a      	beq.n	800aba8 <HAL_RCC_ClockConfig+0x68>
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2b06      	cmp	r3, #6
 800ab96:	d007      	beq.n	800aba8 <HAL_RCC_ClockConfig+0x68>
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	2b07      	cmp	r3, #7
 800ab9c:	d004      	beq.n	800aba8 <HAL_RCC_ClockConfig+0x68>
 800ab9e:	f240 2152 	movw	r1, #594	; 0x252
 800aba2:	486d      	ldr	r0, [pc, #436]	; (800ad58 <HAL_RCC_ClockConfig+0x218>)
 800aba4:	f001 faaf 	bl	800c106 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aba8:	4b6c      	ldr	r3, [pc, #432]	; (800ad5c <HAL_RCC_ClockConfig+0x21c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 030f 	and.w	r3, r3, #15
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d90c      	bls.n	800abd0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abb6:	4b69      	ldr	r3, [pc, #420]	; (800ad5c <HAL_RCC_ClockConfig+0x21c>)
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	b2d2      	uxtb	r2, r2
 800abbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800abbe:	4b67      	ldr	r3, [pc, #412]	; (800ad5c <HAL_RCC_ClockConfig+0x21c>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 030f 	and.w	r3, r3, #15
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d001      	beq.n	800abd0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	e136      	b.n	800ae3e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 0302 	and.w	r3, r3, #2
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d049      	beq.n	800ac70 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 0304 	and.w	r3, r3, #4
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d005      	beq.n	800abf4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800abe8:	4b5d      	ldr	r3, [pc, #372]	; (800ad60 <HAL_RCC_ClockConfig+0x220>)
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	4a5c      	ldr	r2, [pc, #368]	; (800ad60 <HAL_RCC_ClockConfig+0x220>)
 800abee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800abf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 0308 	and.w	r3, r3, #8
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d005      	beq.n	800ac0c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac00:	4b57      	ldr	r3, [pc, #348]	; (800ad60 <HAL_RCC_ClockConfig+0x220>)
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	4a56      	ldr	r2, [pc, #344]	; (800ad60 <HAL_RCC_ClockConfig+0x220>)
 800ac06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ac0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d024      	beq.n	800ac5e <HAL_RCC_ClockConfig+0x11e>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	2b80      	cmp	r3, #128	; 0x80
 800ac1a:	d020      	beq.n	800ac5e <HAL_RCC_ClockConfig+0x11e>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	2b90      	cmp	r3, #144	; 0x90
 800ac22:	d01c      	beq.n	800ac5e <HAL_RCC_ClockConfig+0x11e>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	2ba0      	cmp	r3, #160	; 0xa0
 800ac2a:	d018      	beq.n	800ac5e <HAL_RCC_ClockConfig+0x11e>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	2bb0      	cmp	r3, #176	; 0xb0
 800ac32:	d014      	beq.n	800ac5e <HAL_RCC_ClockConfig+0x11e>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	2bc0      	cmp	r3, #192	; 0xc0
 800ac3a:	d010      	beq.n	800ac5e <HAL_RCC_ClockConfig+0x11e>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	2bd0      	cmp	r3, #208	; 0xd0
 800ac42:	d00c      	beq.n	800ac5e <HAL_RCC_ClockConfig+0x11e>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	2be0      	cmp	r3, #224	; 0xe0
 800ac4a:	d008      	beq.n	800ac5e <HAL_RCC_ClockConfig+0x11e>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	2bf0      	cmp	r3, #240	; 0xf0
 800ac52:	d004      	beq.n	800ac5e <HAL_RCC_ClockConfig+0x11e>
 800ac54:	f240 2175 	movw	r1, #629	; 0x275
 800ac58:	483f      	ldr	r0, [pc, #252]	; (800ad58 <HAL_RCC_ClockConfig+0x218>)
 800ac5a:	f001 fa54 	bl	800c106 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac5e:	4b40      	ldr	r3, [pc, #256]	; (800ad60 <HAL_RCC_ClockConfig+0x220>)
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	493d      	ldr	r1, [pc, #244]	; (800ad60 <HAL_RCC_ClockConfig+0x220>)
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 0301 	and.w	r3, r3, #1
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d059      	beq.n	800ad30 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d010      	beq.n	800aca6 <HAL_RCC_ClockConfig+0x166>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d00c      	beq.n	800aca6 <HAL_RCC_ClockConfig+0x166>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d008      	beq.n	800aca6 <HAL_RCC_ClockConfig+0x166>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	2b03      	cmp	r3, #3
 800ac9a:	d004      	beq.n	800aca6 <HAL_RCC_ClockConfig+0x166>
 800ac9c:	f44f 711f 	mov.w	r1, #636	; 0x27c
 800aca0:	482d      	ldr	r0, [pc, #180]	; (800ad58 <HAL_RCC_ClockConfig+0x218>)
 800aca2:	f001 fa30 	bl	800c106 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d107      	bne.n	800acbe <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acae:	4b2c      	ldr	r3, [pc, #176]	; (800ad60 <HAL_RCC_ClockConfig+0x220>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d119      	bne.n	800acee <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e0bf      	b.n	800ae3e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d003      	beq.n	800acce <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800acca:	2b03      	cmp	r3, #3
 800accc:	d107      	bne.n	800acde <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800acce:	4b24      	ldr	r3, [pc, #144]	; (800ad60 <HAL_RCC_ClockConfig+0x220>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d109      	bne.n	800acee <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e0af      	b.n	800ae3e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acde:	4b20      	ldr	r3, [pc, #128]	; (800ad60 <HAL_RCC_ClockConfig+0x220>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 0302 	and.w	r3, r3, #2
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d101      	bne.n	800acee <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e0a7      	b.n	800ae3e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800acee:	4b1c      	ldr	r3, [pc, #112]	; (800ad60 <HAL_RCC_ClockConfig+0x220>)
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	f023 0203 	bic.w	r2, r3, #3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	4919      	ldr	r1, [pc, #100]	; (800ad60 <HAL_RCC_ClockConfig+0x220>)
 800acfc:	4313      	orrs	r3, r2
 800acfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ad00:	f7fe f90a 	bl	8008f18 <HAL_GetTick>
 800ad04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad06:	e00a      	b.n	800ad1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad08:	f7fe f906 	bl	8008f18 <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d901      	bls.n	800ad1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	e08f      	b.n	800ae3e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad1e:	4b10      	ldr	r3, [pc, #64]	; (800ad60 <HAL_RCC_ClockConfig+0x220>)
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	f003 020c 	and.w	r2, r3, #12
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d1eb      	bne.n	800ad08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ad30:	4b0a      	ldr	r3, [pc, #40]	; (800ad5c <HAL_RCC_ClockConfig+0x21c>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f003 030f 	and.w	r3, r3, #15
 800ad38:	683a      	ldr	r2, [r7, #0]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d212      	bcs.n	800ad64 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad3e:	4b07      	ldr	r3, [pc, #28]	; (800ad5c <HAL_RCC_ClockConfig+0x21c>)
 800ad40:	683a      	ldr	r2, [r7, #0]
 800ad42:	b2d2      	uxtb	r2, r2
 800ad44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad46:	4b05      	ldr	r3, [pc, #20]	; (800ad5c <HAL_RCC_ClockConfig+0x21c>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f003 030f 	and.w	r3, r3, #15
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d007      	beq.n	800ad64 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	e072      	b.n	800ae3e <HAL_RCC_ClockConfig+0x2fe>
 800ad58:	080166b8 	.word	0x080166b8
 800ad5c:	40023c00 	.word	0x40023c00
 800ad60:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0304 	and.w	r3, r3, #4
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d025      	beq.n	800adbc <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d018      	beq.n	800adaa <HAL_RCC_ClockConfig+0x26a>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad80:	d013      	beq.n	800adaa <HAL_RCC_ClockConfig+0x26a>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ad8a:	d00e      	beq.n	800adaa <HAL_RCC_ClockConfig+0x26a>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800ad94:	d009      	beq.n	800adaa <HAL_RCC_ClockConfig+0x26a>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800ad9e:	d004      	beq.n	800adaa <HAL_RCC_ClockConfig+0x26a>
 800ada0:	f240 21ba 	movw	r1, #698	; 0x2ba
 800ada4:	4828      	ldr	r0, [pc, #160]	; (800ae48 <HAL_RCC_ClockConfig+0x308>)
 800ada6:	f001 f9ae 	bl	800c106 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800adaa:	4b28      	ldr	r3, [pc, #160]	; (800ae4c <HAL_RCC_ClockConfig+0x30c>)
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	4925      	ldr	r1, [pc, #148]	; (800ae4c <HAL_RCC_ClockConfig+0x30c>)
 800adb8:	4313      	orrs	r3, r2
 800adba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f003 0308 	and.w	r3, r3, #8
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d026      	beq.n	800ae16 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d018      	beq.n	800ae02 <HAL_RCC_ClockConfig+0x2c2>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800add8:	d013      	beq.n	800ae02 <HAL_RCC_ClockConfig+0x2c2>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ade2:	d00e      	beq.n	800ae02 <HAL_RCC_ClockConfig+0x2c2>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800adec:	d009      	beq.n	800ae02 <HAL_RCC_ClockConfig+0x2c2>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800adf6:	d004      	beq.n	800ae02 <HAL_RCC_ClockConfig+0x2c2>
 800adf8:	f240 21c1 	movw	r1, #705	; 0x2c1
 800adfc:	4812      	ldr	r0, [pc, #72]	; (800ae48 <HAL_RCC_ClockConfig+0x308>)
 800adfe:	f001 f982 	bl	800c106 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae02:	4b12      	ldr	r3, [pc, #72]	; (800ae4c <HAL_RCC_ClockConfig+0x30c>)
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	490e      	ldr	r1, [pc, #56]	; (800ae4c <HAL_RCC_ClockConfig+0x30c>)
 800ae12:	4313      	orrs	r3, r2
 800ae14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ae16:	f000 f821 	bl	800ae5c <HAL_RCC_GetSysClockFreq>
 800ae1a:	4601      	mov	r1, r0
 800ae1c:	4b0b      	ldr	r3, [pc, #44]	; (800ae4c <HAL_RCC_ClockConfig+0x30c>)
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	091b      	lsrs	r3, r3, #4
 800ae22:	f003 030f 	and.w	r3, r3, #15
 800ae26:	4a0a      	ldr	r2, [pc, #40]	; (800ae50 <HAL_RCC_ClockConfig+0x310>)
 800ae28:	5cd3      	ldrb	r3, [r2, r3]
 800ae2a:	fa21 f303 	lsr.w	r3, r1, r3
 800ae2e:	4a09      	ldr	r2, [pc, #36]	; (800ae54 <HAL_RCC_ClockConfig+0x314>)
 800ae30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ae32:	4b09      	ldr	r3, [pc, #36]	; (800ae58 <HAL_RCC_ClockConfig+0x318>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7fe f82a 	bl	8008e90 <HAL_InitTick>

  return HAL_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	080166b8 	.word	0x080166b8
 800ae4c:	40023800 	.word	0x40023800
 800ae50:	08017848 	.word	0x08017848
 800ae54:	20000000 	.word	0x20000000
 800ae58:	20000004 	.word	0x20000004

0800ae5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ae62:	2300      	movs	r3, #0
 800ae64:	607b      	str	r3, [r7, #4]
 800ae66:	2300      	movs	r3, #0
 800ae68:	60fb      	str	r3, [r7, #12]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae72:	4b50      	ldr	r3, [pc, #320]	; (800afb4 <HAL_RCC_GetSysClockFreq+0x158>)
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	f003 030c 	and.w	r3, r3, #12
 800ae7a:	2b04      	cmp	r3, #4
 800ae7c:	d007      	beq.n	800ae8e <HAL_RCC_GetSysClockFreq+0x32>
 800ae7e:	2b08      	cmp	r3, #8
 800ae80:	d008      	beq.n	800ae94 <HAL_RCC_GetSysClockFreq+0x38>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f040 808d 	bne.w	800afa2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ae88:	4b4b      	ldr	r3, [pc, #300]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800ae8a:	60bb      	str	r3, [r7, #8]
       break;
 800ae8c:	e08c      	b.n	800afa8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ae8e:	4b4b      	ldr	r3, [pc, #300]	; (800afbc <HAL_RCC_GetSysClockFreq+0x160>)
 800ae90:	60bb      	str	r3, [r7, #8]
      break;
 800ae92:	e089      	b.n	800afa8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ae94:	4b47      	ldr	r3, [pc, #284]	; (800afb4 <HAL_RCC_GetSysClockFreq+0x158>)
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ae9e:	4b45      	ldr	r3, [pc, #276]	; (800afb4 <HAL_RCC_GetSysClockFreq+0x158>)
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d023      	beq.n	800aef2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aeaa:	4b42      	ldr	r3, [pc, #264]	; (800afb4 <HAL_RCC_GetSysClockFreq+0x158>)
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	099b      	lsrs	r3, r3, #6
 800aeb0:	f04f 0400 	mov.w	r4, #0
 800aeb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800aeb8:	f04f 0200 	mov.w	r2, #0
 800aebc:	ea03 0501 	and.w	r5, r3, r1
 800aec0:	ea04 0602 	and.w	r6, r4, r2
 800aec4:	4a3d      	ldr	r2, [pc, #244]	; (800afbc <HAL_RCC_GetSysClockFreq+0x160>)
 800aec6:	fb02 f106 	mul.w	r1, r2, r6
 800aeca:	2200      	movs	r2, #0
 800aecc:	fb02 f205 	mul.w	r2, r2, r5
 800aed0:	440a      	add	r2, r1
 800aed2:	493a      	ldr	r1, [pc, #232]	; (800afbc <HAL_RCC_GetSysClockFreq+0x160>)
 800aed4:	fba5 0101 	umull	r0, r1, r5, r1
 800aed8:	1853      	adds	r3, r2, r1
 800aeda:	4619      	mov	r1, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f04f 0400 	mov.w	r4, #0
 800aee2:	461a      	mov	r2, r3
 800aee4:	4623      	mov	r3, r4
 800aee6:	f7fc fbd9 	bl	800769c <__aeabi_uldivmod>
 800aeea:	4603      	mov	r3, r0
 800aeec:	460c      	mov	r4, r1
 800aeee:	60fb      	str	r3, [r7, #12]
 800aef0:	e049      	b.n	800af86 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aef2:	4b30      	ldr	r3, [pc, #192]	; (800afb4 <HAL_RCC_GetSysClockFreq+0x158>)
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	099b      	lsrs	r3, r3, #6
 800aef8:	f04f 0400 	mov.w	r4, #0
 800aefc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800af00:	f04f 0200 	mov.w	r2, #0
 800af04:	ea03 0501 	and.w	r5, r3, r1
 800af08:	ea04 0602 	and.w	r6, r4, r2
 800af0c:	4629      	mov	r1, r5
 800af0e:	4632      	mov	r2, r6
 800af10:	f04f 0300 	mov.w	r3, #0
 800af14:	f04f 0400 	mov.w	r4, #0
 800af18:	0154      	lsls	r4, r2, #5
 800af1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800af1e:	014b      	lsls	r3, r1, #5
 800af20:	4619      	mov	r1, r3
 800af22:	4622      	mov	r2, r4
 800af24:	1b49      	subs	r1, r1, r5
 800af26:	eb62 0206 	sbc.w	r2, r2, r6
 800af2a:	f04f 0300 	mov.w	r3, #0
 800af2e:	f04f 0400 	mov.w	r4, #0
 800af32:	0194      	lsls	r4, r2, #6
 800af34:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800af38:	018b      	lsls	r3, r1, #6
 800af3a:	1a5b      	subs	r3, r3, r1
 800af3c:	eb64 0402 	sbc.w	r4, r4, r2
 800af40:	f04f 0100 	mov.w	r1, #0
 800af44:	f04f 0200 	mov.w	r2, #0
 800af48:	00e2      	lsls	r2, r4, #3
 800af4a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800af4e:	00d9      	lsls	r1, r3, #3
 800af50:	460b      	mov	r3, r1
 800af52:	4614      	mov	r4, r2
 800af54:	195b      	adds	r3, r3, r5
 800af56:	eb44 0406 	adc.w	r4, r4, r6
 800af5a:	f04f 0100 	mov.w	r1, #0
 800af5e:	f04f 0200 	mov.w	r2, #0
 800af62:	02a2      	lsls	r2, r4, #10
 800af64:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800af68:	0299      	lsls	r1, r3, #10
 800af6a:	460b      	mov	r3, r1
 800af6c:	4614      	mov	r4, r2
 800af6e:	4618      	mov	r0, r3
 800af70:	4621      	mov	r1, r4
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f04f 0400 	mov.w	r4, #0
 800af78:	461a      	mov	r2, r3
 800af7a:	4623      	mov	r3, r4
 800af7c:	f7fc fb8e 	bl	800769c <__aeabi_uldivmod>
 800af80:	4603      	mov	r3, r0
 800af82:	460c      	mov	r4, r1
 800af84:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800af86:	4b0b      	ldr	r3, [pc, #44]	; (800afb4 <HAL_RCC_GetSysClockFreq+0x158>)
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	0c1b      	lsrs	r3, r3, #16
 800af8c:	f003 0303 	and.w	r3, r3, #3
 800af90:	3301      	adds	r3, #1
 800af92:	005b      	lsls	r3, r3, #1
 800af94:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af9e:	60bb      	str	r3, [r7, #8]
      break;
 800afa0:	e002      	b.n	800afa8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800afa2:	4b05      	ldr	r3, [pc, #20]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800afa4:	60bb      	str	r3, [r7, #8]
      break;
 800afa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 800afa8:	68bb      	ldr	r3, [r7, #8]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3714      	adds	r7, #20
 800afae:	46bd      	mov	sp, r7
 800afb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afb2:	bf00      	nop
 800afb4:	40023800 	.word	0x40023800
 800afb8:	00f42400 	.word	0x00f42400
 800afbc:	017d7840 	.word	0x017d7840

0800afc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afc0:	b480      	push	{r7}
 800afc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800afc4:	4b03      	ldr	r3, [pc, #12]	; (800afd4 <HAL_RCC_GetHCLKFreq+0x14>)
 800afc6:	681b      	ldr	r3, [r3, #0]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	20000000 	.word	0x20000000

0800afd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800afdc:	f7ff fff0 	bl	800afc0 <HAL_RCC_GetHCLKFreq>
 800afe0:	4601      	mov	r1, r0
 800afe2:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	0a9b      	lsrs	r3, r3, #10
 800afe8:	f003 0307 	and.w	r3, r3, #7
 800afec:	4a03      	ldr	r2, [pc, #12]	; (800affc <HAL_RCC_GetPCLK1Freq+0x24>)
 800afee:	5cd3      	ldrb	r3, [r2, r3]
 800aff0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	40023800 	.word	0x40023800
 800affc:	08017858 	.word	0x08017858

0800b000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b004:	f7ff ffdc 	bl	800afc0 <HAL_RCC_GetHCLKFreq>
 800b008:	4601      	mov	r1, r0
 800b00a:	4b05      	ldr	r3, [pc, #20]	; (800b020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	0b5b      	lsrs	r3, r3, #13
 800b010:	f003 0307 	and.w	r3, r3, #7
 800b014:	4a03      	ldr	r2, [pc, #12]	; (800b024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b016:	5cd3      	ldrb	r3, [r2, r3]
 800b018:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	40023800 	.word	0x40023800
 800b024:	08017858 	.word	0x08017858

0800b028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	e0b4      	b.n	800b1a4 <HAL_UART_Init+0x17c>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	699b      	ldr	r3, [r3, #24]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d031      	beq.n	800b0a6 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a59      	ldr	r2, [pc, #356]	; (800b1ac <HAL_UART_Init+0x184>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d013      	beq.n	800b074 <HAL_UART_Init+0x4c>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a57      	ldr	r2, [pc, #348]	; (800b1b0 <HAL_UART_Init+0x188>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d00e      	beq.n	800b074 <HAL_UART_Init+0x4c>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a56      	ldr	r2, [pc, #344]	; (800b1b4 <HAL_UART_Init+0x18c>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d009      	beq.n	800b074 <HAL_UART_Init+0x4c>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a54      	ldr	r2, [pc, #336]	; (800b1b8 <HAL_UART_Init+0x190>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d004      	beq.n	800b074 <HAL_UART_Init+0x4c>
 800b06a:	f240 114b 	movw	r1, #331	; 0x14b
 800b06e:	4853      	ldr	r0, [pc, #332]	; (800b1bc <HAL_UART_Init+0x194>)
 800b070:	f001 f849 	bl	800c106 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d037      	beq.n	800b0ec <HAL_UART_Init+0xc4>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b084:	d032      	beq.n	800b0ec <HAL_UART_Init+0xc4>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	699b      	ldr	r3, [r3, #24]
 800b08a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b08e:	d02d      	beq.n	800b0ec <HAL_UART_Init+0xc4>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b098:	d028      	beq.n	800b0ec <HAL_UART_Init+0xc4>
 800b09a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800b09e:	4847      	ldr	r0, [pc, #284]	; (800b1bc <HAL_UART_Init+0x194>)
 800b0a0:	f001 f831 	bl	800c106 <assert_failed>
 800b0a4:	e022      	b.n	800b0ec <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a40      	ldr	r2, [pc, #256]	; (800b1ac <HAL_UART_Init+0x184>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d01d      	beq.n	800b0ec <HAL_UART_Init+0xc4>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a3e      	ldr	r2, [pc, #248]	; (800b1b0 <HAL_UART_Init+0x188>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d018      	beq.n	800b0ec <HAL_UART_Init+0xc4>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a3d      	ldr	r2, [pc, #244]	; (800b1b4 <HAL_UART_Init+0x18c>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d013      	beq.n	800b0ec <HAL_UART_Init+0xc4>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a3d      	ldr	r2, [pc, #244]	; (800b1c0 <HAL_UART_Init+0x198>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d00e      	beq.n	800b0ec <HAL_UART_Init+0xc4>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a3c      	ldr	r2, [pc, #240]	; (800b1c4 <HAL_UART_Init+0x19c>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d009      	beq.n	800b0ec <HAL_UART_Init+0xc4>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a36      	ldr	r2, [pc, #216]	; (800b1b8 <HAL_UART_Init+0x190>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d004      	beq.n	800b0ec <HAL_UART_Init+0xc4>
 800b0e2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800b0e6:	4835      	ldr	r0, [pc, #212]	; (800b1bc <HAL_UART_Init+0x194>)
 800b0e8:	f001 f80d 	bl	800c106 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d009      	beq.n	800b108 <HAL_UART_Init+0xe0>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0fc:	d004      	beq.n	800b108 <HAL_UART_Init+0xe0>
 800b0fe:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800b102:	482e      	ldr	r0, [pc, #184]	; (800b1bc <HAL_UART_Init+0x194>)
 800b104:	f000 ffff 	bl	800c106 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	69db      	ldr	r3, [r3, #28]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d009      	beq.n	800b124 <HAL_UART_Init+0xfc>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	69db      	ldr	r3, [r3, #28]
 800b114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b118:	d004      	beq.n	800b124 <HAL_UART_Init+0xfc>
 800b11a:	f240 1153 	movw	r1, #339	; 0x153
 800b11e:	4827      	ldr	r0, [pc, #156]	; (800b1bc <HAL_UART_Init+0x194>)
 800b120:	f000 fff1 	bl	800c106 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d106      	bne.n	800b13e <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7fd fd7f 	bl	8008c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2224      	movs	r2, #36	; 0x24
 800b142:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68da      	ldr	r2, [r3, #12]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b154:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 fb1a 	bl	800b790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	691a      	ldr	r2, [r3, #16]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b16a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	695a      	ldr	r2, [r3, #20]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b17a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68da      	ldr	r2, [r3, #12]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b18a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2220      	movs	r2, #32
 800b196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2220      	movs	r2, #32
 800b19e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3708      	adds	r7, #8
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	40011000 	.word	0x40011000
 800b1b0:	40004400 	.word	0x40004400
 800b1b4:	40004800 	.word	0x40004800
 800b1b8:	40011400 	.word	0x40011400
 800b1bc:	080166f0 	.word	0x080166f0
 800b1c0:	40004c00 	.word	0x40004c00
 800b1c4:	40005000 	.word	0x40005000

0800b1c8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d101      	bne.n	800b1da <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e041      	b.n	800b25e <HAL_UART_DeInit+0x96>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a22      	ldr	r2, [pc, #136]	; (800b268 <HAL_UART_DeInit+0xa0>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d01d      	beq.n	800b220 <HAL_UART_DeInit+0x58>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a20      	ldr	r2, [pc, #128]	; (800b26c <HAL_UART_DeInit+0xa4>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d018      	beq.n	800b220 <HAL_UART_DeInit+0x58>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a1f      	ldr	r2, [pc, #124]	; (800b270 <HAL_UART_DeInit+0xa8>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d013      	beq.n	800b220 <HAL_UART_DeInit+0x58>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a1d      	ldr	r2, [pc, #116]	; (800b274 <HAL_UART_DeInit+0xac>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d00e      	beq.n	800b220 <HAL_UART_DeInit+0x58>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a1c      	ldr	r2, [pc, #112]	; (800b278 <HAL_UART_DeInit+0xb0>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d009      	beq.n	800b220 <HAL_UART_DeInit+0x58>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a1a      	ldr	r2, [pc, #104]	; (800b27c <HAL_UART_DeInit+0xb4>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d004      	beq.n	800b220 <HAL_UART_DeInit+0x58>
 800b216:	f240 217a 	movw	r1, #634	; 0x27a
 800b21a:	4819      	ldr	r0, [pc, #100]	; (800b280 <HAL_UART_DeInit+0xb8>)
 800b21c:	f000 ff73 	bl	800c106 <assert_failed>

  huart->gState = HAL_UART_STATE_BUSY;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2224      	movs	r2, #36	; 0x24
 800b224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68da      	ldr	r2, [r3, #12]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b236:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f7fd fdb3 	bl	8008da4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	40011000 	.word	0x40011000
 800b26c:	40004400 	.word	0x40004400
 800b270:	40004800 	.word	0x40004800
 800b274:	40004c00 	.word	0x40004c00
 800b278:	40005000 	.word	0x40005000
 800b27c:	40011400 	.word	0x40011400
 800b280:	080166f0 	.word	0x080166f0

0800b284 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	4613      	mov	r3, r2
 800b290:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	2b20      	cmp	r3, #32
 800b29c:	d130      	bne.n	800b300 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <HAL_UART_Transmit_IT+0x26>
 800b2a4:	88fb      	ldrh	r3, [r7, #6]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d101      	bne.n	800b2ae <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e029      	b.n	800b302 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d101      	bne.n	800b2bc <HAL_UART_Transmit_IT+0x38>
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	e022      	b.n	800b302 <HAL_UART_Transmit_IT+0x7e>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	88fa      	ldrh	r2, [r7, #6]
 800b2ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	88fa      	ldrh	r2, [r7, #6]
 800b2d4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2221      	movs	r2, #33	; 0x21
 800b2e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	68da      	ldr	r2, [r3, #12]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b2fa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	e000      	b.n	800b302 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b300:	2302      	movs	r3, #2
  }
}
 800b302:	4618      	mov	r0, r3
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
	...

0800b310 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b088      	sub	sp, #32
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	695b      	ldr	r3, [r3, #20]
 800b32e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800b330:	2300      	movs	r3, #0
 800b332:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800b334:	2300      	movs	r3, #0
 800b336:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	f003 030f 	and.w	r3, r3, #15
 800b33e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10d      	bne.n	800b362 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	f003 0320 	and.w	r3, r3, #32
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d008      	beq.n	800b362 <HAL_UART_IRQHandler+0x52>
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	f003 0320 	and.w	r3, r3, #32
 800b356:	2b00      	cmp	r3, #0
 800b358:	d003      	beq.n	800b362 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 f996 	bl	800b68c <UART_Receive_IT>
      return;
 800b360:	e0d1      	b.n	800b506 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 80b0 	beq.w	800b4ca <HAL_UART_IRQHandler+0x1ba>
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	f003 0301 	and.w	r3, r3, #1
 800b370:	2b00      	cmp	r3, #0
 800b372:	d105      	bne.n	800b380 <HAL_UART_IRQHandler+0x70>
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f000 80a5 	beq.w	800b4ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	f003 0301 	and.w	r3, r3, #1
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00a      	beq.n	800b3a0 <HAL_UART_IRQHandler+0x90>
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b390:	2b00      	cmp	r3, #0
 800b392:	d005      	beq.n	800b3a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b398:	f043 0201 	orr.w	r2, r3, #1
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	f003 0304 	and.w	r3, r3, #4
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00a      	beq.n	800b3c0 <HAL_UART_IRQHandler+0xb0>
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d005      	beq.n	800b3c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3b8:	f043 0202 	orr.w	r2, r3, #2
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	f003 0302 	and.w	r3, r3, #2
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00a      	beq.n	800b3e0 <HAL_UART_IRQHandler+0xd0>
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	f003 0301 	and.w	r3, r3, #1
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d005      	beq.n	800b3e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3d8:	f043 0204 	orr.w	r2, r3, #4
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	f003 0308 	and.w	r3, r3, #8
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00f      	beq.n	800b40a <HAL_UART_IRQHandler+0xfa>
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	f003 0320 	and.w	r3, r3, #32
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d104      	bne.n	800b3fe <HAL_UART_IRQHandler+0xee>
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	f003 0301 	and.w	r3, r3, #1
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d005      	beq.n	800b40a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b402:	f043 0208 	orr.w	r2, r3, #8
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d078      	beq.n	800b504 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	f003 0320 	and.w	r3, r3, #32
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d007      	beq.n	800b42c <HAL_UART_IRQHandler+0x11c>
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	f003 0320 	and.w	r3, r3, #32
 800b422:	2b00      	cmp	r3, #0
 800b424:	d002      	beq.n	800b42c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f930 	bl	800b68c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b436:	2b40      	cmp	r3, #64	; 0x40
 800b438:	bf0c      	ite	eq
 800b43a:	2301      	moveq	r3, #1
 800b43c:	2300      	movne	r3, #0
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b446:	f003 0308 	and.w	r3, r3, #8
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d102      	bne.n	800b454 <HAL_UART_IRQHandler+0x144>
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d031      	beq.n	800b4b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 f879 	bl	800b54c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b464:	2b40      	cmp	r3, #64	; 0x40
 800b466:	d123      	bne.n	800b4b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	695a      	ldr	r2, [r3, #20]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b476:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d013      	beq.n	800b4a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b484:	4a21      	ldr	r2, [pc, #132]	; (800b50c <HAL_UART_IRQHandler+0x1fc>)
 800b486:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7fe f9d3 	bl	8009838 <HAL_DMA_Abort_IT>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d016      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b49c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4a6:	e00e      	b.n	800b4c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 f845 	bl	800b538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4ae:	e00a      	b.n	800b4c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f841 	bl	800b538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4b6:	e006      	b.n	800b4c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f83d 	bl	800b538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800b4c4:	e01e      	b.n	800b504 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4c6:	bf00      	nop
    return;
 800b4c8:	e01c      	b.n	800b504 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d008      	beq.n	800b4e6 <HAL_UART_IRQHandler+0x1d6>
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f866 	bl	800b5b0 <UART_Transmit_IT>
    return;
 800b4e4:	e00f      	b.n	800b506 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00a      	beq.n	800b506 <HAL_UART_IRQHandler+0x1f6>
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d005      	beq.n	800b506 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 f8ae 	bl	800b65c <UART_EndTransmit_IT>
    return;
 800b500:	bf00      	nop
 800b502:	e000      	b.n	800b506 <HAL_UART_IRQHandler+0x1f6>
    return;
 800b504:	bf00      	nop
  }
}
 800b506:	3720      	adds	r7, #32
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	0800b589 	.word	0x0800b589

0800b510 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	68da      	ldr	r2, [r3, #12]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b562:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	695a      	ldr	r2, [r3, #20]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f022 0201 	bic.w	r2, r2, #1
 800b572:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2220      	movs	r2, #32
 800b578:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b594:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f7ff ffc8 	bl	800b538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5a8:	bf00      	nop
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	2b21      	cmp	r3, #33	; 0x21
 800b5c2:	d144      	bne.n	800b64e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5cc:	d11a      	bne.n	800b604 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a1b      	ldr	r3, [r3, #32]
 800b5d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5e2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d105      	bne.n	800b5f8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a1b      	ldr	r3, [r3, #32]
 800b5f0:	1c9a      	adds	r2, r3, #2
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	621a      	str	r2, [r3, #32]
 800b5f6:	e00e      	b.n	800b616 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a1b      	ldr	r3, [r3, #32]
 800b5fc:	1c5a      	adds	r2, r3, #1
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	621a      	str	r2, [r3, #32]
 800b602:	e008      	b.n	800b616 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a1b      	ldr	r3, [r3, #32]
 800b608:	1c59      	adds	r1, r3, #1
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	6211      	str	r1, [r2, #32]
 800b60e:	781a      	ldrb	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	3b01      	subs	r3, #1
 800b61e:	b29b      	uxth	r3, r3
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	4619      	mov	r1, r3
 800b624:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10f      	bne.n	800b64a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68da      	ldr	r2, [r3, #12]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b638:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68da      	ldr	r2, [r3, #12]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b648:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b64a:	2300      	movs	r3, #0
 800b64c:	e000      	b.n	800b650 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b64e:	2302      	movs	r3, #2
  }
}
 800b650:	4618      	mov	r0, r3
 800b652:	3714      	adds	r7, #20
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68da      	ldr	r2, [r3, #12]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b672:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2220      	movs	r2, #32
 800b678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7ff ff47 	bl	800b510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	2b22      	cmp	r3, #34	; 0x22
 800b69e:	d171      	bne.n	800b784 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6a8:	d123      	bne.n	800b6f2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10e      	bne.n	800b6d6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ce:	1c9a      	adds	r2, r3, #2
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	629a      	str	r2, [r3, #40]	; 0x28
 800b6d4:	e029      	b.n	800b72a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	629a      	str	r2, [r3, #40]	; 0x28
 800b6f0:	e01b      	b.n	800b72a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d10a      	bne.n	800b710 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	6858      	ldr	r0, [r3, #4]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b704:	1c59      	adds	r1, r3, #1
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	6291      	str	r1, [r2, #40]	; 0x28
 800b70a:	b2c2      	uxtb	r2, r0
 800b70c:	701a      	strb	r2, [r3, #0]
 800b70e:	e00c      	b.n	800b72a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	b2da      	uxtb	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71c:	1c58      	adds	r0, r3, #1
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	6288      	str	r0, [r1, #40]	; 0x28
 800b722:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b726:	b2d2      	uxtb	r2, r2
 800b728:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b72e:	b29b      	uxth	r3, r3
 800b730:	3b01      	subs	r3, #1
 800b732:	b29b      	uxth	r3, r3
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	4619      	mov	r1, r3
 800b738:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d120      	bne.n	800b780 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68da      	ldr	r2, [r3, #12]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f022 0220 	bic.w	r2, r2, #32
 800b74c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68da      	ldr	r2, [r3, #12]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b75c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	695a      	ldr	r2, [r3, #20]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f022 0201 	bic.w	r2, r2, #1
 800b76c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2220      	movs	r2, #32
 800b772:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f7ff fed4 	bl	800b524 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b77c:	2300      	movs	r3, #0
 800b77e:	e002      	b.n	800b786 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b780:	2300      	movs	r3, #0
 800b782:	e000      	b.n	800b786 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b784:	2302      	movs	r3, #2
  }
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
	...

0800b790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b794:	b085      	sub	sp, #20
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	4a9a      	ldr	r2, [pc, #616]	; (800ba08 <UART_SetConfig+0x278>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d904      	bls.n	800b7ae <UART_SetConfig+0x1e>
 800b7a4:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800b7a8:	4898      	ldr	r0, [pc, #608]	; (800ba0c <UART_SetConfig+0x27c>)
 800b7aa:	f000 fcac 	bl	800c106 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d009      	beq.n	800b7ca <UART_SetConfig+0x3a>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7be:	d004      	beq.n	800b7ca <UART_SetConfig+0x3a>
 800b7c0:	f640 31fc 	movw	r1, #3068	; 0xbfc
 800b7c4:	4891      	ldr	r0, [pc, #580]	; (800ba0c <UART_SetConfig+0x27c>)
 800b7c6:	f000 fc9e 	bl	800c106 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00e      	beq.n	800b7f0 <UART_SetConfig+0x60>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7da:	d009      	beq.n	800b7f0 <UART_SetConfig+0x60>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b7e4:	d004      	beq.n	800b7f0 <UART_SetConfig+0x60>
 800b7e6:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800b7ea:	4888      	ldr	r0, [pc, #544]	; (800ba0c <UART_SetConfig+0x27c>)
 800b7ec:	f000 fc8b 	bl	800c106 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	695a      	ldr	r2, [r3, #20]
 800b7f4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d103      	bne.n	800b806 <UART_SetConfig+0x76>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d104      	bne.n	800b810 <UART_SetConfig+0x80>
 800b806:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800b80a:	4880      	ldr	r0, [pc, #512]	; (800ba0c <UART_SetConfig+0x27c>)
 800b80c:	f000 fc7b 	bl	800c106 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	68da      	ldr	r2, [r3, #12]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	430a      	orrs	r2, r1
 800b824:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	689a      	ldr	r2, [r3, #8]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	431a      	orrs	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	695b      	ldr	r3, [r3, #20]
 800b834:	431a      	orrs	r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	69db      	ldr	r3, [r3, #28]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b848:	f023 030c 	bic.w	r3, r3, #12
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	6812      	ldr	r2, [r2, #0]
 800b850:	68f9      	ldr	r1, [r7, #12]
 800b852:	430b      	orrs	r3, r1
 800b854:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	695b      	ldr	r3, [r3, #20]
 800b85c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	699a      	ldr	r2, [r3, #24]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	430a      	orrs	r2, r1
 800b86a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	69db      	ldr	r3, [r3, #28]
 800b870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b874:	f040 818f 	bne.w	800bb96 <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a64      	ldr	r2, [pc, #400]	; (800ba10 <UART_SetConfig+0x280>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d005      	beq.n	800b88e <UART_SetConfig+0xfe>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a63      	ldr	r2, [pc, #396]	; (800ba14 <UART_SetConfig+0x284>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	f040 80c7 	bne.w	800ba1c <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b88e:	f7ff fbb7 	bl	800b000 <HAL_RCC_GetPCLK2Freq>
 800b892:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	461d      	mov	r5, r3
 800b898:	f04f 0600 	mov.w	r6, #0
 800b89c:	46a8      	mov	r8, r5
 800b89e:	46b1      	mov	r9, r6
 800b8a0:	eb18 0308 	adds.w	r3, r8, r8
 800b8a4:	eb49 0409 	adc.w	r4, r9, r9
 800b8a8:	4698      	mov	r8, r3
 800b8aa:	46a1      	mov	r9, r4
 800b8ac:	eb18 0805 	adds.w	r8, r8, r5
 800b8b0:	eb49 0906 	adc.w	r9, r9, r6
 800b8b4:	f04f 0100 	mov.w	r1, #0
 800b8b8:	f04f 0200 	mov.w	r2, #0
 800b8bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b8c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b8c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b8c8:	4688      	mov	r8, r1
 800b8ca:	4691      	mov	r9, r2
 800b8cc:	eb18 0005 	adds.w	r0, r8, r5
 800b8d0:	eb49 0106 	adc.w	r1, r9, r6
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	461d      	mov	r5, r3
 800b8da:	f04f 0600 	mov.w	r6, #0
 800b8de:	196b      	adds	r3, r5, r5
 800b8e0:	eb46 0406 	adc.w	r4, r6, r6
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	4623      	mov	r3, r4
 800b8e8:	f7fb fed8 	bl	800769c <__aeabi_uldivmod>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	4b49      	ldr	r3, [pc, #292]	; (800ba18 <UART_SetConfig+0x288>)
 800b8f4:	fba3 2302 	umull	r2, r3, r3, r2
 800b8f8:	095b      	lsrs	r3, r3, #5
 800b8fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	461d      	mov	r5, r3
 800b902:	f04f 0600 	mov.w	r6, #0
 800b906:	46a9      	mov	r9, r5
 800b908:	46b2      	mov	sl, r6
 800b90a:	eb19 0309 	adds.w	r3, r9, r9
 800b90e:	eb4a 040a 	adc.w	r4, sl, sl
 800b912:	4699      	mov	r9, r3
 800b914:	46a2      	mov	sl, r4
 800b916:	eb19 0905 	adds.w	r9, r9, r5
 800b91a:	eb4a 0a06 	adc.w	sl, sl, r6
 800b91e:	f04f 0100 	mov.w	r1, #0
 800b922:	f04f 0200 	mov.w	r2, #0
 800b926:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b92a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b92e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b932:	4689      	mov	r9, r1
 800b934:	4692      	mov	sl, r2
 800b936:	eb19 0005 	adds.w	r0, r9, r5
 800b93a:	eb4a 0106 	adc.w	r1, sl, r6
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	461d      	mov	r5, r3
 800b944:	f04f 0600 	mov.w	r6, #0
 800b948:	196b      	adds	r3, r5, r5
 800b94a:	eb46 0406 	adc.w	r4, r6, r6
 800b94e:	461a      	mov	r2, r3
 800b950:	4623      	mov	r3, r4
 800b952:	f7fb fea3 	bl	800769c <__aeabi_uldivmod>
 800b956:	4603      	mov	r3, r0
 800b958:	460c      	mov	r4, r1
 800b95a:	461a      	mov	r2, r3
 800b95c:	4b2e      	ldr	r3, [pc, #184]	; (800ba18 <UART_SetConfig+0x288>)
 800b95e:	fba3 1302 	umull	r1, r3, r3, r2
 800b962:	095b      	lsrs	r3, r3, #5
 800b964:	2164      	movs	r1, #100	; 0x64
 800b966:	fb01 f303 	mul.w	r3, r1, r3
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	00db      	lsls	r3, r3, #3
 800b96e:	3332      	adds	r3, #50	; 0x32
 800b970:	4a29      	ldr	r2, [pc, #164]	; (800ba18 <UART_SetConfig+0x288>)
 800b972:	fba2 2303 	umull	r2, r3, r2, r3
 800b976:	095b      	lsrs	r3, r3, #5
 800b978:	005b      	lsls	r3, r3, #1
 800b97a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b97e:	4498      	add	r8, r3
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	461d      	mov	r5, r3
 800b984:	f04f 0600 	mov.w	r6, #0
 800b988:	46a9      	mov	r9, r5
 800b98a:	46b2      	mov	sl, r6
 800b98c:	eb19 0309 	adds.w	r3, r9, r9
 800b990:	eb4a 040a 	adc.w	r4, sl, sl
 800b994:	4699      	mov	r9, r3
 800b996:	46a2      	mov	sl, r4
 800b998:	eb19 0905 	adds.w	r9, r9, r5
 800b99c:	eb4a 0a06 	adc.w	sl, sl, r6
 800b9a0:	f04f 0100 	mov.w	r1, #0
 800b9a4:	f04f 0200 	mov.w	r2, #0
 800b9a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b9ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b9b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b9b4:	4689      	mov	r9, r1
 800b9b6:	4692      	mov	sl, r2
 800b9b8:	eb19 0005 	adds.w	r0, r9, r5
 800b9bc:	eb4a 0106 	adc.w	r1, sl, r6
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	461d      	mov	r5, r3
 800b9c6:	f04f 0600 	mov.w	r6, #0
 800b9ca:	196b      	adds	r3, r5, r5
 800b9cc:	eb46 0406 	adc.w	r4, r6, r6
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	4623      	mov	r3, r4
 800b9d4:	f7fb fe62 	bl	800769c <__aeabi_uldivmod>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	460c      	mov	r4, r1
 800b9dc:	461a      	mov	r2, r3
 800b9de:	4b0e      	ldr	r3, [pc, #56]	; (800ba18 <UART_SetConfig+0x288>)
 800b9e0:	fba3 1302 	umull	r1, r3, r3, r2
 800b9e4:	095b      	lsrs	r3, r3, #5
 800b9e6:	2164      	movs	r1, #100	; 0x64
 800b9e8:	fb01 f303 	mul.w	r3, r1, r3
 800b9ec:	1ad3      	subs	r3, r2, r3
 800b9ee:	00db      	lsls	r3, r3, #3
 800b9f0:	3332      	adds	r3, #50	; 0x32
 800b9f2:	4a09      	ldr	r2, [pc, #36]	; (800ba18 <UART_SetConfig+0x288>)
 800b9f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b9f8:	095b      	lsrs	r3, r3, #5
 800b9fa:	f003 0207 	and.w	r2, r3, #7
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4442      	add	r2, r8
 800ba04:	609a      	str	r2, [r3, #8]
 800ba06:	e27a      	b.n	800befe <UART_SetConfig+0x76e>
 800ba08:	00a037a0 	.word	0x00a037a0
 800ba0c:	080166f0 	.word	0x080166f0
 800ba10:	40011000 	.word	0x40011000
 800ba14:	40011400 	.word	0x40011400
 800ba18:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ba1c:	f7ff fadc 	bl	800afd8 <HAL_RCC_GetPCLK1Freq>
 800ba20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	461d      	mov	r5, r3
 800ba26:	f04f 0600 	mov.w	r6, #0
 800ba2a:	46a8      	mov	r8, r5
 800ba2c:	46b1      	mov	r9, r6
 800ba2e:	eb18 0308 	adds.w	r3, r8, r8
 800ba32:	eb49 0409 	adc.w	r4, r9, r9
 800ba36:	4698      	mov	r8, r3
 800ba38:	46a1      	mov	r9, r4
 800ba3a:	eb18 0805 	adds.w	r8, r8, r5
 800ba3e:	eb49 0906 	adc.w	r9, r9, r6
 800ba42:	f04f 0100 	mov.w	r1, #0
 800ba46:	f04f 0200 	mov.w	r2, #0
 800ba4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ba4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ba52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ba56:	4688      	mov	r8, r1
 800ba58:	4691      	mov	r9, r2
 800ba5a:	eb18 0005 	adds.w	r0, r8, r5
 800ba5e:	eb49 0106 	adc.w	r1, r9, r6
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	461d      	mov	r5, r3
 800ba68:	f04f 0600 	mov.w	r6, #0
 800ba6c:	196b      	adds	r3, r5, r5
 800ba6e:	eb46 0406 	adc.w	r4, r6, r6
 800ba72:	461a      	mov	r2, r3
 800ba74:	4623      	mov	r3, r4
 800ba76:	f7fb fe11 	bl	800769c <__aeabi_uldivmod>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	460c      	mov	r4, r1
 800ba7e:	461a      	mov	r2, r3
 800ba80:	4bb3      	ldr	r3, [pc, #716]	; (800bd50 <UART_SetConfig+0x5c0>)
 800ba82:	fba3 2302 	umull	r2, r3, r3, r2
 800ba86:	095b      	lsrs	r3, r3, #5
 800ba88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	461d      	mov	r5, r3
 800ba90:	f04f 0600 	mov.w	r6, #0
 800ba94:	46a9      	mov	r9, r5
 800ba96:	46b2      	mov	sl, r6
 800ba98:	eb19 0309 	adds.w	r3, r9, r9
 800ba9c:	eb4a 040a 	adc.w	r4, sl, sl
 800baa0:	4699      	mov	r9, r3
 800baa2:	46a2      	mov	sl, r4
 800baa4:	eb19 0905 	adds.w	r9, r9, r5
 800baa8:	eb4a 0a06 	adc.w	sl, sl, r6
 800baac:	f04f 0100 	mov.w	r1, #0
 800bab0:	f04f 0200 	mov.w	r2, #0
 800bab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bab8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800babc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bac0:	4689      	mov	r9, r1
 800bac2:	4692      	mov	sl, r2
 800bac4:	eb19 0005 	adds.w	r0, r9, r5
 800bac8:	eb4a 0106 	adc.w	r1, sl, r6
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	461d      	mov	r5, r3
 800bad2:	f04f 0600 	mov.w	r6, #0
 800bad6:	196b      	adds	r3, r5, r5
 800bad8:	eb46 0406 	adc.w	r4, r6, r6
 800badc:	461a      	mov	r2, r3
 800bade:	4623      	mov	r3, r4
 800bae0:	f7fb fddc 	bl	800769c <__aeabi_uldivmod>
 800bae4:	4603      	mov	r3, r0
 800bae6:	460c      	mov	r4, r1
 800bae8:	461a      	mov	r2, r3
 800baea:	4b99      	ldr	r3, [pc, #612]	; (800bd50 <UART_SetConfig+0x5c0>)
 800baec:	fba3 1302 	umull	r1, r3, r3, r2
 800baf0:	095b      	lsrs	r3, r3, #5
 800baf2:	2164      	movs	r1, #100	; 0x64
 800baf4:	fb01 f303 	mul.w	r3, r1, r3
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	00db      	lsls	r3, r3, #3
 800bafc:	3332      	adds	r3, #50	; 0x32
 800bafe:	4a94      	ldr	r2, [pc, #592]	; (800bd50 <UART_SetConfig+0x5c0>)
 800bb00:	fba2 2303 	umull	r2, r3, r2, r3
 800bb04:	095b      	lsrs	r3, r3, #5
 800bb06:	005b      	lsls	r3, r3, #1
 800bb08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bb0c:	4498      	add	r8, r3
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	461d      	mov	r5, r3
 800bb12:	f04f 0600 	mov.w	r6, #0
 800bb16:	46a9      	mov	r9, r5
 800bb18:	46b2      	mov	sl, r6
 800bb1a:	eb19 0309 	adds.w	r3, r9, r9
 800bb1e:	eb4a 040a 	adc.w	r4, sl, sl
 800bb22:	4699      	mov	r9, r3
 800bb24:	46a2      	mov	sl, r4
 800bb26:	eb19 0905 	adds.w	r9, r9, r5
 800bb2a:	eb4a 0a06 	adc.w	sl, sl, r6
 800bb2e:	f04f 0100 	mov.w	r1, #0
 800bb32:	f04f 0200 	mov.w	r2, #0
 800bb36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bb3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bb3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bb42:	4689      	mov	r9, r1
 800bb44:	4692      	mov	sl, r2
 800bb46:	eb19 0005 	adds.w	r0, r9, r5
 800bb4a:	eb4a 0106 	adc.w	r1, sl, r6
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	461d      	mov	r5, r3
 800bb54:	f04f 0600 	mov.w	r6, #0
 800bb58:	196b      	adds	r3, r5, r5
 800bb5a:	eb46 0406 	adc.w	r4, r6, r6
 800bb5e:	461a      	mov	r2, r3
 800bb60:	4623      	mov	r3, r4
 800bb62:	f7fb fd9b 	bl	800769c <__aeabi_uldivmod>
 800bb66:	4603      	mov	r3, r0
 800bb68:	460c      	mov	r4, r1
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	4b78      	ldr	r3, [pc, #480]	; (800bd50 <UART_SetConfig+0x5c0>)
 800bb6e:	fba3 1302 	umull	r1, r3, r3, r2
 800bb72:	095b      	lsrs	r3, r3, #5
 800bb74:	2164      	movs	r1, #100	; 0x64
 800bb76:	fb01 f303 	mul.w	r3, r1, r3
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	00db      	lsls	r3, r3, #3
 800bb7e:	3332      	adds	r3, #50	; 0x32
 800bb80:	4a73      	ldr	r2, [pc, #460]	; (800bd50 <UART_SetConfig+0x5c0>)
 800bb82:	fba2 2303 	umull	r2, r3, r2, r3
 800bb86:	095b      	lsrs	r3, r3, #5
 800bb88:	f003 0207 	and.w	r2, r3, #7
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4442      	add	r2, r8
 800bb92:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800bb94:	e1b3      	b.n	800befe <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a6e      	ldr	r2, [pc, #440]	; (800bd54 <UART_SetConfig+0x5c4>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d005      	beq.n	800bbac <UART_SetConfig+0x41c>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a6c      	ldr	r2, [pc, #432]	; (800bd58 <UART_SetConfig+0x5c8>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	f040 80d8 	bne.w	800bd5c <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 800bbac:	f7ff fa28 	bl	800b000 <HAL_RCC_GetPCLK2Freq>
 800bbb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	469a      	mov	sl, r3
 800bbb6:	f04f 0b00 	mov.w	fp, #0
 800bbba:	46d0      	mov	r8, sl
 800bbbc:	46d9      	mov	r9, fp
 800bbbe:	eb18 0308 	adds.w	r3, r8, r8
 800bbc2:	eb49 0409 	adc.w	r4, r9, r9
 800bbc6:	4698      	mov	r8, r3
 800bbc8:	46a1      	mov	r9, r4
 800bbca:	eb18 080a 	adds.w	r8, r8, sl
 800bbce:	eb49 090b 	adc.w	r9, r9, fp
 800bbd2:	f04f 0100 	mov.w	r1, #0
 800bbd6:	f04f 0200 	mov.w	r2, #0
 800bbda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bbde:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bbe2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bbe6:	4688      	mov	r8, r1
 800bbe8:	4691      	mov	r9, r2
 800bbea:	eb1a 0508 	adds.w	r5, sl, r8
 800bbee:	eb4b 0609 	adc.w	r6, fp, r9
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	f04f 0200 	mov.w	r2, #0
 800bbfc:	f04f 0300 	mov.w	r3, #0
 800bc00:	f04f 0400 	mov.w	r4, #0
 800bc04:	0094      	lsls	r4, r2, #2
 800bc06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bc0a:	008b      	lsls	r3, r1, #2
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	4623      	mov	r3, r4
 800bc10:	4628      	mov	r0, r5
 800bc12:	4631      	mov	r1, r6
 800bc14:	f7fb fd42 	bl	800769c <__aeabi_uldivmod>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	4b4c      	ldr	r3, [pc, #304]	; (800bd50 <UART_SetConfig+0x5c0>)
 800bc20:	fba3 2302 	umull	r2, r3, r3, r2
 800bc24:	095b      	lsrs	r3, r3, #5
 800bc26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	469b      	mov	fp, r3
 800bc2e:	f04f 0c00 	mov.w	ip, #0
 800bc32:	46d9      	mov	r9, fp
 800bc34:	46e2      	mov	sl, ip
 800bc36:	eb19 0309 	adds.w	r3, r9, r9
 800bc3a:	eb4a 040a 	adc.w	r4, sl, sl
 800bc3e:	4699      	mov	r9, r3
 800bc40:	46a2      	mov	sl, r4
 800bc42:	eb19 090b 	adds.w	r9, r9, fp
 800bc46:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bc4a:	f04f 0100 	mov.w	r1, #0
 800bc4e:	f04f 0200 	mov.w	r2, #0
 800bc52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bc5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bc5e:	4689      	mov	r9, r1
 800bc60:	4692      	mov	sl, r2
 800bc62:	eb1b 0509 	adds.w	r5, fp, r9
 800bc66:	eb4c 060a 	adc.w	r6, ip, sl
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	4619      	mov	r1, r3
 800bc70:	f04f 0200 	mov.w	r2, #0
 800bc74:	f04f 0300 	mov.w	r3, #0
 800bc78:	f04f 0400 	mov.w	r4, #0
 800bc7c:	0094      	lsls	r4, r2, #2
 800bc7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bc82:	008b      	lsls	r3, r1, #2
 800bc84:	461a      	mov	r2, r3
 800bc86:	4623      	mov	r3, r4
 800bc88:	4628      	mov	r0, r5
 800bc8a:	4631      	mov	r1, r6
 800bc8c:	f7fb fd06 	bl	800769c <__aeabi_uldivmod>
 800bc90:	4603      	mov	r3, r0
 800bc92:	460c      	mov	r4, r1
 800bc94:	461a      	mov	r2, r3
 800bc96:	4b2e      	ldr	r3, [pc, #184]	; (800bd50 <UART_SetConfig+0x5c0>)
 800bc98:	fba3 1302 	umull	r1, r3, r3, r2
 800bc9c:	095b      	lsrs	r3, r3, #5
 800bc9e:	2164      	movs	r1, #100	; 0x64
 800bca0:	fb01 f303 	mul.w	r3, r1, r3
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	011b      	lsls	r3, r3, #4
 800bca8:	3332      	adds	r3, #50	; 0x32
 800bcaa:	4a29      	ldr	r2, [pc, #164]	; (800bd50 <UART_SetConfig+0x5c0>)
 800bcac:	fba2 2303 	umull	r2, r3, r2, r3
 800bcb0:	095b      	lsrs	r3, r3, #5
 800bcb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcb6:	4498      	add	r8, r3
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	469b      	mov	fp, r3
 800bcbc:	f04f 0c00 	mov.w	ip, #0
 800bcc0:	46d9      	mov	r9, fp
 800bcc2:	46e2      	mov	sl, ip
 800bcc4:	eb19 0309 	adds.w	r3, r9, r9
 800bcc8:	eb4a 040a 	adc.w	r4, sl, sl
 800bccc:	4699      	mov	r9, r3
 800bcce:	46a2      	mov	sl, r4
 800bcd0:	eb19 090b 	adds.w	r9, r9, fp
 800bcd4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bcd8:	f04f 0100 	mov.w	r1, #0
 800bcdc:	f04f 0200 	mov.w	r2, #0
 800bce0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bce4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bce8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bcec:	4689      	mov	r9, r1
 800bcee:	4692      	mov	sl, r2
 800bcf0:	eb1b 0509 	adds.w	r5, fp, r9
 800bcf4:	eb4c 060a 	adc.w	r6, ip, sl
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	f04f 0200 	mov.w	r2, #0
 800bd02:	f04f 0300 	mov.w	r3, #0
 800bd06:	f04f 0400 	mov.w	r4, #0
 800bd0a:	0094      	lsls	r4, r2, #2
 800bd0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bd10:	008b      	lsls	r3, r1, #2
 800bd12:	461a      	mov	r2, r3
 800bd14:	4623      	mov	r3, r4
 800bd16:	4628      	mov	r0, r5
 800bd18:	4631      	mov	r1, r6
 800bd1a:	f7fb fcbf 	bl	800769c <__aeabi_uldivmod>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	460c      	mov	r4, r1
 800bd22:	461a      	mov	r2, r3
 800bd24:	4b0a      	ldr	r3, [pc, #40]	; (800bd50 <UART_SetConfig+0x5c0>)
 800bd26:	fba3 1302 	umull	r1, r3, r3, r2
 800bd2a:	095b      	lsrs	r3, r3, #5
 800bd2c:	2164      	movs	r1, #100	; 0x64
 800bd2e:	fb01 f303 	mul.w	r3, r1, r3
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	011b      	lsls	r3, r3, #4
 800bd36:	3332      	adds	r3, #50	; 0x32
 800bd38:	4a05      	ldr	r2, [pc, #20]	; (800bd50 <UART_SetConfig+0x5c0>)
 800bd3a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd3e:	095b      	lsrs	r3, r3, #5
 800bd40:	f003 020f 	and.w	r2, r3, #15
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4442      	add	r2, r8
 800bd4a:	609a      	str	r2, [r3, #8]
 800bd4c:	e0d7      	b.n	800befe <UART_SetConfig+0x76e>
 800bd4e:	bf00      	nop
 800bd50:	51eb851f 	.word	0x51eb851f
 800bd54:	40011000 	.word	0x40011000
 800bd58:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd5c:	f7ff f93c 	bl	800afd8 <HAL_RCC_GetPCLK1Freq>
 800bd60:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	469a      	mov	sl, r3
 800bd66:	f04f 0b00 	mov.w	fp, #0
 800bd6a:	46d0      	mov	r8, sl
 800bd6c:	46d9      	mov	r9, fp
 800bd6e:	eb18 0308 	adds.w	r3, r8, r8
 800bd72:	eb49 0409 	adc.w	r4, r9, r9
 800bd76:	4698      	mov	r8, r3
 800bd78:	46a1      	mov	r9, r4
 800bd7a:	eb18 080a 	adds.w	r8, r8, sl
 800bd7e:	eb49 090b 	adc.w	r9, r9, fp
 800bd82:	f04f 0100 	mov.w	r1, #0
 800bd86:	f04f 0200 	mov.w	r2, #0
 800bd8a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bd8e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bd92:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bd96:	4688      	mov	r8, r1
 800bd98:	4691      	mov	r9, r2
 800bd9a:	eb1a 0508 	adds.w	r5, sl, r8
 800bd9e:	eb4b 0609 	adc.w	r6, fp, r9
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	4619      	mov	r1, r3
 800bda8:	f04f 0200 	mov.w	r2, #0
 800bdac:	f04f 0300 	mov.w	r3, #0
 800bdb0:	f04f 0400 	mov.w	r4, #0
 800bdb4:	0094      	lsls	r4, r2, #2
 800bdb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bdba:	008b      	lsls	r3, r1, #2
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	4623      	mov	r3, r4
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	f7fb fc6a 	bl	800769c <__aeabi_uldivmod>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	460c      	mov	r4, r1
 800bdcc:	461a      	mov	r2, r3
 800bdce:	4b4e      	ldr	r3, [pc, #312]	; (800bf08 <UART_SetConfig+0x778>)
 800bdd0:	fba3 2302 	umull	r2, r3, r3, r2
 800bdd4:	095b      	lsrs	r3, r3, #5
 800bdd6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	469b      	mov	fp, r3
 800bdde:	f04f 0c00 	mov.w	ip, #0
 800bde2:	46d9      	mov	r9, fp
 800bde4:	46e2      	mov	sl, ip
 800bde6:	eb19 0309 	adds.w	r3, r9, r9
 800bdea:	eb4a 040a 	adc.w	r4, sl, sl
 800bdee:	4699      	mov	r9, r3
 800bdf0:	46a2      	mov	sl, r4
 800bdf2:	eb19 090b 	adds.w	r9, r9, fp
 800bdf6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bdfa:	f04f 0100 	mov.w	r1, #0
 800bdfe:	f04f 0200 	mov.w	r2, #0
 800be02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800be0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800be0e:	4689      	mov	r9, r1
 800be10:	4692      	mov	sl, r2
 800be12:	eb1b 0509 	adds.w	r5, fp, r9
 800be16:	eb4c 060a 	adc.w	r6, ip, sl
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	4619      	mov	r1, r3
 800be20:	f04f 0200 	mov.w	r2, #0
 800be24:	f04f 0300 	mov.w	r3, #0
 800be28:	f04f 0400 	mov.w	r4, #0
 800be2c:	0094      	lsls	r4, r2, #2
 800be2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800be32:	008b      	lsls	r3, r1, #2
 800be34:	461a      	mov	r2, r3
 800be36:	4623      	mov	r3, r4
 800be38:	4628      	mov	r0, r5
 800be3a:	4631      	mov	r1, r6
 800be3c:	f7fb fc2e 	bl	800769c <__aeabi_uldivmod>
 800be40:	4603      	mov	r3, r0
 800be42:	460c      	mov	r4, r1
 800be44:	461a      	mov	r2, r3
 800be46:	4b30      	ldr	r3, [pc, #192]	; (800bf08 <UART_SetConfig+0x778>)
 800be48:	fba3 1302 	umull	r1, r3, r3, r2
 800be4c:	095b      	lsrs	r3, r3, #5
 800be4e:	2164      	movs	r1, #100	; 0x64
 800be50:	fb01 f303 	mul.w	r3, r1, r3
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	011b      	lsls	r3, r3, #4
 800be58:	3332      	adds	r3, #50	; 0x32
 800be5a:	4a2b      	ldr	r2, [pc, #172]	; (800bf08 <UART_SetConfig+0x778>)
 800be5c:	fba2 2303 	umull	r2, r3, r2, r3
 800be60:	095b      	lsrs	r3, r3, #5
 800be62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be66:	4498      	add	r8, r3
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	469b      	mov	fp, r3
 800be6c:	f04f 0c00 	mov.w	ip, #0
 800be70:	46d9      	mov	r9, fp
 800be72:	46e2      	mov	sl, ip
 800be74:	eb19 0309 	adds.w	r3, r9, r9
 800be78:	eb4a 040a 	adc.w	r4, sl, sl
 800be7c:	4699      	mov	r9, r3
 800be7e:	46a2      	mov	sl, r4
 800be80:	eb19 090b 	adds.w	r9, r9, fp
 800be84:	eb4a 0a0c 	adc.w	sl, sl, ip
 800be88:	f04f 0100 	mov.w	r1, #0
 800be8c:	f04f 0200 	mov.w	r2, #0
 800be90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800be98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800be9c:	4689      	mov	r9, r1
 800be9e:	4692      	mov	sl, r2
 800bea0:	eb1b 0509 	adds.w	r5, fp, r9
 800bea4:	eb4c 060a 	adc.w	r6, ip, sl
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	4619      	mov	r1, r3
 800beae:	f04f 0200 	mov.w	r2, #0
 800beb2:	f04f 0300 	mov.w	r3, #0
 800beb6:	f04f 0400 	mov.w	r4, #0
 800beba:	0094      	lsls	r4, r2, #2
 800bebc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bec0:	008b      	lsls	r3, r1, #2
 800bec2:	461a      	mov	r2, r3
 800bec4:	4623      	mov	r3, r4
 800bec6:	4628      	mov	r0, r5
 800bec8:	4631      	mov	r1, r6
 800beca:	f7fb fbe7 	bl	800769c <__aeabi_uldivmod>
 800bece:	4603      	mov	r3, r0
 800bed0:	460c      	mov	r4, r1
 800bed2:	461a      	mov	r2, r3
 800bed4:	4b0c      	ldr	r3, [pc, #48]	; (800bf08 <UART_SetConfig+0x778>)
 800bed6:	fba3 1302 	umull	r1, r3, r3, r2
 800beda:	095b      	lsrs	r3, r3, #5
 800bedc:	2164      	movs	r1, #100	; 0x64
 800bede:	fb01 f303 	mul.w	r3, r1, r3
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	011b      	lsls	r3, r3, #4
 800bee6:	3332      	adds	r3, #50	; 0x32
 800bee8:	4a07      	ldr	r2, [pc, #28]	; (800bf08 <UART_SetConfig+0x778>)
 800beea:	fba2 2303 	umull	r2, r3, r2, r3
 800beee:	095b      	lsrs	r3, r3, #5
 800bef0:	f003 020f 	and.w	r2, r3, #15
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4442      	add	r2, r8
 800befa:	609a      	str	r2, [r3, #8]
}
 800befc:	e7ff      	b.n	800befe <UART_SetConfig+0x76e>
 800befe:	bf00      	nop
 800bf00:	3714      	adds	r7, #20
 800bf02:	46bd      	mov	sp, r7
 800bf04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf08:	51eb851f 	.word	0x51eb851f

0800bf0c <_ZN3cep11Application12AssertFailedEv>:

    virtual void Init()   = 0;
    virtual bool DoPost() = 0;
    virtual void Run()    = 0;

    static void AssertFailed()
 800bf0c:	b480      	push	{r7}
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	deff      	udf	#255	; 0xff
	...

0800bf14 <_ZN6Logger3GetEv>:

    void Log(const char* fmt, ...);
    void VLog(const char* fmt, va_list args);

    UartModule*    GetUart() { return m_uart; }
    static Logger* Get() { return s_instance; }
 800bf14:	b480      	push	{r7}
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	4b03      	ldr	r3, [pc, #12]	; (800bf28 <_ZN6Logger3GetEv+0x14>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	20000ae4 	.word	0x20000ae4

0800bf2c <main>:
/* Global variables ---------------------------------------------------------------------------- */

/*************************************************************************************************/
/* main ---------------------------------------------------------------------------------------- */
int main( )
{
 800bf2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf30:	b08a      	sub	sp, #40	; 0x28
 800bf32:	af02      	add	r7, sp, #8
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init( );
 800bf34:	f7fc ff8a 	bl	8008e4c <HAL_Init>

    // Make sure that SYSCLK isn't set to PLL before configuring it.
    CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 800bf38:	4b30      	ldr	r3, [pc, #192]	; (800bffc <main+0xd0>)
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	4a2f      	ldr	r2, [pc, #188]	; (800bffc <main+0xd0>)
 800bf3e:	f023 0303 	bic.w	r3, r3, #3
 800bf42:	6093      	str	r3, [r2, #8]

    /* Configure the system clock */
    SystemClock_Config( );
 800bf44:	f000 f866 	bl	800c014 <_Z18SystemClock_Configv>

    /* Initialize program */
    MasterApplication app;
 800bf48:	463b      	mov	r3, r7
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f000 fa48 	bl	800c3e0 <_ZN17MasterApplicationC1Ev>

    app.Init( );
 800bf50:	463b      	mov	r3, r7
 800bf52:	4618      	mov	r0, r3
 800bf54:	f000 fabe 	bl	800c4d4 <_ZN17MasterApplication4InitEv>
    if (app.DoPost( ) == true)
 800bf58:	463b      	mov	r3, r7
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 faec 	bl	800c538 <_ZN17MasterApplication6DoPostEv>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d003      	beq.n	800bf6e <main+0x42>
    {
        app.Run( );
 800bf66:	463b      	mov	r3, r7
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f000 fbff 	bl	800c76c <_ZN17MasterApplication3RunEv>
    }

    LOG_ERROR("Application exited, please restart the device.");
 800bf6e:	f7ff ffd1 	bl	800bf14 <_ZN6Logger3GetEv>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d03d      	beq.n	800bff4 <main+0xc8>
 800bf78:	f7ff ffcc 	bl	800bf14 <_ZN6Logger3GetEv>
 800bf7c:	4680      	mov	r8, r0
 800bf7e:	f7fc ffcb 	bl	8008f18 <HAL_GetTick>
 800bf82:	4602      	mov	r2, r0
 800bf84:	4b1e      	ldr	r3, [pc, #120]	; (800c000 <main+0xd4>)
 800bf86:	fba3 2302 	umull	r2, r3, r3, r2
 800bf8a:	0d5e      	lsrs	r6, r3, #21
 800bf8c:	f7fc ffc4 	bl	8008f18 <HAL_GetTick>
 800bf90:	4602      	mov	r2, r0
 800bf92:	4b1c      	ldr	r3, [pc, #112]	; (800c004 <main+0xd8>)
 800bf94:	fba3 2302 	umull	r2, r3, r3, r2
 800bf98:	0b9a      	lsrs	r2, r3, #14
 800bf9a:	4b1b      	ldr	r3, [pc, #108]	; (800c008 <main+0xdc>)
 800bf9c:	fba3 1302 	umull	r1, r3, r3, r2
 800bfa0:	095d      	lsrs	r5, r3, #5
 800bfa2:	462b      	mov	r3, r5
 800bfa4:	011b      	lsls	r3, r3, #4
 800bfa6:	1b5b      	subs	r3, r3, r5
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	1ad5      	subs	r5, r2, r3
 800bfac:	f7fc ffb4 	bl	8008f18 <HAL_GetTick>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	4b16      	ldr	r3, [pc, #88]	; (800c00c <main+0xe0>)
 800bfb4:	fba3 2302 	umull	r2, r3, r3, r2
 800bfb8:	099a      	lsrs	r2, r3, #6
 800bfba:	4b13      	ldr	r3, [pc, #76]	; (800c008 <main+0xdc>)
 800bfbc:	fba3 1302 	umull	r1, r3, r3, r2
 800bfc0:	095c      	lsrs	r4, r3, #5
 800bfc2:	4623      	mov	r3, r4
 800bfc4:	011b      	lsls	r3, r3, #4
 800bfc6:	1b1b      	subs	r3, r3, r4
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	1ad4      	subs	r4, r2, r3
 800bfcc:	f7fc ffa4 	bl	8008f18 <HAL_GetTick>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	4b0e      	ldr	r3, [pc, #56]	; (800c00c <main+0xe0>)
 800bfd4:	fba3 1302 	umull	r1, r3, r3, r2
 800bfd8:	099b      	lsrs	r3, r3, #6
 800bfda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bfde:	fb01 f303 	mul.w	r3, r1, r3
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	9301      	str	r3, [sp, #4]
 800bfe6:	9400      	str	r4, [sp, #0]
 800bfe8:	462b      	mov	r3, r5
 800bfea:	4632      	mov	r2, r6
 800bfec:	4908      	ldr	r1, [pc, #32]	; (800c010 <main+0xe4>)
 800bfee:	4640      	mov	r0, r8
 800bff0:	f004 fdb0 	bl	8010b54 <_ZN6Logger3LogEPKcz>
    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    while (true)
    {
        // Reset the system, we aren't supposed to be here.
        HAL_NVIC_SystemReset( );
 800bff4:	f7fd f91e 	bl	8009234 <HAL_NVIC_SystemReset>
 800bff8:	e7fc      	b.n	800bff4 <main+0xc8>
 800bffa:	bf00      	nop
 800bffc:	40023800 	.word	0x40023800
 800c000:	95217cb1 	.word	0x95217cb1
 800c004:	45e7b273 	.word	0x45e7b273
 800c008:	88888889 	.word	0x88888889
 800c00c:	10624dd3 	.word	0x10624dd3
 800c010:	0801672c 	.word	0x0801672c

0800c014 <_Z18SystemClock_Configv>:
    }
}
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
void                   SystemClock_Config(void)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b094      	sub	sp, #80	; 0x50
 800c018:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c01a:	f107 0320 	add.w	r3, r7, #32
 800c01e:	2230      	movs	r2, #48	; 0x30
 800c020:	2100      	movs	r1, #0
 800c022:	4618      	mov	r0, r3
 800c024:	f006 ff63 	bl	8012eee <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c028:	f107 030c 	add.w	r3, r7, #12
 800c02c:	2200      	movs	r2, #0
 800c02e:	601a      	str	r2, [r3, #0]
 800c030:	605a      	str	r2, [r3, #4]
 800c032:	609a      	str	r2, [r3, #8]
 800c034:	60da      	str	r2, [r3, #12]
 800c036:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE( );
 800c038:	2300      	movs	r3, #0
 800c03a:	60bb      	str	r3, [r7, #8]
 800c03c:	4b2d      	ldr	r3, [pc, #180]	; (800c0f4 <_Z18SystemClock_Configv+0xe0>)
 800c03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c040:	4a2c      	ldr	r2, [pc, #176]	; (800c0f4 <_Z18SystemClock_Configv+0xe0>)
 800c042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c046:	6413      	str	r3, [r2, #64]	; 0x40
 800c048:	4b2a      	ldr	r3, [pc, #168]	; (800c0f4 <_Z18SystemClock_Configv+0xe0>)
 800c04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c050:	60bb      	str	r3, [r7, #8]
 800c052:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c054:	2300      	movs	r3, #0
 800c056:	607b      	str	r3, [r7, #4]
 800c058:	4b27      	ldr	r3, [pc, #156]	; (800c0f8 <_Z18SystemClock_Configv+0xe4>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a26      	ldr	r2, [pc, #152]	; (800c0f8 <_Z18SystemClock_Configv+0xe4>)
 800c05e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c062:	6013      	str	r3, [r2, #0]
 800c064:	4b24      	ldr	r3, [pc, #144]	; (800c0f8 <_Z18SystemClock_Configv+0xe4>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c06c:	607b      	str	r3, [r7, #4]
 800c06e:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800c070:	2302      	movs	r3, #2
 800c072:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800c074:	2301      	movs	r3, #1
 800c076:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c078:	2310      	movs	r3, #16
 800c07a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800c07c:	2302      	movs	r3, #2
 800c07e:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800c080:	2300      	movs	r3, #0
 800c082:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM            = 8;
 800c084:	2308      	movs	r3, #8
 800c086:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN            = 168;
 800c088:	23a8      	movs	r3, #168	; 0xa8
 800c08a:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;
 800c08c:	2302      	movs	r3, #2
 800c08e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ            = 4;
 800c090:	2304      	movs	r3, #4
 800c092:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c094:	f107 0320 	add.w	r3, r7, #32
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fe fa31 	bl	800a500 <HAL_RCC_OscConfig>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	bf14      	ite	ne
 800c0a4:	2301      	movne	r3, #1
 800c0a6:	2300      	moveq	r3, #0
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d001      	beq.n	800c0b2 <_Z18SystemClock_Configv+0x9e>
    {
        Error_Handler( );
 800c0ae:	f000 f825 	bl	800c0fc <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 800c0b2:	230f      	movs	r3, #15
 800c0b4:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 800c0b6:	2302      	movs	r3, #2
 800c0b8:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c0be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c0c2:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c0c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0c8:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c0ca:	f107 030c 	add.w	r3, r7, #12
 800c0ce:	2105      	movs	r1, #5
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fe fd35 	bl	800ab40 <HAL_RCC_ClockConfig>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	bf14      	ite	ne
 800c0dc:	2301      	movne	r3, #1
 800c0de:	2300      	moveq	r3, #0
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d001      	beq.n	800c0ea <_Z18SystemClock_Configv+0xd6>
    {
        Error_Handler( );
 800c0e6:	f000 f809 	bl	800c0fc <Error_Handler>
    }
}
 800c0ea:	bf00      	nop
 800c0ec:	3750      	adds	r7, #80	; 0x50
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	40023800 	.word	0x40023800
 800c0f8:	40007000 	.word	0x40007000

0800c0fc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler( )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	af00      	add	r7, sp, #0
    cep::Application::AssertFailed( );
 800c100:	f7ff ff04 	bl	800bf0c <_ZN3cep11Application12AssertFailedEv>
    while (true)
 800c104:	e7fe      	b.n	800c104 <Error_Handler+0x8>

0800c106 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t* file, uint32_t line)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b082      	sub	sp, #8
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	6039      	str	r1, [r7, #0]
    UNUSED(file);
    UNUSED(line);
    cep::Application::AssertFailed( );
 800c110:	f7ff fefc 	bl	800bf0c <_ZN3cep11Application12AssertFailedEv>
    while (true)
 800c114:	e7fe      	b.n	800c114 <assert_failed+0xe>

0800c116 <_ZNSt11char_traitsIcE6assignERcRKc>:
      typedef streampos         pos_type;
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 800c116:	b480      	push	{r7}
 800c118:	b083      	sub	sp, #12
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
 800c11e:	6039      	str	r1, [r7, #0]
      { __c1 = __c2; }
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	781a      	ldrb	r2, [r3, #0]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	701a      	strb	r2, [r3, #0]
 800c128:	bf00      	nop
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
	return (static_cast<unsigned char>(__c1)
		< static_cast<unsigned char>(__c2));
      }

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
      {
#if __cplusplus > 201402
	if (__builtin_constant_p(__n)
	    && __constant_char_array_p(__s1, __n)
	    && __constant_char_array_p(__s2, __n))
 800c140:	2300      	movs	r3, #0
	if (__builtin_constant_p(__n)
 800c142:	2b00      	cmp	r3, #0
 800c144:	d006      	beq.n	800c154 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x20>
	  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	68b9      	ldr	r1, [r7, #8]
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f000 fcde 	bl	800cb0c <_ZN9__gnu_cxx11char_traitsIcE7compareEPKcS3_j>
 800c150:	4603      	mov	r3, r0
 800c152:	e00a      	b.n	800c16a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x36>
#endif
	if (__n == 0)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d101      	bne.n	800c15e <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x2a>
	  return 0;
 800c15a:	2300      	movs	r3, #0
 800c15c:	e005      	b.n	800c16a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x36>
	return __builtin_memcmp(__s1, __s2, __n);
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	68b9      	ldr	r1, [r7, #8]
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f006 fe90 	bl	8012e88 <memcmp>
 800c168:	4603      	mov	r3, r0
      }
 800c16a:	4618      	mov	r0, r3
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <_ZNSt11char_traitsIcE6lengthEPKc>:

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 800c172:	b580      	push	{r7, lr}
 800c174:	b084      	sub	sp, #16
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	60fb      	str	r3, [r7, #12]
      return __builtin_constant_p(*__s);
 800c17e:	2300      	movs	r3, #0
      {
#if __cplusplus > 201402
	if (__constant_string_p(__s))
 800c180:	2b00      	cmp	r3, #0
 800c182:	d004      	beq.n	800c18e <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 fcf3 	bl	800cb70 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 800c18a:	4603      	mov	r3, r0
 800c18c:	e003      	b.n	800c196 <_ZNSt11char_traitsIcE6lengthEPKc+0x24>
#endif
	return __builtin_strlen(__s);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f7fa fde8 	bl	8006d64 <strlen>
 800c194:	4603      	mov	r3, r0
      }
 800c196:	4618      	mov	r0, r3
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <_ZNSt11char_traitsIcE4copyEPcPKcj>:
	  return __s1;
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	60f8      	str	r0, [r7, #12]
 800c1a6:	60b9      	str	r1, [r7, #8]
 800c1a8:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d101      	bne.n	800c1b4 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x16>
	  return __s1;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	e008      	b.n	800c1c6 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x28>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	461a      	mov	r2, r3
 800c1c0:	f006 fe71 	bl	8012ea6 <memcpy>
 800c1c4:	4603      	mov	r3, r0
      }
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c1ce:	b480      	push	{r7}
 800c1d0:	b083      	sub	sp, #12
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
 800c1d6:	6039      	str	r1, [r7, #0]
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
	...

0800c1e8 <_ZN3cep11ApplicationC1Ev>:
    Application() { std::signal(SIGABRT, &AbortionHandler); }
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	4a05      	ldr	r2, [pc, #20]	; (800c208 <_ZN3cep11ApplicationC1Ev+0x20>)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	601a      	str	r2, [r3, #0]
 800c1f6:	4905      	ldr	r1, [pc, #20]	; (800c20c <_ZN3cep11ApplicationC1Ev+0x24>)
 800c1f8:	2006      	movs	r0, #6
 800c1fa:	f007 f8e3 	bl	80133c4 <signal>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4618      	mov	r0, r3
 800c202:	3708      	adds	r7, #8
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	08017890 	.word	0x08017890
 800c20c:	08010a4d 	.word	0x08010a4d

0800c210 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	609a      	str	r2, [r3, #8]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4618      	mov	r0, r3
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d005      	beq.n	800c248 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	6879      	ldr	r1, [r7, #4]
 800c244:	2203      	movs	r2, #3
 800c246:	4798      	blx	r3
    }
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4618      	mov	r0, r3
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 800c252:	b480      	push	{r7}
 800c254:	b083      	sub	sp, #12
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	429a      	cmp	r2, r3
 800c266:	d201      	bcs.n	800c26c <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	e000      	b.n	800c26e <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800c26c:	687b      	ldr	r3, [r7, #4]
    }
 800c26e:	4618      	mov	r0, r3
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <_ZNSt8functionIFvPKcjEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b082      	sub	sp, #8
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4618      	mov	r0, r3
 800c286:	f7ff ffd1 	bl	800c22c <_ZNSt14_Function_baseD1Ev>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4618      	mov	r0, r3
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 f805 	bl	800c2b2 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800c2b2:	b480      	push	{r7}
 800c2b4:	b083      	sub	sp, #12
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	611a      	str	r2, [r3, #16]
    }
 800c2d2:	bf00      	nop
 800c2d4:	370c      	adds	r7, #12
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr

0800c2de <_ZN17MasterApplication9AddModuleEPN3cep6ModuleE>:

    virtual void Init( ) override;
    virtual bool DoPost( ) override;
    virtual void Run( ) override;

    void AddModule(cep::Module* newModule) { m_modules[newModule->GetLabel( )] = newModule; }
 800c2de:	b5b0      	push	{r4, r5, r7, lr}
 800c2e0:	b082      	sub	sp, #8
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
 800c2e6:	6039      	str	r1, [r7, #0]
 800c2e8:	683c      	ldr	r4, [r7, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	1d1d      	adds	r5, r3, #4
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	3310      	adds	r3, #16
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6838      	ldr	r0, [r7, #0]
 800c2f8:	4798      	blx	r3
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4628      	mov	r0, r5
 800c300:	f000 fcfe 	bl	800cd00 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEEixERSC_>
 800c304:	4603      	mov	r3, r0
 800c306:	601c      	str	r4, [r3, #0]
 800c308:	bf00      	nop
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bdb0      	pop	{r4, r5, r7, pc}

0800c310 <_ZN3cep11ApplicationD1Ev>:
    virtual ~Application() = default;
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	4a04      	ldr	r2, [pc, #16]	; (800c32c <_ZN3cep11ApplicationD1Ev+0x1c>)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	601a      	str	r2, [r3, #0]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4618      	mov	r0, r3
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr
 800c32c:	08017890 	.word	0x08017890

0800c330 <_ZN3cep11ApplicationD0Ev>:
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f7ff ffe9 	bl	800c310 <_ZN3cep11ApplicationD1Ev>
 800c33e:	2104      	movs	r1, #4
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f002 f9e4 	bl	800e70e <_ZdlPvj>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4618      	mov	r0, r3
 800c34a:	3708      	adds	r7, #8
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>:

#if __cplusplus < 201103L
	  _Rb_tree_impl()
	  { }
#else
	  _Rb_tree_impl() = default;
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 fd2d 	bl	800cdb8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEC1Ev>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	4618      	mov	r0, r3
 800c362:	f000 fd41 	bl	800cde8 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	3304      	adds	r3, #4
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7ff ff92 	bl	800c294 <_ZNSt15_Rb_tree_headerC1Ev>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4618      	mov	r0, r3
 800c374:	3708      	adds	r7, #8
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>:
        struct _Rb_tree_impl
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b082      	sub	sp, #8
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fd24 	bl	800cdd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEED1Ev>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4618      	mov	r0, r3
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 800c392:	b580      	push	{r7, lr}
 800c394:	b082      	sub	sp, #8
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7ff ffd7 	bl	800c350 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7ff ffeb 	bl	800c392 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b082      	sub	sp, #8
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f000 fd14 	bl	800cdfe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <_ZN17MasterApplicationC1Ev>:
#include <numeric>
#include <vector>

MasterApplication* MasterApplication::s_instance = nullptr;

MasterApplication::MasterApplication( )
 800c3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e4:	b086      	sub	sp, #24
 800c3e6:	af04      	add	r7, sp, #16
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7ff fefb 	bl	800c1e8 <_ZN3cep11ApplicationC1Ev>
 800c3f2:	4a30      	ldr	r2, [pc, #192]	; (800c4b4 <_ZN17MasterApplicationC1Ev+0xd4>)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	601a      	str	r2, [r3, #0]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	3304      	adds	r3, #4
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7ff ffd5 	bl	800c3ac <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	61da      	str	r2, [r3, #28]
{
    CEP_ASSERT(s_instance == nullptr, "Cannot have multiple instances of Application!");
 800c408:	4b2b      	ldr	r3, [pc, #172]	; (800c4b8 <_ZN17MasterApplicationC1Ev+0xd8>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d048      	beq.n	800c4a2 <_ZN17MasterApplicationC1Ev+0xc2>
 800c410:	f7ff fd80 	bl	800bf14 <_ZN6Logger3GetEv>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d041      	beq.n	800c49e <_ZN17MasterApplicationC1Ev+0xbe>
 800c41a:	f7ff fd7b 	bl	800bf14 <_ZN6Logger3GetEv>
 800c41e:	4680      	mov	r8, r0
 800c420:	f7fc fd7a 	bl	8008f18 <HAL_GetTick>
 800c424:	4602      	mov	r2, r0
 800c426:	4b25      	ldr	r3, [pc, #148]	; (800c4bc <_ZN17MasterApplicationC1Ev+0xdc>)
 800c428:	fba3 2302 	umull	r2, r3, r3, r2
 800c42c:	0d5e      	lsrs	r6, r3, #21
 800c42e:	f7fc fd73 	bl	8008f18 <HAL_GetTick>
 800c432:	4602      	mov	r2, r0
 800c434:	4b22      	ldr	r3, [pc, #136]	; (800c4c0 <_ZN17MasterApplicationC1Ev+0xe0>)
 800c436:	fba3 2302 	umull	r2, r3, r3, r2
 800c43a:	0b9a      	lsrs	r2, r3, #14
 800c43c:	4b21      	ldr	r3, [pc, #132]	; (800c4c4 <_ZN17MasterApplicationC1Ev+0xe4>)
 800c43e:	fba3 1302 	umull	r1, r3, r3, r2
 800c442:	095d      	lsrs	r5, r3, #5
 800c444:	462b      	mov	r3, r5
 800c446:	011b      	lsls	r3, r3, #4
 800c448:	1b5b      	subs	r3, r3, r5
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	1ad5      	subs	r5, r2, r3
 800c44e:	f7fc fd63 	bl	8008f18 <HAL_GetTick>
 800c452:	4602      	mov	r2, r0
 800c454:	4b1c      	ldr	r3, [pc, #112]	; (800c4c8 <_ZN17MasterApplicationC1Ev+0xe8>)
 800c456:	fba3 2302 	umull	r2, r3, r3, r2
 800c45a:	099a      	lsrs	r2, r3, #6
 800c45c:	4b19      	ldr	r3, [pc, #100]	; (800c4c4 <_ZN17MasterApplicationC1Ev+0xe4>)
 800c45e:	fba3 1302 	umull	r1, r3, r3, r2
 800c462:	095c      	lsrs	r4, r3, #5
 800c464:	4623      	mov	r3, r4
 800c466:	011b      	lsls	r3, r3, #4
 800c468:	1b1b      	subs	r3, r3, r4
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	1ad4      	subs	r4, r2, r3
 800c46e:	f7fc fd53 	bl	8008f18 <HAL_GetTick>
 800c472:	4602      	mov	r2, r0
 800c474:	4b14      	ldr	r3, [pc, #80]	; (800c4c8 <_ZN17MasterApplicationC1Ev+0xe8>)
 800c476:	fba3 1302 	umull	r1, r3, r3, r2
 800c47a:	099b      	lsrs	r3, r3, #6
 800c47c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c480:	fb01 f303 	mul.w	r3, r1, r3
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	4a11      	ldr	r2, [pc, #68]	; (800c4cc <_ZN17MasterApplicationC1Ev+0xec>)
 800c488:	9203      	str	r2, [sp, #12]
 800c48a:	221c      	movs	r2, #28
 800c48c:	9202      	str	r2, [sp, #8]
 800c48e:	9301      	str	r3, [sp, #4]
 800c490:	9400      	str	r4, [sp, #0]
 800c492:	462b      	mov	r3, r5
 800c494:	4632      	mov	r2, r6
 800c496:	490e      	ldr	r1, [pc, #56]	; (800c4d0 <_ZN17MasterApplicationC1Ev+0xf0>)
 800c498:	4640      	mov	r0, r8
 800c49a:	f004 fb5b 	bl	8010b54 <_ZN6Logger3LogEPKcz>
 800c49e:	f7ff fd35 	bl	800bf0c <_ZN3cep11Application12AssertFailedEv>
    s_instance = this;
 800c4a2:	4a05      	ldr	r2, [pc, #20]	; (800c4b8 <_ZN17MasterApplicationC1Ev+0xd8>)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6013      	str	r3, [r2, #0]
}
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b4:	08017874 	.word	0x08017874
 800c4b8:	200009e0 	.word	0x200009e0
 800c4bc:	95217cb1 	.word	0x95217cb1
 800c4c0:	45e7b273 	.word	0x45e7b273
 800c4c4:	88888889 	.word	0x88888889
 800c4c8:	10624dd3 	.word	0x10624dd3
 800c4cc:	080167e8 	.word	0x080167e8
 800c4d0:	08016780 	.word	0x08016780

0800c4d4 <_ZN17MasterApplication4InitEv>:

void MasterApplication::Init( )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
    InitializeHAL( );
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fa33 	bl	800c948 <_ZN17MasterApplication13InitializeHALEv>
    InitializeServices( );
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 fa3e 	bl	800c964 <_ZN17MasterApplication18InitializeServicesEv>
    InitializeModules( );
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 fa45 	bl	800c978 <_ZN17MasterApplication17InitializeModulesEv>
}
 800c4ee:	bf00      	nop
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <_ZNKSt16reverse_iteratorISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEptEv>:
       *  @return  A pointer to the value at @c --current
       *
       *  This requires that @c --current is dereferenceable.
      */
      _GLIBCXX17_CONSTEXPR pointer
      operator->() const
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b082      	sub	sp, #8
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
      { return &(operator*()); }
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f805 	bl	800c50e <_ZNKSt16reverse_iteratorISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEdeEv>
 800c504:	4603      	mov	r3, r0
 800c506:	4618      	mov	r0, r3
 800c508:	3708      	adds	r7, #8
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <_ZNKSt16reverse_iteratorISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEdeEv>:
      operator*() const
 800c50e:	b580      	push	{r7, lr}
 800c510:	b084      	sub	sp, #16
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
	_Iterator __tmp = current;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	60fb      	str	r3, [r7, #12]
	return *--__tmp;
 800c51c:	f107 030c 	add.w	r3, r7, #12
 800c520:	4618      	mov	r0, r3
 800c522:	f000 fcc3 	bl	800ceac <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEmmEv>
 800c526:	4603      	mov	r3, r0
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 fcd0 	bl	800cece <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEdeEv>
 800c52e:	4603      	mov	r3, r0
      }
 800c530:	4618      	mov	r0, r3
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <_ZN17MasterApplication6DoPostEv>:

bool MasterApplication::DoPost( )
{
 800c538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c53c:	b08d      	sub	sp, #52	; 0x34
 800c53e:	af04      	add	r7, sp, #16
 800c540:	6078      	str	r0, [r7, #4]
    m_logger->Log("\n\r----- Started POST...\n\r");
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	69db      	ldr	r3, [r3, #28]
 800c546:	4980      	ldr	r1, [pc, #512]	; (800c748 <_ZN17MasterApplication6DoPostEv+0x210>)
 800c548:	4618      	mov	r0, r3
 800c54a:	f004 fb03 	bl	8010b54 <_ZN6Logger3LogEPKcz>

    bool   allModulesPassedPost = true;
 800c54e:	2301      	movs	r3, #1
 800c550:	77fb      	strb	r3, [r7, #31]
    size_t start                = HAL_GetTick( );
 800c552:	f7fc fce1 	bl	8008f18 <HAL_GetTick>
 800c556:	61b8      	str	r0, [r7, #24]

    for (auto module = s_instance->m_modules.rbegin( ); module != s_instance->m_modules.rend( );
 800c558:	4b7c      	ldr	r3, [pc, #496]	; (800c74c <_ZN17MasterApplication6DoPostEv+0x214>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	1d1a      	adds	r2, r3, #4
 800c55e:	f107 030c 	add.w	r3, r7, #12
 800c562:	4611      	mov	r1, r2
 800c564:	4618      	mov	r0, r3
 800c566:	f000 fc5f 	bl	800ce28 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE6rbeginEv>
 800c56a:	4b78      	ldr	r3, [pc, #480]	; (800c74c <_ZN17MasterApplication6DoPostEv+0x214>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	1d1a      	adds	r2, r3, #4
 800c570:	f107 0310 	add.w	r3, r7, #16
 800c574:	4611      	mov	r1, r2
 800c576:	4618      	mov	r0, r3
 800c578:	f000 fc65 	bl	800ce46 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE4rendEv>
 800c57c:	f107 0210 	add.w	r2, r7, #16
 800c580:	f107 030c 	add.w	r3, r7, #12
 800c584:	4611      	mov	r1, r2
 800c586:	4618      	mov	r0, r3
 800c588:	f000 fc6c 	bl	800ce64 <_ZStneISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEbRKSt16reverse_iteratorIT_ESI_>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d01c      	beq.n	800c5cc <_ZN17MasterApplication6DoPostEv+0x94>
         module++)
    {
        if (module->second->DoPost( ) == false)
 800c592:	f107 030c 	add.w	r3, r7, #12
 800c596:	4618      	mov	r0, r3
 800c598:	f7ff ffad 	bl	800c4f6 <_ZNKSt16reverse_iteratorISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEptEv>
 800c59c:	4603      	mov	r3, r0
 800c59e:	699b      	ldr	r3, [r3, #24]
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	3208      	adds	r2, #8
 800c5a4:	6812      	ldr	r2, [r2, #0]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	4790      	blx	r2
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	f083 0301 	eor.w	r3, r3, #1
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d001      	beq.n	800c5ba <_ZN17MasterApplication6DoPostEv+0x82>
        {
            allModulesPassedPost = false;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	77fb      	strb	r3, [r7, #31]
    for (auto module = s_instance->m_modules.rbegin( ); module != s_instance->m_modules.rend( );
 800c5ba:	f107 0314 	add.w	r3, r7, #20
 800c5be:	f107 010c 	add.w	r1, r7, #12
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f000 fc5e 	bl	800ce86 <_ZNSt16reverse_iteratorISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEppEi>
 800c5ca:	e7ce      	b.n	800c56a <_ZN17MasterApplication6DoPostEv+0x32>
        }
    }

    if (allModulesPassedPost == true)
 800c5cc:	7ffb      	ldrb	r3, [r7, #31]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d05a      	beq.n	800c688 <_ZN17MasterApplication6DoPostEv+0x150>
    {
        LOG_INFO("----- POST OK! %0.3f seconds.", (float)(HAL_GetTick( ) - start) / 1000.0f);
 800c5d2:	f7ff fc9f 	bl	800bf14 <_ZN6Logger3GetEv>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 80ae 	beq.w	800c73a <_ZN17MasterApplication6DoPostEv+0x202>
 800c5de:	f7ff fc99 	bl	800bf14 <_ZN6Logger3GetEv>
 800c5e2:	4681      	mov	r9, r0
 800c5e4:	f7fc fc98 	bl	8008f18 <HAL_GetTick>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	4b59      	ldr	r3, [pc, #356]	; (800c750 <_ZN17MasterApplication6DoPostEv+0x218>)
 800c5ec:	fba3 2302 	umull	r2, r3, r3, r2
 800c5f0:	ea4f 5853 	mov.w	r8, r3, lsr #21
 800c5f4:	f7fc fc90 	bl	8008f18 <HAL_GetTick>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	4b56      	ldr	r3, [pc, #344]	; (800c754 <_ZN17MasterApplication6DoPostEv+0x21c>)
 800c5fc:	fba3 2302 	umull	r2, r3, r3, r2
 800c600:	0b9a      	lsrs	r2, r3, #14
 800c602:	4b55      	ldr	r3, [pc, #340]	; (800c758 <_ZN17MasterApplication6DoPostEv+0x220>)
 800c604:	fba3 1302 	umull	r1, r3, r3, r2
 800c608:	095e      	lsrs	r6, r3, #5
 800c60a:	4633      	mov	r3, r6
 800c60c:	011b      	lsls	r3, r3, #4
 800c60e:	1b9b      	subs	r3, r3, r6
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	1ad6      	subs	r6, r2, r3
 800c614:	f7fc fc80 	bl	8008f18 <HAL_GetTick>
 800c618:	4602      	mov	r2, r0
 800c61a:	4b50      	ldr	r3, [pc, #320]	; (800c75c <_ZN17MasterApplication6DoPostEv+0x224>)
 800c61c:	fba3 2302 	umull	r2, r3, r3, r2
 800c620:	099a      	lsrs	r2, r3, #6
 800c622:	4b4d      	ldr	r3, [pc, #308]	; (800c758 <_ZN17MasterApplication6DoPostEv+0x220>)
 800c624:	fba3 1302 	umull	r1, r3, r3, r2
 800c628:	095c      	lsrs	r4, r3, #5
 800c62a:	4623      	mov	r3, r4
 800c62c:	011b      	lsls	r3, r3, #4
 800c62e:	1b1b      	subs	r3, r3, r4
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	1ad4      	subs	r4, r2, r3
 800c634:	f7fc fc70 	bl	8008f18 <HAL_GetTick>
 800c638:	4603      	mov	r3, r0
 800c63a:	4a48      	ldr	r2, [pc, #288]	; (800c75c <_ZN17MasterApplication6DoPostEv+0x224>)
 800c63c:	fba2 1203 	umull	r1, r2, r2, r3
 800c640:	0995      	lsrs	r5, r2, #6
 800c642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c646:	fb02 f205 	mul.w	r2, r2, r5
 800c64a:	1a9d      	subs	r5, r3, r2
 800c64c:	f7fc fc64 	bl	8008f18 <HAL_GetTick>
 800c650:	4602      	mov	r2, r0
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	ee07 3a90 	vmov	s15, r3
 800c65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c65e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800c760 <_ZN17MasterApplication6DoPostEv+0x228>
 800c662:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c666:	ee16 0a90 	vmov	r0, s13
 800c66a:	f7fa fce7 	bl	800703c <__aeabi_f2d>
 800c66e:	4602      	mov	r2, r0
 800c670:	460b      	mov	r3, r1
 800c672:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c676:	9501      	str	r5, [sp, #4]
 800c678:	9400      	str	r4, [sp, #0]
 800c67a:	4633      	mov	r3, r6
 800c67c:	4642      	mov	r2, r8
 800c67e:	4939      	ldr	r1, [pc, #228]	; (800c764 <_ZN17MasterApplication6DoPostEv+0x22c>)
 800c680:	4648      	mov	r0, r9
 800c682:	f004 fa67 	bl	8010b54 <_ZN6Logger3LogEPKcz>
 800c686:	e058      	b.n	800c73a <_ZN17MasterApplication6DoPostEv+0x202>
    }
    else
    {
        LOG_ERROR("----- POST ERROR! %0.3f seconds.", (float)(HAL_GetTick( ) - start) / 1000.0f);
 800c688:	f7ff fc44 	bl	800bf14 <_ZN6Logger3GetEv>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d053      	beq.n	800c73a <_ZN17MasterApplication6DoPostEv+0x202>
 800c692:	f7ff fc3f 	bl	800bf14 <_ZN6Logger3GetEv>
 800c696:	4681      	mov	r9, r0
 800c698:	f7fc fc3e 	bl	8008f18 <HAL_GetTick>
 800c69c:	4602      	mov	r2, r0
 800c69e:	4b2c      	ldr	r3, [pc, #176]	; (800c750 <_ZN17MasterApplication6DoPostEv+0x218>)
 800c6a0:	fba3 2302 	umull	r2, r3, r3, r2
 800c6a4:	ea4f 5853 	mov.w	r8, r3, lsr #21
 800c6a8:	f7fc fc36 	bl	8008f18 <HAL_GetTick>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	4b29      	ldr	r3, [pc, #164]	; (800c754 <_ZN17MasterApplication6DoPostEv+0x21c>)
 800c6b0:	fba3 2302 	umull	r2, r3, r3, r2
 800c6b4:	0b9a      	lsrs	r2, r3, #14
 800c6b6:	4b28      	ldr	r3, [pc, #160]	; (800c758 <_ZN17MasterApplication6DoPostEv+0x220>)
 800c6b8:	fba3 1302 	umull	r1, r3, r3, r2
 800c6bc:	095e      	lsrs	r6, r3, #5
 800c6be:	4633      	mov	r3, r6
 800c6c0:	011b      	lsls	r3, r3, #4
 800c6c2:	1b9b      	subs	r3, r3, r6
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	1ad6      	subs	r6, r2, r3
 800c6c8:	f7fc fc26 	bl	8008f18 <HAL_GetTick>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	4b23      	ldr	r3, [pc, #140]	; (800c75c <_ZN17MasterApplication6DoPostEv+0x224>)
 800c6d0:	fba3 2302 	umull	r2, r3, r3, r2
 800c6d4:	099a      	lsrs	r2, r3, #6
 800c6d6:	4b20      	ldr	r3, [pc, #128]	; (800c758 <_ZN17MasterApplication6DoPostEv+0x220>)
 800c6d8:	fba3 1302 	umull	r1, r3, r3, r2
 800c6dc:	095c      	lsrs	r4, r3, #5
 800c6de:	4623      	mov	r3, r4
 800c6e0:	011b      	lsls	r3, r3, #4
 800c6e2:	1b1b      	subs	r3, r3, r4
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	1ad4      	subs	r4, r2, r3
 800c6e8:	f7fc fc16 	bl	8008f18 <HAL_GetTick>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	4a1b      	ldr	r2, [pc, #108]	; (800c75c <_ZN17MasterApplication6DoPostEv+0x224>)
 800c6f0:	fba2 1203 	umull	r1, r2, r2, r3
 800c6f4:	0995      	lsrs	r5, r2, #6
 800c6f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c6fa:	fb02 f205 	mul.w	r2, r2, r5
 800c6fe:	1a9d      	subs	r5, r3, r2
 800c700:	f7fc fc0a 	bl	8008f18 <HAL_GetTick>
 800c704:	4602      	mov	r2, r0
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	1ad3      	subs	r3, r2, r3
 800c70a:	ee07 3a90 	vmov	s15, r3
 800c70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c712:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800c760 <_ZN17MasterApplication6DoPostEv+0x228>
 800c716:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c71a:	ee16 0a90 	vmov	r0, s13
 800c71e:	f7fa fc8d 	bl	800703c <__aeabi_f2d>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c72a:	9501      	str	r5, [sp, #4]
 800c72c:	9400      	str	r4, [sp, #0]
 800c72e:	4633      	mov	r3, r6
 800c730:	4642      	mov	r2, r8
 800c732:	490d      	ldr	r1, [pc, #52]	; (800c768 <_ZN17MasterApplication6DoPostEv+0x230>)
 800c734:	4648      	mov	r0, r9
 800c736:	f004 fa0d 	bl	8010b54 <_ZN6Logger3LogEPKcz>
    }

    return allModulesPassedPost;
 800c73a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3724      	adds	r7, #36	; 0x24
 800c740:	46bd      	mov	sp, r7
 800c742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c746:	bf00      	nop
 800c748:	0801680c 	.word	0x0801680c
 800c74c:	200009e0 	.word	0x200009e0
 800c750:	95217cb1 	.word	0x95217cb1
 800c754:	45e7b273 	.word	0x45e7b273
 800c758:	88888889 	.word	0x88888889
 800c75c:	10624dd3 	.word	0x10624dd3
 800c760:	447a0000 	.word	0x447a0000
 800c764:	08016828 	.word	0x08016828
 800c768:	0801686c 	.word	0x0801686c

0800c76c <_ZN17MasterApplication3RunEv>:

extern __IO uint32_t uwTick;

void MasterApplication::Run( )
{
 800c76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c770:	b096      	sub	sp, #88	; 0x58
 800c772:	af04      	add	r7, sp, #16
 800c774:	6078      	str	r0, [r7, #4]
    UartModule* uart = UART1_MODULE;
 800c776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c77a:	4618      	mov	r0, r3
 800c77c:	f004 fb5c 	bl	8010e38 <_ZNSaIcEC1Ev>
 800c780:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c784:	f107 0310 	add.w	r3, r7, #16
 800c788:	495c      	ldr	r1, [pc, #368]	; (800c8fc <_ZN17MasterApplication3RunEv+0x190>)
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 fa65 	bl	800cc5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800c790:	f107 0310 	add.w	r3, r7, #16
 800c794:	4618      	mov	r0, r3
 800c796:	f000 f8c3 	bl	800c920 <_ZN17MasterApplication9GetModuleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800c79a:	6378      	str	r0, [r7, #52]	; 0x34
 800c79c:	f107 0310 	add.w	r3, r7, #16
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 fa25 	bl	800cbf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c7a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f004 fb48 	bl	8010e40 <_ZNSaIcED1Ev>

    uint32_t lastResetTime = 0;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	647b      	str	r3, [r7, #68]	; 0x44
    size_t   cnt           = 0;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	643b      	str	r3, [r7, #64]	; 0x40
    size_t   tot           = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t   samplesTaken  = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	63bb      	str	r3, [r7, #56]	; 0x38

    uwTick = 0;
 800c7c0:	4b4f      	ldr	r3, [pc, #316]	; (800c900 <_ZN17MasterApplication3RunEv+0x194>)
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	601a      	str	r2, [r3, #0]
    while (true)
    {
        uart->VTransmit("Cnt: %i\n\r", ++cnt);
 800c7c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	643b      	str	r3, [r7, #64]	; 0x40
 800c7cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7ce:	494d      	ldr	r1, [pc, #308]	; (800c904 <_ZN17MasterApplication3RunEv+0x198>)
 800c7d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c7d2:	f003 f847 	bl	800f864 <_ZN10UartModule9VTransmitEPKcz>
        //        ++cnt;
        if (HAL_GetTick( ) >= lastResetTime + 1000)
 800c7d6:	f7fc fb9f 	bl	8008f18 <HAL_GetTick>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7de:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	bf2c      	ite	cs
 800c7e6:	2301      	movcs	r3, #1
 800c7e8:	2300      	movcc	r3, #0
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d055      	beq.n	800c89c <_ZN17MasterApplication3RunEv+0x130>
        {
            lastResetTime = HAL_GetTick( );
 800c7f0:	f7fc fb92 	bl	8008f18 <HAL_GetTick>
 800c7f4:	6478      	str	r0, [r7, #68]	; 0x44
            tot += cnt;
 800c7f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7fa:	4413      	add	r3, r2
 800c7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
            ++samplesTaken;
 800c7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c800:	3301      	adds	r3, #1
 800c802:	63bb      	str	r3, [r7, #56]	; 0x38
            LOG_INFO("Current Average: %i\t%i", tot / samplesTaken, cnt);
 800c804:	f7ff fb86 	bl	800bf14 <_ZN6Logger3GetEv>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d044      	beq.n	800c898 <_ZN17MasterApplication3RunEv+0x12c>
 800c80e:	f7ff fb81 	bl	800bf14 <_ZN6Logger3GetEv>
 800c812:	4680      	mov	r8, r0
 800c814:	f7fc fb80 	bl	8008f18 <HAL_GetTick>
 800c818:	4602      	mov	r2, r0
 800c81a:	4b3b      	ldr	r3, [pc, #236]	; (800c908 <_ZN17MasterApplication3RunEv+0x19c>)
 800c81c:	fba3 2302 	umull	r2, r3, r3, r2
 800c820:	0d5e      	lsrs	r6, r3, #21
 800c822:	f7fc fb79 	bl	8008f18 <HAL_GetTick>
 800c826:	4602      	mov	r2, r0
 800c828:	4b38      	ldr	r3, [pc, #224]	; (800c90c <_ZN17MasterApplication3RunEv+0x1a0>)
 800c82a:	fba3 2302 	umull	r2, r3, r3, r2
 800c82e:	0b9a      	lsrs	r2, r3, #14
 800c830:	4b37      	ldr	r3, [pc, #220]	; (800c910 <_ZN17MasterApplication3RunEv+0x1a4>)
 800c832:	fba3 1302 	umull	r1, r3, r3, r2
 800c836:	095d      	lsrs	r5, r3, #5
 800c838:	462b      	mov	r3, r5
 800c83a:	011b      	lsls	r3, r3, #4
 800c83c:	1b5b      	subs	r3, r3, r5
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	1ad5      	subs	r5, r2, r3
 800c842:	f7fc fb69 	bl	8008f18 <HAL_GetTick>
 800c846:	4602      	mov	r2, r0
 800c848:	4b32      	ldr	r3, [pc, #200]	; (800c914 <_ZN17MasterApplication3RunEv+0x1a8>)
 800c84a:	fba3 2302 	umull	r2, r3, r3, r2
 800c84e:	099a      	lsrs	r2, r3, #6
 800c850:	4b2f      	ldr	r3, [pc, #188]	; (800c910 <_ZN17MasterApplication3RunEv+0x1a4>)
 800c852:	fba3 1302 	umull	r1, r3, r3, r2
 800c856:	095c      	lsrs	r4, r3, #5
 800c858:	4623      	mov	r3, r4
 800c85a:	011b      	lsls	r3, r3, #4
 800c85c:	1b1b      	subs	r3, r3, r4
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	1ad4      	subs	r4, r2, r3
 800c862:	f7fc fb59 	bl	8008f18 <HAL_GetTick>
 800c866:	4602      	mov	r2, r0
 800c868:	4b2a      	ldr	r3, [pc, #168]	; (800c914 <_ZN17MasterApplication3RunEv+0x1a8>)
 800c86a:	fba3 1302 	umull	r1, r3, r3, r2
 800c86e:	099b      	lsrs	r3, r3, #6
 800c870:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c874:	fb01 f303 	mul.w	r3, r1, r3
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c87c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c87e:	fbb1 f2f2 	udiv	r2, r1, r2
 800c882:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c884:	9103      	str	r1, [sp, #12]
 800c886:	9202      	str	r2, [sp, #8]
 800c888:	9301      	str	r3, [sp, #4]
 800c88a:	9400      	str	r4, [sp, #0]
 800c88c:	462b      	mov	r3, r5
 800c88e:	4632      	mov	r2, r6
 800c890:	4921      	ldr	r1, [pc, #132]	; (800c918 <_ZN17MasterApplication3RunEv+0x1ac>)
 800c892:	4640      	mov	r0, r8
 800c894:	f004 f95e 	bl	8010b54 <_ZN6Logger3LogEPKcz>
            cnt = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	643b      	str	r3, [r7, #64]	; 0x40
        }

        for (auto& module : s_instance->m_modules)
 800c89c:	4b1f      	ldr	r3, [pc, #124]	; (800c91c <_ZN17MasterApplication3RunEv+0x1b0>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	633b      	str	r3, [r7, #48]	; 0x30
 800c8a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8a6:	f000 fb20 	bl	800ceea <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE5beginEv>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	60fb      	str	r3, [r7, #12]
 800c8ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8b0:	f000 fb28 	bl	800cf04 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	60bb      	str	r3, [r7, #8]
 800c8b8:	f107 0208 	add.w	r2, r7, #8
 800c8bc:	f107 030c 	add.w	r3, r7, #12
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 fb2b 	bl	800cf1e <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEneERKSC_>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f43f af7b 	beq.w	800c7c6 <_ZN17MasterApplication3RunEv+0x5a>
 800c8d0:	f107 030c 	add.w	r3, r7, #12
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f000 fafa 	bl	800cece <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEdeEv>
 800c8da:	62f8      	str	r0, [r7, #44]	; 0x2c
        {
            module.second->Run( );
 800c8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8de:	699a      	ldr	r2, [r3, #24]
 800c8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e2:	699b      	ldr	r3, [r3, #24]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	330c      	adds	r3, #12
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4610      	mov	r0, r2
 800c8ec:	4798      	blx	r3
        for (auto& module : s_instance->m_modules)
 800c8ee:	f107 030c 	add.w	r3, r7, #12
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f000 fb27 	bl	800cf46 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEppEv>
 800c8f8:	e7de      	b.n	800c8b8 <_ZN17MasterApplication3RunEv+0x14c>
 800c8fa:	bf00      	nop
 800c8fc:	080168b4 	.word	0x080168b4
 800c900:	2000104c 	.word	0x2000104c
 800c904:	080168bc 	.word	0x080168bc
 800c908:	95217cb1 	.word	0x95217cb1
 800c90c:	45e7b273 	.word	0x45e7b273
 800c910:	88888889 	.word	0x88888889
 800c914:	10624dd3 	.word	0x10624dd3
 800c918:	080168c8 	.word	0x080168c8
 800c91c:	200009e0 	.word	0x200009e0

0800c920 <_ZN17MasterApplication9GetModuleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
        }
    }
}

cep::Module* MasterApplication::GetModule(const std::string& moduleName)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
    return s_instance->m_modules.at(moduleName);
 800c928:	4b06      	ldr	r3, [pc, #24]	; (800c944 <_ZN17MasterApplication9GetModuleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	3304      	adds	r3, #4
 800c92e:	6879      	ldr	r1, [r7, #4]
 800c930:	4618      	mov	r0, r3
 800c932:	f000 fb19 	bl	800cf68 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE2atERSC_>
 800c936:	4603      	mov	r3, r0
 800c938:	681b      	ldr	r3, [r3, #0]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop
 800c944:	200009e0 	.word	0x200009e0

0800c948 <_ZN17MasterApplication13InitializeHALEv>:

/*****************************************************************************/
/* Private Method Definitions                                                */
/*****************************************************************************/
void MasterApplication::InitializeHAL( )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
    // HAL devices initialization
    MX_GPIO_Init( );
 800c950:	f7fb ffd2 	bl	80088f8 <MX_GPIO_Init>
    MX_DMA_Init( );
 800c954:	f7fb ffa8 	bl	80088a8 <MX_DMA_Init>
    MX_USART1_UART_Init( );
 800c958:	f7fc f946 	bl	8008be8 <MX_USART1_UART_Init>
}
 800c95c:	bf00      	nop
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <_ZN17MasterApplication18InitializeServicesEv>:

void MasterApplication::InitializeServices( ) {}
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	bf00      	nop
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <_ZN17MasterApplication17InitializeModulesEv>:

void MasterApplication::InitializeModules( )
{
 800c978:	b5b0      	push	{r4, r5, r7, lr}
 800c97a:	b096      	sub	sp, #88	; 0x58
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
    // --- Drivers ---

    // Uart module for debug purposes.
    UartModule* uart1 = new UartModule(&huart1, "uart1");
 800c980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c984:	4618      	mov	r0, r3
 800c986:	f004 fa57 	bl	8010e38 <_ZNSaIcEC1Ev>
 800c98a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c98e:	f107 030c 	add.w	r3, r7, #12
 800c992:	4947      	ldr	r1, [pc, #284]	; (800cab0 <_ZN17MasterApplication17InitializeModulesEv+0x138>)
 800c994:	4618      	mov	r0, r3
 800c996:	f000 f960 	bl	800cc5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800c99a:	f107 050c 	add.w	r5, r7, #12
 800c99e:	20a8      	movs	r0, #168	; 0xa8
 800c9a0:	f001 fe9e 	bl	800e6e0 <_Znwj>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	461c      	mov	r4, r3
 800c9a8:	462a      	mov	r2, r5
 800c9aa:	4942      	ldr	r1, [pc, #264]	; (800cab4 <_ZN17MasterApplication17InitializeModulesEv+0x13c>)
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f002 fb29 	bl	800f004 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800c9b2:	657c      	str	r4, [r7, #84]	; 0x54
 800c9b4:	f107 030c 	add.w	r3, r7, #12
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f000 f919 	bl	800cbf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c9be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f004 fa3c 	bl	8010e40 <_ZNSaIcED1Ev>
    AddModule(uart1);
 800c9c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7ff fc87 	bl	800c2de <_ZN17MasterApplication9AddModuleEPN3cep6ModuleE>

    uart1->Transmit("\n\n\n\r");
 800c9d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f004 fa2f 	bl	8010e38 <_ZNSaIcEC1Ev>
 800c9da:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c9de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9e2:	4935      	ldr	r1, [pc, #212]	; (800cab8 <_ZN17MasterApplication17InitializeModulesEv+0x140>)
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f000 f938 	bl	800cc5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800c9ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c9f2:	f002 ff21 	bl	800f838 <_ZN10UartModule8TransmitERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800c9f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f000 f8f8 	bl	800cbf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ca00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ca04:	4618      	mov	r0, r3
 800ca06:	f004 fa1b 	bl	8010e40 <_ZNSaIcED1Ev>

    m_logger = new Logger(uart1);
 800ca0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f000 f916 	bl	800cc40 <_ZNSt8functionIFvPKcjEEC1Ev>
 800ca14:	f107 0544 	add.w	r5, r7, #68	; 0x44
 800ca18:	2014      	movs	r0, #20
 800ca1a:	f001 fe61 	bl	800e6e0 <_Znwj>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	461c      	mov	r4, r3
 800ca22:	462a      	mov	r2, r5
 800ca24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca26:	4620      	mov	r0, r4
 800ca28:	f004 f818 	bl	8010a5c <_ZN6LoggerC1EP10UartModuleRKSt8functionIFvPKcjEE>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	61dc      	str	r4, [r3, #28]
 800ca30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7ff fc20 	bl	800c27a <_ZNSt8functionIFvPKcjEED1Ev>
    m_logger->Log("\n\n\r");
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	69db      	ldr	r3, [r3, #28]
 800ca3e:	491f      	ldr	r1, [pc, #124]	; (800cabc <_ZN17MasterApplication17InitializeModulesEv+0x144>)
 800ca40:	4618      	mov	r0, r3
 800ca42:	f004 f887 	bl	8010b54 <_ZN6Logger3LogEPKcz>
    m_logger->Log(
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	69db      	ldr	r3, [r3, #28]
 800ca4a:	491d      	ldr	r1, [pc, #116]	; (800cac0 <_ZN17MasterApplication17InitializeModulesEv+0x148>)
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f004 f881 	bl	8010b54 <_ZN6Logger3LogEPKcz>
        "===============================================================================\n\r");
    m_logger->Log(
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	69db      	ldr	r3, [r3, #28]
 800ca56:	491b      	ldr	r1, [pc, #108]	; (800cac4 <_ZN17MasterApplication17InitializeModulesEv+0x14c>)
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f004 f87b 	bl	8010b54 <_ZN6Logger3LogEPKcz>
        "|                               NilaiTFO - Test                               |\n\r");
    m_logger->Log(
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	69db      	ldr	r3, [r3, #28]
 800ca62:	4919      	ldr	r1, [pc, #100]	; (800cac8 <_ZN17MasterApplication17InitializeModulesEv+0x150>)
 800ca64:	4618      	mov	r0, r3
 800ca66:	f004 f875 	bl	8010b54 <_ZN6Logger3LogEPKcz>
        "|                          (c) 2021 - Samuel Martel                           |\n\r");
    m_logger->Log(
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	69db      	ldr	r3, [r3, #28]
 800ca6e:	4917      	ldr	r1, [pc, #92]	; (800cacc <_ZN17MasterApplication17InitializeModulesEv+0x154>)
 800ca70:	4618      	mov	r0, r3
 800ca72:	f004 f86f 	bl	8010b54 <_ZN6Logger3LogEPKcz>
        "|                         Developed by Samuel Martel                          |\n\r");
    m_logger->Log("|                        Built: %s\t%s                      |\n\r",
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	69d8      	ldr	r0, [r3, #28]
 800ca7a:	4b15      	ldr	r3, [pc, #84]	; (800cad0 <_ZN17MasterApplication17InitializeModulesEv+0x158>)
 800ca7c:	4a15      	ldr	r2, [pc, #84]	; (800cad4 <_ZN17MasterApplication17InitializeModulesEv+0x15c>)
 800ca7e:	4916      	ldr	r1, [pc, #88]	; (800cad8 <_ZN17MasterApplication17InitializeModulesEv+0x160>)
 800ca80:	f004 f868 	bl	8010b54 <_ZN6Logger3LogEPKcz>
                  __DATE__,
                  __TIME__);
#if defined(DEBUG)
    m_logger->Log(
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	69db      	ldr	r3, [r3, #28]
 800ca88:	4914      	ldr	r1, [pc, #80]	; (800cadc <_ZN17MasterApplication17InitializeModulesEv+0x164>)
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f004 f862 	bl	8010b54 <_ZN6Logger3LogEPKcz>
        "|                            !!! DEBUG VERSION !!!                            |\n\r");
#endif
    m_logger->Log(
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	69db      	ldr	r3, [r3, #28]
 800ca94:	490a      	ldr	r1, [pc, #40]	; (800cac0 <_ZN17MasterApplication17InitializeModulesEv+0x148>)
 800ca96:	4618      	mov	r0, r3
 800ca98:	f004 f85c 	bl	8010b54 <_ZN6Logger3LogEPKcz>
        "===============================================================================\n\r");

    m_logger->Log("\n\r----- Initializing drivers...\n\r");
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	69db      	ldr	r3, [r3, #28]
 800caa0:	490f      	ldr	r1, [pc, #60]	; (800cae0 <_ZN17MasterApplication17InitializeModulesEv+0x168>)
 800caa2:	4618      	mov	r0, r3
 800caa4:	f004 f856 	bl	8010b54 <_ZN6Logger3LogEPKcz>
}
 800caa8:	bf00      	nop
 800caaa:	3758      	adds	r7, #88	; 0x58
 800caac:	46bd      	mov	sp, r7
 800caae:	bdb0      	pop	{r4, r5, r7, pc}
 800cab0:	080168b4 	.word	0x080168b4
 800cab4:	2000100c 	.word	0x2000100c
 800cab8:	08016904 	.word	0x08016904
 800cabc:	0801690c 	.word	0x0801690c
 800cac0:	08016910 	.word	0x08016910
 800cac4:	08016964 	.word	0x08016964
 800cac8:	080169b8 	.word	0x080169b8
 800cacc:	08016a0c 	.word	0x08016a0c
 800cad0:	08016a60 	.word	0x08016a60
 800cad4:	08016a6c 	.word	0x08016a6c
 800cad8:	08016a78 	.word	0x08016a78
 800cadc:	08016ab8 	.word	0x08016ab8
 800cae0:	08016b0c 	.word	0x08016b0c

0800cae4 <_ZN9__gnu_cxx11char_traitsIcE2ltERKcS3_>:
      lt(const char_type& __c1, const char_type& __c2)
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
      { return __c1 < __c2; }
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	781a      	ldrb	r2, [r3, #0]
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	bf34      	ite	cc
 800cafa:	2301      	movcc	r3, #1
 800cafc:	2300      	movcs	r3, #0
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	4618      	mov	r0, r3
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <_ZN9__gnu_cxx11char_traitsIcE7compareEPKcS3_j>:
    char_traits<_CharT>::
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b086      	sub	sp, #24
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
      for (std::size_t __i = 0; __i < __n; ++__i)
 800cb18:	2300      	movs	r3, #0
 800cb1a:	617b      	str	r3, [r7, #20]
 800cb1c:	697a      	ldr	r2, [r7, #20]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d220      	bcs.n	800cb66 <_ZN9__gnu_cxx11char_traitsIcE7compareEPKcS3_j+0x5a>
	if (lt(__s1[__i], __s2[__i]))
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	18d0      	adds	r0, r2, r3
 800cb2a:	68ba      	ldr	r2, [r7, #8]
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	4413      	add	r3, r2
 800cb30:	4619      	mov	r1, r3
 800cb32:	f7ff ffd7 	bl	800cae4 <_ZN9__gnu_cxx11char_traitsIcE2ltERKcS3_>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d002      	beq.n	800cb42 <_ZN9__gnu_cxx11char_traitsIcE7compareEPKcS3_j+0x36>
	  return -1;
 800cb3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb40:	e012      	b.n	800cb68 <_ZN9__gnu_cxx11char_traitsIcE7compareEPKcS3_j+0x5c>
	else if (lt(__s2[__i], __s1[__i]))
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	18d0      	adds	r0, r2, r3
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	4619      	mov	r1, r3
 800cb50:	f7ff ffc8 	bl	800cae4 <_ZN9__gnu_cxx11char_traitsIcE2ltERKcS3_>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <_ZN9__gnu_cxx11char_traitsIcE7compareEPKcS3_j+0x52>
	  return 1;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e004      	b.n	800cb68 <_ZN9__gnu_cxx11char_traitsIcE7compareEPKcS3_j+0x5c>
      for (std::size_t __i = 0; __i < __n; ++__i)
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	3301      	adds	r3, #1
 800cb62:	617b      	str	r3, [r7, #20]
 800cb64:	e7da      	b.n	800cb1c <_ZN9__gnu_cxx11char_traitsIcE7compareEPKcS3_j+0x10>
      return 0;
 800cb66:	2300      	movs	r3, #0
    }
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3718      	adds	r7, #24
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	4413      	add	r3, r2
 800cb82:	2200      	movs	r2, #0
 800cb84:	72fa      	strb	r2, [r7, #11]
 800cb86:	f107 020b 	add.w	r2, r7, #11
 800cb8a:	4611      	mov	r1, r2
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 f80f 	bl	800cbb0 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 800cb92:	4603      	mov	r3, r0
 800cb94:	f083 0301 	eor.w	r3, r3, #1
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d003      	beq.n	800cba6 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x36>
        ++__i;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	3301      	adds	r3, #1
 800cba2:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 800cba4:	e7ea      	b.n	800cb7c <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xc>
      return __i;
 800cba6:	68fb      	ldr	r3, [r7, #12]
    }
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3710      	adds	r7, #16
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	781a      	ldrb	r2, [r3, #0]
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	bf0c      	ite	eq
 800cbc6:	2301      	moveq	r3, #1
 800cbc8:	2300      	movne	r3, #0
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	4618      	mov	r0, r3
 800cbce:	370c      	adds	r7, #12
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>:
	__sv_type _M_sv;
      };
#endif

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f004 f92d 	bl	8010e40 <_ZNSaIcED1Ev>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3708      	adds	r7, #8
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
#endif // C++17

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
      { _M_dispose(); }
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 fa05 	bl	800d008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7ff ffe9 	bl	800cbd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
       *  the contents through the returned pointer. To get a pointer that
       *  allows modifying the contents use @c &str[0] instead,
       *  (or in C++17 the non-const @c str.data() overload).
      */
      const _CharT*
      data() const _GLIBCXX_NOEXCEPT
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
      { return _M_data(); }
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 f9e9 	bl	800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	4618      	mov	r0, r3
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
      length() const _GLIBCXX_NOEXCEPT
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
      { return _M_string_length; }
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	4618      	mov	r0, r3
 800cc36:	370c      	adds	r7, #12
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <_ZNSt8functionIFvPKcjEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7ff fae0 	bl	800c210 <_ZNSt14_Function_baseC1Ev>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4618      	mov	r0, r3
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 800cc5a:	b590      	push	{r4, r7, lr}
 800cc5c:	b085      	sub	sp, #20
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	60b9      	str	r1, [r7, #8]
 800cc64:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 800cc66:	68fc      	ldr	r4, [r7, #12]
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f000 f9e4 	bl	800d036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	4619      	mov	r1, r3
 800cc74:	4620      	mov	r0, r4
 800cc76:	f000 f9ec 	bl	800d052 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d006      	beq.n	800cc8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x34>
 800cc80:	68b8      	ldr	r0, [r7, #8]
 800cc82:	f7ff fa76 	bl	800c172 <_ZNSt11char_traitsIcE6lengthEPKc>
 800cc86:	4602      	mov	r2, r0
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	e001      	b.n	800cc92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x38>
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	3b01      	subs	r3, #1
 800cc92:	461a      	mov	r2, r3
 800cc94:	68b9      	ldr	r1, [r7, #8]
 800cc96:	68f8      	ldr	r0, [r7, #12]
 800cc98:	f000 f9ed 	bl	800d076 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3714      	adds	r7, #20
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd90      	pop	{r4, r7, pc}

0800cca6 <_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IvLb1EEES7_>:
                   _ConstructibleTuple<_Elements...>()
                 && _TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>()
                 && (sizeof...(_Elements) >= 1),
               bool>::type=true>
        constexpr tuple(const _Elements&... __elements)
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b082      	sub	sp, #8
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	6039      	str	r1, [r7, #0]
      : _Inherited(__elements...) { }
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6839      	ldr	r1, [r7, #0]
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 f805 	bl	800ccc4 <_ZNSt11_Tuple_implILj0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ES7_>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <_ZNSt11_Tuple_implILj0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ES7_>:
      constexpr _Tuple_impl(const _Head& __head)
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6839      	ldr	r1, [r7, #0]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 f805 	bl	800cce2 <_ZNSt10_Head_baseILj0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1ES7_>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <_ZNSt10_Head_baseILj0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1ES7_>:
      constexpr _Head_base(const _Head& __h)
 800cce2:	b480      	push	{r7}
 800cce4:	b083      	sub	sp, #12
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	683a      	ldr	r2, [r7, #0]
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr

0800cd00 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEEixERSC_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 800cd00:	b590      	push	{r4, r7, lr}
 800cd02:	b08b      	sub	sp, #44	; 0x2c
 800cd04:	af02      	add	r7, sp, #8
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 800cd0a:	6839      	ldr	r1, [r7, #0]
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 fa04 	bl	800d11a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE11lower_boundERSC_>
 800cd12:	4603      	mov	r3, r0
 800cd14:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 f8f4 	bl	800cf04 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	60fb      	str	r3, [r7, #12]
 800cd20:	f107 020c 	add.w	r2, r7, #12
 800cd24:	f107 0308 	add.w	r3, r7, #8
 800cd28:	4611      	mov	r1, r2
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f000 fa04 	bl	800d138 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEeqERKSC_>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d112      	bne.n	800cd5c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEEixERSC_+0x5c>
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 fa12 	bl	800d160 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE8key_compEv>
 800cd3c:	f107 0308 	add.w	r3, r7, #8
 800cd40:	4618      	mov	r0, r3
 800cd42:	f000 f8c4 	bl	800cece <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEdeEv>
 800cd46:	4603      	mov	r3, r0
 800cd48:	461a      	mov	r2, r3
 800cd4a:	f107 0310 	add.w	r3, r7, #16
 800cd4e:	6839      	ldr	r1, [r7, #0]
 800cd50:	4618      	mov	r0, r3
 800cd52:	f000 fa12 	bl	800d17a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d001      	beq.n	800cd60 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEEixERSC_+0x60>
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e000      	b.n	800cd62 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEEixERSC_+0x62>
 800cd60:	2300      	movs	r3, #0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d01b      	beq.n	800cd9e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEEixERSC_+0x9e>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800cd66:	687c      	ldr	r4, [r7, #4]
 800cd68:	f107 0208 	add.w	r2, r7, #8
 800cd6c:	f107 0314 	add.w	r3, r7, #20
 800cd70:	4611      	mov	r1, r2
 800cd72:	4618      	mov	r0, r3
 800cd74:	f000 fa10 	bl	800d198 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEC1ERKSt17_Rb_tree_iteratorISB_E>
 800cd78:	f107 0318 	add.w	r3, r7, #24
 800cd7c:	6839      	ldr	r1, [r7, #0]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7ff ff91 	bl	800cca6 <_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IvLb1EEES7_>
 800cd84:	f107 0218 	add.w	r2, r7, #24
 800cd88:	f107 031c 	add.w	r3, r7, #28
 800cd8c:	9300      	str	r3, [sp, #0]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	4a08      	ldr	r2, [pc, #32]	; (800cdb4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEEixERSC_+0xb4>)
 800cd92:	6979      	ldr	r1, [r7, #20]
 800cd94:	4620      	mov	r0, r4
 800cd96:	f000 fa30 	bl	800d1fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	60bb      	str	r3, [r7, #8]
					    std::tuple<const key_type&>(__k),
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 800cd9e:	f107 0308 	add.w	r3, r7, #8
 800cda2:	4618      	mov	r0, r3
 800cda4:	f000 f893 	bl	800cece <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEdeEv>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	3318      	adds	r3, #24
      }
 800cdac:	4618      	mov	r0, r3
 800cdae:	3724      	adds	r7, #36	; 0x24
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd90      	pop	{r4, r7, pc}
 800cdb4:	08017868 	.word	0x08017868

0800cdb8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 fa58 	bl	800d276 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEC1Ev>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3708      	adds	r7, #8
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 fa57 	bl	800d28c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEED1Ev>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	4618      	mov	r0, r3
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
      { }
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	370c      	adds	r7, #12
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr

0800cdfe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>:
      { }

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b082      	sub	sp, #8
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 fa6a 	bl	800d2e0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	4619      	mov	r1, r3
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 fa46 	bl	800d2a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7ff faae 	bl	800c37a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	4618      	mov	r0, r3
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE6rbeginEv>:
      rbegin() _GLIBCXX_NOEXCEPT
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
      { return _M_t.rbegin(); }
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4611      	mov	r1, r2
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f000 fa5d 	bl	800d2f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6rbeginEv>
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	3708      	adds	r7, #8
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE4rendEv>:
      rend() _GLIBCXX_NOEXCEPT
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b082      	sub	sp, #8
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
 800ce4e:	6039      	str	r1, [r7, #0]
      { return _M_t.rend(); }
 800ce50:	683a      	ldr	r2, [r7, #0]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	4611      	mov	r1, r2
 800ce56:	4618      	mov	r0, r3
 800ce58:	f000 fa5f 	bl	800d31a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4rendEv>
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <_ZStneISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEbRKSt16reverse_iteratorIT_ESI_>:
	      const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline _GLIBCXX17_CONSTEXPR bool
    operator!=(const reverse_iterator<_Iterator>& __x,
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
	       const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }
 800ce6e:	6839      	ldr	r1, [r7, #0]
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 fa63 	bl	800d33c <_ZSteqISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEbRKSt16reverse_iteratorIT_ESI_>
 800ce76:	4603      	mov	r3, r0
 800ce78:	f083 0301 	eor.w	r3, r3, #1
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3708      	adds	r7, #8
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}

0800ce86 <_ZNSt16reverse_iteratorISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEppEi>:
      operator++(int)
 800ce86:	b580      	push	{r7, lr}
 800ce88:	b084      	sub	sp, #16
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	60f8      	str	r0, [r7, #12]
 800ce8e:	60b9      	str	r1, [r7, #8]
 800ce90:	607a      	str	r2, [r7, #4]
	reverse_iterator __tmp = *this;
 800ce92:	68b9      	ldr	r1, [r7, #8]
 800ce94:	68f8      	ldr	r0, [r7, #12]
 800ce96:	f000 fa6d 	bl	800d374 <_ZNSt16reverse_iteratorISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEC1ERKSE_>
	--current;
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f000 f805 	bl	800ceac <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEmmEv>
	return __tmp;
 800cea2:	bf00      	nop
      }
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f003 ffff 	bl	8010ebc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800cebe:	4602      	mov	r2, r0
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	601a      	str	r2, [r3, #0]
	return *this;
 800cec4:	687b      	ldr	r3, [r7, #4]
      }
 800cec6:	4618      	mov	r0, r3
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800cece:	b580      	push	{r7, lr}
 800ced0:	b082      	sub	sp, #8
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4618      	mov	r0, r3
 800cedc:	f000 fa5a 	bl	800d394 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE9_M_valptrEv>
 800cee0:	4603      	mov	r3, r0
 800cee2:	4618      	mov	r0, r3
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b082      	sub	sp, #8
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	4618      	mov	r0, r3
 800cef6:	f000 fa5b 	bl	800d3b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE5beginEv>
 800cefa:	4603      	mov	r3, r0
 800cefc:	4618      	mov	r0, r3
 800cefe:	3708      	adds	r7, #8
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f000 fa5f 	bl	800d3d2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 800cf14:	4603      	mov	r3, r0
 800cf16:	4618      	mov	r0, r3
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEneERKSC_>:
      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
 800cf1e:	b480      	push	{r7}
 800cf20:	b083      	sub	sp, #12
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
 800cf26:	6039      	str	r1, [r7, #0]
      { return _M_node != __x._M_node; }
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681a      	ldr	r2, [r3, #0]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	bf14      	ite	ne
 800cf34:	2301      	movne	r3, #1
 800cf36:	2300      	moveq	r3, #0
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	370c      	adds	r7, #12
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr

0800cf46 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b082      	sub	sp, #8
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4618      	mov	r0, r3
 800cf54:	f003 ff96 	bl	8010e84 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	601a      	str	r2, [r3, #0]
	return *this;
 800cf5e:	687b      	ldr	r3, [r7, #4]
      }
 800cf60:	4618      	mov	r0, r3
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE2atERSC_>:
       *  @return  A reference to the data whose key is equivalent to @a __k, if
       *           such a data is present in the %map.
       *  @throw  std::out_of_range  If no such data is present.
       */
      mapped_type&
      at(const key_type& __k)
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
      {
	iterator __i = lower_bound(__k);
 800cf72:	6839      	ldr	r1, [r7, #0]
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 f8d0 	bl	800d11a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE11lower_boundERSC_>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	60fb      	str	r3, [r7, #12]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f7ff ffc0 	bl	800cf04 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>
 800cf84:	4603      	mov	r3, r0
 800cf86:	613b      	str	r3, [r7, #16]
 800cf88:	f107 0210 	add.w	r2, r7, #16
 800cf8c:	f107 030c 	add.w	r3, r7, #12
 800cf90:	4611      	mov	r1, r2
 800cf92:	4618      	mov	r0, r3
 800cf94:	f000 f8d0 	bl	800d138 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEeqERKSC_>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d112      	bne.n	800cfc4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE2atERSC_+0x5c>
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 f8de 	bl	800d160 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE8key_compEv>
 800cfa4:	f107 030c 	add.w	r3, r7, #12
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7ff ff90 	bl	800cece <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEdeEv>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	f107 0314 	add.w	r3, r7, #20
 800cfb6:	6839      	ldr	r1, [r7, #0]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f000 f8de 	bl	800d17a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d001      	beq.n	800cfc8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE2atERSC_+0x60>
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e000      	b.n	800cfca <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE2atERSC_+0x62>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d002      	beq.n	800cfd4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE2atERSC_+0x6c>
	  __throw_out_of_range(__N("map::at"));
 800cfce:	4807      	ldr	r0, [pc, #28]	; (800cfec <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE2atERSC_+0x84>)
 800cfd0:	f004 f86c 	bl	80110ac <_ZSt20__throw_out_of_rangePKc>
	return (*__i).second;
 800cfd4:	f107 030c 	add.w	r3, r7, #12
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7ff ff78 	bl	800cece <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEdeEv>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	3318      	adds	r3, #24
      }
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3718      	adds	r7, #24
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	08016b30 	.word	0x08016b30

0800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
      _M_data() const
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
      { return _M_dataplus._M_p; }
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4618      	mov	r0, r3
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
      _M_dispose()
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
	if (!_M_is_local())
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 f9fe 	bl	800d412 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800d016:	4603      	mov	r3, r0
 800d018:	f083 0301 	eor.w	r3, r3, #1
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d005      	beq.n	800d02e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x26>
	  _M_destroy(_M_allocated_capacity);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	4619      	mov	r1, r3
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 fa07 	bl	800d43c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
      }
 800d02e:	bf00      	nop
 800d030:	3708      	adds	r7, #8
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data()
 800d036:	b580      	push	{r7, lr}
 800d038:	b082      	sub	sp, #8
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	3308      	adds	r3, #8
 800d042:	4618      	mov	r0, r3
 800d044:	f000 fa11 	bl	800d46a <_ZNSt14pointer_traitsIPcE10pointer_toERc>
 800d048:	4603      	mov	r3, r0
      }
 800d04a:	4618      	mov	r0, r3
 800d04c:	3708      	adds	r7, #8
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
	_Alloc_hider(pointer __dat, const _Alloc& __a)
 800d052:	b580      	push	{r7, lr}
 800d054:	b084      	sub	sp, #16
 800d056:	af00      	add	r7, sp, #0
 800d058:	60f8      	str	r0, [r7, #12]
 800d05a:	60b9      	str	r1, [r7, #8]
 800d05c:	607a      	str	r2, [r7, #4]
	: allocator_type(__a), _M_p(__dat) { }
 800d05e:	6879      	ldr	r1, [r7, #4]
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f003 feeb 	bl	8010e3c <_ZNSaIcEC1ERKS_>
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	601a      	str	r2, [r3, #0]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	4618      	mov	r0, r3
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}

0800d076 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 800d076:	b580      	push	{r7, lr}
 800d078:	b084      	sub	sp, #16
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	60f8      	str	r0, [r7, #12]
 800d07e:	60b9      	str	r1, [r7, #8]
 800d080:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	68b9      	ldr	r1, [r7, #8]
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f000 f9fb 	bl	800d482 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>
        }
 800d08c:	bf00      	nop
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
      { return _M_string_length; }
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
      basic_string(const basic_string& __str)
 800d0ac:	b5b0      	push	{r4, r5, r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 800d0b6:	687c      	ldr	r4, [r7, #4]
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7ff ffbc 	bl	800d036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800d0be:	4605      	mov	r5, r0
 800d0c0:	6838      	ldr	r0, [r7, #0]
 800d0c2:	f000 f9fd 	bl	800d4c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	f107 030c 	add.w	r3, r7, #12
 800d0cc:	4611      	mov	r1, r2
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f000 f9e8 	bl	800d4a4 <_ZN9__gnu_cxx14__alloc_traitsISaIcEE17_S_select_on_copyERKS1_>
 800d0d4:	f107 030c 	add.w	r3, r7, #12
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4629      	mov	r1, r5
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f000 fa05 	bl	800d4ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
 800d0e2:	f107 030c 	add.w	r3, r7, #12
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f003 feaa 	bl	8010e40 <_ZNSaIcED1Ev>
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 800d0ec:	6838      	ldr	r0, [r7, #0]
 800d0ee:	f7ff ff7f 	bl	800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800d0f2:	4605      	mov	r5, r0
 800d0f4:	6838      	ldr	r0, [r7, #0]
 800d0f6:	f7ff ff7b 	bl	800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	6838      	ldr	r0, [r7, #0]
 800d0fe:	f7ff fd93 	bl	800cc28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800d102:	4603      	mov	r3, r0
 800d104:	4423      	add	r3, r4
 800d106:	461a      	mov	r2, r3
 800d108:	4629      	mov	r1, r5
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 f972 	bl	800d3f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	4618      	mov	r0, r3
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bdb0      	pop	{r4, r5, r7, pc}

0800d11a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE11lower_boundERSC_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b082      	sub	sp, #8
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
 800d122:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6839      	ldr	r1, [r7, #0]
 800d128:	4618      	mov	r0, r3
 800d12a:	f000 fa45 	bl	800d5b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11lower_boundERS7_>
 800d12e:	4603      	mov	r3, r0
 800d130:	4618      	mov	r0, r3
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEeqERKSC_>:
      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
      { return _M_node == __x._M_node; }
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	bf0c      	ite	eq
 800d14e:	2301      	moveq	r3, #1
 800d150:	2300      	movne	r3, #0
 800d152:	b2db      	uxtb	r3, r3
 800d154:	4618      	mov	r0, r3
 800d156:	370c      	adds	r7, #12
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEE8key_compEv>:
      key_comp() const
 800d160:	b590      	push	{r4, r7, lr}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	4618      	mov	r0, r3
 800d16c:	f000 fa3b 	bl	800d5e6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8key_compEv>
 800d170:	4623      	mov	r3, r4
 800d172:	4618      	mov	r0, r3
 800d174:	370c      	adds	r7, #12
 800d176:	46bd      	mov	sp, r7
 800d178:	bd90      	pop	{r4, r7, pc}

0800d17a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b084      	sub	sp, #16
 800d17e:	af00      	add	r7, sp, #0
 800d180:	60f8      	str	r0, [r7, #12]
 800d182:	60b9      	str	r1, [r7, #8]
 800d184:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800d186:	6879      	ldr	r1, [r7, #4]
 800d188:	68b8      	ldr	r0, [r7, #8]
 800d18a:	f000 fa36 	bl	800d5fa <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 800d18e:	4603      	mov	r3, r0
 800d190:	4618      	mov	r0, r3
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEC1ERKSt17_Rb_tree_iteratorISB_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	601a      	str	r2, [r3, #0]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	370c      	adds	r7, #12
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr

0800d1ce <_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d1ce:	b480      	push	{r7}
 800d1d0:	b083      	sub	sp, #12
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4618      	mov	r0, r3
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	370c      	adds	r7, #12
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr

0800d1fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800d1fa:	b5b0      	push	{r4, r5, r7, lr}
 800d1fc:	b088      	sub	sp, #32
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	60f8      	str	r0, [r7, #12]
 800d202:	60b9      	str	r1, [r7, #8]
 800d204:	607a      	str	r2, [r7, #4]
 800d206:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f7ff ffd5 	bl	800d1b8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800d20e:	4604      	mov	r4, r0
 800d210:	6838      	ldr	r0, [r7, #0]
 800d212:	f7ff ffdc 	bl	800d1ce <_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE>
 800d216:	4605      	mov	r5, r0
 800d218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d21a:	f7ff ffe3 	bl	800d1e4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d21e:	4603      	mov	r3, r0
 800d220:	462a      	mov	r2, r5
 800d222:	4621      	mov	r1, r4
 800d224:	68f8      	ldr	r0, [r7, #12]
 800d226:	f000 f9f8 	bl	800d61a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEEPSt13_Rb_tree_nodeISB_EDpOT_>
 800d22a:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800d22c:	69f8      	ldr	r0, [r7, #28]
 800d22e:	f000 fb3a 	bl	800d8a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 800d232:	4603      	mov	r3, r0
 800d234:	f107 0010 	add.w	r0, r7, #16
 800d238:	68ba      	ldr	r2, [r7, #8]
 800d23a:	68f9      	ldr	r1, [r7, #12]
 800d23c:	f000 fa10 	bl	800d660 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_>

	    if (__res.second)
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d007      	beq.n	800d256 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 800d246:	6939      	ldr	r1, [r7, #16]
 800d248:	697a      	ldr	r2, [r7, #20]
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	68f8      	ldr	r0, [r7, #12]
 800d24e:	f000 fb3d 	bl	800d8cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSJ_PSt13_Rb_tree_nodeISB_E>
 800d252:	4603      	mov	r3, r0
 800d254:	e00b      	b.n	800d26e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x74>

	    _M_drop_node(__z);
 800d256:	69f9      	ldr	r1, [r7, #28]
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f000 fb74 	bl	800d946 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>
	    return iterator(__res.first);
 800d25e:	693a      	ldr	r2, [r7, #16]
 800d260:	f107 0318 	add.w	r3, r7, #24
 800d264:	4611      	mov	r1, r2
 800d266:	4618      	mov	r0, r3
 800d268:	f000 fb7e 	bl	800d968 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEC1EPSt18_Rb_tree_node_base>
 800d26c:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 800d26e:	4618      	mov	r0, r3
 800d270:	3720      	adds	r7, #32
 800d272:	46bd      	mov	sp, r7
 800d274:	bdb0      	pop	{r4, r5, r7, pc}

0800d276 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d276:	b480      	push	{r7}
 800d278:	b083      	sub	sp, #12
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	4618      	mov	r0, r3
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	4618      	mov	r0, r3
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b084      	sub	sp, #16
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d012      	beq.n	800d2d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x36>
	  _M_erase(_S_right(__x));
 800d2b2:	6838      	ldr	r0, [r7, #0]
 800d2b4:	f000 fb67 	bl	800d986 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7ff fff0 	bl	800d2a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
	  _Link_type __y = _S_left(__x);
 800d2c2:	6838      	ldr	r0, [r7, #0]
 800d2c4:	f000 fb6b 	bl	800d99e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 800d2c8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800d2ca:	6839      	ldr	r1, [r7, #0]
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 fb3a 	bl	800d946 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>
	  __x = __y;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800d2d6:	e7e9      	b.n	800d2ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xa>
    }
 800d2d8:	bf00      	nop
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800d2e0:	b480      	push	{r7}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6rbeginEv>:
      rbegin() _GLIBCXX_NOEXCEPT
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
      { return reverse_iterator(end()); }
 800d302:	6838      	ldr	r0, [r7, #0]
 800d304:	f000 f865 	bl	800d3d2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 800d308:	4603      	mov	r3, r0
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 fb52 	bl	800d9b6 <_ZNSt16reverse_iteratorISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEC1ESD_>
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	3708      	adds	r7, #8
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}

0800d31a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4rendEv>:
      rend() _GLIBCXX_NOEXCEPT
 800d31a:	b580      	push	{r7, lr}
 800d31c:	b082      	sub	sp, #8
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
 800d322:	6039      	str	r1, [r7, #0]
      { return reverse_iterator(begin()); }
 800d324:	6838      	ldr	r0, [r7, #0]
 800d326:	f000 f843 	bl	800d3b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE5beginEv>
 800d32a:	4603      	mov	r3, r0
 800d32c:	4619      	mov	r1, r3
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 fb41 	bl	800d9b6 <_ZNSt16reverse_iteratorISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEC1ESD_>
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <_ZSteqISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEbRKSt16reverse_iteratorIT_ESI_>:
    operator==(const reverse_iterator<_Iterator>& __x,
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 fb44 	bl	800d9d4 <_ZNKSt16reverse_iteratorISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE4baseEv>
 800d34c:	4603      	mov	r3, r0
 800d34e:	60bb      	str	r3, [r7, #8]
 800d350:	6838      	ldr	r0, [r7, #0]
 800d352:	f000 fb3f 	bl	800d9d4 <_ZNKSt16reverse_iteratorISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE4baseEv>
 800d356:	4603      	mov	r3, r0
 800d358:	60fb      	str	r3, [r7, #12]
 800d35a:	f107 020c 	add.w	r2, r7, #12
 800d35e:	f107 0308 	add.w	r3, r7, #8
 800d362:	4611      	mov	r1, r2
 800d364:	4618      	mov	r0, r3
 800d366:	f7ff fee7 	bl	800d138 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEeqERKSC_>
 800d36a:	4603      	mov	r3, r0
 800d36c:	4618      	mov	r0, r3
 800d36e:	3710      	adds	r7, #16
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <_ZNSt16reverse_iteratorISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEC1ERKSE_>:
      reverse_iterator(const reverse_iterator& __x)
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
      : current(__x.current) { }
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	683a      	ldr	r2, [r7, #0]
 800d382:	6812      	ldr	r2, [r2, #0]
 800d384:	601a      	str	r2, [r3, #0]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	4618      	mov	r0, r3
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE9_M_valptrEv>:
      _M_valptr()
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	3310      	adds	r3, #16
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f000 fb23 	bl	800d9ec <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE6_M_ptrEv>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	68da      	ldr	r2, [r3, #12]
 800d3bc:	f107 030c 	add.w	r3, r7, #12
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f000 fad0 	bl	800d968 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEC1EPSt18_Rb_tree_node_base>
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b084      	sub	sp, #16
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	1d1a      	adds	r2, r3, #4
 800d3de:	f107 030c 	add.w	r3, r7, #12
 800d3e2:	4611      	mov	r1, r2
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f000 fabf 	bl	800d968 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEC1EPSt18_Rb_tree_node_base>
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3710      	adds	r7, #16
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	68b9      	ldr	r1, [r7, #8]
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f000 fafd 	bl	800da04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800d40a:	bf00      	nop
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}

0800d412 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
      _M_is_local() const
 800d412:	b590      	push	{r4, r7, lr}
 800d414:	b083      	sub	sp, #12
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
      { return _M_data() == _M_local_data(); }
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f7ff fde8 	bl	800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800d420:	4604      	mov	r4, r0
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 faff 	bl	800da26 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800d428:	4603      	mov	r3, r0
 800d42a:	429c      	cmp	r4, r3
 800d42c:	bf0c      	ite	eq
 800d42e:	2301      	moveq	r3, #1
 800d430:	2300      	movne	r3, #0
 800d432:	b2db      	uxtb	r3, r3
 800d434:	4618      	mov	r0, r3
 800d436:	370c      	adds	r7, #12
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd90      	pop	{r4, r7, pc}

0800d43c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
      _M_destroy(size_type __size) throw()
 800d43c:	b590      	push	{r4, r7, lr}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 f866 	bl	800d518 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 800d44c:	4604      	mov	r4, r0
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f7ff fdce 	bl	800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800d454:	4601      	mov	r1, r0
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	3301      	adds	r3, #1
 800d45a:	461a      	mov	r2, r3
 800d45c:	4620      	mov	r0, r4
 800d45e:	f000 faf0 	bl	800da42 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
 800d462:	bf00      	nop
 800d464:	370c      	adds	r7, #12
 800d466:	46bd      	mov	sp, r7
 800d468:	bd90      	pop	{r4, r7, pc}

0800d46a <_ZNSt14pointer_traitsIPcE10pointer_toERc>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b082      	sub	sp, #8
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 faf4 	bl	800da60 <_ZSt9addressofIcEPT_RS0_>
 800d478:	4603      	mov	r3, r0
 800d47a:	4618      	mov	r0, r3
 800d47c:	3708      	adds	r7, #8
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}

0800d482 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800d482:	b590      	push	{r4, r7, lr}
 800d484:	b087      	sub	sp, #28
 800d486:	af00      	add	r7, sp, #0
 800d488:	60f8      	str	r0, [r7, #12]
 800d48a:	60b9      	str	r1, [r7, #8]
 800d48c:	607a      	str	r2, [r7, #4]
 800d48e:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 800d490:	4623      	mov	r3, r4
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	68b9      	ldr	r1, [r7, #8]
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f000 fb0c 	bl	800dab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
	}
 800d49c:	bf00      	nop
 800d49e:	371c      	adds	r7, #28
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd90      	pop	{r4, r7, pc}

0800d4a4 <_ZN9__gnu_cxx14__alloc_traitsISaIcEE17_S_select_on_copyERKS1_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6839      	ldr	r1, [r7, #0]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f000 fb46 	bl	800db44 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator() const
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
      { return _M_dataplus; }
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	370c      	adds	r7, #12
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr

0800d4d6 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800d4d6:	b480      	push	{r7}
 800d4d8:	b083      	sub	sp, #12
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr

0800d4ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>:
	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f7ff ffec 	bl	800d4d6 <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
 800d4fe:	4603      	mov	r3, r0
 800d500:	4619      	mov	r1, r3
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	f003 fc9a 	bl	8010e3c <_ZNSaIcEC1ERKS_>
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	68ba      	ldr	r2, [r7, #8]
 800d50c:	601a      	str	r2, [r3, #0]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	4618      	mov	r0, r3
 800d512:	3710      	adds	r7, #16
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator()
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
      { return _M_dataplus; }
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4618      	mov	r0, r3
 800d524:	370c      	adds	r7, #12
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr

0800d52e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
      _M_data(pointer __p)
 800d52e:	b480      	push	{r7}
 800d530:	b083      	sub	sp, #12
 800d532:	af00      	add	r7, sp, #0
 800d534:	6078      	str	r0, [r7, #4]
 800d536:	6039      	str	r1, [r7, #0]
      { _M_dataplus._M_p = __p; }
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	683a      	ldr	r2, [r7, #0]
 800d53c:	601a      	str	r2, [r3, #0]
 800d53e:	bf00      	nop
 800d540:	370c      	adds	r7, #12
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr

0800d54a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
      _M_capacity(size_type __capacity)
 800d54a:	b480      	push	{r7}
 800d54c:	b083      	sub	sp, #12
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	6039      	str	r1, [r7, #0]
      { _M_allocated_capacity = __capacity; }
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	609a      	str	r2, [r3, #8]
 800d55a:	bf00      	nop
 800d55c:	370c      	adds	r7, #12
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEj>:
      _M_length(size_type __length)
 800d566:	b480      	push	{r7}
 800d568:	b083      	sub	sp, #12
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
 800d56e:	6039      	str	r1, [r7, #0]
      { _M_string_length = __length; }
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	683a      	ldr	r2, [r7, #0]
 800d574:	605a      	str	r2, [r3, #4]
 800d576:	bf00      	nop
 800d578:	370c      	adds	r7, #12
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr

0800d582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
      _M_set_length(size_type __n)
 800d582:	b580      	push	{r7, lr}
 800d584:	b084      	sub	sp, #16
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	6039      	str	r1, [r7, #0]
	_M_length(__n);
 800d58c:	6839      	ldr	r1, [r7, #0]
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff ffe9 	bl	800d566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEj>
	traits_type::assign(_M_data()[__n], _CharT());
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7ff fd2b 	bl	800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800d59a:	4602      	mov	r2, r0
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	4413      	add	r3, r2
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	73fa      	strb	r2, [r7, #15]
 800d5a4:	f107 020f 	add.w	r2, r7, #15
 800d5a8:	4611      	mov	r1, r2
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fe fdb3 	bl	800c116 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
 800d5b0:	bf00      	nop
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11lower_boundERS7_>:
      lower_bound(const key_type& __k)
 800d5b8:	b590      	push	{r4, r7, lr}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f7ff fe8c 	bl	800d2e0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 800d5c8:	4604      	mov	r4, r0
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 faf0 	bl	800dbb0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	4621      	mov	r1, r4
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 faf6 	bl	800dbc8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	4618      	mov	r0, r3
 800d5e0:	370c      	adds	r7, #12
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd90      	pop	{r4, r7, pc}

0800d5e6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8key_compEv>:
      key_comp() const
 800d5e6:	b480      	push	{r7}
 800d5e8:	b083      	sub	sp, #12
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b082      	sub	sp, #8
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
 800d602:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 800d604:	6839      	ldr	r1, [r7, #0]
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 fb0f 	bl	800dc2a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 800d60c:	4603      	mov	r3, r0
 800d60e:	0fdb      	lsrs	r3, r3, #31
 800d610:	b2db      	uxtb	r3, r3
 800d612:	4618      	mov	r0, r3
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEEPSt13_Rb_tree_nodeISB_EDpOT_>:
        _M_create_node(_Args&&... __args)
 800d61a:	b5b0      	push	{r4, r5, r7, lr}
 800d61c:	b088      	sub	sp, #32
 800d61e:	af02      	add	r7, sp, #8
 800d620:	60f8      	str	r0, [r7, #12]
 800d622:	60b9      	str	r1, [r7, #8]
 800d624:	607a      	str	r2, [r7, #4]
 800d626:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f000 fb35 	bl	800dc98 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_get_nodeEv>
 800d62e:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800d630:	68b8      	ldr	r0, [r7, #8]
 800d632:	f7ff fdc1 	bl	800d1b8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800d636:	4604      	mov	r4, r0
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7ff fdc8 	bl	800d1ce <_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE>
 800d63e:	4605      	mov	r5, r0
 800d640:	6838      	ldr	r0, [r7, #0]
 800d642:	f7ff fdcf 	bl	800d1e4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d646:	4603      	mov	r3, r0
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	462b      	mov	r3, r5
 800d64c:	4622      	mov	r2, r4
 800d64e:	6979      	ldr	r1, [r7, #20]
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f000 fb32 	bl	800dcba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEEvPSt13_Rb_tree_nodeISB_EDpOT_>
	  return __tmp;
 800d656:	697b      	ldr	r3, [r7, #20]
	}
 800d658:	4618      	mov	r0, r3
 800d65a:	3718      	adds	r7, #24
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bdb0      	pop	{r4, r5, r7, pc}

0800d660 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800d660:	b590      	push	{r4, r7, lr}
 800d662:	b08d      	sub	sp, #52	; 0x34
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
 800d66c:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800d66e:	1d3b      	adds	r3, r7, #4
 800d670:	4618      	mov	r0, r3
 800d672:	f000 fb4f 	bl	800dd14 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE13_M_const_castEv>
 800d676:	4603      	mov	r3, r0
 800d678:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800d67a:	69bc      	ldr	r4, [r7, #24]
 800d67c:	68b8      	ldr	r0, [r7, #8]
 800d67e:	f000 fa97 	bl	800dbb0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 800d682:	4603      	mov	r3, r0
 800d684:	429c      	cmp	r4, r3
 800d686:	bf0c      	ite	eq
 800d688:	2301      	moveq	r3, #1
 800d68a:	2300      	movne	r3, #0
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d030      	beq.n	800d6f4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x94>
	  if (size() > 0
 800d692:	68b8      	ldr	r0, [r7, #8]
 800d694:	f000 fb4f 	bl	800dd36 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4sizeEv>
 800d698:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d013      	beq.n	800d6c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x66>
 800d69e:	68bc      	ldr	r4, [r7, #8]
 800d6a0:	68b8      	ldr	r0, [r7, #8]
 800d6a2:	f000 fb54 	bl	800dd4e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_rightmostEv>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f000 fb5b 	bl	800dd66 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	683a      	ldr	r2, [r7, #0]
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	f7ff fd5f 	bl	800d17a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d001      	beq.n	800d6c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x66>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e000      	b.n	800d6c8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x68>
 800d6c6:	2300      	movs	r3, #0
	  if (size() > 0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00c      	beq.n	800d6e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x86>
	    return _Res(0, _M_rightmost());
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	61fb      	str	r3, [r7, #28]
 800d6d0:	68b8      	ldr	r0, [r7, #8]
 800d6d2:	f000 fb3c 	bl	800dd4e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_rightmostEv>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	f107 031c 	add.w	r3, r7, #28
 800d6dc:	4619      	mov	r1, r3
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f000 fb54 	bl	800dd8c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800d6e4:	e0db      	b.n	800d89e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	683a      	ldr	r2, [r7, #0]
 800d6ea:	68b9      	ldr	r1, [r7, #8]
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f000 fb63 	bl	800ddb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_>
 800d6f2:	e0d4      	b.n	800d89e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800d6f4:	68bc      	ldr	r4, [r7, #8]
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f000 fb34 	bl	800dd66 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d6fe:	4603      	mov	r3, r0
 800d700:	461a      	mov	r2, r3
 800d702:	6839      	ldr	r1, [r7, #0]
 800d704:	4620      	mov	r0, r4
 800d706:	f7ff fd38 	bl	800d17a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d057      	beq.n	800d7c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x160>
	  iterator __before = __pos;
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800d714:	69bc      	ldr	r4, [r7, #24]
 800d716:	68b8      	ldr	r0, [r7, #8]
 800d718:	f000 fbd3 	bl	800dec2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_leftmostEv>
 800d71c:	4603      	mov	r3, r0
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	429c      	cmp	r4, r3
 800d722:	bf0c      	ite	eq
 800d724:	2301      	moveq	r3, #1
 800d726:	2300      	movne	r3, #0
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00d      	beq.n	800d74a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800d72e:	68b8      	ldr	r0, [r7, #8]
 800d730:	f000 fbc7 	bl	800dec2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_leftmostEv>
 800d734:	4604      	mov	r4, r0
 800d736:	68b8      	ldr	r0, [r7, #8]
 800d738:	f000 fbc3 	bl	800dec2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_leftmostEv>
 800d73c:	4603      	mov	r3, r0
 800d73e:	461a      	mov	r2, r3
 800d740:	4621      	mov	r1, r4
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f000 fbc9 	bl	800deda <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800d748:	e0a9      	b.n	800d89e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800d74a:	68bc      	ldr	r4, [r7, #8]
 800d74c:	f107 0314 	add.w	r3, r7, #20
 800d750:	4618      	mov	r0, r3
 800d752:	f7ff fbab 	bl	800ceac <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEmmEv>
 800d756:	4603      	mov	r3, r0
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4618      	mov	r0, r3
 800d75c:	f000 fb03 	bl	800dd66 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d760:	4603      	mov	r3, r0
 800d762:	683a      	ldr	r2, [r7, #0]
 800d764:	4619      	mov	r1, r3
 800d766:	4620      	mov	r0, r4
 800d768:	f7ff fd07 	bl	800d17a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d01f      	beq.n	800d7b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	4618      	mov	r0, r3
 800d776:	f000 f906 	bl	800d986 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	bf0c      	ite	eq
 800d780:	2301      	moveq	r3, #1
 800d782:	2300      	movne	r3, #0
 800d784:	b2db      	uxtb	r3, r3
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00a      	beq.n	800d7a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x140>
		return _Res(0, __before._M_node);
 800d78a:	2300      	movs	r3, #0
 800d78c:	623b      	str	r3, [r7, #32]
 800d78e:	f107 0214 	add.w	r2, r7, #20
 800d792:	f107 0320 	add.w	r3, r7, #32
 800d796:	4619      	mov	r1, r3
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f000 faf7 	bl	800dd8c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800d79e:	e07e      	b.n	800d89e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800d7a0:	f107 0218 	add.w	r2, r7, #24
 800d7a4:	f107 0318 	add.w	r3, r7, #24
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f000 fb95 	bl	800deda <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800d7b0:	e075      	b.n	800d89e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	683a      	ldr	r2, [r7, #0]
 800d7b6:	68b9      	ldr	r1, [r7, #8]
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f000 fafd 	bl	800ddb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_>
 800d7be:	e06e      	b.n	800d89e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800d7c0:	68bc      	ldr	r4, [r7, #8]
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f000 face 	bl	800dd66 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	683a      	ldr	r2, [r7, #0]
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	f7ff fcd2 	bl	800d17a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d056      	beq.n	800d88a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x22a>
	  iterator __after = __pos;
 800d7dc:	69bb      	ldr	r3, [r7, #24]
 800d7de:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800d7e0:	69bc      	ldr	r4, [r7, #24]
 800d7e2:	68b8      	ldr	r0, [r7, #8]
 800d7e4:	f000 fab3 	bl	800dd4e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_rightmostEv>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	429c      	cmp	r4, r3
 800d7ee:	bf0c      	ite	eq
 800d7f0:	2301      	moveq	r3, #1
 800d7f2:	2300      	movne	r3, #0
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00c      	beq.n	800d814 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x1b4>
	    return _Res(0, _M_rightmost());
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800d7fe:	68b8      	ldr	r0, [r7, #8]
 800d800:	f000 faa5 	bl	800dd4e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_rightmostEv>
 800d804:	4602      	mov	r2, r0
 800d806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d80a:	4619      	mov	r1, r3
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	f000 fabd 	bl	800dd8c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800d812:	e044      	b.n	800d89e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800d814:	68bc      	ldr	r4, [r7, #8]
 800d816:	f107 0310 	add.w	r3, r7, #16
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7ff fb93 	bl	800cf46 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEppEv>
 800d820:	4603      	mov	r3, r0
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4618      	mov	r0, r3
 800d826:	f000 fa9e 	bl	800dd66 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d82a:	4603      	mov	r3, r0
 800d82c:	461a      	mov	r2, r3
 800d82e:	6839      	ldr	r1, [r7, #0]
 800d830:	4620      	mov	r0, r4
 800d832:	f7ff fca2 	bl	800d17a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d01f      	beq.n	800d87c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	4618      	mov	r0, r3
 800d840:	f000 f8a1 	bl	800d986 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	bf0c      	ite	eq
 800d84a:	2301      	moveq	r3, #1
 800d84c:	2300      	movne	r3, #0
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00a      	beq.n	800d86a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x20a>
		return _Res(0, __pos._M_node);
 800d854:	2300      	movs	r3, #0
 800d856:	62bb      	str	r3, [r7, #40]	; 0x28
 800d858:	f107 0218 	add.w	r2, r7, #24
 800d85c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d860:	4619      	mov	r1, r3
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f000 fa92 	bl	800dd8c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800d868:	e019      	b.n	800d89e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800d86a:	f107 0210 	add.w	r2, r7, #16
 800d86e:	f107 0310 	add.w	r3, r7, #16
 800d872:	4619      	mov	r1, r3
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f000 fb30 	bl	800deda <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800d87a:	e010      	b.n	800d89e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	683a      	ldr	r2, [r7, #0]
 800d880:	68b9      	ldr	r1, [r7, #8]
 800d882:	4618      	mov	r0, r3
 800d884:	f000 fa98 	bl	800ddb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_>
 800d888:	e009      	b.n	800d89e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_+0x23e>
	return _Res(__pos._M_node, 0);
 800d88a:	2300      	movs	r3, #0
 800d88c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d88e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d892:	f107 0318 	add.w	r3, r7, #24
 800d896:	4619      	mov	r1, r3
 800d898:	68f8      	ldr	r0, [r7, #12]
 800d89a:	f000 fb37 	bl	800df0c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	3734      	adds	r7, #52	; 0x34
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd90      	pop	{r4, r7, pc}

0800d8a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>:
      _S_key(_Const_Link_type __x)
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b084      	sub	sp, #16
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
      { return _KeyOfValue()(_S_value(__x)); }
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 fb42 	bl	800df38 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_valueEPKSt13_Rb_tree_nodeISB_E>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	f107 030c 	add.w	r3, r7, #12
 800d8ba:	4611      	mov	r1, r2
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f000 fb47 	bl	800df50 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEclERKSB_>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3710      	adds	r7, #16
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSJ_PSt13_Rb_tree_nodeISB_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800d8cc:	b5b0      	push	{r4, r5, r7, lr}
 800d8ce:	b086      	sub	sp, #24
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
 800d8d8:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d117      	bne.n	800d910 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSJ_PSt13_Rb_tree_nodeISB_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	f000 f965 	bl	800dbb0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d010      	beq.n	800d910 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSJ_PSt13_Rb_tree_nodeISB_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 800d8ee:	68fc      	ldr	r4, [r7, #12]
 800d8f0:	6838      	ldr	r0, [r7, #0]
 800d8f2:	f7ff ffd8 	bl	800d8a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 800d8f6:	4605      	mov	r5, r0
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 fa34 	bl	800dd66 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d8fe:	4603      	mov	r3, r0
 800d900:	461a      	mov	r2, r3
 800d902:	4629      	mov	r1, r5
 800d904:	4620      	mov	r0, r4
 800d906:	f7ff fc38 	bl	800d17a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d001      	beq.n	800d914 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSJ_PSt13_Rb_tree_nodeISB_E+0x48>
 800d910:	2301      	movs	r3, #1
 800d912:	e000      	b.n	800d916 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSJ_PSt13_Rb_tree_nodeISB_E+0x4a>
 800d914:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 800d916:	75fb      	strb	r3, [r7, #23]
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	3304      	adds	r3, #4
 800d91c:	7df8      	ldrb	r0, [r7, #23]
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	6839      	ldr	r1, [r7, #0]
 800d922:	f003 facd 	bl	8010ec0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	695b      	ldr	r3, [r3, #20]
 800d92a:	1c5a      	adds	r2, r3, #1
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800d930:	f107 0310 	add.w	r3, r7, #16
 800d934:	6839      	ldr	r1, [r7, #0]
 800d936:	4618      	mov	r0, r3
 800d938:	f000 f816 	bl	800d968 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEC1EPSt18_Rb_tree_node_base>
 800d93c:	693b      	ldr	r3, [r7, #16]
    }
 800d93e:	4618      	mov	r0, r3
 800d940:	3718      	adds	r7, #24
 800d942:	46bd      	mov	sp, r7
 800d944:	bdb0      	pop	{r4, r5, r7, pc}

0800d946 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800d946:	b580      	push	{r7, lr}
 800d948:	b082      	sub	sp, #8
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800d950:	6839      	ldr	r1, [r7, #0]
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 fb08 	bl	800df68 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>
	_M_put_node(__p);
 800d958:	6839      	ldr	r1, [r7, #0]
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f000 fb19 	bl	800df92 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>
      }
 800d960:	bf00      	nop
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	683a      	ldr	r2, [r7, #0]
 800d976:	601a      	str	r2, [r3, #0]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	4618      	mov	r0, r3
 800d97c:	370c      	adds	r7, #12
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800d986:	b480      	push	{r7}
 800d988:	b083      	sub	sp, #12
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	4618      	mov	r0, r3
 800d994:	370c      	adds	r7, #12
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr

0800d99e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800d99e:	b480      	push	{r7}
 800d9a0:	b083      	sub	sp, #12
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	689b      	ldr	r3, [r3, #8]
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	370c      	adds	r7, #12
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr

0800d9b6 <_ZNSt16reverse_iteratorISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEC1ESD_>:
      reverse_iterator(iterator_type __x) : current(__x) { }
 800d9b6:	b480      	push	{r7}
 800d9b8:	b083      	sub	sp, #12
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
 800d9be:	6039      	str	r1, [r7, #0]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	683a      	ldr	r2, [r7, #0]
 800d9c4:	601a      	str	r2, [r3, #0]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <_ZNKSt16reverse_iteratorISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE4baseEv>:
      base() const
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
      { return current; }
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 fade 	bl	800dfb6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE7_M_addrEv>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800da04:	b590      	push	{r4, r7, lr}
 800da06:	b087      	sub	sp, #28
 800da08:	af00      	add	r7, sp, #0
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	607a      	str	r2, [r7, #4]
 800da10:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 800da12:	4623      	mov	r3, r4
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	68b9      	ldr	r1, [r7, #8]
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f000 faf5 	bl	800e008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 800da1e:	bf00      	nop
 800da20:	371c      	adds	r7, #28
 800da22:	46bd      	mov	sp, r7
 800da24:	bd90      	pop	{r4, r7, pc}

0800da26 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data() const
 800da26:	b580      	push	{r7, lr}
 800da28:	b082      	sub	sp, #8
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	3308      	adds	r3, #8
 800da32:	4618      	mov	r0, r3
 800da34:	f000 fb30 	bl	800e098 <_ZNSt14pointer_traitsIPKcE10pointer_toERS0_>
 800da38:	4603      	mov	r3, r0
      }
 800da3a:	4618      	mov	r0, r3
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800da42:	b580      	push	{r7, lr}
 800da44:	b084      	sub	sp, #16
 800da46:	af00      	add	r7, sp, #0
 800da48:	60f8      	str	r0, [r7, #12]
 800da4a:	60b9      	str	r1, [r7, #8]
 800da4c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	68b9      	ldr	r1, [r7, #8]
 800da52:	68f8      	ldr	r0, [r7, #12]
 800da54:	f000 fb2c 	bl	800e0b0 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
 800da58:	bf00      	nop
 800da5a:	3710      	adds	r7, #16
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <_ZSt9addressofIcEPT_RS0_>:
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */
  template<typename _Tp>
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f000 fb2d 	bl	800e0c8 <_ZSt11__addressofIcEPT_RS0_>
 800da6e:	4603      	mov	r3, r0
 800da70:	4618      	mov	r0, r3
 800da72:	3708      	adds	r7, #8
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800da80:	4618      	mov	r0, r3
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800da8c:	b5b0      	push	{r4, r5, r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800da96:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800da98:	1d3b      	adds	r3, r7, #4
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7ff ffec 	bl	800da78 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 800daa0:	462a      	mov	r2, r5
 800daa2:	6839      	ldr	r1, [r7, #0]
 800daa4:	4620      	mov	r0, r4
 800daa6:	f000 fb2a 	bl	800e0fe <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800daaa:	4603      	mov	r3, r0
    }
 800daac:	4618      	mov	r0, r3
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bdb0      	pop	{r4, r5, r7, pc}

0800dab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b086      	sub	sp, #24
 800dab8:	af00      	add	r7, sp, #0
 800daba:	60f8      	str	r0, [r7, #12]
 800dabc:	60b9      	str	r1, [r7, #8]
 800dabe:	607a      	str	r2, [r7, #4]
 800dac0:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800dac2:	68b8      	ldr	r0, [r7, #8]
 800dac4:	f000 fb0b 	bl	800e0de <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d005      	beq.n	800dada <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d001      	beq.n	800dada <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 800dad6:	2301      	movs	r3, #1
 800dad8:	e000      	b.n	800dadc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x28>
 800dada:	2300      	movs	r3, #0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d002      	beq.n	800dae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 800dae0:	4817      	ldr	r0, [pc, #92]	; (800db40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8c>)
 800dae2:	f003 fab3 	bl	801104c <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800dae6:	6879      	ldr	r1, [r7, #4]
 800dae8:	68b8      	ldr	r0, [r7, #8]
 800daea:	f7ff ffcf 	bl	800da8c <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800daee:	4603      	mov	r3, r0
 800daf0:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	2b0f      	cmp	r3, #15
 800daf6:	d910      	bls.n	800db1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800daf8:	f107 0314 	add.w	r3, r7, #20
 800dafc:	2200      	movs	r2, #0
 800dafe:	4619      	mov	r1, r3
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f000 fb0b 	bl	800e11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800db06:	4603      	mov	r3, r0
 800db08:	4619      	mov	r1, r3
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	f7ff fd0f 	bl	800d52e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	4619      	mov	r1, r3
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7ff fd18 	bl	800d54a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f7ff fa68 	bl	800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800db20:	4603      	mov	r3, r0
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	68b9      	ldr	r1, [r7, #8]
 800db26:	4618      	mov	r0, r3
 800db28:	f000 fb42 	bl	800e1b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	4619      	mov	r1, r3
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f7ff fd26 	bl	800d582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800db36:	bf00      	nop
 800db38:	3718      	adds	r7, #24
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	08016b38 	.word	0x08016b38

0800db44 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800db4e:	6839      	ldr	r1, [r7, #0]
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f003 f973 	bl	8010e3c <_ZNSaIcEC1ERKS_>
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	3708      	adds	r7, #8
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}

0800db5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800db5e:	b580      	push	{r7, lr}
 800db60:	b082      	sub	sp, #8
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f7ff fcaa 	bl	800d4c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 800db6c:	4603      	mov	r3, r0
 800db6e:	4618      	mov	r0, r3
 800db70:	f000 fb30 	bl	800e1d4 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 800db74:	4603      	mov	r3, r0
 800db76:	3b01      	subs	r3, #1
 800db78:	085b      	lsrs	r3, r3, #1
 800db7a:	4618      	mov	r0, r3
 800db7c:	3708      	adds	r7, #8
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 800db82:	b580      	push	{r7, lr}
 800db84:	b084      	sub	sp, #16
 800db86:	af00      	add	r7, sp, #0
 800db88:	60f8      	str	r0, [r7, #12]
 800db8a:	60b9      	str	r1, [r7, #8]
 800db8c:	607a      	str	r2, [r7, #4]
	if (__n == 1)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2b01      	cmp	r3, #1
 800db92:	d104      	bne.n	800db9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x1c>
	  traits_type::assign(*__d, *__s);
 800db94:	68b9      	ldr	r1, [r7, #8]
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f7fe fabd 	bl	800c116 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
 800db9c:	e004      	b.n	800dba8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x26>
	  traits_type::copy(__d, __s, __n);
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	68b9      	ldr	r1, [r7, #8]
 800dba2:	68f8      	ldr	r0, [r7, #12]
 800dba4:	f7fe fafb 	bl	800c19e <_ZNSt11char_traitsIcE4copyEPcPKcj>
      }
 800dba8:	bf00      	nop
 800dbaa:	3710      	adds	r7, #16
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	3304      	adds	r3, #4
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	370c      	adds	r7, #12
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr

0800dbc8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800dbc8:	b590      	push	{r4, r7, lr}
 800dbca:	b087      	sub	sp, #28
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
 800dbd4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d01b      	beq.n	800dc14 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800dbdc:	68fc      	ldr	r4, [r7, #12]
 800dbde:	68b8      	ldr	r0, [r7, #8]
 800dbe0:	f7ff fe61 	bl	800d8a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	683a      	ldr	r2, [r7, #0]
 800dbe8:	4619      	mov	r1, r3
 800dbea:	4620      	mov	r0, r4
 800dbec:	f7ff fac5 	bl	800d17a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	f083 0301 	eor.w	r3, r3, #1
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d006      	beq.n	800dc0a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	607b      	str	r3, [r7, #4]
 800dc00:	68b8      	ldr	r0, [r7, #8]
 800dc02:	f7ff fecc 	bl	800d99e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 800dc06:	60b8      	str	r0, [r7, #8]
 800dc08:	e7e5      	b.n	800dbd6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 800dc0a:	68b8      	ldr	r0, [r7, #8]
 800dc0c:	f7ff febb 	bl	800d986 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 800dc10:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800dc12:	e7e0      	b.n	800dbd6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0xe>
      return iterator(__y);
 800dc14:	f107 0314 	add.w	r3, r7, #20
 800dc18:	6879      	ldr	r1, [r7, #4]
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7ff fea4 	bl	800d968 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEC1EPSt18_Rb_tree_node_base>
 800dc20:	697b      	ldr	r3, [r7, #20]
    }
 800dc22:	4618      	mov	r0, r3
 800dc24:	371c      	adds	r7, #28
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd90      	pop	{r4, r7, pc}

0800dc2a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
      compare(const basic_string& __str) const
 800dc2a:	b590      	push	{r4, r7, lr}
 800dc2c:	b087      	sub	sp, #28
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
 800dc32:	6039      	str	r1, [r7, #0]
	const size_type __size = this->size();
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f7ff fa2d 	bl	800d094 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	60fb      	str	r3, [r7, #12]
	const size_type __osize = __str.size();
 800dc3e:	6838      	ldr	r0, [r7, #0]
 800dc40:	f7ff fa28 	bl	800d094 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800dc44:	4603      	mov	r3, r0
 800dc46:	60bb      	str	r3, [r7, #8]
	const size_type __len = std::min(__size, __osize);
 800dc48:	f107 0208 	add.w	r2, r7, #8
 800dc4c:	f107 030c 	add.w	r3, r7, #12
 800dc50:	4611      	mov	r1, r2
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fe fafd 	bl	800c252 <_ZSt3minIjERKT_S2_S2_>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	613b      	str	r3, [r7, #16]
	int __r = traits_type::compare(_M_data(), __str.data(), __len);
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f7ff f9c6 	bl	800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800dc64:	4604      	mov	r4, r0
 800dc66:	6838      	ldr	r0, [r7, #0]
 800dc68:	f7fe ffd2 	bl	800cc10 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	693a      	ldr	r2, [r7, #16]
 800dc70:	4619      	mov	r1, r3
 800dc72:	4620      	mov	r0, r4
 800dc74:	f7fe fa5e 	bl	800c134 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800dc78:	6178      	str	r0, [r7, #20]
	if (!__r)
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d106      	bne.n	800dc8e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x64>
	  __r = _S_compare(__size, __osize);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	68ba      	ldr	r2, [r7, #8]
 800dc84:	4611      	mov	r1, r2
 800dc86:	4618      	mov	r0, r3
 800dc88:	f000 fab0 	bl	800e1ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEjj>
 800dc8c:	6178      	str	r0, [r7, #20]
	return __r;
 800dc8e:	697b      	ldr	r3, [r7, #20]
      }
 800dc90:	4618      	mov	r0, r3
 800dc92:	371c      	adds	r7, #28
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd90      	pop	{r4, r7, pc}

0800dc98 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_get_nodeEv>:
      _M_get_node()
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f000 fab3 	bl	800e20c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2101      	movs	r1, #1
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f000 fab9 	bl	800e222 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEE8allocateERSE_j>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3708      	adds	r7, #8
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEEvPSt13_Rb_tree_nodeISB_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800dcba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcbe:	b086      	sub	sp, #24
 800dcc0:	af02      	add	r7, sp, #8
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	607a      	str	r2, [r7, #4]
 800dcc8:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	4619      	mov	r1, r3
 800dcce:	202c      	movs	r0, #44	; 0x2c
 800dcd0:	f7fe fa7d 	bl	800c1ce <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f000 fa99 	bl	800e20c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 800dcda:	4604      	mov	r4, r0
 800dcdc:	68b8      	ldr	r0, [r7, #8]
 800dcde:	f7ff fb59 	bl	800d394 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE9_M_valptrEv>
 800dce2:	4605      	mov	r5, r0
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f7ff fa67 	bl	800d1b8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800dcea:	4606      	mov	r6, r0
 800dcec:	6838      	ldr	r0, [r7, #0]
 800dcee:	f7ff fa6e 	bl	800d1ce <_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE>
 800dcf2:	4680      	mov	r8, r0
 800dcf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcf6:	f7ff fa75 	bl	800d1e4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	9300      	str	r3, [sp, #0]
 800dcfe:	4643      	mov	r3, r8
 800dd00:	4632      	mov	r2, r6
 800dd02:	4629      	mov	r1, r5
 800dd04:	4620      	mov	r0, r4
 800dd06:	f000 fa9b 	bl	800e240 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESK_IJEEEEEvRSE_PT_DpOT0_>
	}
 800dd0a:	bf00      	nop
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dd14 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	f107 030c 	add.w	r3, r7, #12
 800dd24:	4611      	mov	r1, r2
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7ff fe1e 	bl	800d968 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEC1EPSt18_Rb_tree_node_base>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT 
 800dd36:	b480      	push	{r7}
 800dd38:	b083      	sub	sp, #12
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	695b      	ldr	r3, [r3, #20]
 800dd42:	4618      	mov	r0, r3
 800dd44:	370c      	adds	r7, #12
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr

0800dd4e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800dd4e:	b480      	push	{r7}
 800dd50:	b083      	sub	sp, #12
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	3310      	adds	r3, #16
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	370c      	adds	r7, #12
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr

0800dd66 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b084      	sub	sp, #16
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
      { return _KeyOfValue()(_S_value(__x)); }
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 fa84 	bl	800e27c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_valueEPKSt18_Rb_tree_node_base>
 800dd74:	4602      	mov	r2, r0
 800dd76:	f107 030c 	add.w	r3, r7, #12
 800dd7a:	4611      	mov	r1, r2
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 f8e7 	bl	800df50 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEclERKSB_>
 800dd82:	4603      	mov	r3, r0
 800dd84:	4618      	mov	r0, r3
 800dd86:	3710      	adds	r7, #16
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	60b9      	str	r1, [r7, #8]
 800dd96:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	601a      	str	r2, [r3, #0]
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 fa77 	bl	800e294 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800dda6:	4603      	mov	r3, r0
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	605a      	str	r2, [r3, #4]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3710      	adds	r7, #16
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800ddb8:	b590      	push	{r4, r7, lr}
 800ddba:	b08b      	sub	sp, #44	; 0x2c
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800ddc4:	68b8      	ldr	r0, [r7, #8]
 800ddc6:	f7ff fa8b 	bl	800d2e0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800ddce:	68b8      	ldr	r0, [r7, #8]
 800ddd0:	f7ff feee 	bl	800dbb0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d020      	beq.n	800de26 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x6e>
	  __y = __x;
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800dde8:	68bc      	ldr	r4, [r7, #8]
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7ff fd5a 	bl	800d8a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	6879      	ldr	r1, [r7, #4]
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f7ff f9be 	bl	800d17a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800ddfe:	4603      	mov	r3, r0
 800de00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800de04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d005      	beq.n	800de18 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x60>
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	4618      	mov	r0, r3
 800de10:	f7ff fdc5 	bl	800d99e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 800de14:	4603      	mov	r3, r0
 800de16:	e004      	b.n	800de22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x6a>
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7ff fdb3 	bl	800d986 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 800de20:	4603      	mov	r3, r0
 800de22:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800de24:	e7db      	b.n	800ddde <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x26>
      iterator __j = iterator(__y);
 800de26:	697a      	ldr	r2, [r7, #20]
 800de28:	f107 0310 	add.w	r3, r7, #16
 800de2c:	4611      	mov	r1, r2
 800de2e:	4618      	mov	r0, r3
 800de30:	f7ff fd9a 	bl	800d968 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800de34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d01d      	beq.n	800de78 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 800de3c:	68b8      	ldr	r0, [r7, #8]
 800de3e:	f7ff fab7 	bl	800d3b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE5beginEv>
 800de42:	4603      	mov	r3, r0
 800de44:	61fb      	str	r3, [r7, #28]
 800de46:	f107 021c 	add.w	r2, r7, #28
 800de4a:	f107 0310 	add.w	r3, r7, #16
 800de4e:	4611      	mov	r1, r2
 800de50:	4618      	mov	r0, r3
 800de52:	f7ff f971 	bl	800d138 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEeqERKSC_>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d008      	beq.n	800de6e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 800de5c:	f107 0214 	add.w	r2, r7, #20
 800de60:	f107 0318 	add.w	r3, r7, #24
 800de64:	4619      	mov	r1, r3
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	f000 fa1f 	bl	800e2aa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEERS1_Lb1EEEOT_OT0_>
 800de6c:	e025      	b.n	800deba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 800de6e:	f107 0310 	add.w	r3, r7, #16
 800de72:	4618      	mov	r0, r3
 800de74:	f7ff f81a 	bl	800ceac <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800de78:	68bc      	ldr	r4, [r7, #8]
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7ff ff72 	bl	800dd66 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800de82:	4603      	mov	r3, r0
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	4619      	mov	r1, r3
 800de88:	4620      	mov	r0, r4
 800de8a:	f7ff f976 	bl	800d17a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800de8e:	4603      	mov	r3, r0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d008      	beq.n	800dea6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 800de94:	f107 0214 	add.w	r2, r7, #20
 800de98:	f107 0318 	add.w	r3, r7, #24
 800de9c:	4619      	mov	r1, r3
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f000 fa03 	bl	800e2aa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEERS1_Lb1EEEOT_OT0_>
 800dea4:	e009      	b.n	800deba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 800dea6:	2300      	movs	r3, #0
 800dea8:	623b      	str	r3, [r7, #32]
 800deaa:	f107 0220 	add.w	r2, r7, #32
 800deae:	f107 0310 	add.w	r3, r7, #16
 800deb2:	4619      	mov	r1, r3
 800deb4:	68f8      	ldr	r0, [r7, #12]
 800deb6:	f000 f829 	bl	800df0c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	372c      	adds	r7, #44	; 0x2c
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd90      	pop	{r4, r7, pc}

0800dec2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800dec2:	b480      	push	{r7}
 800dec4:	b083      	sub	sp, #12
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	330c      	adds	r3, #12
 800dece:	4618      	mov	r0, r3
 800ded0:	370c      	adds	r7, #12
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr

0800deda <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 800deda:	b580      	push	{r7, lr}
 800dedc:	b084      	sub	sp, #16
 800dede:	af00      	add	r7, sp, #0
 800dee0:	60f8      	str	r0, [r7, #12]
 800dee2:	60b9      	str	r1, [r7, #8]
 800dee4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800dee6:	68b8      	ldr	r0, [r7, #8]
 800dee8:	f000 f9d4 	bl	800e294 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800deec:	4603      	mov	r3, r0
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	601a      	str	r2, [r3, #0]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 f9cd 	bl	800e294 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800defa:	4603      	mov	r3, r0
 800defc:	681a      	ldr	r2, [r3, #0]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	605a      	str	r2, [r3, #4]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	4618      	mov	r0, r3
 800df06:	3710      	adds	r7, #16
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b084      	sub	sp, #16
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 800df18:	68b8      	ldr	r0, [r7, #8]
 800df1a:	f000 f9bb 	bl	800e294 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800df1e:	4603      	mov	r3, r0
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	601a      	str	r2, [r3, #0]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681a      	ldr	r2, [r3, #0]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	605a      	str	r2, [r3, #4]
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	4618      	mov	r0, r3
 800df32:	3710      	adds	r7, #16
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_valueEPKSt13_Rb_tree_nodeISB_E>:
      _S_value(_Const_Link_type __x)
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
      { return *__x->_M_valptr(); }
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 f9cb 	bl	800e2dc <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE9_M_valptrEv>
 800df46:	4603      	mov	r3, r0
 800df48:	4618      	mov	r0, r3
 800df4a:	3708      	adds	r7, #8
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEclERKSB_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 800df50:	b480      	push	{r7}
 800df52:	b083      	sub	sp, #12
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	4618      	mov	r0, r3
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_destroy_node(_Link_type __p) noexcept
 800df68:	b590      	push	{r4, r7, lr}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 f94a 	bl	800e20c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 800df78:	4604      	mov	r4, r0
 800df7a:	6838      	ldr	r0, [r7, #0]
 800df7c:	f7ff fa0a 	bl	800d394 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE9_M_valptrEv>
 800df80:	4603      	mov	r3, r0
 800df82:	4619      	mov	r1, r3
 800df84:	4620      	mov	r0, r4
 800df86:	f000 f9b7 	bl	800e2f8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEE7destroyISC_EEvRSE_PT_>
      }
 800df8a:	bf00      	nop
 800df8c:	370c      	adds	r7, #12
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd90      	pop	{r4, r7, pc}

0800df92 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800df92:	b580      	push	{r7, lr}
 800df94:	b082      	sub	sp, #8
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
 800df9a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f000 f935 	bl	800e20c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	6839      	ldr	r1, [r7, #0]
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f000 f9b2 	bl	800e312 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEE10deallocateERSE_PSD_j>
 800dfae:	bf00      	nop
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE7_M_addrEv>:
      _M_addr() noexcept
 800dfb6:	b480      	push	{r7}
 800dfb8:	b083      	sub	sp, #12
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 800dfe0:	b5b0      	push	{r4, r5, r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800dfea:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800dfec:	1d3b      	adds	r3, r7, #4
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7ff ffec 	bl	800dfcc <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800dff4:	462a      	mov	r2, r5
 800dff6:	6839      	ldr	r1, [r7, #0]
 800dff8:	4620      	mov	r0, r4
 800dffa:	f000 f9a9 	bl	800e350 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800dffe:	4603      	mov	r3, r0
    }
 800e000:	4618      	mov	r0, r3
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bdb0      	pop	{r4, r5, r7, pc}

0800e008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 800e008:	b580      	push	{r7, lr}
 800e00a:	b086      	sub	sp, #24
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	607a      	str	r2, [r7, #4]
 800e014:	703b      	strb	r3, [r7, #0]
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800e016:	68b8      	ldr	r0, [r7, #8]
 800e018:	f000 f98a 	bl	800e330 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d005      	beq.n	800e02e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800e022:	68ba      	ldr	r2, [r7, #8]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	429a      	cmp	r2, r3
 800e028:	d001      	beq.n	800e02e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800e02a:	2301      	movs	r3, #1
 800e02c:	e000      	b.n	800e030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800e02e:	2300      	movs	r3, #0
 800e030:	2b00      	cmp	r3, #0
 800e032:	d002      	beq.n	800e03a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 800e034:	4817      	ldr	r0, [pc, #92]	; (800e094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 800e036:	f003 f809 	bl	801104c <_ZSt19__throw_logic_errorPKc>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800e03a:	6879      	ldr	r1, [r7, #4]
 800e03c:	68b8      	ldr	r0, [r7, #8]
 800e03e:	f7ff ffcf 	bl	800dfe0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800e042:	4603      	mov	r3, r0
 800e044:	617b      	str	r3, [r7, #20]
	if (__dnew > size_type(_S_local_capacity))
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	2b0f      	cmp	r3, #15
 800e04a:	d910      	bls.n	800e06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	    _M_data(_M_create(__dnew, size_type(0)));
 800e04c:	f107 0314 	add.w	r3, r7, #20
 800e050:	2200      	movs	r2, #0
 800e052:	4619      	mov	r1, r3
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f000 f861 	bl	800e11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800e05a:	4603      	mov	r3, r0
 800e05c:	4619      	mov	r1, r3
 800e05e:	68f8      	ldr	r0, [r7, #12]
 800e060:	f7ff fa65 	bl	800d52e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	4619      	mov	r1, r3
 800e068:	68f8      	ldr	r0, [r7, #12]
 800e06a:	f7ff fa6e 	bl	800d54a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f7fe ffbe 	bl	800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800e074:	4603      	mov	r3, r0
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	68b9      	ldr	r1, [r7, #8]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f000 f977 	bl	800e36e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	4619      	mov	r1, r3
 800e084:	68f8      	ldr	r0, [r7, #12]
 800e086:	f7ff fa7c 	bl	800d582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800e08a:	bf00      	nop
 800e08c:	3718      	adds	r7, #24
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	08016b38 	.word	0x08016b38

0800e098 <_ZNSt14pointer_traitsIPKcE10pointer_toERS0_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 f976 	bl	800e392 <_ZSt9addressofIKcEPT_RS1_>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 800e0bc:	68b8      	ldr	r0, [r7, #8]
 800e0be:	f000 fb1b 	bl	800e6f8 <_ZdlPv>
      }
 800e0c2:	3710      	adds	r7, #16
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e0c8:	b480      	push	{r7}
 800e0ca:	b083      	sub	sp, #12
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	370c      	adds	r7, #12
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr

0800e0de <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 800e0de:	b480      	push	{r7}
 800e0e0:	b083      	sub	sp, #12
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	bf0c      	ite	eq
 800e0ec:	2301      	moveq	r3, #1
 800e0ee:	2300      	movne	r3, #0
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	370c      	adds	r7, #12
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr

0800e0fe <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e0fe:	b480      	push	{r7}
 800e100:	b085      	sub	sp, #20
 800e102:	af00      	add	r7, sp, #0
 800e104:	60f8      	str	r0, [r7, #12]
 800e106:	60b9      	str	r1, [r7, #8]
 800e108:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e10a:	68ba      	ldr	r2, [r7, #8]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	1ad3      	subs	r3, r2, r3
    }
 800e110:	4618      	mov	r0, r3
 800e112:	3714      	adds	r7, #20
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr

0800e11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
    basic_string<_CharT, _Traits, _Alloc>::
 800e11c:	b590      	push	{r4, r7, lr}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	60b9      	str	r1, [r7, #8]
 800e126:	607a      	str	r2, [r7, #4]
      if (__capacity > max_size())
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	681c      	ldr	r4, [r3, #0]
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f7ff fd16 	bl	800db5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 800e132:	4603      	mov	r3, r0
 800e134:	429c      	cmp	r4, r3
 800e136:	bf8c      	ite	hi
 800e138:	2301      	movhi	r3, #1
 800e13a:	2300      	movls	r3, #0
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d002      	beq.n	800e148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
	std::__throw_length_error(__N("basic_string::_M_create"));
 800e142:	481a      	ldr	r0, [pc, #104]	; (800e1ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x90>)
 800e144:	f002 ff9a 	bl	801107c <_ZSt20__throw_length_errorPKc>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d21c      	bcs.n	800e18c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	005b      	lsls	r3, r3, #1
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d216      	bcs.n	800e18c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
	  __capacity = 2 * __old_capacity;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	005a      	lsls	r2, r3, #1
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	601a      	str	r2, [r3, #0]
	  if (__capacity > max_size())
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	681c      	ldr	r4, [r3, #0]
 800e16a:	68f8      	ldr	r0, [r7, #12]
 800e16c:	f7ff fcf7 	bl	800db5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 800e170:	4603      	mov	r3, r0
 800e172:	429c      	cmp	r4, r3
 800e174:	bf8c      	ite	hi
 800e176:	2301      	movhi	r3, #1
 800e178:	2300      	movls	r3, #0
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d005      	beq.n	800e18c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
	    __capacity = max_size();
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f7ff fcec 	bl	800db5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 800e186:	4602      	mov	r2, r0
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	601a      	str	r2, [r3, #0]
      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f7ff f9c3 	bl	800d518 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 800e192:	4602      	mov	r2, r0
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	3301      	adds	r3, #1
 800e19a:	4619      	mov	r1, r3
 800e19c:	4610      	mov	r0, r2
 800e19e:	f000 f904 	bl	800e3aa <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 800e1a2:	4603      	mov	r3, r0
    }
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3714      	adds	r7, #20
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd90      	pop	{r4, r7, pc}
 800e1ac:	08016b64 	.word	0x08016b64

0800e1b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	60b9      	str	r1, [r7, #8]
 800e1ba:	607a      	str	r2, [r7, #4]
      { _S_copy(__p, __k1, __k2 - __k1); }
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	1ad3      	subs	r3, r2, r3
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	68b9      	ldr	r1, [r7, #8]
 800e1c6:	68f8      	ldr	r0, [r7, #12]
 800e1c8:	f7ff fcdb 	bl	800db82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800e1cc:	bf00      	nop
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 f8f3 	bl	800e3c8 <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEjj>:
      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
	const difference_type __d = difference_type(__n1 - __n2);
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	1ad3      	subs	r3, r2, r3
 800e1fc:	60fb      	str	r3, [r7, #12]
	  return int(__d);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
      }
 800e200:	4618      	mov	r0, r3
 800e202:	3714      	adds	r7, #20
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr

0800e20c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	4618      	mov	r0, r3
 800e218:	370c      	adds	r7, #12
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr

0800e222 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEE8allocateERSE_j>:
      allocate(allocator_type& __a, size_type __n)
 800e222:	b580      	push	{r7, lr}
 800e224:	b082      	sub	sp, #8
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
 800e22a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e22c:	2200      	movs	r2, #0
 800e22e:	6839      	ldr	r1, [r7, #0]
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 f8d5 	bl	800e3e0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE8allocateEjPKv>
 800e236:	4603      	mov	r3, r0
 800e238:	4618      	mov	r0, r3
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESK_IJEEEEEvRSE_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800e240:	b5b0      	push	{r4, r5, r7, lr}
 800e242:	b086      	sub	sp, #24
 800e244:	af02      	add	r7, sp, #8
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	607a      	str	r2, [r7, #4]
 800e24c:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7fe ffb2 	bl	800d1b8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800e254:	4604      	mov	r4, r0
 800e256:	6838      	ldr	r0, [r7, #0]
 800e258:	f7fe ffb9 	bl	800d1ce <_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE>
 800e25c:	4605      	mov	r5, r0
 800e25e:	6a38      	ldr	r0, [r7, #32]
 800e260:	f7fe ffc0 	bl	800d1e4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e264:	4603      	mov	r3, r0
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	462b      	mov	r3, r5
 800e26a:	4622      	mov	r2, r4
 800e26c:	68b9      	ldr	r1, [r7, #8]
 800e26e:	68f8      	ldr	r0, [r7, #12]
 800e270:	f000 f921 	bl	800e4b6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE9constructISD_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESK_IJEEEEEvPT_DpOT0_>
 800e274:	bf00      	nop
 800e276:	3710      	adds	r7, #16
 800e278:	46bd      	mov	sp, r7
 800e27a:	bdb0      	pop	{r4, r5, r7, pc}

0800e27c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN3cep6ModuleEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_valueEPKSt18_Rb_tree_node_base>:
      _S_value(_Const_Base_ptr __x)
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f000 f829 	bl	800e2dc <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE9_M_valptrEv>
 800e28a:	4603      	mov	r3, r0
 800e28c:	4618      	mov	r0, r3
 800e28e:	3708      	adds	r7, #8
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	370c      	adds	r7, #12
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr

0800e2aa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b084      	sub	sp, #16
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	60f8      	str	r0, [r7, #12]
 800e2b2:	60b9      	str	r1, [r7, #8]
 800e2b4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800e2b6:	68b8      	ldr	r0, [r7, #8]
 800e2b8:	f000 f924 	bl	800e504 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEOT_RNSt16remove_referenceISG_E4typeE>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7ff ffe5 	bl	800e294 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	681a      	ldr	r2, [r3, #0]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	605a      	str	r2, [r3, #4]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3710      	adds	r7, #16
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE9_M_valptrEv>:
      _M_valptr() const
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	3310      	adds	r3, #16
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f000 f916 	bl	800e51a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE6_M_ptrEv>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3708      	adds	r7, #8
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEE7destroyISC_EEvRSE_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800e302:	6839      	ldr	r1, [r7, #0]
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 f921 	bl	800e54c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE7destroyISD_EEvPT_>
 800e30a:	bf00      	nop
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEE10deallocateERSE_PSD_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e312:	b580      	push	{r7, lr}
 800e314:	b084      	sub	sp, #16
 800e316:	af00      	add	r7, sp, #0
 800e318:	60f8      	str	r0, [r7, #12]
 800e31a:	60b9      	str	r1, [r7, #8]
 800e31c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	68b9      	ldr	r1, [r7, #8]
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f000 f91e 	bl	800e564 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE10deallocateEPSE_j>
 800e328:	bf00      	nop
 800e32a:	3710      	adds	r7, #16
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:
    __is_null_pointer(_Type* __ptr)
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	bf0c      	ite	eq
 800e33e:	2301      	moveq	r3, #1
 800e340:	2300      	movne	r3, #0
 800e342:	b2db      	uxtb	r3, r3
 800e344:	4618      	mov	r0, r3
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr

0800e350 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e350:	b480      	push	{r7}
 800e352:	b085      	sub	sp, #20
 800e354:	af00      	add	r7, sp, #0
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e35c:	68ba      	ldr	r2, [r7, #8]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	1ad3      	subs	r3, r2, r3
    }
 800e362:	4618      	mov	r0, r3
 800e364:	3714      	adds	r7, #20
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr

0800e36e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 800e36e:	b580      	push	{r7, lr}
 800e370:	b084      	sub	sp, #16
 800e372:	af00      	add	r7, sp, #0
 800e374:	60f8      	str	r0, [r7, #12]
 800e376:	60b9      	str	r1, [r7, #8]
 800e378:	607a      	str	r2, [r7, #4]
      { _S_copy(__p, __k1, __k2 - __k1); }
 800e37a:	687a      	ldr	r2, [r7, #4]
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	1ad3      	subs	r3, r2, r3
 800e380:	461a      	mov	r2, r3
 800e382:	68b9      	ldr	r1, [r7, #8]
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	f7ff fbfc 	bl	800db82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800e38a:	bf00      	nop
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <_ZSt9addressofIKcEPT_RS1_>:
    addressof(_Tp& __r) noexcept
 800e392:	b580      	push	{r7, lr}
 800e394:	b082      	sub	sp, #8
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 f8ee 	bl	800e57c <_ZSt11__addressofIKcEPT_RS1_>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800e3aa:	b580      	push	{r7, lr}
 800e3ac:	b082      	sub	sp, #8
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	6078      	str	r0, [r7, #4]
 800e3b2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	6839      	ldr	r1, [r7, #0]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 f8ea 	bl	800e592 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e3c8:	b480      	push	{r7}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	370c      	adds	r7, #12
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr

0800e3e0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	60f8      	str	r0, [r7, #12]
 800e3e8:	60b9      	str	r1, [r7, #8]
 800e3ea:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	f000 f8ed 	bl	800e5cc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE8max_sizeEv>
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	bf8c      	ite	hi
 800e3fa:	2301      	movhi	r3, #1
 800e3fc:	2300      	movls	r3, #0
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	2b00      	cmp	r3, #0
 800e402:	d001      	beq.n	800e408 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e404:	f002 fe12 	bl	801102c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	222c      	movs	r2, #44	; 0x2c
 800e40c:	fb02 f303 	mul.w	r3, r2, r3
 800e410:	4618      	mov	r0, r3
 800e412:	f000 f965 	bl	800e6e0 <_Znwj>
 800e416:	4603      	mov	r3, r0
      }
 800e418:	4618      	mov	r0, r3
 800e41a:	3710      	adds	r7, #16
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS8_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	683a      	ldr	r2, [r7, #0]
 800e42e:	4611      	mov	r1, r2
 800e430:	4618      	mov	r0, r3
 800e432:	f000 f829 	bl	800e488 <_ZNSt11_Tuple_implILj0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS8_>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4618      	mov	r0, r3
 800e43a:	3708      	adds	r7, #8
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <_ZNSt11_Tuple_implILj0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	4618      	mov	r0, r3
 800e44c:	f000 f805 	bl	800e45a <_ZNSt10_Head_baseILj0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_>
 800e450:	4603      	mov	r3, r0
 800e452:	4618      	mov	r0, r3
 800e454:	3708      	adds	r7, #8
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}

0800e45a <_ZNSt10_Head_baseILj0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e45a:	b480      	push	{r7}
 800e45c:	b083      	sub	sp, #12
 800e45e:	af00      	add	r7, sp, #0
 800e460:	6078      	str	r0, [r7, #4]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4618      	mov	r0, r3
 800e468:	370c      	adds	r7, #12
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr

0800e472 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e472:	b480      	push	{r7}
 800e474:	b083      	sub	sp, #12
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	4618      	mov	r0, r3
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <_ZNSt11_Tuple_implILj0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS8_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800e488:	b590      	push	{r4, r7, lr}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 800e492:	687c      	ldr	r4, [r7, #4]
 800e494:	6838      	ldr	r0, [r7, #0]
 800e496:	f7ff ffd3 	bl	800e440 <_ZNSt11_Tuple_implILj0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_>
 800e49a:	4603      	mov	r3, r0
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7ff ffe8 	bl	800e472 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	f7fe fc1b 	bl	800cce2 <_ZNSt10_Head_baseILj0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1ES7_>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	370c      	adds	r7, #12
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd90      	pop	{r4, r7, pc}

0800e4b6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE9constructISD_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESK_IJEEEEEvPT_DpOT0_>:

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800e4b6:	b590      	push	{r4, r7, lr}
 800e4b8:	b089      	sub	sp, #36	; 0x24
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	60f8      	str	r0, [r7, #12]
 800e4be:	60b9      	str	r1, [r7, #8]
 800e4c0:	607a      	str	r2, [r7, #4]
 800e4c2:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f7fe fe77 	bl	800d1b8 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800e4ca:	6838      	ldr	r0, [r7, #0]
 800e4cc:	f7fe fe7f 	bl	800d1ce <_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	f107 0318 	add.w	r3, r7, #24
 800e4d6:	4611      	mov	r1, r2
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7ff ffa1 	bl	800e420 <_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS8_>
 800e4de:	f107 0418 	add.w	r4, r7, #24
 800e4e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4e4:	f7fe fe7e 	bl	800d1e4 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	201c      	movs	r0, #28
 800e4ee:	f7fd fe6e 	bl	800c1ce <_ZnwjPv>
 800e4f2:	7f3b      	ldrb	r3, [r7, #28]
 800e4f4:	4622      	mov	r2, r4
 800e4f6:	7d39      	ldrb	r1, [r7, #20]
 800e4f8:	f000 f876 	bl	800e5e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEC1IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESE_IJDpT0_EE>
 800e4fc:	bf00      	nop
 800e4fe:	3724      	adds	r7, #36	; 0x24
 800e500:	46bd      	mov	sp, r7
 800e502:	bd90      	pop	{r4, r7, pc}

0800e504 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEEOT_RNSt16remove_referenceISG_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	4618      	mov	r0, r3
 800e510:	370c      	adds	r7, #12
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr

0800e51a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b082      	sub	sp, #8
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f000 f874 	bl	800e610 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE7_M_addrEv>
 800e528:	4603      	mov	r3, r0
 800e52a:	4618      	mov	r0, r3
 800e52c:	3708      	adds	r7, #8
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}

0800e532 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEED1Ev>:
    struct pair
 800e532:	b580      	push	{r7, lr}
 800e534:	b082      	sub	sp, #8
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7fe fb57 	bl	800cbf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	4618      	mov	r0, r3
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE7destroyISD_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
 800e556:	6838      	ldr	r0, [r7, #0]
 800e558:	f7ff ffeb 	bl	800e532 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEED1Ev>
 800e55c:	bf00      	nop
 800e55e:	3708      	adds	r7, #8
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE10deallocateEPSE_j>:
      deallocate(pointer __p, size_type)
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800e570:	68b8      	ldr	r0, [r7, #8]
 800e572:	f000 f8c1 	bl	800e6f8 <_ZdlPv>
      }
 800e576:	3710      	adds	r7, #16
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <_ZSt11__addressofIKcEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e57c:	b480      	push	{r7}
 800e57e:	b083      	sub	sp, #12
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	4618      	mov	r0, r3
 800e588:	370c      	adds	r7, #12
 800e58a:	46bd      	mov	sp, r7
 800e58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e590:	4770      	bx	lr

0800e592 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e592:	b580      	push	{r7, lr}
 800e594:	b084      	sub	sp, #16
 800e596:	af00      	add	r7, sp, #0
 800e598:	60f8      	str	r0, [r7, #12]
 800e59a:	60b9      	str	r1, [r7, #8]
 800e59c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800e59e:	68f8      	ldr	r0, [r7, #12]
 800e5a0:	f7ff ff12 	bl	800e3c8 <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	bf8c      	ite	hi
 800e5ac:	2301      	movhi	r3, #1
 800e5ae:	2300      	movls	r3, #0
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d001      	beq.n	800e5ba <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e5b6:	f002 fd39 	bl	801102c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e5ba:	68b8      	ldr	r0, [r7, #8]
 800e5bc:	f000 f890 	bl	800e6e0 <_Znwj>
 800e5c0:	4603      	mov	r3, r0
      }
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
	...

0800e5cc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e5d4:	4b03      	ldr	r3, [pc, #12]	; (800e5e4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEEE8max_sizeEv+0x18>)
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	370c      	adds	r7, #12
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop
 800e5e4:	05d1745d 	.word	0x05d1745d

0800e5e8 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEC1IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESE_IJDpT0_EE>:

  // See stl_pair.h...
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      inline
      pair<_T1, _T2>::
 800e5e8:	b5b0      	push	{r4, r5, r7, lr}
 800e5ea:	b086      	sub	sp, #24
 800e5ec:	af02      	add	r7, sp, #8
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	7239      	strb	r1, [r7, #8]
 800e5f2:	607a      	str	r2, [r7, #4]
 800e5f4:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800e5f6:	463a      	mov	r2, r7
 800e5f8:	f88d 4000 	strb.w	r4, [sp]
 800e5fc:	462b      	mov	r3, r5
 800e5fe:	6879      	ldr	r1, [r7, #4]
 800e600:	68f8      	ldr	r0, [r7, #12]
 800e602:	f000 f829 	bl	800e658 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEC1IJRS6_EJLj0EEJEJEEERSt5tupleIJDpT_EERSD_IJDpT1_EESt12_Index_tupleIJXspT0_EEESM_IJXspT2_EEE>
      { }
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	4618      	mov	r0, r3
 800e60a:	3710      	adds	r7, #16
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bdb0      	pop	{r4, r5, r7, pc}

0800e610 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEE7_M_addrEv>:
      _M_addr() const noexcept
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	4618      	mov	r0, r3
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr

0800e626 <_ZSt3getILj0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>:
    get(tuple<_Elements...>& __t) noexcept
 800e626:	b580      	push	{r7, lr}
 800e628:	b082      	sub	sp, #8
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	4618      	mov	r0, r3
 800e632:	f000 f805 	bl	800e640 <_ZSt12__get_helperILj0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE>
 800e636:	4603      	mov	r3, r0
 800e638:	4618      	mov	r0, r3
 800e63a:	3708      	adds	r7, #8
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <_ZSt12__get_helperILj0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f7ff fef9 	bl	800e440 <_ZNSt11_Tuple_implILj0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_>
 800e64e:	4603      	mov	r3, r0
 800e650:	4618      	mov	r0, r3
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleEEC1IJRS6_EJLj0EEJEJEEERSt5tupleIJDpT_EERSD_IJDpT1_EESt12_Index_tupleIJXspT0_EEESM_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
 800e658:	b590      	push	{r4, r7, lr}
 800e65a:	b085      	sub	sp, #20
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
 800e664:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800e666:	68fc      	ldr	r4, [r7, #12]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800e668:	68b8      	ldr	r0, [r7, #8]
 800e66a:	f7ff ffdc 	bl	800e626 <_ZSt3getILj0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>
 800e66e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800e670:	4618      	mov	r0, r3
 800e672:	f7ff fefe 	bl	800e472 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800e676:	4603      	mov	r3, r0
 800e678:	4619      	mov	r1, r3
 800e67a:	4620      	mov	r0, r4
 800e67c:	f7fe fd16 	bl	800d0ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2200      	movs	r2, #0
 800e684:	619a      	str	r2, [r3, #24]
      { }
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	4618      	mov	r0, r3
 800e68a:	3714      	adds	r7, #20
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd90      	pop	{r4, r7, pc}

0800e690 <_ZN17MasterApplicationD1Ev>:
    virtual ~MasterApplication( ) override = default;
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	4a08      	ldr	r2, [pc, #32]	; (800e6bc <_ZN17MasterApplicationD1Ev+0x2c>)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	601a      	str	r2, [r3, #0]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	3304      	adds	r3, #4
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7fd fe8f 	bl	800c3c6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPN3cep6ModuleESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fd fe30 	bl	800c310 <_ZN3cep11ApplicationD1Ev>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3708      	adds	r7, #8
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	08017874 	.word	0x08017874

0800e6c0 <_ZN17MasterApplicationD0Ev>:
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f7ff ffe1 	bl	800e690 <_ZN17MasterApplicationD1Ev>
 800e6ce:	2120      	movs	r1, #32
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f000 f81c 	bl	800e70e <_ZdlPvj>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3708      	adds	r7, #8
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <_Znwj>:
#include "../processes/application.hpp"
#include <new>
#include <malloc.h>

void* operator new(std::size_t size)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
    return malloc(size);
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f004 f987 	bl	80129fc <malloc>
 800e6ee:	4603      	mov	r3, r0
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3708      	adds	r7, #8
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <_ZdlPv>:
{
    return malloc(size);
}

void operator delete(void* ptr)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
    free(ptr);
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f004 f983 	bl	8012a0c <free>
}
 800e706:	bf00      	nop
 800e708:	3708      	adds	r7, #8
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <_ZdlPvj>:
{
    free(ptr);
}

void operator delete(void* ptr, size_t)
{
 800e70e:	b580      	push	{r7, lr}
 800e710:	b082      	sub	sp, #8
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
 800e716:	6039      	str	r1, [r7, #0]
    free(ptr);
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f004 f977 	bl	8012a0c <free>
}
 800e71e:	bf00      	nop
 800e720:	3708      	adds	r7, #8
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}

0800e726 <__cxa_pure_virtual>:
    free(ptr);
}


extern "C" void __cxa_pure_virtual()
{
 800e726:	b580      	push	{r7, lr}
 800e728:	af00      	add	r7, sp, #0
    cep::Application::AssertFailed();
 800e72a:	f7fd fbef 	bl	800bf0c <_ZN3cep11Application12AssertFailedEv>
}
 800e72e:	bf00      	nop
 800e730:	bd80      	pop	{r7, pc}

0800e732 <_ZN3cep18FindStringInVectorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE>:
    }
}


size_t cep::FindStringInVector(const std::string& str, const std::vector<uint8_t>& vec)
{
 800e732:	b590      	push	{r4, r7, lr}
 800e734:	b087      	sub	sp, #28
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
 800e73a:	6039      	str	r1, [r7, #0]
    else
    {
        return (it - vec.begin());
    }
#else
    size_t strLen = str.size();
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7fe fca9 	bl	800d094 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800e742:	60f8      	str	r0, [r7, #12]
    size_t vecLen = vec.size();
 800e744:	6838      	ldr	r0, [r7, #0]
 800e746:	f000 f854 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800e74a:	60b8      	str	r0, [r7, #8]

    // If the string is bigger than the vector, we won't find the string in the vector ;)
    if (strLen > vecLen)
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	429a      	cmp	r2, r3
 800e752:	d902      	bls.n	800e75a <_ZN3cep18FindStringInVectorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE+0x28>
    {
        return std::string::npos;
 800e754:	f04f 33ff 	mov.w	r3, #4294967295
 800e758:	e033      	b.n	800e7c2 <_ZN3cep18FindStringInVectorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE+0x90>
    }
    for (size_t i = 0; i <= vecLen - strLen; ++i)
 800e75a:	2300      	movs	r3, #0
 800e75c:	617b      	str	r3, [r7, #20]
 800e75e:	68ba      	ldr	r2, [r7, #8]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	1ad3      	subs	r3, r2, r3
 800e764:	697a      	ldr	r2, [r7, #20]
 800e766:	429a      	cmp	r2, r3
 800e768:	d829      	bhi.n	800e7be <_ZN3cep18FindStringInVectorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE+0x8c>
    {
        size_t j = 0;
 800e76a:	2300      	movs	r3, #0
 800e76c:	613b      	str	r3, [r7, #16]
        while (j < vecLen && vec[i + j] == str[j])
 800e76e:	693a      	ldr	r2, [r7, #16]
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	429a      	cmp	r2, r3
 800e774:	d212      	bcs.n	800e79c <_ZN3cep18FindStringInVectorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE+0x6a>
 800e776:	697a      	ldr	r2, [r7, #20]
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	4413      	add	r3, r2
 800e77c:	4619      	mov	r1, r3
 800e77e:	6838      	ldr	r0, [r7, #0]
 800e780:	f000 f847 	bl	800e812 <_ZNKSt6vectorIhSaIhEEixEj>
 800e784:	4603      	mov	r3, r0
 800e786:	781c      	ldrb	r4, [r3, #0]
 800e788:	6939      	ldr	r1, [r7, #16]
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 f850 	bl	800e830 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800e790:	4603      	mov	r3, r0
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	429c      	cmp	r4, r3
 800e796:	d101      	bne.n	800e79c <_ZN3cep18FindStringInVectorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE+0x6a>
 800e798:	2301      	movs	r3, #1
 800e79a:	e000      	b.n	800e79e <_ZN3cep18FindStringInVectorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE+0x6c>
 800e79c:	2300      	movs	r3, #0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d003      	beq.n	800e7aa <_ZN3cep18FindStringInVectorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE+0x78>
        {
            j++;
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	613b      	str	r3, [r7, #16]
        while (j < vecLen && vec[i + j] == str[j])
 800e7a8:	e7e1      	b.n	800e76e <_ZN3cep18FindStringInVectorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE+0x3c>
        }
        if (j == strLen)
 800e7aa:	693a      	ldr	r2, [r7, #16]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d101      	bne.n	800e7b6 <_ZN3cep18FindStringInVectorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE+0x84>
        {
            // Match found.
            return i;
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	e005      	b.n	800e7c2 <_ZN3cep18FindStringInVectorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE+0x90>
    for (size_t i = 0; i <= vecLen - strLen; ++i)
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	617b      	str	r3, [r7, #20]
 800e7bc:	e7cf      	b.n	800e75e <_ZN3cep18FindStringInVectorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE+0x2c>
        }
    }

    return std::string::npos;
 800e7be:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	371c      	adds	r7, #28
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd90      	pop	{r4, r7, pc}

0800e7ca <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800e7ca:	b480      	push	{r7}
 800e7cc:	b083      	sub	sp, #12
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d201      	bcs.n	800e7e4 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	e000      	b.n	800e7e6 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800e7e4:	687b      	ldr	r3, [r7, #4]
    }
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	370c      	adds	r7, #12
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr

0800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 800e7f2:	b480      	push	{r7}
 800e7f4:	b083      	sub	sp, #12
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	461a      	mov	r2, r3
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	1ad3      	subs	r3, r2, r3
 800e806:	4618      	mov	r0, r3
 800e808:	370c      	adds	r7, #12
 800e80a:	46bd      	mov	sp, r7
 800e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e810:	4770      	bx	lr

0800e812 <_ZNKSt6vectorIhSaIhEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      const_reference
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 800e812:	b480      	push	{r7}
 800e814:	b083      	sub	sp, #12
 800e816:	af00      	add	r7, sp, #0
 800e818:	6078      	str	r0, [r7, #4]
 800e81a:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	4413      	add	r3, r2
      }
 800e824:	4618      	mov	r0, r3
 800e826:	370c      	adds	r7, #12
 800e828:	46bd      	mov	sp, r7
 800e82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82e:	4770      	bx	lr

0800e830 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
      operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
	return _M_data()[__pos];
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f7fe fbd8 	bl	800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800e840:	4602      	mov	r2, r0
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	4413      	add	r3, r2
      }
 800e846:	4618      	mov	r0, r3
 800e848:	3708      	adds	r7, #8
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}

0800e84e <_ZNSt6vectorIhSaIhEEC1Ev>:
      vector()
 800e84e:	b580      	push	{r7, lr}
 800e850:	b082      	sub	sp, #8
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	4618      	mov	r0, r3
 800e85a:	f000 f869 	bl	800e930 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	4618      	mov	r0, r3
 800e862:	3708      	adds	r7, #8
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <_ZNSt6vectorIhSaIhEE7reserveEj>:
{
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 800e868:	b5b0      	push	{r4, r5, r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 f882 	bl	800e97c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800e878:	4602      	mov	r2, r0
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	4293      	cmp	r3, r2
 800e87e:	bf8c      	ite	hi
 800e880:	2301      	movhi	r3, #1
 800e882:	2300      	movls	r3, #0
 800e884:	b2db      	uxtb	r3, r3
 800e886:	2b00      	cmp	r3, #0
 800e888:	d002      	beq.n	800e890 <_ZNSt6vectorIhSaIhEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 800e88a:	4828      	ldr	r0, [pc, #160]	; (800e92c <_ZNSt6vectorIhSaIhEE7reserveEj+0xc4>)
 800e88c:	f002 fbf6 	bl	801107c <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f000 f884 	bl	800e99e <_ZNKSt6vectorIhSaIhEE8capacityEv>
 800e896:	4602      	mov	r2, r0
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	4293      	cmp	r3, r2
 800e89c:	bf8c      	ite	hi
 800e89e:	2301      	movhi	r3, #1
 800e8a0:	2300      	movls	r3, #0
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d03d      	beq.n	800e924 <_ZNSt6vectorIhSaIhEE7reserveEj+0xbc>
	{
	  const size_type __old_size = size();
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f7ff ffa2 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800e8ae:	60f8      	str	r0, [r7, #12]
	  pointer __tmp = _M_allocate_and_copy(__n,
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f000 f882 	bl	800e9be <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 800e8ba:	4604      	mov	r4, r0
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f000 f87c 	bl	800e9be <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	4622      	mov	r2, r4
 800e8ca:	6839      	ldr	r1, [r7, #0]
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 f885 	bl	800e9dc <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyISt13move_iteratorIPhEEES4_jT_S6_>
 800e8d2:	60b8      	str	r0, [r7, #8]
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681c      	ldr	r4, [r3, #0]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	685d      	ldr	r5, [r3, #4]
			_M_get_Tp_allocator());
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f000 f833 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800e8e4:	4603      	mov	r3, r0
	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	4629      	mov	r1, r5
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f000 f838 	bl	800e960 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	  _M_deallocate(this->_M_impl._M_start,
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_start);
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	1ad3      	subs	r3, r2, r3
	  _M_deallocate(this->_M_impl._M_start,
 800e902:	461a      	mov	r2, r3
 800e904:	f000 f886 	bl	800ea14 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	  this->_M_impl._M_start = __tmp;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	68ba      	ldr	r2, [r7, #8]
 800e90c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 800e90e:	68ba      	ldr	r2, [r7, #8]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	441a      	add	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	441a      	add	r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	609a      	str	r2, [r3, #8]
	}
    }
 800e924:	bf00      	nop
 800e926:	3710      	adds	r7, #16
 800e928:	46bd      	mov	sp, r7
 800e92a:	bdb0      	pop	{r4, r5, r7, pc}
 800e92c:	08016b84 	.word	0x08016b84

0800e930 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      _Vector_base()
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	4618      	mov	r0, r3
 800e93c:	f000 f87d 	bl	800ea3a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	4618      	mov	r0, r3
 800e944:	3708      	adds	r7, #8
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800e94a:	b480      	push	{r7}
 800e94c:	b083      	sub	sp, #12
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4618      	mov	r0, r3
 800e956:	370c      	adds	r7, #12
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr

0800e960 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
 800e966:	60f8      	str	r0, [r7, #12]
 800e968:	60b9      	str	r1, [r7, #8]
 800e96a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800e96c:	68b9      	ldr	r1, [r7, #8]
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	f000 f878 	bl	800ea64 <_ZSt8_DestroyIPhEvT_S1_>
    }
 800e974:	bf00      	nop
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	4618      	mov	r0, r3
 800e988:	f000 f885 	bl	800ea96 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800e98c:	4603      	mov	r3, r0
 800e98e:	4618      	mov	r0, r3
 800e990:	f000 f875 	bl	800ea7e <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 800e994:	4603      	mov	r3, r0
 800e996:	4618      	mov	r0, r3
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800e99e:	b480      	push	{r7}
 800e9a0:	b083      	sub	sp, #12
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	370c      	adds	r7, #12
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr

0800e9be <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b084      	sub	sp, #16
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800e9c6:	f107 030c 	add.w	r3, r7, #12
 800e9ca:	6879      	ldr	r1, [r7, #4]
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f000 f86d 	bl	800eaac <_ZNSt13move_iteratorIPhEC1ES0_>
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3710      	adds	r7, #16
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}

0800e9dc <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyISt13move_iteratorIPhEEES4_jT_S6_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b086      	sub	sp, #24
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	607a      	str	r2, [r7, #4]
 800e9e8:	603b      	str	r3, [r7, #0]
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	68b9      	ldr	r1, [r7, #8]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f000 f86b 	bl	800eaca <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800e9f4:	6178      	str	r0, [r7, #20]
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7ff ffa6 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800e9fe:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800ea00:	697a      	ldr	r2, [r7, #20]
 800ea02:	6839      	ldr	r1, [r7, #0]
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f000 f874 	bl	800eaf2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
	      return __result;
 800ea0a:	697b      	ldr	r3, [r7, #20]
	  __catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
	    }
	}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3718      	adds	r7, #24
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	607a      	str	r2, [r7, #4]
	if (__p)
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d005      	beq.n	800ea32 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	68b9      	ldr	r1, [r7, #8]
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f000 f871 	bl	800eb14 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 800ea32:	bf00      	nop
 800ea34:	3710      	adds	r7, #16
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl()
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b082      	sub	sp, #8
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 f886 	bl	800eb54 <_ZNSaIhEC1Ev>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	601a      	str	r2, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2200      	movs	r2, #0
 800ea52:	605a      	str	r2, [r3, #4]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2200      	movs	r2, #0
 800ea58:	609a      	str	r2, [r3, #8]
	{ }
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3708      	adds	r7, #8
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}

0800ea64 <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800ea6e:	6839      	ldr	r1, [r7, #0]
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f000 f87b 	bl	800eb6c <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 800ea76:	bf00      	nop
 800ea78:	3708      	adds	r7, #8
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b082      	sub	sp, #8
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f000 f87b 	bl	800eb82 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3708      	adds	r7, #8
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800ea96:	b480      	push	{r7}
 800ea98:	b083      	sub	sp, #12
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	370c      	adds	r7, #12
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr

0800eaac <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	683a      	ldr	r2, [r7, #0]
 800eaba:	601a      	str	r2, [r3, #0]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	4618      	mov	r0, r3
 800eac0:	370c      	adds	r7, #12
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr

0800eaca <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b082      	sub	sp, #8
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d006      	beq.n	800eae8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6839      	ldr	r1, [r7, #0]
 800eade:	4618      	mov	r0, r3
 800eae0:	f000 f85b 	bl	800eb9a <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 800eae4:	4603      	mov	r3, r0
 800eae6:	e000      	b.n	800eaea <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 800eae8:	2300      	movs	r3, #0
      }
 800eaea:	4618      	mov	r0, r3
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b084      	sub	sp, #16
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	60f8      	str	r0, [r7, #12]
 800eafa:	60b9      	str	r1, [r7, #8]
 800eafc:	607a      	str	r2, [r7, #4]
 800eafe:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	68b9      	ldr	r1, [r7, #8]
 800eb04:	68f8      	ldr	r0, [r7, #12]
 800eb06:	f000 f857 	bl	800ebb8 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3710      	adds	r7, #16
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	68b9      	ldr	r1, [r7, #8]
 800eb24:	68f8      	ldr	r0, [r7, #12]
 800eb26:	f000 f859 	bl	800ebdc <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 800eb2a:	bf00      	nop
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b084      	sub	sp, #16
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	1d1a      	adds	r2, r3, #4
 800eb3e:	f107 030c 	add.w	r3, r7, #12
 800eb42:	4611      	mov	r1, r2
 800eb44:	4618      	mov	r0, r3
 800eb46:	f000 f855 	bl	800ebf4 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3710      	adds	r7, #16
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <_ZNSaIhEC1Ev>:
      allocator() throw() { }
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 f8ea 	bl	800ed36 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	4618      	mov	r0, r3
 800eb66:	3708      	adds	r7, #8
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
 800eb76:	bf00      	nop
 800eb78:	370c      	adds	r7, #12
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr

0800eb82 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800eb82:	b480      	push	{r7}
 800eb84:	b083      	sub	sp, #12
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800eb8a:	f04f 33ff 	mov.w	r3, #4294967295
 800eb8e:	4618      	mov	r0, r3
 800eb90:	370c      	adds	r7, #12
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr

0800eb9a <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800eb9a:	b580      	push	{r7, lr}
 800eb9c:	b082      	sub	sp, #8
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
 800eba2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800eba4:	2200      	movs	r2, #0
 800eba6:	6839      	ldr	r1, [r7, #0]
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 f8cf 	bl	800ed4c <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b086      	sub	sp, #24
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	68b9      	ldr	r1, [r7, #8]
 800ebcc:	68f8      	ldr	r0, [r7, #12]
 800ebce:	f000 f8d9 	bl	800ed84 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 800ebd2:	4603      	mov	r3, r0
    }
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3718      	adds	r7, #24
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(pointer __p, size_type)
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800ebe8:	68b8      	ldr	r0, [r7, #8]
 800ebea:	f7ff fd85 	bl	800e6f8 <_ZdlPv>
      }
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	601a      	str	r2, [r3, #0]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4618      	mov	r0, r3
 800ec0a:	370c      	adds	r7, #12
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr

0800ec14 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800ec14:	b590      	push	{r4, r7, lr}
 800ec16:	b087      	sub	sp, #28
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	60b9      	str	r1, [r7, #8]
 800ec1e:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800ec20:	68f8      	ldr	r0, [r7, #12]
 800ec22:	f7ff feab 	bl	800e97c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800ec26:	4604      	mov	r4, r0
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f7ff fde2 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	1ae2      	subs	r2, r4, r3
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	bf34      	ite	cc
 800ec38:	2301      	movcc	r3, #1
 800ec3a:	2300      	movcs	r3, #0
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d003      	beq.n	800ec4a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	4618      	mov	r0, r3
 800ec46:	f002 fa19 	bl	801107c <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 800ec4a:	68f8      	ldr	r0, [r7, #12]
 800ec4c:	f7ff fdd1 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800ec50:	4604      	mov	r4, r0
 800ec52:	68f8      	ldr	r0, [r7, #12]
 800ec54:	f7ff fdcd 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	613b      	str	r3, [r7, #16]
 800ec5c:	f107 0208 	add.w	r2, r7, #8
 800ec60:	f107 0310 	add.w	r3, r7, #16
 800ec64:	4611      	mov	r1, r2
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7ff fdaf 	bl	800e7ca <_ZSt3maxIjERKT_S2_S2_>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4423      	add	r3, r4
 800ec72:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ec74:	68f8      	ldr	r0, [r7, #12]
 800ec76:	f7ff fdbc 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d306      	bcc.n	800ec90 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7c>
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	f7ff fe7a 	bl	800e97c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800ec88:	4602      	mov	r2, r0
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d904      	bls.n	800ec9a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	f7ff fe73 	bl	800e97c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800ec96:	4603      	mov	r3, r0
 800ec98:	e000      	b.n	800ec9c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x88>
 800ec9a:	697b      	ldr	r3, [r7, #20]
      }
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	371c      	adds	r7, #28
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd90      	pop	{r4, r7, pc}

0800eca4 <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	f107 030c 	add.w	r3, r7, #12
 800ecb2:	4611      	mov	r1, r2
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7ff ff9d 	bl	800ebf4 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ecc4:	b590      	push	{r4, r7, lr}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 f80d 	bl	800ecee <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	461c      	mov	r4, r3
 800ecda:	6838      	ldr	r0, [r7, #0]
 800ecdc:	f000 f807 	bl	800ecee <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800ece0:	4603      	mov	r3, r0
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	1ae3      	subs	r3, r4, r3
 800ece6:	4618      	mov	r0, r3
 800ece8:	370c      	adds	r7, #12
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd90      	pop	{r4, r7, pc}

0800ecee <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800ecee:	b480      	push	{r7}
 800ecf0:	b083      	sub	sp, #12
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr

0800ed04 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800ed04:	b590      	push	{r4, r7, lr}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	607a      	str	r2, [r7, #4]
 800ed10:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f7ff fe53 	bl	800e9be <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 800ed18:	4604      	mov	r4, r0
 800ed1a:	68b8      	ldr	r0, [r7, #8]
 800ed1c:	f7ff fe4f 	bl	800e9be <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 800ed20:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	4620      	mov	r0, r4
 800ed28:	f7ff fee3 	bl	800eaf2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 800ed2c:	4603      	mov	r3, r0
    }
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3714      	adds	r7, #20
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd90      	pop	{r4, r7, pc}

0800ed36 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ed36:	b480      	push	{r7}
 800ed38:	b083      	sub	sp, #12
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4618      	mov	r0, r3
 800ed42:	370c      	adds	r7, #12
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr

0800ed4c <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	60b9      	str	r1, [r7, #8]
 800ed56:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800ed58:	68f8      	ldr	r0, [r7, #12]
 800ed5a:	f7ff ff12 	bl	800eb82 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 800ed5e:	4602      	mov	r2, r0
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	4293      	cmp	r3, r2
 800ed64:	bf8c      	ite	hi
 800ed66:	2301      	movhi	r3, #1
 800ed68:	2300      	movls	r3, #0
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d001      	beq.n	800ed74 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ed70:	f002 f95c 	bl	801102c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ed74:	68b8      	ldr	r0, [r7, #8]
 800ed76:	f7ff fcb3 	bl	800e6e0 <_Znwj>
 800ed7a:	4603      	mov	r3, r0
      }
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3710      	adds	r7, #16
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	68b9      	ldr	r1, [r7, #8]
 800ed94:	68f8      	ldr	r0, [r7, #12]
 800ed96:	f000 f811 	bl	800edbc <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4618      	mov	r0, r3
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800edbc:	b590      	push	{r4, r7, lr}
 800edbe:	b085      	sub	sp, #20
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	60f8      	str	r0, [r7, #12]
 800edc4:	60b9      	str	r1, [r7, #8]
 800edc6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 800edc8:	68f8      	ldr	r0, [r7, #12]
 800edca:	f000 f80f 	bl	800edec <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800edce:	4604      	mov	r4, r0
 800edd0:	68b8      	ldr	r0, [r7, #8]
 800edd2:	f000 f80b 	bl	800edec <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800edd6:	4603      	mov	r3, r0
	       __result));
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	4619      	mov	r1, r3
 800eddc:	4620      	mov	r0, r4
 800edde:	f000 f816 	bl	800ee0e <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 800ede2:	4603      	mov	r3, r0
    }
 800ede4:	4618      	mov	r0, r3
 800ede6:	3714      	adds	r7, #20
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd90      	pop	{r4, r7, pc}

0800edec <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800edf4:	1d3b      	adds	r3, r7, #4
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7ff ffd4 	bl	800eda4 <_ZNKSt13move_iteratorIPhE4baseEv>
 800edfc:	4603      	mov	r3, r0
 800edfe:	4618      	mov	r0, r3
 800ee00:	f000 f821 	bl	800ee46 <_ZSt12__miter_baseIPhET_S1_>
 800ee04:	4603      	mov	r3, r0
 800ee06:	4618      	mov	r0, r3
 800ee08:	3708      	adds	r7, #8
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800ee0e:	b5b0      	push	{r4, r5, r7, lr}
 800ee10:	b084      	sub	sp, #16
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	60f8      	str	r0, [r7, #12]
 800ee16:	60b9      	str	r1, [r7, #8]
 800ee18:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800ee1a:	68f8      	ldr	r0, [r7, #12]
 800ee1c:	f000 f81e 	bl	800ee5c <_ZSt12__niter_baseIPhET_S1_>
 800ee20:	4604      	mov	r4, r0
 800ee22:	68b8      	ldr	r0, [r7, #8]
 800ee24:	f000 f81a 	bl	800ee5c <_ZSt12__niter_baseIPhET_S1_>
 800ee28:	4605      	mov	r5, r0
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f000 f816 	bl	800ee5c <_ZSt12__niter_baseIPhET_S1_>
 800ee30:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800ee32:	461a      	mov	r2, r3
 800ee34:	4629      	mov	r1, r5
 800ee36:	4620      	mov	r0, r4
 800ee38:	f000 f81b 	bl	800ee72 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 800ee3c:	4603      	mov	r3, r0
    }
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bdb0      	pop	{r4, r5, r7, pc}

0800ee46 <_ZSt12__miter_baseIPhET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800ee46:	b480      	push	{r7}
 800ee48:	b083      	sub	sp, #12
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	4618      	mov	r0, r3
 800ee52:	370c      	adds	r7, #12
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr

0800ee5c <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 800ee5c:	b480      	push	{r7}
 800ee5e:	b083      	sub	sp, #12
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	4618      	mov	r0, r3
 800ee68:	370c      	adds	r7, #12
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr

0800ee72 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800ee72:	b580      	push	{r7, lr}
 800ee74:	b086      	sub	sp, #24
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	60f8      	str	r0, [r7, #12]
 800ee7a:	60b9      	str	r1, [r7, #8]
 800ee7c:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800ee7e:	2301      	movs	r3, #1
 800ee80:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	68b9      	ldr	r1, [r7, #8]
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f000 f805 	bl	800ee96 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 800ee8c:	4603      	mov	r3, r0
    }
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3718      	adds	r7, #24
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b086      	sub	sp, #24
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	60f8      	str	r0, [r7, #12]
 800ee9e:	60b9      	str	r1, [r7, #8]
 800eea0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	1ad3      	subs	r3, r2, r3
 800eea8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d005      	beq.n	800eebc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	68f9      	ldr	r1, [r7, #12]
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f004 f800 	bl	8012ebc <memmove>
	  return __result + _Num;
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	4413      	add	r3, r2
	}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3718      	adds	r7, #24
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 800eeca:	b480      	push	{r7}
 800eecc:	b083      	sub	sp, #12
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	689b      	ldr	r3, [r3, #8]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	bf0c      	ite	eq
 800eeda:	2301      	moveq	r3, #1
 800eedc:	2300      	movne	r3, #0
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	4618      	mov	r0, r3
 800eee2:	370c      	adds	r7, #12
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <_ZN8CEP_UART5FrameC1ERKSt6vectorIhSaIhEEm>:
    std::vector<uint8_t> data;
    size_t               len       = 0;
    uint32_t             timestamp = 0;

    Frame( ) = default;
    Frame(const std::vector<uint8_t>& d, uint32_t t) : timestamp(t)
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	60b9      	str	r1, [r7, #8]
 800eef6:	607a      	str	r2, [r7, #4]
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7ff fca7 	bl	800e84e <_ZNSt6vectorIhSaIhEEC1Ev>
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2200      	movs	r2, #0
 800ef04:	60da      	str	r2, [r3, #12]
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	611a      	str	r2, [r3, #16]
    {
        data = d;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	68b9      	ldr	r1, [r7, #8]
 800ef10:	4618      	mov	r0, r3
 800ef12:	f000 fd1d 	bl	800f950 <_ZNSt6vectorIhSaIhEEaSERKS1_>
        len  = data.size( );
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7ff fc6a 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	60da      	str	r2, [r3, #12]
    }
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	4618      	mov	r0, r3
 800ef28:	3710      	adds	r7, #16
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}

0800ef2e <_ZNK10UartModule8GetLabelB5cxx11Ev>:
    virtual ~UartModule( ) override;

    virtual bool DoPost( ) override;
    virtual void Run( ) override;

    virtual const std::string& GetLabel( ) const override { return m_label; }
 800ef2e:	b480      	push	{r7}
 800ef30:	b083      	sub	sp, #12
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	6078      	str	r0, [r7, #4]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	3308      	adds	r3, #8
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	370c      	adds	r7, #12
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef44:	4770      	bx	lr
	...

0800ef48 <_ZN3cep6ModuleC1Ev>:

/**
 * @class   Module
 * @brief   Base class to inherit from when building modules.
 */
class Module
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	4a04      	ldr	r2, [pc, #16]	; (800ef64 <_ZN3cep6ModuleC1Ev+0x1c>)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	601a      	str	r2, [r3, #0]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4618      	mov	r0, r3
 800ef5a:	370c      	adds	r7, #12
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr
 800ef64:	080178c8 	.word	0x080178c8

0800ef68 <_ZN3cep6ModuleD1Ev>:
{
public:
    virtual ~Module() = default;
 800ef68:	b480      	push	{r7}
 800ef6a:	b083      	sub	sp, #12
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	4a04      	ldr	r2, [pc, #16]	; (800ef84 <_ZN3cep6ModuleD1Ev+0x1c>)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	601a      	str	r2, [r3, #0]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4618      	mov	r0, r3
 800ef7a:	370c      	adds	r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr
 800ef84:	080178c8 	.word	0x080178c8

0800ef88 <_ZN3cep6ModuleD0Ev>:
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7ff ffe9 	bl	800ef68 <_ZN3cep6ModuleD1Ev>
 800ef96:	2104      	movs	r1, #4
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f7ff fbb8 	bl	800e70e <_ZdlPvj>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4618      	mov	r0, r3
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <_ZN8CEP_UART5FrameC1Ev>:
    Frame( ) = default;
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7ff fc4b 	bl	800e84e <_ZNSt6vectorIhSaIhEEC1Ev>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	60da      	str	r2, [r3, #12]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2200      	movs	r2, #0
 800efc2:	611a      	str	r2, [r3, #16]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4618      	mov	r0, r3
 800efc8:	3708      	adds	r7, #8
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <_ZN8CEP_UART5FrameD1Ev>:
struct Frame
 800efce:	b580      	push	{r7, lr}
 800efd0:	b082      	sub	sp, #8
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	4618      	mov	r0, r3
 800efda:	f000 fc96 	bl	800f90a <_ZNSt6vectorIhSaIhEED1Ev>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	4618      	mov	r0, r3
 800efe2:	3708      	adds	r7, #8
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7fd f91a 	bl	800c22c <_ZNSt14_Function_baseD1Ev>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	4618      	mov	r0, r3
 800effc:	3708      	adds	r7, #8
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
	...

0800f004 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/* Private function declarations --------------------------------------------------------------- */

/*************************************************************************************************/
/* Public method definitions                                                                     */
/*************************************************************************************************/
UartModule::UartModule(UART_HandleTypeDef* uart, const std::string& label)
 800f004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f008:	b089      	sub	sp, #36	; 0x24
 800f00a:	af04      	add	r7, sp, #16
 800f00c:	60f8      	str	r0, [r7, #12]
 800f00e:	60b9      	str	r1, [r7, #8]
 800f010:	607a      	str	r2, [r7, #4]
    : m_handle(uart), m_label(label)
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	4618      	mov	r0, r3
 800f016:	f7ff ff97 	bl	800ef48 <_ZN3cep6ModuleC1Ev>
 800f01a:	4a80      	ldr	r2, [pc, #512]	; (800f21c <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	601a      	str	r2, [r3, #0]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	605a      	str	r2, [r3, #4]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	3308      	adds	r3, #8
 800f02a:	6879      	ldr	r1, [r7, #4]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7fe f83d 	bl	800d0ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2200      	movs	r2, #0
 800f036:	621a      	str	r2, [r3, #32]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f04f 32ff 	mov.w	r2, #4294967295
 800f03e:	625a      	str	r2, [r3, #36]	; 0x24
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	3328      	adds	r3, #40	; 0x28
 800f044:	4618      	mov	r0, r3
 800f046:	f7ff fc02 	bl	800e84e <_ZNSt6vectorIhSaIhEEC1Ev>
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	3334      	adds	r3, #52	; 0x34
 800f04e:	4618      	mov	r0, r3
 800f050:	f7ff fbfd 	bl	800e84e <_ZNSt6vectorIhSaIhEEC1Ev>
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2200      	movs	r2, #0
 800f058:	641a      	str	r2, [r3, #64]	; 0x40
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2200      	movs	r2, #0
 800f05e:	645a      	str	r2, [r3, #68]	; 0x44
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	3348      	adds	r3, #72	; 0x48
 800f064:	4618      	mov	r0, r3
 800f066:	f7ff ff9f 	bl	800efa8 <_ZN8CEP_UART5FrameC1Ev>
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2200      	movs	r2, #0
 800f06e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	3360      	adds	r3, #96	; 0x60
 800f076:	4618      	mov	r0, r3
 800f078:	f000 fd5b 	bl	800fb32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2200      	movs	r2, #0
 800f080:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	337c      	adds	r3, #124	; 0x7c
 800f088:	4618      	mov	r0, r3
 800f08a:	f000 fd52 	bl	800fb32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	3394      	adds	r3, #148	; 0x94
 800f092:	4618      	mov	r0, r3
 800f094:	f000 fd70 	bl	800fb78 <_ZNSt8functionIFvvEEC1Ev>
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	2200      	movs	r2, #0
 800f09c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
{
    CEP_ASSERT(uart != nullptr, "UART Handle is NULL!");
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d148      	bne.n	800f138 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x134>
 800f0a6:	f7fc ff35 	bl	800bf14 <_ZN6Logger3GetEv>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d041      	beq.n	800f134 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x130>
 800f0b0:	f7fc ff30 	bl	800bf14 <_ZN6Logger3GetEv>
 800f0b4:	4680      	mov	r8, r0
 800f0b6:	f7f9 ff2f 	bl	8008f18 <HAL_GetTick>
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	4b58      	ldr	r3, [pc, #352]	; (800f220 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x21c>)
 800f0be:	fba3 2302 	umull	r2, r3, r3, r2
 800f0c2:	0d5e      	lsrs	r6, r3, #21
 800f0c4:	f7f9 ff28 	bl	8008f18 <HAL_GetTick>
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	4b56      	ldr	r3, [pc, #344]	; (800f224 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x220>)
 800f0cc:	fba3 2302 	umull	r2, r3, r3, r2
 800f0d0:	0b9a      	lsrs	r2, r3, #14
 800f0d2:	4b55      	ldr	r3, [pc, #340]	; (800f228 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x224>)
 800f0d4:	fba3 1302 	umull	r1, r3, r3, r2
 800f0d8:	095d      	lsrs	r5, r3, #5
 800f0da:	462b      	mov	r3, r5
 800f0dc:	011b      	lsls	r3, r3, #4
 800f0de:	1b5b      	subs	r3, r3, r5
 800f0e0:	009b      	lsls	r3, r3, #2
 800f0e2:	1ad5      	subs	r5, r2, r3
 800f0e4:	f7f9 ff18 	bl	8008f18 <HAL_GetTick>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	4b50      	ldr	r3, [pc, #320]	; (800f22c <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x228>)
 800f0ec:	fba3 2302 	umull	r2, r3, r3, r2
 800f0f0:	099a      	lsrs	r2, r3, #6
 800f0f2:	4b4d      	ldr	r3, [pc, #308]	; (800f228 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x224>)
 800f0f4:	fba3 1302 	umull	r1, r3, r3, r2
 800f0f8:	095c      	lsrs	r4, r3, #5
 800f0fa:	4623      	mov	r3, r4
 800f0fc:	011b      	lsls	r3, r3, #4
 800f0fe:	1b1b      	subs	r3, r3, r4
 800f100:	009b      	lsls	r3, r3, #2
 800f102:	1ad4      	subs	r4, r2, r3
 800f104:	f7f9 ff08 	bl	8008f18 <HAL_GetTick>
 800f108:	4602      	mov	r2, r0
 800f10a:	4b48      	ldr	r3, [pc, #288]	; (800f22c <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x228>)
 800f10c:	fba3 1302 	umull	r1, r3, r3, r2
 800f110:	099b      	lsrs	r3, r3, #6
 800f112:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f116:	fb01 f303 	mul.w	r3, r1, r3
 800f11a:	1ad3      	subs	r3, r2, r3
 800f11c:	4a44      	ldr	r2, [pc, #272]	; (800f230 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22c>)
 800f11e:	9203      	str	r2, [sp, #12]
 800f120:	2224      	movs	r2, #36	; 0x24
 800f122:	9202      	str	r2, [sp, #8]
 800f124:	9301      	str	r3, [sp, #4]
 800f126:	9400      	str	r4, [sp, #0]
 800f128:	462b      	mov	r3, r5
 800f12a:	4632      	mov	r2, r6
 800f12c:	4941      	ldr	r1, [pc, #260]	; (800f234 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>)
 800f12e:	4640      	mov	r0, r8
 800f130:	f001 fd10 	bl	8010b54 <_ZN6Logger3LogEPKcz>
 800f134:	f7fc feea 	bl	800bf0c <_ZN3cep11Application12AssertFailedEv>
    m_txBuf.reserve(64);
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	3328      	adds	r3, #40	; 0x28
 800f13c:	2140      	movs	r1, #64	; 0x40
 800f13e:	4618      	mov	r0, r3
 800f140:	f7ff fb92 	bl	800e868 <_ZNSt6vectorIhSaIhEE7reserveEj>
    m_rxBuf.reserve(512);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	3334      	adds	r3, #52	; 0x34
 800f148:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7ff fb8b 	bl	800e868 <_ZNSt6vectorIhSaIhEE7reserveEj>
    m_sof.reserve(2);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	3360      	adds	r3, #96	; 0x60
 800f156:	2102      	movs	r1, #2
 800f158:	4618      	mov	r0, r3
 800f15a:	f000 fd1a 	bl	800fb92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
    m_eof.reserve(2);
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	337c      	adds	r3, #124	; 0x7c
 800f162:	2102      	movs	r1, #2
 800f164:	4618      	mov	r0, r3
 800f166:	f000 fd14 	bl	800fb92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
    //        m_latestFrames.reserve(8);

    __HAL_UART_ENABLE_IT(m_handle, UART_IT_RXNE);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	68da      	ldr	r2, [r3, #12]
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f042 0220 	orr.w	r2, r2, #32
 800f17c:	60da      	str	r2, [r3, #12]
    LOG_INFO("[%s]: Initialized", label.c_str( ));
 800f17e:	f7fc fec9 	bl	800bf14 <_ZN6Logger3GetEv>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d043      	beq.n	800f210 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20c>
 800f188:	f7fc fec4 	bl	800bf14 <_ZN6Logger3GetEv>
 800f18c:	4681      	mov	r9, r0
 800f18e:	f7f9 fec3 	bl	8008f18 <HAL_GetTick>
 800f192:	4602      	mov	r2, r0
 800f194:	4b22      	ldr	r3, [pc, #136]	; (800f220 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x21c>)
 800f196:	fba3 2302 	umull	r2, r3, r3, r2
 800f19a:	ea4f 5853 	mov.w	r8, r3, lsr #21
 800f19e:	f7f9 febb 	bl	8008f18 <HAL_GetTick>
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	4b1f      	ldr	r3, [pc, #124]	; (800f224 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x220>)
 800f1a6:	fba3 2302 	umull	r2, r3, r3, r2
 800f1aa:	0b9a      	lsrs	r2, r3, #14
 800f1ac:	4b1e      	ldr	r3, [pc, #120]	; (800f228 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x224>)
 800f1ae:	fba3 1302 	umull	r1, r3, r3, r2
 800f1b2:	095e      	lsrs	r6, r3, #5
 800f1b4:	4633      	mov	r3, r6
 800f1b6:	011b      	lsls	r3, r3, #4
 800f1b8:	1b9b      	subs	r3, r3, r6
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	1ad6      	subs	r6, r2, r3
 800f1be:	f7f9 feab 	bl	8008f18 <HAL_GetTick>
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	4b19      	ldr	r3, [pc, #100]	; (800f22c <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x228>)
 800f1c6:	fba3 2302 	umull	r2, r3, r3, r2
 800f1ca:	099a      	lsrs	r2, r3, #6
 800f1cc:	4b16      	ldr	r3, [pc, #88]	; (800f228 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x224>)
 800f1ce:	fba3 1302 	umull	r1, r3, r3, r2
 800f1d2:	095c      	lsrs	r4, r3, #5
 800f1d4:	4623      	mov	r3, r4
 800f1d6:	011b      	lsls	r3, r3, #4
 800f1d8:	1b1b      	subs	r3, r3, r4
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	1ad4      	subs	r4, r2, r3
 800f1de:	f7f9 fe9b 	bl	8008f18 <HAL_GetTick>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	4a11      	ldr	r2, [pc, #68]	; (800f22c <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x228>)
 800f1e6:	fba2 1203 	umull	r1, r2, r2, r3
 800f1ea:	0995      	lsrs	r5, r2, #6
 800f1ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f1f0:	fb02 f205 	mul.w	r2, r2, r5
 800f1f4:	1a9d      	subs	r5, r3, r2
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 fb7b 	bl	800f8f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	9302      	str	r3, [sp, #8]
 800f200:	9501      	str	r5, [sp, #4]
 800f202:	9400      	str	r4, [sp, #0]
 800f204:	4633      	mov	r3, r6
 800f206:	4642      	mov	r2, r8
 800f208:	490b      	ldr	r1, [pc, #44]	; (800f238 <_ZN10UartModuleC1EP20__UART_HandleTypeDefRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x234>)
 800f20a:	4648      	mov	r0, r9
 800f20c:	f001 fca2 	bl	8010b54 <_ZN6Logger3LogEPKcz>
}
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	4618      	mov	r0, r3
 800f214:	3714      	adds	r7, #20
 800f216:	46bd      	mov	sp, r7
 800f218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f21c:	080178ac 	.word	0x080178ac
 800f220:	95217cb1 	.word	0x95217cb1
 800f224:	45e7b273 	.word	0x45e7b273
 800f228:	88888889 	.word	0x88888889
 800f22c:	10624dd3 	.word	0x10624dd3
 800f230:	08016c44 	.word	0x08016c44
 800f234:	08016bf4 	.word	0x08016bf4
 800f238:	08016c68 	.word	0x08016c68

0800f23c <_ZN10UartModuleD1Ev>:

UartModule::~UartModule( ) { HAL_UART_DeInit(m_handle); }
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	4a19      	ldr	r2, [pc, #100]	; (800f2ac <_ZN10UartModuleD1Ev+0x70>)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	601a      	str	r2, [r3, #0]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	4618      	mov	r0, r3
 800f250:	f7fb ffba 	bl	800b1c8 <HAL_UART_DeInit>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	3394      	adds	r3, #148	; 0x94
 800f258:	4618      	mov	r0, r3
 800f25a:	f7ff fec5 	bl	800efe8 <_ZNSt8functionIFvvEED1Ev>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	337c      	adds	r3, #124	; 0x7c
 800f262:	4618      	mov	r0, r3
 800f264:	f7fd fcc4 	bl	800cbf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	3360      	adds	r3, #96	; 0x60
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7fd fcbf 	bl	800cbf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	3348      	adds	r3, #72	; 0x48
 800f276:	4618      	mov	r0, r3
 800f278:	f7ff fea9 	bl	800efce <_ZN8CEP_UART5FrameD1Ev>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	3334      	adds	r3, #52	; 0x34
 800f280:	4618      	mov	r0, r3
 800f282:	f000 fb42 	bl	800f90a <_ZNSt6vectorIhSaIhEED1Ev>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	3328      	adds	r3, #40	; 0x28
 800f28a:	4618      	mov	r0, r3
 800f28c:	f000 fb3d 	bl	800f90a <_ZNSt6vectorIhSaIhEED1Ev>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	3308      	adds	r3, #8
 800f294:	4618      	mov	r0, r3
 800f296:	f7fd fcab 	bl	800cbf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7ff fe63 	bl	800ef68 <_ZN3cep6ModuleD1Ev>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3708      	adds	r7, #8
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}
 800f2ac:	080178ac 	.word	0x080178ac

0800f2b0 <_ZN10UartModuleD0Ev>:
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f7ff ffbf 	bl	800f23c <_ZN10UartModuleD1Ev>
 800f2be:	21a8      	movs	r1, #168	; 0xa8
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f7ff fa24 	bl	800e70e <_ZdlPvj>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <_ZN10UartModule6DoPostEv>:
/**
 * If the initialization passed, the POST passes.
 * @return
 */
bool UartModule::DoPost( )
{
 800f2d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f2d4:	b087      	sub	sp, #28
 800f2d6:	af04      	add	r7, sp, #16
 800f2d8:	6078      	str	r0, [r7, #4]
    LOG_INFO("[%s]: POST OK", m_label.c_str( ));
 800f2da:	f7fc fe1b 	bl	800bf14 <_ZN6Logger3GetEv>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d045      	beq.n	800f370 <_ZN10UartModule6DoPostEv+0xa0>
 800f2e4:	f7fc fe16 	bl	800bf14 <_ZN6Logger3GetEv>
 800f2e8:	4681      	mov	r9, r0
 800f2ea:	f7f9 fe15 	bl	8008f18 <HAL_GetTick>
 800f2ee:	4602      	mov	r2, r0
 800f2f0:	4b22      	ldr	r3, [pc, #136]	; (800f37c <_ZN10UartModule6DoPostEv+0xac>)
 800f2f2:	fba3 2302 	umull	r2, r3, r3, r2
 800f2f6:	ea4f 5853 	mov.w	r8, r3, lsr #21
 800f2fa:	f7f9 fe0d 	bl	8008f18 <HAL_GetTick>
 800f2fe:	4602      	mov	r2, r0
 800f300:	4b1f      	ldr	r3, [pc, #124]	; (800f380 <_ZN10UartModule6DoPostEv+0xb0>)
 800f302:	fba3 2302 	umull	r2, r3, r3, r2
 800f306:	0b9a      	lsrs	r2, r3, #14
 800f308:	4b1e      	ldr	r3, [pc, #120]	; (800f384 <_ZN10UartModule6DoPostEv+0xb4>)
 800f30a:	fba3 1302 	umull	r1, r3, r3, r2
 800f30e:	095e      	lsrs	r6, r3, #5
 800f310:	4633      	mov	r3, r6
 800f312:	011b      	lsls	r3, r3, #4
 800f314:	1b9b      	subs	r3, r3, r6
 800f316:	009b      	lsls	r3, r3, #2
 800f318:	1ad6      	subs	r6, r2, r3
 800f31a:	f7f9 fdfd 	bl	8008f18 <HAL_GetTick>
 800f31e:	4602      	mov	r2, r0
 800f320:	4b19      	ldr	r3, [pc, #100]	; (800f388 <_ZN10UartModule6DoPostEv+0xb8>)
 800f322:	fba3 2302 	umull	r2, r3, r3, r2
 800f326:	099a      	lsrs	r2, r3, #6
 800f328:	4b16      	ldr	r3, [pc, #88]	; (800f384 <_ZN10UartModule6DoPostEv+0xb4>)
 800f32a:	fba3 1302 	umull	r1, r3, r3, r2
 800f32e:	095c      	lsrs	r4, r3, #5
 800f330:	4623      	mov	r3, r4
 800f332:	011b      	lsls	r3, r3, #4
 800f334:	1b1b      	subs	r3, r3, r4
 800f336:	009b      	lsls	r3, r3, #2
 800f338:	1ad4      	subs	r4, r2, r3
 800f33a:	f7f9 fded 	bl	8008f18 <HAL_GetTick>
 800f33e:	4603      	mov	r3, r0
 800f340:	4a11      	ldr	r2, [pc, #68]	; (800f388 <_ZN10UartModule6DoPostEv+0xb8>)
 800f342:	fba2 1203 	umull	r1, r2, r2, r3
 800f346:	0995      	lsrs	r5, r2, #6
 800f348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f34c:	fb02 f205 	mul.w	r2, r2, r5
 800f350:	1a9d      	subs	r5, r3, r2
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	3308      	adds	r3, #8
 800f356:	4618      	mov	r0, r3
 800f358:	f000 facb 	bl	800f8f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800f35c:	4603      	mov	r3, r0
 800f35e:	9302      	str	r3, [sp, #8]
 800f360:	9501      	str	r5, [sp, #4]
 800f362:	9400      	str	r4, [sp, #0]
 800f364:	4633      	mov	r3, r6
 800f366:	4642      	mov	r2, r8
 800f368:	4908      	ldr	r1, [pc, #32]	; (800f38c <_ZN10UartModule6DoPostEv+0xbc>)
 800f36a:	4648      	mov	r0, r9
 800f36c:	f001 fbf2 	bl	8010b54 <_ZN6Logger3LogEPKcz>
    return true;
 800f370:	2301      	movs	r3, #1
}
 800f372:	4618      	mov	r0, r3
 800f374:	370c      	adds	r7, #12
 800f376:	46bd      	mov	sp, r7
 800f378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f37c:	95217cb1 	.word	0x95217cb1
 800f380:	45e7b273 	.word	0x45e7b273
 800f384:	88888889 	.word	0x88888889
 800f388:	10624dd3 	.word	0x10624dd3
 800f38c:	08016ca0 	.word	0x08016ca0

0800f390 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800f390:	b480      	push	{r7}
 800f392:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800f394:	2301      	movs	r3, #1
 800f396:	4618      	mov	r0, r3
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr

0800f3a0 <_ZN8CEP_UART5FrameaSEOS0_>:
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	6039      	str	r1, [r7, #0]
 800f3aa:	683a      	ldr	r2, [r7, #0]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	4611      	mov	r1, r2
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f000 fd15 	bl	800fde0 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	68da      	ldr	r2, [r3, #12]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	60da      	str	r2, [r3, #12]
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	691a      	ldr	r2, [r3, #16]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	611a      	str	r2, [r3, #16]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3708      	adds	r7, #8
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <_ZN10UartModule3RunEv>:

void UartModule::Run( )
{
 800f3d0:	b590      	push	{r4, r7, lr}
 800f3d2:	b097      	sub	sp, #92	; 0x5c
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
    if (m_hasNewData == true)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	f000 812e 	beq.w	800f640 <_ZN10UartModule3RunEv+0x270>
    {
        m_hasNewData = false;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        // If we want a sof:
        if ((m_sof.empty( ) == false) && (m_hasReceivedSof == false))
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	3360      	adds	r3, #96	; 0x60
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f000 fc41 	bl	800fc78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d106      	bne.n	800f40a <_ZN10UartModule3RunEv+0x3a>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f402:	2b00      	cmp	r3, #0
 800f404:	d101      	bne.n	800f40a <_ZN10UartModule3RunEv+0x3a>
 800f406:	2301      	movs	r3, #1
 800f408:	e000      	b.n	800f40c <_ZN10UartModule3RunEv+0x3c>
 800f40a:	2300      	movs	r3, #0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d07b      	beq.n	800f508 <_ZN10UartModule3RunEv+0x138>
        {
            // Check if it is contained in the buffer.
            // #TODO Ideally we'd just want to do that when we don't know if we've received it yet.
            size_t pos = cep::FindStringInVector(m_sof, m_rxBuf);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	3334      	adds	r3, #52	; 0x34
 800f41a:	4619      	mov	r1, r3
 800f41c:	4610      	mov	r0, r2
 800f41e:	f7ff f988 	bl	800e732 <_ZN3cep18FindStringInVectorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE>
 800f422:	6538      	str	r0, [r7, #80]	; 0x50
            if (pos == std::string::npos)
 800f424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f42a:	d12b      	bne.n	800f484 <_ZN10UartModule3RunEv+0xb4>
                /* #TODO There's a bug where if the first character matches the SoF
                 * and that m_sof.size() * 2 == m_expectedLen, the packet will be valid no matter
                 * what. Example: m_sof = "qwer" m_eof = "" m_expectedLen = 8 receiving "qasdfghj",
                 * "q       ", "qweasdfg", etc will trigger the end of frame reception.
                 */
                if ((m_rxBuf[0] != m_sof[0]) || (m_rxBuf.size( ) > (m_sof.size( ) * 2)))
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	3334      	adds	r3, #52	; 0x34
 800f430:	2100      	movs	r1, #0
 800f432:	4618      	mov	r0, r3
 800f434:	f000 fc31 	bl	800fc9a <_ZNSt6vectorIhSaIhEEixEj>
 800f438:	4603      	mov	r3, r0
 800f43a:	781c      	ldrb	r4, [r3, #0]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	3360      	adds	r3, #96	; 0x60
 800f440:	2100      	movs	r1, #0
 800f442:	4618      	mov	r0, r3
 800f444:	f000 fc38 	bl	800fcb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800f448:	4603      	mov	r3, r0
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	429c      	cmp	r4, r3
 800f44e:	d10e      	bne.n	800f46e <_ZN10UartModule3RunEv+0x9e>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	3334      	adds	r3, #52	; 0x34
 800f454:	4618      	mov	r0, r3
 800f456:	f7ff f9cc 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800f45a:	4604      	mov	r4, r0
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	3360      	adds	r3, #96	; 0x60
 800f460:	4618      	mov	r0, r3
 800f462:	f7fd fe17 	bl	800d094 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800f466:	4603      	mov	r3, r0
 800f468:	005b      	lsls	r3, r3, #1
 800f46a:	429c      	cmp	r4, r3
 800f46c:	d901      	bls.n	800f472 <_ZN10UartModule3RunEv+0xa2>
 800f46e:	2301      	movs	r3, #1
 800f470:	e000      	b.n	800f474 <_ZN10UartModule3RunEv+0xa4>
 800f472:	2300      	movs	r3, #0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d047      	beq.n	800f508 <_ZN10UartModule3RunEv+0x138>
                {
                    // First char is not same as SoF, or we have more data than size of SoF + some
                    // margin.
                    m_rxBuf.clear( );
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	3334      	adds	r3, #52	; 0x34
 800f47c:	4618      	mov	r0, r3
 800f47e:	f000 fc2a 	bl	800fcd6 <_ZNSt6vectorIhSaIhEE5clearEv>
 800f482:	e041      	b.n	800f508 <_ZN10UartModule3RunEv+0x138>
                }
            }
            else
            {
                // SoF is start of packet, just keep starting from there.
                m_rxBuf.erase(m_rxBuf.begin( ), m_rxBuf.begin( ) + pos + m_sof.size( ));
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	3334      	adds	r3, #52	; 0x34
 800f48e:	4618      	mov	r0, r3
 800f490:	f7ff fc08 	bl	800eca4 <_ZNSt6vectorIhSaIhEE5beginEv>
 800f494:	4603      	mov	r3, r0
 800f496:	613b      	str	r3, [r7, #16]
 800f498:	f107 0210 	add.w	r2, r7, #16
 800f49c:	f107 030c 	add.w	r3, r7, #12
 800f4a0:	4611      	mov	r1, r2
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f000 fc3c 	bl	800fd20 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1IPhEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	3334      	adds	r3, #52	; 0x34
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7ff fbf9 	bl	800eca4 <_ZNSt6vectorIhSaIhEE5beginEv>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	623b      	str	r3, [r7, #32]
 800f4b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f4b8:	f107 0320 	add.w	r3, r7, #32
 800f4bc:	4611      	mov	r1, r2
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f000 fc17 	bl	800fcf2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	61fb      	str	r3, [r7, #28]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	3360      	adds	r3, #96	; 0x60
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7fd fde1 	bl	800d094 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	f107 031c 	add.w	r3, r7, #28
 800f4da:	4611      	mov	r1, r2
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f000 fc08 	bl	800fcf2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	61bb      	str	r3, [r7, #24]
 800f4e6:	f107 0218 	add.w	r2, r7, #24
 800f4ea:	f107 0314 	add.w	r3, r7, #20
 800f4ee:	4611      	mov	r1, r2
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f000 fc15 	bl	800fd20 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1IPhEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800f4f6:	697a      	ldr	r2, [r7, #20]
 800f4f8:	68f9      	ldr	r1, [r7, #12]
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	f000 fc21 	bl	800fd42 <_ZNSt6vectorIhSaIhEE5eraseEN9__gnu_cxx17__normal_iteratorIPKhS1_EES6_>
                m_hasReceivedSof = true;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2201      	movs	r2, #1
 800f504:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            }
        }

        // If we want a EoF:
        bool rxComplete = false;
 800f508:	2300      	movs	r3, #0
 800f50a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if (m_eof.empty( ) == false)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	337c      	adds	r3, #124	; 0x7c
 800f512:	4618      	mov	r0, r3
 800f514:	f000 fbb0 	bl	800fc78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800f518:	4603      	mov	r3, r0
 800f51a:	f083 0301 	eor.w	r3, r3, #1
 800f51e:	b2db      	uxtb	r3, r3
 800f520:	2b00      	cmp	r3, #0
 800f522:	d040      	beq.n	800f5a6 <_ZN10UartModule3RunEv+0x1d6>
        {
            // Search for it in the buffer.
            size_t pos = cep::FindStringInVector(m_eof, m_rxBuf);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	3334      	adds	r3, #52	; 0x34
 800f52e:	4619      	mov	r1, r3
 800f530:	4610      	mov	r0, r2
 800f532:	f7ff f8fe 	bl	800e732 <_ZN3cep18FindStringInVectorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEE>
 800f536:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (pos != std::string::npos)
 800f538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f53e:	d044      	beq.n	800f5ca <_ZN10UartModule3RunEv+0x1fa>
            {
                // We found it, packet complete.
                m_rxBuf.erase(m_rxBuf.begin( ) + pos, m_rxBuf.end( ));
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	3334      	adds	r3, #52	; 0x34
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7ff fbaa 	bl	800eca4 <_ZNSt6vectorIhSaIhEE5beginEv>
 800f550:	4603      	mov	r3, r0
 800f552:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f55a:	4611      	mov	r1, r2
 800f55c:	4618      	mov	r0, r3
 800f55e:	f000 fbc8 	bl	800fcf2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 800f562:	4603      	mov	r3, r0
 800f564:	62bb      	str	r3, [r7, #40]	; 0x28
 800f566:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f56a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f56e:	4611      	mov	r1, r2
 800f570:	4618      	mov	r0, r3
 800f572:	f000 fbd5 	bl	800fd20 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1IPhEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	3334      	adds	r3, #52	; 0x34
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7ff fad9 	bl	800eb32 <_ZNSt6vectorIhSaIhEE3endEv>
 800f580:	4603      	mov	r3, r0
 800f582:	637b      	str	r3, [r7, #52]	; 0x34
 800f584:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f58c:	4611      	mov	r1, r2
 800f58e:	4618      	mov	r0, r3
 800f590:	f000 fbc6 	bl	800fd20 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1IPhEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800f594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f598:	4620      	mov	r0, r4
 800f59a:	f000 fbd2 	bl	800fd42 <_ZNSt6vectorIhSaIhEE5eraseEN9__gnu_cxx17__normal_iteratorIPKhS1_EES6_>
                rxComplete = true;
 800f59e:	2301      	movs	r3, #1
 800f5a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800f5a4:	e011      	b.n	800f5ca <_ZN10UartModule3RunEv+0x1fa>
            }
        }
        // #TODO Also find a way to add timeout functionality without creating a mess and
        // interdependencies.
        else if (m_rxBuf.size( ) >= m_expectedLen)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	3334      	adds	r3, #52	; 0x34
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7ff f921 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	bf2c      	ite	cs
 800f5ba:	2301      	movcs	r3, #1
 800f5bc:	2300      	movcc	r3, #0
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d002      	beq.n	800f5ca <_ZN10UartModule3RunEv+0x1fa>
        {
            rxComplete = true;
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        }

        if (rxComplete == true)
 800f5ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d036      	beq.n	800f640 <_ZN10UartModule3RunEv+0x270>
        {
            //            m_latestFrames.push_back(UART::Frame(m_rxBuf, HAL_GetTick( )));
            m_latestFrames   = std::move(CEP_UART::Frame(m_rxBuf, HAL_GetTick( )));
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800f5d8:	f7f9 fc9e 	bl	8008f18 <HAL_GetTick>
 800f5dc:	4602      	mov	r2, r0
 800f5de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f5e2:	4621      	mov	r1, r4
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7ff fc81 	bl	800eeec <_ZN8CEP_UART5FrameC1ERKSt6vectorIhSaIhEEm>
 800f5ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f000 fbe0 	bl	800fdb4 <_ZSt4moveIN8CEP_UART5FrameEEONSt16remove_referenceIT_E4typeEOS3_>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	3348      	adds	r3, #72	; 0x48
 800f5fa:	4611      	mov	r1, r2
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7ff fecf 	bl	800f3a0 <_ZN8CEP_UART5FrameaSEOS0_>
 800f602:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f606:	4618      	mov	r0, r3
 800f608:	f7ff fce1 	bl	800efce <_ZN8CEP_UART5FrameD1Ev>
            m_framePending   = true;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2201      	movs	r2, #1
 800f610:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            m_hasReceivedSof = false;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2200      	movs	r2, #0
 800f618:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            // Clear reception buffer and call the callback.
            m_rxBuf.clear( );
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	3334      	adds	r3, #52	; 0x34
 800f620:	4618      	mov	r0, r3
 800f622:	f000 fb58 	bl	800fcd6 <_ZNSt6vectorIhSaIhEE5clearEv>
            if (m_cb)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	3394      	adds	r3, #148	; 0x94
 800f62a:	4618      	mov	r0, r3
 800f62c:	f000 fbed 	bl	800fe0a <_ZNKSt8functionIFvvEEcvbEv>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	d004      	beq.n	800f640 <_ZN10UartModule3RunEv+0x270>
            {
                m_cb( );
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	3394      	adds	r3, #148	; 0x94
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 fbf5 	bl	800fe2a <_ZNKSt8functionIFvvEEclEv>
            }
        }
    }
}
 800f640:	bf00      	nop
 800f642:	375c      	adds	r7, #92	; 0x5c
 800f644:	46bd      	mov	sp, r7
 800f646:	bd90      	pop	{r4, r7, pc}

0800f648 <_ZN10UartModule8TransmitEPKcj>:
        return;
    }
}
#    else
void UartModule::Transmit(const char* msg, size_t len)
{
 800f648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f64c:	b089      	sub	sp, #36	; 0x24
 800f64e:	af04      	add	r7, sp, #16
 800f650:	60f8      	str	r0, [r7, #12]
 800f652:	60b9      	str	r1, [r7, #8]
 800f654:	607a      	str	r2, [r7, #4]
    CEP_ASSERT(msg != nullptr, "msg is NULL in UartModule::Transmit");
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d148      	bne.n	800f6ee <_ZN10UartModule8TransmitEPKcj+0xa6>
 800f65c:	f7fc fc5a 	bl	800bf14 <_ZN6Logger3GetEv>
 800f660:	4603      	mov	r3, r0
 800f662:	2b00      	cmp	r3, #0
 800f664:	d041      	beq.n	800f6ea <_ZN10UartModule8TransmitEPKcj+0xa2>
 800f666:	f7fc fc55 	bl	800bf14 <_ZN6Logger3GetEv>
 800f66a:	4680      	mov	r8, r0
 800f66c:	f7f9 fc54 	bl	8008f18 <HAL_GetTick>
 800f670:	4602      	mov	r2, r0
 800f672:	4b6a      	ldr	r3, [pc, #424]	; (800f81c <_ZN10UartModule8TransmitEPKcj+0x1d4>)
 800f674:	fba3 2302 	umull	r2, r3, r3, r2
 800f678:	0d5e      	lsrs	r6, r3, #21
 800f67a:	f7f9 fc4d 	bl	8008f18 <HAL_GetTick>
 800f67e:	4602      	mov	r2, r0
 800f680:	4b67      	ldr	r3, [pc, #412]	; (800f820 <_ZN10UartModule8TransmitEPKcj+0x1d8>)
 800f682:	fba3 2302 	umull	r2, r3, r3, r2
 800f686:	0b9a      	lsrs	r2, r3, #14
 800f688:	4b66      	ldr	r3, [pc, #408]	; (800f824 <_ZN10UartModule8TransmitEPKcj+0x1dc>)
 800f68a:	fba3 1302 	umull	r1, r3, r3, r2
 800f68e:	095d      	lsrs	r5, r3, #5
 800f690:	462b      	mov	r3, r5
 800f692:	011b      	lsls	r3, r3, #4
 800f694:	1b5b      	subs	r3, r3, r5
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	1ad5      	subs	r5, r2, r3
 800f69a:	f7f9 fc3d 	bl	8008f18 <HAL_GetTick>
 800f69e:	4602      	mov	r2, r0
 800f6a0:	4b61      	ldr	r3, [pc, #388]	; (800f828 <_ZN10UartModule8TransmitEPKcj+0x1e0>)
 800f6a2:	fba3 2302 	umull	r2, r3, r3, r2
 800f6a6:	099a      	lsrs	r2, r3, #6
 800f6a8:	4b5e      	ldr	r3, [pc, #376]	; (800f824 <_ZN10UartModule8TransmitEPKcj+0x1dc>)
 800f6aa:	fba3 1302 	umull	r1, r3, r3, r2
 800f6ae:	095c      	lsrs	r4, r3, #5
 800f6b0:	4623      	mov	r3, r4
 800f6b2:	011b      	lsls	r3, r3, #4
 800f6b4:	1b1b      	subs	r3, r3, r4
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	1ad4      	subs	r4, r2, r3
 800f6ba:	f7f9 fc2d 	bl	8008f18 <HAL_GetTick>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	4b59      	ldr	r3, [pc, #356]	; (800f828 <_ZN10UartModule8TransmitEPKcj+0x1e0>)
 800f6c2:	fba3 1302 	umull	r1, r3, r3, r2
 800f6c6:	099b      	lsrs	r3, r3, #6
 800f6c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f6cc:	fb01 f303 	mul.w	r3, r1, r3
 800f6d0:	1ad3      	subs	r3, r2, r3
 800f6d2:	4a56      	ldr	r2, [pc, #344]	; (800f82c <_ZN10UartModule8TransmitEPKcj+0x1e4>)
 800f6d4:	9203      	str	r2, [sp, #12]
 800f6d6:	229d      	movs	r2, #157	; 0x9d
 800f6d8:	9202      	str	r2, [sp, #8]
 800f6da:	9301      	str	r3, [sp, #4]
 800f6dc:	9400      	str	r4, [sp, #0]
 800f6de:	462b      	mov	r3, r5
 800f6e0:	4632      	mov	r2, r6
 800f6e2:	4953      	ldr	r1, [pc, #332]	; (800f830 <_ZN10UartModule8TransmitEPKcj+0x1e8>)
 800f6e4:	4640      	mov	r0, r8
 800f6e6:	f001 fa35 	bl	8010b54 <_ZN6Logger3LogEPKcz>
 800f6ea:	f7fc fc0f 	bl	800bf0c <_ZN3cep11Application12AssertFailedEv>

    if (WaitUntilTransmitionComplete( ) == false)
 800f6ee:	68f8      	ldr	r0, [r7, #12]
 800f6f0:	f000 f8d8 	bl	800f8a4 <_ZN10UartModule28WaitUntilTransmitionCompleteEv>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	f083 0301 	eor.w	r3, r3, #1
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	f040 8085 	bne.w	800f80c <_ZN10UartModule8TransmitEPKcj+0x1c4>
    {
        // Timed out.
        return;
    }

    if (len > m_txBuf.size( ))
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	3328      	adds	r3, #40	; 0x28
 800f706:	4618      	mov	r0, r3
 800f708:	f7ff f873 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800f70c:	4602      	mov	r2, r0
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	4293      	cmp	r3, r2
 800f712:	bf8c      	ite	hi
 800f714:	2301      	movhi	r3, #1
 800f716:	2300      	movls	r3, #0
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d005      	beq.n	800f72a <_ZN10UartModule8TransmitEPKcj+0xe2>
    {
        m_txBuf.resize(len);
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	3328      	adds	r3, #40	; 0x28
 800f722:	6879      	ldr	r1, [r7, #4]
 800f724:	4618      	mov	r0, r3
 800f726:	f000 fb96 	bl	800fe56 <_ZNSt6vectorIhSaIhEE6resizeEj>
    }

    // Copy the message into the transmission buffer.
    //    m_txBuf.resize(len);
    memcpy((void*)m_txBuf.data( ), (void*)msg, len);
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	3328      	adds	r3, #40	; 0x28
 800f72e:	4618      	mov	r0, r3
 800f730:	f000 fbc5 	bl	800febe <_ZNSt6vectorIhSaIhEE4dataEv>
 800f734:	4603      	mov	r3, r0
 800f736:	687a      	ldr	r2, [r7, #4]
 800f738:	68b9      	ldr	r1, [r7, #8]
 800f73a:	4618      	mov	r0, r3
 800f73c:	f003 fbb3 	bl	8012ea6 <memcpy>

    //    m_txBytesRemaining = m_txBuf.size( );
    m_txBytesRemaining = len;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	687a      	ldr	r2, [r7, #4]
 800f744:	625a      	str	r2, [r3, #36]	; 0x24

    // Send the message.
    if (HAL_UART_Transmit_IT(m_handle, m_txBuf.data( ), (uint16_t)len) != HAL_OK)
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	685c      	ldr	r4, [r3, #4]
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	3328      	adds	r3, #40	; 0x28
 800f74e:	4618      	mov	r0, r3
 800f750:	f000 fbb5 	bl	800febe <_ZNSt6vectorIhSaIhEE4dataEv>
 800f754:	4601      	mov	r1, r0
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	b29b      	uxth	r3, r3
 800f75a:	461a      	mov	r2, r3
 800f75c:	4620      	mov	r0, r4
 800f75e:	f7fb fd91 	bl	800b284 <HAL_UART_Transmit_IT>
 800f762:	4603      	mov	r3, r0
 800f764:	2b00      	cmp	r3, #0
 800f766:	bf14      	ite	ne
 800f768:	2301      	movne	r3, #1
 800f76a:	2300      	moveq	r3, #0
 800f76c:	b2db      	uxtb	r3, r3
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d04f      	beq.n	800f812 <_ZN10UartModule8TransmitEPKcj+0x1ca>
    {
        LOG_ERROR("[%s]: In Transmit: Unable to transmit message", m_label.c_str( ));
 800f772:	f7fc fbcf 	bl	800bf14 <_ZN6Logger3GetEv>
 800f776:	4603      	mov	r3, r0
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d049      	beq.n	800f810 <_ZN10UartModule8TransmitEPKcj+0x1c8>
 800f77c:	f7fc fbca 	bl	800bf14 <_ZN6Logger3GetEv>
 800f780:	4681      	mov	r9, r0
 800f782:	f7f9 fbc9 	bl	8008f18 <HAL_GetTick>
 800f786:	4602      	mov	r2, r0
 800f788:	4b24      	ldr	r3, [pc, #144]	; (800f81c <_ZN10UartModule8TransmitEPKcj+0x1d4>)
 800f78a:	fba3 2302 	umull	r2, r3, r3, r2
 800f78e:	ea4f 5853 	mov.w	r8, r3, lsr #21
 800f792:	f7f9 fbc1 	bl	8008f18 <HAL_GetTick>
 800f796:	4602      	mov	r2, r0
 800f798:	4b21      	ldr	r3, [pc, #132]	; (800f820 <_ZN10UartModule8TransmitEPKcj+0x1d8>)
 800f79a:	fba3 2302 	umull	r2, r3, r3, r2
 800f79e:	0b9a      	lsrs	r2, r3, #14
 800f7a0:	4b20      	ldr	r3, [pc, #128]	; (800f824 <_ZN10UartModule8TransmitEPKcj+0x1dc>)
 800f7a2:	fba3 1302 	umull	r1, r3, r3, r2
 800f7a6:	095e      	lsrs	r6, r3, #5
 800f7a8:	4633      	mov	r3, r6
 800f7aa:	011b      	lsls	r3, r3, #4
 800f7ac:	1b9b      	subs	r3, r3, r6
 800f7ae:	009b      	lsls	r3, r3, #2
 800f7b0:	1ad6      	subs	r6, r2, r3
 800f7b2:	f7f9 fbb1 	bl	8008f18 <HAL_GetTick>
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	4b1b      	ldr	r3, [pc, #108]	; (800f828 <_ZN10UartModule8TransmitEPKcj+0x1e0>)
 800f7ba:	fba3 2302 	umull	r2, r3, r3, r2
 800f7be:	099a      	lsrs	r2, r3, #6
 800f7c0:	4b18      	ldr	r3, [pc, #96]	; (800f824 <_ZN10UartModule8TransmitEPKcj+0x1dc>)
 800f7c2:	fba3 1302 	umull	r1, r3, r3, r2
 800f7c6:	095c      	lsrs	r4, r3, #5
 800f7c8:	4623      	mov	r3, r4
 800f7ca:	011b      	lsls	r3, r3, #4
 800f7cc:	1b1b      	subs	r3, r3, r4
 800f7ce:	009b      	lsls	r3, r3, #2
 800f7d0:	1ad4      	subs	r4, r2, r3
 800f7d2:	f7f9 fba1 	bl	8008f18 <HAL_GetTick>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	4a13      	ldr	r2, [pc, #76]	; (800f828 <_ZN10UartModule8TransmitEPKcj+0x1e0>)
 800f7da:	fba2 1203 	umull	r1, r2, r2, r3
 800f7de:	0995      	lsrs	r5, r2, #6
 800f7e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f7e4:	fb02 f205 	mul.w	r2, r2, r5
 800f7e8:	1a9d      	subs	r5, r3, r2
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	3308      	adds	r3, #8
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f000 f87f 	bl	800f8f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	9302      	str	r3, [sp, #8]
 800f7f8:	9501      	str	r5, [sp, #4]
 800f7fa:	9400      	str	r4, [sp, #0]
 800f7fc:	4633      	mov	r3, r6
 800f7fe:	4642      	mov	r2, r8
 800f800:	490c      	ldr	r1, [pc, #48]	; (800f834 <_ZN10UartModule8TransmitEPKcj+0x1ec>)
 800f802:	4648      	mov	r0, r9
 800f804:	f001 f9a6 	bl	8010b54 <_ZN6Logger3LogEPKcz>
        return;
 800f808:	bf00      	nop
 800f80a:	e001      	b.n	800f810 <_ZN10UartModule8TransmitEPKcj+0x1c8>
        return;
 800f80c:	bf00      	nop
 800f80e:	e000      	b.n	800f812 <_ZN10UartModule8TransmitEPKcj+0x1ca>
        return;
 800f810:	bf00      	nop
    }
}
 800f812:	3714      	adds	r7, #20
 800f814:	46bd      	mov	sp, r7
 800f816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f81a:	bf00      	nop
 800f81c:	95217cb1 	.word	0x95217cb1
 800f820:	45e7b273 	.word	0x45e7b273
 800f824:	88888889 	.word	0x88888889
 800f828:	10624dd3 	.word	0x10624dd3
 800f82c:	08016c44 	.word	0x08016c44
 800f830:	08016cd4 	.word	0x08016cd4
 800f834:	08016d34 	.word	0x08016d34

0800f838 <_ZN10UartModule8TransmitERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
#    endif

void UartModule::Transmit(const std::string& msg) { Transmit(msg.c_str( ), msg.size( )); }
 800f838:	b590      	push	{r4, r7, lr}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	6039      	str	r1, [r7, #0]
 800f842:	6838      	ldr	r0, [r7, #0]
 800f844:	f000 f855 	bl	800f8f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800f848:	4604      	mov	r4, r0
 800f84a:	6838      	ldr	r0, [r7, #0]
 800f84c:	f7fd fc22 	bl	800d094 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800f850:	4603      	mov	r3, r0
 800f852:	461a      	mov	r2, r3
 800f854:	4621      	mov	r1, r4
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f7ff fef6 	bl	800f648 <_ZN10UartModule8TransmitEPKcj>
 800f85c:	bf00      	nop
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	bd90      	pop	{r4, r7, pc}

0800f864 <_ZN10UartModule9VTransmitEPKcz>:
{
    Transmit((const char*)msg.data( ), msg.size( ));
}

void UartModule::VTransmit(const char* fmt, ...)
{
 800f864:	b40e      	push	{r1, r2, r3}
 800f866:	b580      	push	{r7, lr}
 800f868:	b085      	sub	sp, #20
 800f86a:	af00      	add	r7, sp, #0
 800f86c:	6078      	str	r0, [r7, #4]
    static char buff[256];

    va_list args;
    va_start(args, fmt);
 800f86e:	f107 0320 	add.w	r3, r7, #32
 800f872:	60bb      	str	r3, [r7, #8]
    size_t len = vsnprintf(buff, sizeof(buff), fmt, args);
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	69fa      	ldr	r2, [r7, #28]
 800f878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f87c:	4808      	ldr	r0, [pc, #32]	; (800f8a0 <_ZN10UartModule9VTransmitEPKcz+0x3c>)
 800f87e:	f005 f88b 	bl	8014998 <vsnprintf>
 800f882:	4603      	mov	r3, r0
 800f884:	60fb      	str	r3, [r7, #12]
    va_end(args);

    Transmit(buff, len);
 800f886:	68fa      	ldr	r2, [r7, #12]
 800f888:	4905      	ldr	r1, [pc, #20]	; (800f8a0 <_ZN10UartModule9VTransmitEPKcz+0x3c>)
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f7ff fedc 	bl	800f648 <_ZN10UartModule8TransmitEPKcj>
}
 800f890:	bf00      	nop
 800f892:	3714      	adds	r7, #20
 800f894:	46bd      	mov	sp, r7
 800f896:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f89a:	b003      	add	sp, #12
 800f89c:	4770      	bx	lr
 800f89e:	bf00      	nop
 800f8a0:	200009e4 	.word	0x200009e4

0800f8a4 <_ZN10UartModule28WaitUntilTransmitionCompleteEv>:

/*************************************************************************************************/
/* Private method definitions                                                                    */
/*************************************************************************************************/
bool UartModule::WaitUntilTransmitionComplete( )
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
    uint32_t timeoutTime = HAL_GetTick( ) + UartModule::TIMEOUT;
 800f8ac:	f7f9 fb34 	bl	8008f18 <HAL_GetTick>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	3364      	adds	r3, #100	; 0x64
 800f8b4:	60fb      	str	r3, [r7, #12]

    while (HAL_GetTick( ) < timeoutTime)
 800f8b6:	f7f9 fb2f 	bl	8008f18 <HAL_GetTick>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	bf8c      	ite	hi
 800f8c2:	2301      	movhi	r3, #1
 800f8c4:	2300      	movls	r3, #0
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d00d      	beq.n	800f8e8 <_ZN10UartModule28WaitUntilTransmitionCompleteEv+0x44>
    {
        if (m_handle->gState == HAL_UART_STATE_READY)
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	2b20      	cmp	r3, #32
 800f8d8:	bf0c      	ite	eq
 800f8da:	2301      	moveq	r3, #1
 800f8dc:	2300      	movne	r3, #0
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d0e8      	beq.n	800f8b6 <_ZN10UartModule28WaitUntilTransmitionCompleteEv+0x12>
        {
            return true;
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	e000      	b.n	800f8ea <_ZN10UartModule28WaitUntilTransmitionCompleteEv+0x46>
        }
    }

    return false;
 800f8e8:	2300      	movs	r3, #0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3710      	adds	r7, #16
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}

0800f8f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
      c_str() const _GLIBCXX_NOEXCEPT
 800f8f2:	b580      	push	{r7, lr}
 800f8f4:	b082      	sub	sp, #8
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	6078      	str	r0, [r7, #4]
      { return _M_data(); }
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f7fd fb78 	bl	800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800f900:	4603      	mov	r3, r0
 800f902:	4618      	mov	r0, r3
 800f904:	3708      	adds	r7, #8
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}

0800f90a <_ZNSt6vectorIhSaIhEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800f90a:	b5b0      	push	{r4, r5, r7, lr}
 800f90c:	b082      	sub	sp, #8
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681c      	ldr	r4, [r3, #0]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7ff f814 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800f922:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800f924:	461a      	mov	r2, r3
 800f926:	4629      	mov	r1, r5
 800f928:	4620      	mov	r0, r4
 800f92a:	f7ff f819 	bl	800e960 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4618      	mov	r0, r3
 800f932:	f000 faf1 	bl	800ff18 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4618      	mov	r0, r3
 800f93a:	3708      	adds	r7, #8
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bdb0      	pop	{r4, r5, r7, pc}

0800f940 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 800f940:	b480      	push	{r7}
 800f942:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800f944:	2300      	movs	r3, #0
 800f946:	4618      	mov	r0, r3
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <_ZNSt6vectorIhSaIhEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 800f950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f952:	b085      	sub	sp, #20
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 800f95a:	683a      	ldr	r2, [r7, #0]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	429a      	cmp	r2, r3
 800f960:	f000 80e2 	beq.w	800fb28 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1d8>
	{
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800f964:	f7ff ffec 	bl	800f940 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE27_S_propagate_on_copy_assignEv>
 800f968:	4603      	mov	r3, r0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d043      	beq.n	800f9f6 <_ZNSt6vectorIhSaIhEEaSERKS1_+0xa6>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 800f96e:	f7ff fd0f 	bl	800f390 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE15_S_always_equalEv>
 800f972:	4603      	mov	r3, r0
 800f974:	f083 0301 	eor.w	r3, r3, #1
 800f978:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d012      	beq.n	800f9a4 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4618      	mov	r0, r3
 800f982:	f7fe ffe2 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800f986:	4604      	mov	r4, r0
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7ff f883 	bl	800ea96 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800f990:	4603      	mov	r3, r0
 800f992:	4619      	mov	r1, r3
 800f994:	4620      	mov	r0, r4
 800f996:	f000 fad8 	bl	800ff4a <_ZStneIhEbRKSaIT_ES3_>
 800f99a:	4603      	mov	r3, r0
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d001      	beq.n	800f9a4 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	e000      	b.n	800f9a6 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x56>
 800f9a4:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d017      	beq.n	800f9da <_ZNSt6vectorIhSaIhEEaSERKS1_+0x8a>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f000 f993 	bl	800fcd6 <_ZNSt6vectorIhSaIhEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	689b      	ldr	r3, [r3, #8]
				- this->_M_impl._M_start);
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	1ad3      	subs	r3, r2, r3
		  _M_deallocate(this->_M_impl._M_start,
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	f7ff f826 	bl	800ea14 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		  this->_M_impl._M_start = nullptr;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fe ffb4 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7ff f855 	bl	800ea96 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f000 fab6 	bl	800ff62 <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
 800f9f6:	6838      	ldr	r0, [r7, #0]
 800f9f8:	f7fe fefb 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800f9fc:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f7fe ffcd 	bl	800e99e <_ZNKSt6vectorIhSaIhEE8capacityEv>
 800fa04:	4602      	mov	r2, r0
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	bf8c      	ite	hi
 800fa0c:	2301      	movhi	r3, #1
 800fa0e:	2300      	movls	r3, #0
 800fa10:	b2db      	uxtb	r3, r3
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d031      	beq.n	800fa7a <_ZNSt6vectorIhSaIhEEaSERKS1_+0x12a>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800fa16:	6838      	ldr	r0, [r7, #0]
 800fa18:	f000 fab1 	bl	800ff7e <_ZNKSt6vectorIhSaIhEE5beginEv>
 800fa1c:	4604      	mov	r4, r0
 800fa1e:	6838      	ldr	r0, [r7, #0]
 800fa20:	f000 fac1 	bl	800ffa6 <_ZNKSt6vectorIhSaIhEE3endEv>
 800fa24:	4603      	mov	r3, r0
 800fa26:	4622      	mov	r2, r4
 800fa28:	68f9      	ldr	r1, [r7, #12]
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f000 facf 	bl	800ffce <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>
 800fa30:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681c      	ldr	r4, [r3, #0]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7fe ff84 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800fa42:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800fa44:	461a      	mov	r2, r3
 800fa46:	4629      	mov	r1, r5
 800fa48:	4620      	mov	r0, r4
 800fa4a:	f7fe ff89 	bl	800e960 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 800fa58:	461a      	mov	r2, r3
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 800fa60:	461a      	mov	r2, r3
 800fa62:	f7fe ffd7 	bl	800ea14 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __tmp;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	68ba      	ldr	r2, [r7, #8]
 800fa6a:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681a      	ldr	r2, [r3, #0]
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	441a      	add	r2, r3
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	609a      	str	r2, [r3, #8]
 800fa78:	e050      	b.n	800fb1c <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1cc>
	    }
	  else if (size() >= __xlen)
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f7fe feb9 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800fa80:	4602      	mov	r2, r0
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	4293      	cmp	r3, r2
 800fa86:	bf94      	ite	ls
 800fa88:	2301      	movls	r3, #1
 800fa8a:	2300      	movhi	r3, #0
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d020      	beq.n	800fad4 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x184>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800fa92:	6838      	ldr	r0, [r7, #0]
 800fa94:	f000 fa73 	bl	800ff7e <_ZNKSt6vectorIhSaIhEE5beginEv>
 800fa98:	4604      	mov	r4, r0
 800fa9a:	6838      	ldr	r0, [r7, #0]
 800fa9c:	f000 fa83 	bl	800ffa6 <_ZNKSt6vectorIhSaIhEE3endEv>
 800faa0:	4605      	mov	r5, r0
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f7ff f8fe 	bl	800eca4 <_ZNSt6vectorIhSaIhEE5beginEv>
 800faa8:	4603      	mov	r3, r0
 800faaa:	461a      	mov	r2, r3
 800faac:	4629      	mov	r1, r5
 800faae:	4620      	mov	r0, r4
 800fab0:	f000 faa9 	bl	8010006 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>
 800fab4:	4604      	mov	r4, r0
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f7ff f83b 	bl	800eb32 <_ZNSt6vectorIhSaIhEE3endEv>
 800fabc:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7fe ff42 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800fac6:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800fac8:	461a      	mov	r2, r3
 800faca:	4629      	mov	r1, r5
 800facc:	4620      	mov	r0, r4
 800face:	f000 fab2 	bl	8010036 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>
 800fad2:	e023      	b.n	800fb1c <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1cc>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	681d      	ldr	r5, [r3, #0]
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	681c      	ldr	r4, [r3, #0]
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f7fe fe88 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800fae2:	4603      	mov	r3, r0
 800fae4:	18e1      	adds	r1, r4, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	461a      	mov	r2, r3
 800faec:	4628      	mov	r0, r5
 800faee:	f000 fab0 	bl	8010052 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	681c      	ldr	r4, [r3, #0]
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7fe fe7b 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800fafc:	4603      	mov	r3, r0
 800fafe:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7fe ff1d 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800fb10:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800fb12:	4632      	mov	r2, r6
 800fb14:	4629      	mov	r1, r5
 800fb16:	4620      	mov	r0, r4
 800fb18:	f000 fab3 	bl	8010082 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	441a      	add	r2, r3
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	605a      	str	r2, [r3, #4]
	}
      return *this;
 800fb28:	687b      	ldr	r3, [r7, #4]
    }
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3714      	adds	r7, #20
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
      basic_string()
 800fb32:	b5b0      	push	{r4, r5, r7, lr}
 800fb34:	b084      	sub	sp, #16
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
      : _M_dataplus(_M_local_data())
 800fb3a:	687c      	ldr	r4, [r7, #4]
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7fd fa7a 	bl	800d036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800fb42:	4605      	mov	r5, r0
 800fb44:	f107 030c 	add.w	r3, r7, #12
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f001 f975 	bl	8010e38 <_ZNSaIcEC1Ev>
 800fb4e:	f107 030c 	add.w	r3, r7, #12
 800fb52:	461a      	mov	r2, r3
 800fb54:	4629      	mov	r1, r5
 800fb56:	4620      	mov	r0, r4
 800fb58:	f7fd fcc8 	bl	800d4ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
 800fb5c:	f107 030c 	add.w	r3, r7, #12
 800fb60:	4618      	mov	r0, r3
 800fb62:	f001 f96d 	bl	8010e40 <_ZNSaIcED1Ev>
      { _M_set_length(0); }
 800fb66:	2100      	movs	r1, #0
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f7fd fd0a 	bl	800d582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	4618      	mov	r0, r3
 800fb72:	3710      	adds	r7, #16
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bdb0      	pop	{r4, r5, r7, pc}

0800fb78 <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7fc fb44 	bl	800c210 <_ZNSt14_Function_baseC1Ev>
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3708      	adds	r7, #8
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}

0800fb92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
	}
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
 800fb92:	b5b0      	push	{r4, r5, r7, lr}
 800fb94:	b084      	sub	sp, #16
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	6078      	str	r0, [r7, #4]
 800fb9a:	6039      	str	r1, [r7, #0]
    reserve(size_type __res)
    {
      // Make sure we don't shrink below the current size.
      if (__res < length())
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f7fd f843 	bl	800cc28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800fba2:	4602      	mov	r2, r0
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	bf8c      	ite	hi
 800fbaa:	2301      	movhi	r3, #1
 800fbac:	2300      	movls	r3, #0
 800fbae:	b2db      	uxtb	r3, r3
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d004      	beq.n	800fbbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x2c>
	__res = length();
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f7fd f837 	bl	800cc28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	603b      	str	r3, [r7, #0]

      const size_type __capacity = capacity();
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 f98c 	bl	800fedc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800fbc4:	60f8      	str	r0, [r7, #12]
      if (__res != __capacity)
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	68fa      	ldr	r2, [r7, #12]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d050      	beq.n	800fc70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0xde>
	{
	  if (__res > __capacity
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	68fa      	ldr	r2, [r7, #12]
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d302      	bcc.n	800fbdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
	      || __res > size_type(_S_local_capacity))
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	2b0f      	cmp	r3, #15
 800fbda:	d922      	bls.n	800fc22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x90>
	    {
	      pointer __tmp = _M_create(__res, __capacity);
 800fbdc:	463b      	mov	r3, r7
 800fbde:	68fa      	ldr	r2, [r7, #12]
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f7fe fa9a 	bl	800e11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800fbe8:	60b8      	str	r0, [r7, #8]
	      this->_S_copy(__tmp, _M_data(), length() + 1);
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f7fd fa00 	bl	800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800fbf0:	4604      	mov	r4, r0
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f7fd f818 	bl	800cc28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	4621      	mov	r1, r4
 800fc00:	68b8      	ldr	r0, [r7, #8]
 800fc02:	f7fd ffbe 	bl	800db82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
	      _M_dispose();
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7fd f9fe 	bl	800d008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	      _M_data(__tmp);
 800fc0c:	68b9      	ldr	r1, [r7, #8]
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f7fd fc8d 	bl	800d52e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	      _M_capacity(__res);
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	4619      	mov	r1, r3
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f7fd fc96 	bl	800d54a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 800fc1e:	bf00      	nop
	      this->_S_copy(_M_local_data(), _M_data(), length() + 1);
	      _M_destroy(__capacity);
	      _M_data(_M_local_data());
	    }
	}
    }
 800fc20:	e026      	b.n	800fc70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0xde>
	  else if (!_M_is_local())
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f7fd fbf5 	bl	800d412 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	f083 0301 	eor.w	r3, r3, #1
 800fc2e:	b2db      	uxtb	r3, r3
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d01d      	beq.n	800fc70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0xde>
	      this->_S_copy(_M_local_data(), _M_data(), length() + 1);
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f7fd f9fe 	bl	800d036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800fc3a:	4604      	mov	r4, r0
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f7fd f9d7 	bl	800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800fc42:	4605      	mov	r5, r0
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f7fc ffef 	bl	800cc28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	461a      	mov	r2, r3
 800fc50:	4629      	mov	r1, r5
 800fc52:	4620      	mov	r0, r4
 800fc54:	f7fd ff95 	bl	800db82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
	      _M_destroy(__capacity);
 800fc58:	68f9      	ldr	r1, [r7, #12]
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f7fd fbee 	bl	800d43c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
	      _M_data(_M_local_data());
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7fd f9e8 	bl	800d036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800fc66:	4603      	mov	r3, r0
 800fc68:	4619      	mov	r1, r3
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f7fd fc5f 	bl	800d52e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
    }
 800fc70:	bf00      	nop
 800fc72:	3710      	adds	r7, #16
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bdb0      	pop	{r4, r5, r7, pc}

0800fc78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
      { return this->size() == 0; }
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f7fd fa07 	bl	800d094 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	bf0c      	ite	eq
 800fc8c:	2301      	moveq	r3, #1
 800fc8e:	2300      	movne	r3, #0
 800fc90:	b2db      	uxtb	r3, r3
 800fc92:	4618      	mov	r0, r3
 800fc94:	3708      	adds	r7, #8
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}

0800fc9a <_ZNSt6vectorIhSaIhEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800fc9a:	b480      	push	{r7}
 800fc9c:	b083      	sub	sp, #12
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]
 800fca2:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681a      	ldr	r2, [r3, #0]
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	4413      	add	r3, r2
      }
 800fcac:	4618      	mov	r0, r3
 800fcae:	370c      	adds	r7, #12
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
      operator[](size_type __pos)
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
	return _M_data()[__pos];
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f7fd f994 	bl	800cff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800fcc8:	4602      	mov	r2, r0
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	4413      	add	r3, r2
      }
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3708      	adds	r7, #8
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}

0800fcd6 <_ZNSt6vectorIhSaIhEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800fcd6:	b580      	push	{r7, lr}
 800fcd8:	b082      	sub	sp, #8
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	4619      	mov	r1, r3
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 f9e9 	bl	80100bc <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 800fcea:	bf00      	nop
 800fcec:	3708      	adds	r7, #8
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}

0800fcf2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800fcf2:	b580      	push	{r7, lr}
 800fcf4:	b084      	sub	sp, #16
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]
 800fcfa:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	4413      	add	r3, r2
 800fd04:	60fb      	str	r3, [r7, #12]
 800fd06:	f107 020c 	add.w	r2, r7, #12
 800fd0a:	f107 0308 	add.w	r3, r7, #8
 800fd0e:	4611      	mov	r1, r2
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7fe ff6f 	bl	800ebf4 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3710      	adds	r7, #16
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}

0800fd20 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1IPhEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800fd2a:	6838      	ldr	r0, [r7, #0]
 800fd2c:	f7fe ffdf 	bl	800ecee <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800fd30:	4603      	mov	r3, r0
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	601a      	str	r2, [r3, #0]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3708      	adds	r7, #8
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}

0800fd42 <_ZNSt6vectorIhSaIhEE5eraseEN9__gnu_cxx17__normal_iteratorIPKhS1_EES6_>:
      erase(const_iterator __first, const_iterator __last)
 800fd42:	b590      	push	{r4, r7, lr}
 800fd44:	b087      	sub	sp, #28
 800fd46:	af00      	add	r7, sp, #0
 800fd48:	60f8      	str	r0, [r7, #12]
 800fd4a:	60b9      	str	r1, [r7, #8]
 800fd4c:	607a      	str	r2, [r7, #4]
	const auto __beg = begin();
 800fd4e:	68f8      	ldr	r0, [r7, #12]
 800fd50:	f7fe ffa8 	bl	800eca4 <_ZNSt6vectorIhSaIhEE5beginEv>
 800fd54:	4603      	mov	r3, r0
 800fd56:	617b      	str	r3, [r7, #20]
	const auto __cbeg = cbegin();
 800fd58:	68f8      	ldr	r0, [r7, #12]
 800fd5a:	f000 f9c7 	bl	80100ec <_ZNKSt6vectorIhSaIhEE6cbeginEv>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	613b      	str	r3, [r7, #16]
	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
 800fd62:	f107 0210 	add.w	r2, r7, #16
 800fd66:	f107 0308 	add.w	r3, r7, #8
 800fd6a:	4611      	mov	r1, r2
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f000 f9d1 	bl	8010114 <_ZN9__gnu_cxxmiIPKhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800fd72:	4602      	mov	r2, r0
 800fd74:	f107 0314 	add.w	r3, r7, #20
 800fd78:	4611      	mov	r1, r2
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7ff ffb9 	bl	800fcf2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 800fd80:	4604      	mov	r4, r0
 800fd82:	f107 0210 	add.w	r2, r7, #16
 800fd86:	1d3b      	adds	r3, r7, #4
 800fd88:	4611      	mov	r1, r2
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f000 f9c2 	bl	8010114 <_ZN9__gnu_cxxmiIPKhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800fd90:	4602      	mov	r2, r0
 800fd92:	f107 0314 	add.w	r3, r7, #20
 800fd96:	4611      	mov	r1, r2
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7ff ffaa 	bl	800fcf2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	461a      	mov	r2, r3
 800fda2:	4621      	mov	r1, r4
 800fda4:	68f8      	ldr	r0, [r7, #12]
 800fda6:	f000 f9ca 	bl	801013e <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EES5_>
 800fdaa:	4603      	mov	r3, r0
      }
 800fdac:	4618      	mov	r0, r3
 800fdae:	371c      	adds	r7, #28
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd90      	pop	{r4, r7, pc}

0800fdb4 <_ZSt4moveIN8CEP_UART5FrameEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800fdb4:	b480      	push	{r7}
 800fdb6:	b083      	sub	sp, #12
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	370c      	adds	r7, #12
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc8:	4770      	bx	lr

0800fdca <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800fdca:	b480      	push	{r7}
 800fdcc:	b083      	sub	sp, #12
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	370c      	adds	r7, #12
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr

0800fde0 <_ZNSt6vectorIhSaIhEEaSEOS1_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800fde0:	b590      	push	{r4, r7, lr}
 800fde2:	b085      	sub	sp, #20
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 800fdea:	2301      	movs	r3, #1
 800fdec:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 800fdee:	6838      	ldr	r0, [r7, #0]
 800fdf0:	f7ff ffeb 	bl	800fdca <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	4622      	mov	r2, r4
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f000 f9e5 	bl	80101ca <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 800fe00:	687b      	ldr	r3, [r7, #4]
      }
 800fe02:	4618      	mov	r0, r3
 800fe04:	3714      	adds	r7, #20
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd90      	pop	{r4, r7, pc}

0800fe0a <_ZNKSt8functionIFvvEEcvbEv>:
       *  @return @c true when this %function object contains a target,
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b082      	sub	sp, #8
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7ff f858 	bl	800eeca <_ZNKSt14_Function_base8_M_emptyEv>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	f083 0301 	eor.w	r3, r3, #1
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	4618      	mov	r0, r3
 800fe24:	3708      	adds	r7, #8
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}

0800fe2a <_ZNKSt8functionIFvvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800fe2a:	b580      	push	{r7, lr}
 800fe2c:	b082      	sub	sp, #8
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7ff f848 	bl	800eeca <_ZNKSt14_Function_base8_M_emptyEv>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d001      	beq.n	800fe44 <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 800fe40:	f001 f968 	bl	8011114 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	687a      	ldr	r2, [r7, #4]
 800fe4a:	4610      	mov	r0, r2
 800fe4c:	4798      	blx	r3
 800fe4e:	bf00      	nop
    }
 800fe50:	3708      	adds	r7, #8
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}

0800fe56 <_ZNSt6vectorIhSaIhEE6resizeEj>:
      resize(size_type __new_size)
 800fe56:	b580      	push	{r7, lr}
 800fe58:	b082      	sub	sp, #8
 800fe5a:	af00      	add	r7, sp, #0
 800fe5c:	6078      	str	r0, [r7, #4]
 800fe5e:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f7fe fcc6 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800fe66:	4602      	mov	r2, r0
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	bf8c      	ite	hi
 800fe6e:	2301      	movhi	r3, #1
 800fe70:	2300      	movls	r3, #0
 800fe72:	b2db      	uxtb	r3, r3
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d00a      	beq.n	800fe8e <_ZNSt6vectorIhSaIhEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f7fe fcba 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800fe7e:	4602      	mov	r2, r0
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	1a9b      	subs	r3, r3, r2
 800fe84:	4619      	mov	r1, r3
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f000 f9de 	bl	8010248 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
      }
 800fe8c:	e013      	b.n	800feb6 <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	else if (__new_size < size())
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f7fe fcaf 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800fe94:	4602      	mov	r2, r0
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	bf34      	ite	cc
 800fe9c:	2301      	movcc	r3, #1
 800fe9e:	2300      	movcs	r3, #0
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d007      	beq.n	800feb6 <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681a      	ldr	r2, [r3, #0]
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	4413      	add	r3, r2
 800feae:	4619      	mov	r1, r3
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f000 f903 	bl	80100bc <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 800feb6:	bf00      	nop
 800feb8:	3708      	adds	r7, #8
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}

0800febe <_ZNSt6vectorIhSaIhEE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
 800febe:	b580      	push	{r7, lr}
 800fec0:	b082      	sub	sp, #8
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4619      	mov	r1, r3
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 f8e9 	bl	80100a4 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 800fed2:	4603      	mov	r3, r0
 800fed4:	4618      	mov	r0, r3
 800fed6:	3708      	adds	r7, #8
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}

0800fedc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800fedc:	b580      	push	{r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
	return _M_is_local() ? size_type(_S_local_capacity)
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f7fd fa94 	bl	800d412 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800feea:	4603      	mov	r3, r0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d001      	beq.n	800fef4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x18>
 800fef0:	230f      	movs	r3, #15
	                     : _M_allocated_capacity;
 800fef2:	e001      	b.n	800fef8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x1c>
	return _M_is_local() ? size_type(_S_local_capacity)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	689b      	ldr	r3, [r3, #8]
      }
 800fef8:	4618      	mov	r0, r3
 800fefa:	3708      	adds	r7, #8
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f000 fa17 	bl	801033c <_ZNSaIhED1Ev>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4618      	mov	r0, r3
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}

0800ff18 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6819      	ldr	r1, [r3, #0]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800ff28:	461a      	mov	r2, r3
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800ff30:	461a      	mov	r2, r3
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f7fe fd6e 	bl	800ea14 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		      - this->_M_impl._M_start); }
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7ff ffe0 	bl	800ff00 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	4618      	mov	r0, r3
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <_ZStneIhEbRKSaIT_ES3_>:
    _GLIBCXX_USE_NOEXCEPT
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
 800ff4a:	b480      	push	{r7}
 800ff4c:	b083      	sub	sp, #12
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
 800ff52:	6039      	str	r1, [r7, #0]
    _GLIBCXX_USE_NOEXCEPT
    { return false; }
 800ff54:	2300      	movs	r3, #0
 800ff56:	4618      	mov	r0, r3
 800ff58:	370c      	adds	r7, #12
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr

0800ff62 <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800ff62:	b580      	push	{r7, lr}
 800ff64:	b084      	sub	sp, #16
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
 800ff6a:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 800ff6c:	461a      	mov	r2, r3
 800ff6e:	6839      	ldr	r1, [r7, #0]
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f000 fa5c 	bl	801042e <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 800ff76:	bf00      	nop
 800ff78:	3710      	adds	r7, #16
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b084      	sub	sp, #16
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	60fb      	str	r3, [r7, #12]
 800ff8c:	f107 020c 	add.w	r2, r7, #12
 800ff90:	f107 0308 	add.w	r3, r7, #8
 800ff94:	4611      	mov	r1, r2
 800ff96:	4618      	mov	r0, r3
 800ff98:	f000 fa55 	bl	8010446 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3710      	adds	r7, #16
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}

0800ffa6 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800ffa6:	b580      	push	{r7, lr}
 800ffa8:	b084      	sub	sp, #16
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	60fb      	str	r3, [r7, #12]
 800ffb4:	f107 020c 	add.w	r2, r7, #12
 800ffb8:	f107 0308 	add.w	r3, r7, #8
 800ffbc:	4611      	mov	r1, r2
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f000 fa41 	bl	8010446 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3710      	adds	r7, #16
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}

0800ffce <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 800ffce:	b580      	push	{r7, lr}
 800ffd0:	b086      	sub	sp, #24
 800ffd2:	af00      	add	r7, sp, #0
 800ffd4:	60f8      	str	r0, [r7, #12]
 800ffd6:	60b9      	str	r1, [r7, #8]
 800ffd8:	607a      	str	r2, [r7, #4]
 800ffda:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	68b9      	ldr	r1, [r7, #8]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fe fd72 	bl	800eaca <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800ffe6:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fe fcad 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800fff0:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800fff2:	697a      	ldr	r2, [r7, #20]
 800fff4:	6839      	ldr	r1, [r7, #0]
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 f9ac 	bl	8010354 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
	      return __result;
 800fffc:	697b      	ldr	r3, [r7, #20]
	}
 800fffe:	4618      	mov	r0, r3
 8010000:	3718      	adds	r7, #24
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}

08010006 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8010006:	b590      	push	{r4, r7, lr}
 8010008:	b085      	sub	sp, #20
 801000a:	af00      	add	r7, sp, #0
 801000c:	60f8      	str	r0, [r7, #12]
 801000e:	60b9      	str	r1, [r7, #8]
 8010010:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8010012:	68f8      	ldr	r0, [r7, #12]
 8010014:	f000 fa27 	bl	8010466 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8010018:	4604      	mov	r4, r0
 801001a:	68b8      	ldr	r0, [r7, #8]
 801001c:	f000 fa23 	bl	8010466 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8010020:	4603      	mov	r3, r0
	       __result));
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	4619      	mov	r1, r3
 8010026:	4620      	mov	r0, r4
 8010028:	f000 fa28 	bl	801047c <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>
 801002c:	4603      	mov	r3, r0
    }
 801002e:	4618      	mov	r0, r3
 8010030:	3714      	adds	r7, #20
 8010032:	46bd      	mov	sp, r7
 8010034:	bd90      	pop	{r4, r7, pc}

08010036 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8010036:	b580      	push	{r7, lr}
 8010038:	b084      	sub	sp, #16
 801003a:	af00      	add	r7, sp, #0
 801003c:	60f8      	str	r0, [r7, #12]
 801003e:	60b9      	str	r1, [r7, #8]
 8010040:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8010042:	68b9      	ldr	r1, [r7, #8]
 8010044:	68f8      	ldr	r0, [r7, #12]
 8010046:	f000 fa3f 	bl	80104c8 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>
    }
 801004a:	bf00      	nop
 801004c:	3710      	adds	r7, #16
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}

08010052 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8010052:	b590      	push	{r4, r7, lr}
 8010054:	b085      	sub	sp, #20
 8010056:	af00      	add	r7, sp, #0
 8010058:	60f8      	str	r0, [r7, #12]
 801005a:	60b9      	str	r1, [r7, #8]
 801005c:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 801005e:	68f8      	ldr	r0, [r7, #12]
 8010060:	f7fe fef1 	bl	800ee46 <_ZSt12__miter_baseIPhET_S1_>
 8010064:	4604      	mov	r4, r0
 8010066:	68b8      	ldr	r0, [r7, #8]
 8010068:	f7fe feed 	bl	800ee46 <_ZSt12__miter_baseIPhET_S1_>
 801006c:	4603      	mov	r3, r0
	       __result));
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	4619      	mov	r1, r3
 8010072:	4620      	mov	r0, r4
 8010074:	f000 fa35 	bl	80104e2 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8010078:	4603      	mov	r3, r0
    }
 801007a:	4618      	mov	r0, r3
 801007c:	3714      	adds	r7, #20
 801007e:	46bd      	mov	sp, r7
 8010080:	bd90      	pop	{r4, r7, pc}

08010082 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8010082:	b580      	push	{r7, lr}
 8010084:	b084      	sub	sp, #16
 8010086:	af00      	add	r7, sp, #0
 8010088:	60f8      	str	r0, [r7, #12]
 801008a:	60b9      	str	r1, [r7, #8]
 801008c:	607a      	str	r2, [r7, #4]
 801008e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8010090:	687a      	ldr	r2, [r7, #4]
 8010092:	68b9      	ldr	r1, [r7, #8]
 8010094:	68f8      	ldr	r0, [r7, #12]
 8010096:	f000 fa40 	bl	801051a <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 801009a:	4603      	mov	r3, r0
 801009c:	4618      	mov	r0, r3
 801009e:	3710      	adds	r7, #16
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	4618      	mov	r0, r3
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr

080100bc <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80100bc:	b590      	push	{r4, r7, lr}
 80100be:	b083      	sub	sp, #12
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	685c      	ldr	r4, [r3, #4]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7fe fc3c 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80100d2:	4603      	mov	r3, r0
 80100d4:	461a      	mov	r2, r3
 80100d6:	4621      	mov	r1, r4
 80100d8:	6838      	ldr	r0, [r7, #0]
 80100da:	f7fe fc41 	bl	800e960 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	683a      	ldr	r2, [r7, #0]
 80100e2:	605a      	str	r2, [r3, #4]
      }
 80100e4:	bf00      	nop
 80100e6:	370c      	adds	r7, #12
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd90      	pop	{r4, r7, pc}

080100ec <_ZNKSt6vectorIhSaIhEE6cbeginEv>:
      cbegin() const noexcept
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	60fb      	str	r3, [r7, #12]
 80100fa:	f107 020c 	add.w	r2, r7, #12
 80100fe:	f107 0308 	add.w	r3, r7, #8
 8010102:	4611      	mov	r1, r2
 8010104:	4618      	mov	r0, r3
 8010106:	f000 f99e 	bl	8010446 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	4618      	mov	r0, r3
 801010e:	3710      	adds	r7, #16
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <_ZN9__gnu_cxxmiIPKhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8010114:	b590      	push	{r4, r7, lr}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f000 fa0d 	bl	801053e <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8010124:	4603      	mov	r3, r0
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	461c      	mov	r4, r3
 801012a:	6838      	ldr	r0, [r7, #0]
 801012c:	f000 fa07 	bl	801053e <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8010130:	4603      	mov	r3, r0
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	1ae3      	subs	r3, r4, r3
 8010136:	4618      	mov	r0, r3
 8010138:	370c      	adds	r7, #12
 801013a:	46bd      	mov	sp, r7
 801013c:	bd90      	pop	{r4, r7, pc}

0801013e <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EES5_>:
    vector<_Tp, _Alloc>::
 801013e:	b590      	push	{r4, r7, lr}
 8010140:	b087      	sub	sp, #28
 8010142:	af00      	add	r7, sp, #0
 8010144:	60f8      	str	r0, [r7, #12]
 8010146:	60b9      	str	r1, [r7, #8]
 8010148:	607a      	str	r2, [r7, #4]
      if (__first != __last)
 801014a:	1d3a      	adds	r2, r7, #4
 801014c:	f107 0308 	add.w	r3, r7, #8
 8010150:	4611      	mov	r1, r2
 8010152:	4618      	mov	r0, r3
 8010154:	f000 f9fe 	bl	8010554 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8010158:	4603      	mov	r3, r0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d030      	beq.n	80101c0 <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EES5_+0x82>
	  if (__last != end())
 801015e:	68f8      	ldr	r0, [r7, #12]
 8010160:	f7fe fce7 	bl	800eb32 <_ZNSt6vectorIhSaIhEE3endEv>
 8010164:	4603      	mov	r3, r0
 8010166:	613b      	str	r3, [r7, #16]
 8010168:	f107 0210 	add.w	r2, r7, #16
 801016c:	1d3b      	adds	r3, r7, #4
 801016e:	4611      	mov	r1, r2
 8010170:	4618      	mov	r0, r3
 8010172:	f000 f9ef 	bl	8010554 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8010176:	4603      	mov	r3, r0
 8010178:	2b00      	cmp	r3, #0
 801017a:	d008      	beq.n	801018e <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EES5_+0x50>
	    _GLIBCXX_MOVE3(__last, end(), __first);
 801017c:	68f8      	ldr	r0, [r7, #12]
 801017e:	f7fe fcd8 	bl	800eb32 <_ZNSt6vectorIhSaIhEE3endEv>
 8010182:	4603      	mov	r3, r0
 8010184:	68ba      	ldr	r2, [r7, #8]
 8010186:	4619      	mov	r1, r3
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f000 f9fb 	bl	8010584 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES6_ET0_T_S8_S7_>
	  _M_erase_at_end(__first.base() + (end() - __last));
 801018e:	f107 0308 	add.w	r3, r7, #8
 8010192:	4618      	mov	r0, r3
 8010194:	f7fe fdab 	bl	800ecee <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8010198:	4603      	mov	r3, r0
 801019a:	681c      	ldr	r4, [r3, #0]
 801019c:	68f8      	ldr	r0, [r7, #12]
 801019e:	f7fe fcc8 	bl	800eb32 <_ZNSt6vectorIhSaIhEE3endEv>
 80101a2:	4603      	mov	r3, r0
 80101a4:	617b      	str	r3, [r7, #20]
 80101a6:	1d3a      	adds	r2, r7, #4
 80101a8:	f107 0314 	add.w	r3, r7, #20
 80101ac:	4611      	mov	r1, r2
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fe fd88 	bl	800ecc4 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80101b4:	4603      	mov	r3, r0
 80101b6:	4423      	add	r3, r4
 80101b8:	4619      	mov	r1, r3
 80101ba:	68f8      	ldr	r0, [r7, #12]
 80101bc:	f7ff ff7e 	bl	80100bc <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      return __first;
 80101c0:	68bb      	ldr	r3, [r7, #8]
    }
 80101c2:	4618      	mov	r0, r3
 80101c4:	371c      	adds	r7, #28
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd90      	pop	{r4, r7, pc}

080101ca <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
      _M_move_assign(vector&& __x, std::true_type) noexcept
 80101ca:	b590      	push	{r4, r7, lr}
 80101cc:	b089      	sub	sp, #36	; 0x24
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	60f8      	str	r0, [r7, #12]
 80101d2:	60b9      	str	r1, [r7, #8]
 80101d4:	713a      	strb	r2, [r7, #4]
	vector __tmp(get_allocator());
 80101d6:	68fa      	ldr	r2, [r7, #12]
 80101d8:	f107 031c 	add.w	r3, r7, #28
 80101dc:	4611      	mov	r1, r2
 80101de:	4618      	mov	r0, r3
 80101e0:	f000 f9e8 	bl	80105b4 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 80101e4:	f107 021c 	add.w	r2, r7, #28
 80101e8:	f107 0310 	add.w	r3, r7, #16
 80101ec:	4611      	mov	r1, r2
 80101ee:	4618      	mov	r0, r3
 80101f0:	f000 f9f1 	bl	80105d6 <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 80101f4:	f107 031c 	add.w	r3, r7, #28
 80101f8:	4618      	mov	r0, r3
 80101fa:	f000 f89f 	bl	801033c <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__tmp._M_impl);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	f107 0210 	add.w	r2, r7, #16
 8010204:	4611      	mov	r1, r2
 8010206:	4618      	mov	r0, r3
 8010208:	f000 f9f4 	bl	80105f4 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>
	this->_M_impl._M_swap_data(__x._M_impl);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	68ba      	ldr	r2, [r7, #8]
 8010210:	4611      	mov	r1, r2
 8010212:	4618      	mov	r0, r3
 8010214:	f000 f9ee 	bl	80105f4 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	4618      	mov	r0, r3
 801021c:	f7fe fb95 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8010220:	4604      	mov	r4, r0
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	4618      	mov	r0, r3
 8010226:	f7fe fb90 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 801022a:	4603      	mov	r3, r0
 801022c:	4619      	mov	r1, r3
 801022e:	4620      	mov	r0, r4
 8010230:	f000 fa00 	bl	8010634 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 8010234:	f107 0310 	add.w	r3, r7, #16
 8010238:	4618      	mov	r0, r3
 801023a:	f7ff fb66 	bl	800f90a <_ZNSt6vectorIhSaIhEED1Ev>
      }
 801023e:	bf00      	nop
 8010240:	3724      	adds	r7, #36	; 0x24
 8010242:	46bd      	mov	sp, r7
 8010244:	bd90      	pop	{r4, r7, pc}
	...

08010248 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8010248:	b5b0      	push	{r4, r5, r7, lr}
 801024a:	b086      	sub	sp, #24
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d06a      	beq.n	801032e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xe6>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 801025c:	461a      	mov	r2, r3
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	1ad3      	subs	r3, r2, r3
 8010264:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	4293      	cmp	r3, r2
 801026a:	d80f      	bhi.n	801028c <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x44>
	    {
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	4618      	mov	r0, r3
 8010274:	f7fe fb69 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8010278:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 801027a:	461a      	mov	r2, r3
 801027c:	6839      	ldr	r1, [r7, #0]
 801027e:	4620      	mov	r0, r4
 8010280:	f000 f9e6 	bl	8010650 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 8010284:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_finish;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 801028a:	e050      	b.n	801032e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xe6>
	      const size_type __len =
 801028c:	4a2a      	ldr	r2, [pc, #168]	; (8010338 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xf0>)
 801028e:	6839      	ldr	r1, [r7, #0]
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f7fe fcbf 	bl	800ec14 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8010296:	6178      	str	r0, [r7, #20]
	      const size_type __old_size = this->size();
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f7fe faaa 	bl	800e7f2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 801029e:	6138      	str	r0, [r7, #16]
	      pointer __new_start(this->_M_allocate(__len));
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6979      	ldr	r1, [r7, #20]
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7fe fc10 	bl	800eaca <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80102aa:	60f8      	str	r0, [r7, #12]
	      pointer __new_finish(__new_start);
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	60bb      	str	r3, [r7, #8]
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681c      	ldr	r4, [r3, #0]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	685d      	ldr	r5, [r3, #4]
		     __new_start, _M_get_Tp_allocator());
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7fe fb45 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80102c0:	4603      	mov	r3, r0
		  __new_finish
 80102c2:	68fa      	ldr	r2, [r7, #12]
 80102c4:	4629      	mov	r1, r5
 80102c6:	4620      	mov	r0, r4
 80102c8:	f7fe fd1c 	bl	800ed04 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 80102cc:	60b8      	str	r0, [r7, #8]
						     _M_get_Tp_allocator());
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7fe fb3a 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80102d6:	4603      	mov	r3, r0
		  __new_finish =
 80102d8:	461a      	mov	r2, r3
 80102da:	6839      	ldr	r1, [r7, #0]
 80102dc:	68b8      	ldr	r0, [r7, #8]
 80102de:	f000 f9b7 	bl	8010650 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 80102e2:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681c      	ldr	r4, [r3, #0]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7fe fb2b 	bl	800e94a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80102f4:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80102f6:	461a      	mov	r2, r3
 80102f8:	4629      	mov	r1, r5
 80102fa:	4620      	mov	r0, r4
 80102fc:	f7fe fb30 	bl	800e960 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 801030a:	461a      	mov	r2, r3
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8010312:	461a      	mov	r2, r3
 8010314:	f7fe fb7e 	bl	800ea14 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	68fa      	ldr	r2, [r7, #12]
 801031c:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	68ba      	ldr	r2, [r7, #8]
 8010322:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010324:	68fa      	ldr	r2, [r7, #12]
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	441a      	add	r2, r3
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	609a      	str	r2, [r3, #8]
    }
 801032e:	bf00      	nop
 8010330:	3718      	adds	r7, #24
 8010332:	46bd      	mov	sp, r7
 8010334:	bdb0      	pop	{r4, r5, r7, pc}
 8010336:	bf00      	nop
 8010338:	08016f64 	.word	0x08016f64

0801033c <_ZNSaIhED1Ev>:
      ~allocator() throw() { }
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 f992 	bl	801066e <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	4618      	mov	r0, r3
 801034e:	3708      	adds	r7, #8
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8010354:	b580      	push	{r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af00      	add	r7, sp, #0
 801035a:	60f8      	str	r0, [r7, #12]
 801035c:	60b9      	str	r1, [r7, #8]
 801035e:	607a      	str	r2, [r7, #4]
 8010360:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8010362:	687a      	ldr	r2, [r7, #4]
 8010364:	68b9      	ldr	r1, [r7, #8]
 8010366:	68f8      	ldr	r0, [r7, #12]
 8010368:	f000 f9a3 	bl	80106b2 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 801036c:	4603      	mov	r3, r0
 801036e:	4618      	mov	r0, r3
 8010370:	3710      	adds	r7, #16
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}

08010376 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8010376:	b480      	push	{r7}
 8010378:	b083      	sub	sp, #12
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	4618      	mov	r0, r3
 8010382:	370c      	adds	r7, #12
 8010384:	46bd      	mov	sp, r7
 8010386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038a:	4770      	bx	lr

0801038c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 801038c:	b580      	push	{r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7ff ffed 	bl	8010376 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801039c:	4602      	mov	r2, r0
 801039e:	f107 0308 	add.w	r3, r7, #8
 80103a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103a6:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80103aa:	6838      	ldr	r0, [r7, #0]
 80103ac:	f7ff ffe3 	bl	8010376 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80103b0:	4602      	mov	r2, r0
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103b8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80103bc:	f107 0308 	add.w	r3, r7, #8
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7ff ffd8 	bl	8010376 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80103c6:	4602      	mov	r2, r0
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103ce:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80103d2:	bf00      	nop
 80103d4:	3710      	adds	r7, #16
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80103da:	b480      	push	{r7}
 80103dc:	b083      	sub	sp, #12
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4618      	mov	r0, r3
 80103e6:	370c      	adds	r7, #12
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b084      	sub	sp, #16
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f7ff ffed 	bl	80103da <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010400:	4603      	mov	r3, r0
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010406:	6838      	ldr	r0, [r7, #0]
 8010408:	f7ff ffe7 	bl	80103da <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 801040c:	4603      	mov	r3, r0
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010414:	f107 030c 	add.w	r3, r7, #12
 8010418:	4618      	mov	r0, r3
 801041a:	f7ff ffde 	bl	80103da <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 801041e:	4603      	mov	r3, r0
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	601a      	str	r2, [r3, #0]
    }
 8010426:	bf00      	nop
 8010428:	3710      	adds	r7, #16
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}

0801042e <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 801042e:	b480      	push	{r7}
 8010430:	b085      	sub	sp, #20
 8010432:	af00      	add	r7, sp, #0
 8010434:	60f8      	str	r0, [r7, #12]
 8010436:	60b9      	str	r1, [r7, #8]
 8010438:	713a      	strb	r2, [r7, #4]
    { }
 801043a:	bf00      	nop
 801043c:	3714      	adds	r7, #20
 801043e:	46bd      	mov	sp, r7
 8010440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010444:	4770      	bx	lr

08010446 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010446:	b480      	push	{r7}
 8010448:	b083      	sub	sp, #12
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
 801044e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	681a      	ldr	r2, [r3, #0]
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	601a      	str	r2, [r3, #0]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	4618      	mov	r0, r3
 801045c:	370c      	adds	r7, #12
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr

08010466 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8010466:	b480      	push	{r7}
 8010468:	b083      	sub	sp, #12
 801046a:	af00      	add	r7, sp, #0
 801046c:	6078      	str	r0, [r7, #4]
    { return __it; }
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	4618      	mov	r0, r3
 8010472:	370c      	adds	r7, #12
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801047c:	b5b0      	push	{r4, r5, r7, lr}
 801047e:	b086      	sub	sp, #24
 8010480:	af00      	add	r7, sp, #0
 8010482:	60f8      	str	r0, [r7, #12]
 8010484:	60b9      	str	r1, [r7, #8]
 8010486:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8010488:	68f8      	ldr	r0, [r7, #12]
 801048a:	f000 f924 	bl	80106d6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801048e:	4604      	mov	r4, r0
 8010490:	68b8      	ldr	r0, [r7, #8]
 8010492:	f000 f920 	bl	80106d6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010496:	4605      	mov	r5, r0
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f000 f92a 	bl	80106f2 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 801049e:	4603      	mov	r3, r0
 80104a0:	461a      	mov	r2, r3
 80104a2:	4629      	mov	r1, r5
 80104a4:	4620      	mov	r0, r4
 80104a6:	f000 f932 	bl	801070e <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 80104aa:	4603      	mov	r3, r0
 80104ac:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 80104ae:	f107 0214 	add.w	r2, r7, #20
 80104b2:	f107 0310 	add.w	r3, r7, #16
 80104b6:	4611      	mov	r1, r2
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7fe fb9b 	bl	800ebf4 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 80104be:	693b      	ldr	r3, [r7, #16]
    }
 80104c0:	4618      	mov	r0, r3
 80104c2:	3718      	adds	r7, #24
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bdb0      	pop	{r4, r5, r7, pc}

080104c8 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b082      	sub	sp, #8
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80104d2:	6839      	ldr	r1, [r7, #0]
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f000 f92c 	bl	8010732 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>
    }
 80104da:	bf00      	nop
 80104dc:	3708      	adds	r7, #8
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}

080104e2 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80104e2:	b5b0      	push	{r4, r5, r7, lr}
 80104e4:	b084      	sub	sp, #16
 80104e6:	af00      	add	r7, sp, #0
 80104e8:	60f8      	str	r0, [r7, #12]
 80104ea:	60b9      	str	r1, [r7, #8]
 80104ec:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80104ee:	68f8      	ldr	r0, [r7, #12]
 80104f0:	f7fe fcb4 	bl	800ee5c <_ZSt12__niter_baseIPhET_S1_>
 80104f4:	4604      	mov	r4, r0
 80104f6:	68b8      	ldr	r0, [r7, #8]
 80104f8:	f7fe fcb0 	bl	800ee5c <_ZSt12__niter_baseIPhET_S1_>
 80104fc:	4605      	mov	r5, r0
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f7fe fcac 	bl	800ee5c <_ZSt12__niter_baseIPhET_S1_>
 8010504:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8010506:	461a      	mov	r2, r3
 8010508:	4629      	mov	r1, r5
 801050a:	4620      	mov	r0, r4
 801050c:	f000 f91c 	bl	8010748 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8010510:	4603      	mov	r3, r0
    }
 8010512:	4618      	mov	r0, r3
 8010514:	3710      	adds	r7, #16
 8010516:	46bd      	mov	sp, r7
 8010518:	bdb0      	pop	{r4, r5, r7, pc}

0801051a <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 801051a:	b580      	push	{r7, lr}
 801051c:	b086      	sub	sp, #24
 801051e:	af00      	add	r7, sp, #0
 8010520:	60f8      	str	r0, [r7, #12]
 8010522:	60b9      	str	r1, [r7, #8]
 8010524:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8010526:	2301      	movs	r3, #1
 8010528:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 801052a:	687a      	ldr	r2, [r7, #4]
 801052c:	68b9      	ldr	r1, [r7, #8]
 801052e:	68f8      	ldr	r0, [r7, #12]
 8010530:	f000 f91c 	bl	801076c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 8010534:	4603      	mov	r3, r0
    }
 8010536:	4618      	mov	r0, r3
 8010538:	3718      	adds	r7, #24
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}

0801053e <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801053e:	b480      	push	{r7}
 8010540:	b083      	sub	sp, #12
 8010542:	af00      	add	r7, sp, #0
 8010544:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	4618      	mov	r0, r3
 801054a:	370c      	adds	r7, #12
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr

08010554 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8010554:	b590      	push	{r4, r7, lr}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7fe fbc5 	bl	800ecee <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8010564:	4603      	mov	r3, r0
 8010566:	681c      	ldr	r4, [r3, #0]
 8010568:	6838      	ldr	r0, [r7, #0]
 801056a:	f7fe fbc0 	bl	800ecee <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 801056e:	4603      	mov	r3, r0
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	429c      	cmp	r4, r3
 8010574:	bf14      	ite	ne
 8010576:	2301      	movne	r3, #1
 8010578:	2300      	moveq	r3, #0
 801057a:	b2db      	uxtb	r3, r3
 801057c:	4618      	mov	r0, r3
 801057e:	370c      	adds	r7, #12
 8010580:	46bd      	mov	sp, r7
 8010582:	bd90      	pop	{r4, r7, pc}

08010584 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES6_ET0_T_S8_S7_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8010584:	b590      	push	{r4, r7, lr}
 8010586:	b085      	sub	sp, #20
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__copy_move_a2<true>(std::__miter_base(__first),
 8010590:	68f8      	ldr	r0, [r7, #12]
 8010592:	f000 f8fb 	bl	801078c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>
 8010596:	4604      	mov	r4, r0
 8010598:	68b8      	ldr	r0, [r7, #8]
 801059a:	f000 f8f7 	bl	801078c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>
 801059e:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	4619      	mov	r1, r3
 80105a4:	4620      	mov	r0, r4
 80105a6:	f000 f8fc 	bl	80107a2 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES6_ET1_T0_S8_S7_>
 80105aa:	4603      	mov	r3, r0
    }
 80105ac:	4618      	mov	r0, r3
 80105ae:	3714      	adds	r7, #20
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd90      	pop	{r4, r7, pc}

080105b4 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80105be:	6838      	ldr	r0, [r7, #0]
 80105c0:	f7fe fa69 	bl	800ea96 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80105c4:	4603      	mov	r3, r0
 80105c6:	4619      	mov	r1, r3
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f000 f910 	bl	80107ee <_ZNSaIhEC1ERKS_>
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b082      	sub	sp, #8
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
 80105de:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6839      	ldr	r1, [r7, #0]
 80105e4:	4618      	mov	r0, r3
 80105e6:	f000 f910 	bl	801080a <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	4618      	mov	r0, r3
 80105ee:	3708      	adds	r7, #8
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>:
	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
	  std::swap(_M_start, __x._M_start);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	683a      	ldr	r2, [r7, #0]
 8010602:	4611      	mov	r1, r2
 8010604:	4618      	mov	r0, r3
 8010606:	f000 f91a 	bl	801083e <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	  std::swap(_M_finish, __x._M_finish);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	1d1a      	adds	r2, r3, #4
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	3304      	adds	r3, #4
 8010612:	4619      	mov	r1, r3
 8010614:	4610      	mov	r0, r2
 8010616:	f000 f912 	bl	801083e <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f103 0208 	add.w	r2, r3, #8
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	3308      	adds	r3, #8
 8010624:	4619      	mov	r1, r3
 8010626:	4610      	mov	r0, r2
 8010628:	f000 f909 	bl	801083e <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	}
 801062c:	bf00      	nop
 801062e:	3708      	adds	r7, #8
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}

08010634 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8010634:	b580      	push	{r7, lr}
 8010636:	b084      	sub	sp, #16
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 801063e:	461a      	mov	r2, r3
 8010640:	6839      	ldr	r1, [r7, #0]
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f000 f925 	bl	8010892 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8010648:	bf00      	nop
 801064a:	3710      	adds	r7, #16
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}

08010650 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8010650:	b580      	push	{r7, lr}
 8010652:	b084      	sub	sp, #16
 8010654:	af00      	add	r7, sp, #0
 8010656:	60f8      	str	r0, [r7, #12]
 8010658:	60b9      	str	r1, [r7, #8]
 801065a:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 801065c:	68b9      	ldr	r1, [r7, #8]
 801065e:	68f8      	ldr	r0, [r7, #12]
 8010660:	f000 f924 	bl	80108ac <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 8010664:	4603      	mov	r3, r0
 8010666:	4618      	mov	r0, r3
 8010668:	3710      	adds	r7, #16
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}

0801066e <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801066e:	b480      	push	{r7}
 8010670:	b083      	sub	sp, #12
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4618      	mov	r0, r3
 801067a:	370c      	adds	r7, #12
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr

08010684 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8010684:	b580      	push	{r7, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 801068e:	6839      	ldr	r1, [r7, #0]
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f000 f8ac 	bl	80107ee <_ZNSaIhEC1ERKS_>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2200      	movs	r2, #0
 801069a:	601a      	str	r2, [r3, #0]
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2200      	movs	r2, #0
 80106a0:	605a      	str	r2, [r3, #4]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2200      	movs	r2, #0
 80106a6:	609a      	str	r2, [r3, #8]
	{ }
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	4618      	mov	r0, r3
 80106ac:	3708      	adds	r7, #8
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}

080106b2 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80106b2:	b580      	push	{r7, lr}
 80106b4:	b086      	sub	sp, #24
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	60f8      	str	r0, [r7, #12]
 80106ba:	60b9      	str	r1, [r7, #8]
 80106bc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80106be:	2301      	movs	r3, #1
 80106c0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80106c2:	687a      	ldr	r2, [r7, #4]
 80106c4:	68b9      	ldr	r1, [r7, #8]
 80106c6:	68f8      	ldr	r0, [r7, #12]
 80106c8:	f000 f900 	bl	80108cc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 80106cc:	4603      	mov	r3, r0
    }
 80106ce:	4618      	mov	r0, r3
 80106d0:	3718      	adds	r7, #24
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80106d6:	b580      	push	{r7, lr}
 80106d8:	b082      	sub	sp, #8
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80106de:	1d3b      	adds	r3, r7, #4
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7ff ff2c 	bl	801053e <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 80106e6:	4603      	mov	r3, r0
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	4618      	mov	r0, r3
 80106ec:	3708      	adds	r7, #8
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}

080106f2 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80106f2:	b580      	push	{r7, lr}
 80106f4:	b082      	sub	sp, #8
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80106fa:	1d3b      	adds	r3, r7, #4
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7fe faf6 	bl	800ecee <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8010702:	4603      	mov	r3, r0
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	4618      	mov	r0, r3
 8010708:	3708      	adds	r7, #8
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}

0801070e <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801070e:	b580      	push	{r7, lr}
 8010710:	b086      	sub	sp, #24
 8010712:	af00      	add	r7, sp, #0
 8010714:	60f8      	str	r0, [r7, #12]
 8010716:	60b9      	str	r1, [r7, #8]
 8010718:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 801071a:	2301      	movs	r3, #1
 801071c:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	68b9      	ldr	r1, [r7, #8]
 8010722:	68f8      	ldr	r0, [r7, #12]
 8010724:	f000 f8e2 	bl	80108ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8010728:	4603      	mov	r3, r0
    }
 801072a:	4618      	mov	r0, r3
 801072c:	3718      	adds	r7, #24
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}

08010732 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8010732:	b480      	push	{r7}
 8010734:	b083      	sub	sp, #12
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
 801073a:	6039      	str	r1, [r7, #0]
 801073c:	bf00      	nop
 801073e:	370c      	adds	r7, #12
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr

08010748 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8010748:	b580      	push	{r7, lr}
 801074a:	b086      	sub	sp, #24
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8010754:	2301      	movs	r3, #1
 8010756:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8010758:	687a      	ldr	r2, [r7, #4]
 801075a:	68b9      	ldr	r1, [r7, #8]
 801075c:	68f8      	ldr	r0, [r7, #12]
 801075e:	f000 f8c5 	bl	80108ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8010762:	4603      	mov	r3, r0
    }
 8010764:	4618      	mov	r0, r3
 8010766:	3718      	adds	r7, #24
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 801076c:	b580      	push	{r7, lr}
 801076e:	b084      	sub	sp, #16
 8010770:	af00      	add	r7, sp, #0
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	60b9      	str	r1, [r7, #8]
 8010776:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8010778:	687a      	ldr	r2, [r7, #4]
 801077a:	68b9      	ldr	r1, [r7, #8]
 801077c:	68f8      	ldr	r0, [r7, #12]
 801077e:	f7ff fc68 	bl	8010052 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8010782:	4603      	mov	r3, r0
 8010784:	4618      	mov	r0, r3
 8010786:	3710      	adds	r7, #16
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>:
    __miter_base(_Iterator __it)
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
    { return __it; }
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4618      	mov	r0, r3
 8010798:	370c      	adds	r7, #12
 801079a:	46bd      	mov	sp, r7
 801079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a0:	4770      	bx	lr

080107a2 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES6_ET1_T0_S8_S7_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80107a2:	b5b0      	push	{r4, r5, r7, lr}
 80107a4:	b086      	sub	sp, #24
 80107a6:	af00      	add	r7, sp, #0
 80107a8:	60f8      	str	r0, [r7, #12]
 80107aa:	60b9      	str	r1, [r7, #8]
 80107ac:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80107ae:	68f8      	ldr	r0, [r7, #12]
 80107b0:	f7ff ff9f 	bl	80106f2 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80107b4:	4604      	mov	r4, r0
 80107b6:	68b8      	ldr	r0, [r7, #8]
 80107b8:	f7ff ff9b 	bl	80106f2 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80107bc:	4605      	mov	r5, r0
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f7ff ff97 	bl	80106f2 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80107c4:	4603      	mov	r3, r0
 80107c6:	461a      	mov	r2, r3
 80107c8:	4629      	mov	r1, r5
 80107ca:	4620      	mov	r0, r4
 80107cc:	f7fe fb51 	bl	800ee72 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 80107d0:	4603      	mov	r3, r0
 80107d2:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 80107d4:	f107 0214 	add.w	r2, r7, #20
 80107d8:	f107 0310 	add.w	r3, r7, #16
 80107dc:	4611      	mov	r1, r2
 80107de:	4618      	mov	r0, r3
 80107e0:	f7fe fa08 	bl	800ebf4 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 80107e4:	693b      	ldr	r3, [r7, #16]
    }
 80107e6:	4618      	mov	r0, r3
 80107e8:	3718      	adds	r7, #24
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bdb0      	pop	{r4, r5, r7, pc}

080107ee <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) throw()
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b082      	sub	sp, #8
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
 80107f6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80107f8:	6839      	ldr	r1, [r7, #0]
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f000 f890 	bl	8010920 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	4618      	mov	r0, r3
 8010804:	3708      	adds	r7, #8
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}

0801080a <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 801080a:	b580      	push	{r7, lr}
 801080c:	b082      	sub	sp, #8
 801080e:	af00      	add	r7, sp, #0
 8010810:	6078      	str	r0, [r7, #4]
 8010812:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6839      	ldr	r1, [r7, #0]
 8010818:	4618      	mov	r0, r3
 801081a:	f7ff ff33 	bl	8010684 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	4618      	mov	r0, r3
 8010822:	3708      	adds	r7, #8
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}

08010828 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8010828:	b480      	push	{r7}
 801082a:	b083      	sub	sp, #12
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	4618      	mov	r0, r3
 8010834:	370c      	adds	r7, #12
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr

0801083e <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 801083e:	b580      	push	{r7, lr}
 8010840:	b084      	sub	sp, #16
 8010842:	af00      	add	r7, sp, #0
 8010844:	6078      	str	r0, [r7, #4]
 8010846:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f7ff ffed 	bl	8010828 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 801084e:	4603      	mov	r3, r0
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010854:	6838      	ldr	r0, [r7, #0]
 8010856:	f7ff ffe7 	bl	8010828 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 801085a:	4603      	mov	r3, r0
 801085c:	681a      	ldr	r2, [r3, #0]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010862:	f107 030c 	add.w	r3, r7, #12
 8010866:	4618      	mov	r0, r3
 8010868:	f7ff ffde 	bl	8010828 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 801086c:	4603      	mov	r3, r0
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	601a      	str	r2, [r3, #0]
    }
 8010874:	bf00      	nop
 8010876:	3710      	adds	r7, #16
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 801087c:	b480      	push	{r7}
 801087e:	b083      	sub	sp, #12
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	4618      	mov	r0, r3
 8010888:	370c      	adds	r7, #12
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr

08010892 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8010892:	b580      	push	{r7, lr}
 8010894:	b084      	sub	sp, #16
 8010896:	af00      	add	r7, sp, #0
 8010898:	60f8      	str	r0, [r7, #12]
 801089a:	60b9      	str	r1, [r7, #8]
 801089c:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 801089e:	68b8      	ldr	r0, [r7, #8]
 80108a0:	f7ff ffec 	bl	801087c <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 80108a4:	bf00      	nop
 80108a6:	3710      	adds	r7, #16
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}

080108ac <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b084      	sub	sp, #16
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 80108b6:	2301      	movs	r3, #1
 80108b8:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 80108ba:	6839      	ldr	r1, [r7, #0]
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f000 f83b 	bl	8010938 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 80108c2:	4603      	mov	r3, r0
    }
 80108c4:	4618      	mov	r0, r3
 80108c6:	3710      	adds	r7, #16
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b084      	sub	sp, #16
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	60b9      	str	r1, [r7, #8]
 80108d6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	68b9      	ldr	r1, [r7, #8]
 80108dc:	68f8      	ldr	r0, [r7, #12]
 80108de:	f000 f83e 	bl	801095e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 80108e2:	4603      	mov	r3, r0
 80108e4:	4618      	mov	r0, r3
 80108e6:	3710      	adds	r7, #16
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b086      	sub	sp, #24
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80108f8:	68ba      	ldr	r2, [r7, #8]
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	1ad3      	subs	r3, r2, r3
 80108fe:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d005      	beq.n	8010912 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	461a      	mov	r2, r3
 801090a:	68f9      	ldr	r1, [r7, #12]
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f002 fad5 	bl	8012ebc <memmove>
	  return __result + _Num;
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	687a      	ldr	r2, [r7, #4]
 8010916:	4413      	add	r3, r2
	}
 8010918:	4618      	mov	r0, r3
 801091a:	3718      	adds	r7, #24
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}

08010920 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8010920:	b480      	push	{r7}
 8010922:	b083      	sub	sp, #12
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	6039      	str	r1, [r7, #0]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	4618      	mov	r0, r3
 801092e:	370c      	adds	r7, #12
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr

08010938 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 8010942:	2300      	movs	r3, #0
 8010944:	73fb      	strb	r3, [r7, #15]
 8010946:	f107 030f 	add.w	r3, r7, #15
 801094a:	461a      	mov	r2, r3
 801094c:	6839      	ldr	r1, [r7, #0]
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f000 f81d 	bl	801098e <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 8010954:	4603      	mov	r3, r0
	}
 8010956:	4618      	mov	r0, r3
 8010958:	3710      	adds	r7, #16
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}

0801095e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 801095e:	b590      	push	{r4, r7, lr}
 8010960:	b085      	sub	sp, #20
 8010962:	af00      	add	r7, sp, #0
 8010964:	60f8      	str	r0, [r7, #12]
 8010966:	60b9      	str	r1, [r7, #8]
 8010968:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 801096a:	68f8      	ldr	r0, [r7, #12]
 801096c:	f7ff fd7b 	bl	8010466 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8010970:	4604      	mov	r4, r0
 8010972:	68b8      	ldr	r0, [r7, #8]
 8010974:	f7ff fd77 	bl	8010466 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8010978:	4603      	mov	r3, r0
	       __result));
 801097a:	687a      	ldr	r2, [r7, #4]
 801097c:	4619      	mov	r1, r3
 801097e:	4620      	mov	r0, r4
 8010980:	f000 f819 	bl	80109b6 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 8010984:	4603      	mov	r3, r0
    }
 8010986:	4618      	mov	r0, r3
 8010988:	3714      	adds	r7, #20
 801098a:	46bd      	mov	sp, r7
 801098c:	bd90      	pop	{r4, r7, pc}

0801098e <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 801098e:	b580      	push	{r7, lr}
 8010990:	b084      	sub	sp, #16
 8010992:	af00      	add	r7, sp, #0
 8010994:	60f8      	str	r0, [r7, #12]
 8010996:	60b9      	str	r1, [r7, #8]
 8010998:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 801099a:	68f8      	ldr	r0, [r7, #12]
 801099c:	f7fe fa5e 	bl	800ee5c <_ZSt12__niter_baseIPhET_S1_>
 80109a0:	4603      	mov	r3, r0
 80109a2:	687a      	ldr	r2, [r7, #4]
 80109a4:	68b9      	ldr	r1, [r7, #8]
 80109a6:	4618      	mov	r0, r3
 80109a8:	f000 f821 	bl	80109ee <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>
 80109ac:	4603      	mov	r3, r0
    }
 80109ae:	4618      	mov	r0, r3
 80109b0:	3710      	adds	r7, #16
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}

080109b6 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80109b6:	b5b0      	push	{r4, r5, r7, lr}
 80109b8:	b084      	sub	sp, #16
 80109ba:	af00      	add	r7, sp, #0
 80109bc:	60f8      	str	r0, [r7, #12]
 80109be:	60b9      	str	r1, [r7, #8]
 80109c0:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80109c2:	68f8      	ldr	r0, [r7, #12]
 80109c4:	f7ff fe87 	bl	80106d6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80109c8:	4604      	mov	r4, r0
 80109ca:	68b8      	ldr	r0, [r7, #8]
 80109cc:	f7ff fe83 	bl	80106d6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80109d0:	4605      	mov	r5, r0
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f7fe fa42 	bl	800ee5c <_ZSt12__niter_baseIPhET_S1_>
 80109d8:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80109da:	461a      	mov	r2, r3
 80109dc:	4629      	mov	r1, r5
 80109de:	4620      	mov	r0, r4
 80109e0:	f7ff fe95 	bl	801070e <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 80109e4:	4603      	mov	r3, r0
    }
 80109e6:	4618      	mov	r0, r3
 80109e8:	3710      	adds	r7, #16
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bdb0      	pop	{r4, r5, r7, pc}

080109ee <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>:
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
 80109ee:	b580      	push	{r7, lr}
 80109f0:	b084      	sub	sp, #16
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	60f8      	str	r0, [r7, #12]
 80109f6:	60b9      	str	r1, [r7, #8]
 80109f8:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __first + __n, __c);
 80109fa:	68fa      	ldr	r2, [r7, #12]
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	4413      	add	r3, r2
 8010a00:	687a      	ldr	r2, [r7, #4]
 8010a02:	4619      	mov	r1, r3
 8010a04:	68f8      	ldr	r0, [r7, #12]
 8010a06:	f000 f807 	bl	8010a18 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
      return __first + __n;
 8010a0a:	68fa      	ldr	r2, [r7, #12]
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	4413      	add	r3, r2
    }
 8010a10:	4618      	mov	r0, r3
 8010a12:	3710      	adds	r7, #16
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}

08010a18 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b086      	sub	sp, #24
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	60b9      	str	r1, [r7, #8]
 8010a22:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 8010a2a:	68ba      	ldr	r2, [r7, #8]
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	1ad3      	subs	r3, r2, r3
 8010a30:	613b      	str	r3, [r7, #16]
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d005      	beq.n	8010a44 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8010a38:	7dfb      	ldrb	r3, [r7, #23]
 8010a3a:	693a      	ldr	r2, [r7, #16]
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	68f8      	ldr	r0, [r7, #12]
 8010a40:	f002 fa55 	bl	8012eee <memset>
    }
 8010a44:	bf00      	nop
 8010a46:	3718      	adds	r7, #24
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <_ZN3cep15AbortionHandlerEi>:
 *******************************************************************************
 */
#include "application.hpp"

[[noreturn]] void cep::AbortionHandler(int signal)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
    (void)signal;
    // This function will in most cases be called by the STL, in place of the standard _exit().
    Application::AssertFailed();
 8010a54:	f7fb fa5a 	bl	800bf0c <_ZN3cep11Application12AssertFailedEv>
    while (1)
 8010a58:	e7fe      	b.n	8010a58 <_ZN3cep15AbortionHandlerEi+0xc>
	...

08010a5c <_ZN6LoggerC1EP10UartModuleRKSt8functionIFvPKcjEE>:
#include <cstdio>

Logger* Logger::s_instance = nullptr;

#if defined(NILAI_USE_UART)
Logger::Logger(UartModule* uart, const LogFunc& logFunc)
 8010a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a60:	b088      	sub	sp, #32
 8010a62:	af04      	add	r7, sp, #16
 8010a64:	60f8      	str	r0, [r7, #12]
 8010a66:	60b9      	str	r1, [r7, #8]
 8010a68:	607a      	str	r2, [r7, #4]
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	601a      	str	r2, [r3, #0]
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	3304      	adds	r3, #4
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7fc f8e3 	bl	800cc40 <_ZNSt8functionIFvPKcjEEC1Ev>
{
    CEP_ASSERT(s_instance == nullptr, "Can only have one instance of Logger!");
 8010a7a:	4b2f      	ldr	r3, [pc, #188]	; (8010b38 <_ZN6LoggerC1EP10UartModuleRKSt8functionIFvPKcjEE+0xdc>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d048      	beq.n	8010b14 <_ZN6LoggerC1EP10UartModuleRKSt8functionIFvPKcjEE+0xb8>
 8010a82:	f7fb fa47 	bl	800bf14 <_ZN6Logger3GetEv>
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d041      	beq.n	8010b10 <_ZN6LoggerC1EP10UartModuleRKSt8functionIFvPKcjEE+0xb4>
 8010a8c:	f7fb fa42 	bl	800bf14 <_ZN6Logger3GetEv>
 8010a90:	4680      	mov	r8, r0
 8010a92:	f7f8 fa41 	bl	8008f18 <HAL_GetTick>
 8010a96:	4602      	mov	r2, r0
 8010a98:	4b28      	ldr	r3, [pc, #160]	; (8010b3c <_ZN6LoggerC1EP10UartModuleRKSt8functionIFvPKcjEE+0xe0>)
 8010a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8010a9e:	0d5e      	lsrs	r6, r3, #21
 8010aa0:	f7f8 fa3a 	bl	8008f18 <HAL_GetTick>
 8010aa4:	4602      	mov	r2, r0
 8010aa6:	4b26      	ldr	r3, [pc, #152]	; (8010b40 <_ZN6LoggerC1EP10UartModuleRKSt8functionIFvPKcjEE+0xe4>)
 8010aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8010aac:	0b9a      	lsrs	r2, r3, #14
 8010aae:	4b25      	ldr	r3, [pc, #148]	; (8010b44 <_ZN6LoggerC1EP10UartModuleRKSt8functionIFvPKcjEE+0xe8>)
 8010ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8010ab4:	095d      	lsrs	r5, r3, #5
 8010ab6:	462b      	mov	r3, r5
 8010ab8:	011b      	lsls	r3, r3, #4
 8010aba:	1b5b      	subs	r3, r3, r5
 8010abc:	009b      	lsls	r3, r3, #2
 8010abe:	1ad5      	subs	r5, r2, r3
 8010ac0:	f7f8 fa2a 	bl	8008f18 <HAL_GetTick>
 8010ac4:	4602      	mov	r2, r0
 8010ac6:	4b20      	ldr	r3, [pc, #128]	; (8010b48 <_ZN6LoggerC1EP10UartModuleRKSt8functionIFvPKcjEE+0xec>)
 8010ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8010acc:	099a      	lsrs	r2, r3, #6
 8010ace:	4b1d      	ldr	r3, [pc, #116]	; (8010b44 <_ZN6LoggerC1EP10UartModuleRKSt8functionIFvPKcjEE+0xe8>)
 8010ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8010ad4:	095c      	lsrs	r4, r3, #5
 8010ad6:	4623      	mov	r3, r4
 8010ad8:	011b      	lsls	r3, r3, #4
 8010ada:	1b1b      	subs	r3, r3, r4
 8010adc:	009b      	lsls	r3, r3, #2
 8010ade:	1ad4      	subs	r4, r2, r3
 8010ae0:	f7f8 fa1a 	bl	8008f18 <HAL_GetTick>
 8010ae4:	4602      	mov	r2, r0
 8010ae6:	4b18      	ldr	r3, [pc, #96]	; (8010b48 <_ZN6LoggerC1EP10UartModuleRKSt8functionIFvPKcjEE+0xec>)
 8010ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8010aec:	099b      	lsrs	r3, r3, #6
 8010aee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010af2:	fb01 f303 	mul.w	r3, r1, r3
 8010af6:	1ad3      	subs	r3, r2, r3
 8010af8:	4a14      	ldr	r2, [pc, #80]	; (8010b4c <_ZN6LoggerC1EP10UartModuleRKSt8functionIFvPKcjEE+0xf0>)
 8010afa:	9203      	str	r2, [sp, #12]
 8010afc:	221b      	movs	r2, #27
 8010afe:	9202      	str	r2, [sp, #8]
 8010b00:	9301      	str	r3, [sp, #4]
 8010b02:	9400      	str	r4, [sp, #0]
 8010b04:	462b      	mov	r3, r5
 8010b06:	4632      	mov	r2, r6
 8010b08:	4911      	ldr	r1, [pc, #68]	; (8010b50 <_ZN6LoggerC1EP10UartModuleRKSt8functionIFvPKcjEE+0xf4>)
 8010b0a:	4640      	mov	r0, r8
 8010b0c:	f000 f822 	bl	8010b54 <_ZN6Logger3LogEPKcz>
 8010b10:	f7fb f9fc 	bl	800bf0c <_ZN3cep11Application12AssertFailedEv>
    s_instance = this;
 8010b14:	4a08      	ldr	r2, [pc, #32]	; (8010b38 <_ZN6LoggerC1EP10UartModuleRKSt8functionIFvPKcjEE+0xdc>)
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	6013      	str	r3, [r2, #0]
    m_uart     = uart;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	68ba      	ldr	r2, [r7, #8]
 8010b1e:	601a      	str	r2, [r3, #0]
    m_logFunc  = logFunc;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	3304      	adds	r3, #4
 8010b24:	6879      	ldr	r1, [r7, #4]
 8010b26:	4618      	mov	r0, r3
 8010b28:	f000 f8bd 	bl	8010ca6 <_ZNSt8functionIFvPKcjEEaSERKS3_>
}
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3710      	adds	r7, #16
 8010b32:	46bd      	mov	sp, r7
 8010b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b38:	20000ae4 	.word	0x20000ae4
 8010b3c:	95217cb1 	.word	0x95217cb1
 8010b40:	45e7b273 	.word	0x45e7b273
 8010b44:	88888889 	.word	0x88888889
 8010b48:	10624dd3 	.word	0x10624dd3
 8010b4c:	08017044 	.word	0x08017044
 8010b50:	08016fe4 	.word	0x08016fe4

08010b54 <_ZN6Logger3LogEPKcz>:
#endif

Logger::~Logger() = default;

void Logger::Log(const char* fmt, ...)
{
 8010b54:	b40e      	push	{r1, r2, r3}
 8010b56:	b580      	push	{r7, lr}
 8010b58:	b085      	sub	sp, #20
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, fmt);
 8010b5e:	f107 0320 	add.w	r3, r7, #32
 8010b62:	60fb      	str	r3, [r7, #12]

    VLog(fmt, args);
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	69f9      	ldr	r1, [r7, #28]
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f000 f807 	bl	8010b7c <_ZN6Logger4VLogEPKcSt9__va_list>

    va_end(args);
}
 8010b6e:	bf00      	nop
 8010b70:	3714      	adds	r7, #20
 8010b72:	46bd      	mov	sp, r7
 8010b74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010b78:	b003      	add	sp, #12
 8010b7a:	4770      	bx	lr

08010b7c <_ZN6Logger4VLogEPKcSt9__va_list>:

void Logger::VLog(const char* fmt, va_list args)
{
 8010b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b80:	b08a      	sub	sp, #40	; 0x28
 8010b82:	af04      	add	r7, sp, #16
 8010b84:	60f8      	str	r0, [r7, #12]
 8010b86:	60b9      	str	r1, [r7, #8]
 8010b88:	607a      	str	r2, [r7, #4]
    static char buff[1024] = {0};

    size_t s = vsnprintf(buff, sizeof_array(buff), fmt, args);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	68ba      	ldr	r2, [r7, #8]
 8010b8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010b92:	4838      	ldr	r0, [pc, #224]	; (8010c74 <_ZN6Logger4VLogEPKcSt9__va_list+0xf8>)
 8010b94:	f003 ff00 	bl	8014998 <vsnprintf>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	617b      	str	r3, [r7, #20]

    CEP_ASSERT(s < sizeof_array(buff), "vsnprintf error!");
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ba2:	d348      	bcc.n	8010c36 <_ZN6Logger4VLogEPKcSt9__va_list+0xba>
 8010ba4:	f7fb f9b6 	bl	800bf14 <_ZN6Logger3GetEv>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d041      	beq.n	8010c32 <_ZN6Logger4VLogEPKcSt9__va_list+0xb6>
 8010bae:	f7fb f9b1 	bl	800bf14 <_ZN6Logger3GetEv>
 8010bb2:	4680      	mov	r8, r0
 8010bb4:	f7f8 f9b0 	bl	8008f18 <HAL_GetTick>
 8010bb8:	4602      	mov	r2, r0
 8010bba:	4b2f      	ldr	r3, [pc, #188]	; (8010c78 <_ZN6Logger4VLogEPKcSt9__va_list+0xfc>)
 8010bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8010bc0:	0d5e      	lsrs	r6, r3, #21
 8010bc2:	f7f8 f9a9 	bl	8008f18 <HAL_GetTick>
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	4b2c      	ldr	r3, [pc, #176]	; (8010c7c <_ZN6Logger4VLogEPKcSt9__va_list+0x100>)
 8010bca:	fba3 2302 	umull	r2, r3, r3, r2
 8010bce:	0b9a      	lsrs	r2, r3, #14
 8010bd0:	4b2b      	ldr	r3, [pc, #172]	; (8010c80 <_ZN6Logger4VLogEPKcSt9__va_list+0x104>)
 8010bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8010bd6:	095d      	lsrs	r5, r3, #5
 8010bd8:	462b      	mov	r3, r5
 8010bda:	011b      	lsls	r3, r3, #4
 8010bdc:	1b5b      	subs	r3, r3, r5
 8010bde:	009b      	lsls	r3, r3, #2
 8010be0:	1ad5      	subs	r5, r2, r3
 8010be2:	f7f8 f999 	bl	8008f18 <HAL_GetTick>
 8010be6:	4602      	mov	r2, r0
 8010be8:	4b26      	ldr	r3, [pc, #152]	; (8010c84 <_ZN6Logger4VLogEPKcSt9__va_list+0x108>)
 8010bea:	fba3 2302 	umull	r2, r3, r3, r2
 8010bee:	099a      	lsrs	r2, r3, #6
 8010bf0:	4b23      	ldr	r3, [pc, #140]	; (8010c80 <_ZN6Logger4VLogEPKcSt9__va_list+0x104>)
 8010bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8010bf6:	095c      	lsrs	r4, r3, #5
 8010bf8:	4623      	mov	r3, r4
 8010bfa:	011b      	lsls	r3, r3, #4
 8010bfc:	1b1b      	subs	r3, r3, r4
 8010bfe:	009b      	lsls	r3, r3, #2
 8010c00:	1ad4      	subs	r4, r2, r3
 8010c02:	f7f8 f989 	bl	8008f18 <HAL_GetTick>
 8010c06:	4602      	mov	r2, r0
 8010c08:	4b1e      	ldr	r3, [pc, #120]	; (8010c84 <_ZN6Logger4VLogEPKcSt9__va_list+0x108>)
 8010c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8010c0e:	099b      	lsrs	r3, r3, #6
 8010c10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010c14:	fb01 f303 	mul.w	r3, r1, r3
 8010c18:	1ad3      	subs	r3, r2, r3
 8010c1a:	4a1b      	ldr	r2, [pc, #108]	; (8010c88 <_ZN6Logger4VLogEPKcSt9__va_list+0x10c>)
 8010c1c:	9203      	str	r2, [sp, #12]
 8010c1e:	223c      	movs	r2, #60	; 0x3c
 8010c20:	9202      	str	r2, [sp, #8]
 8010c22:	9301      	str	r3, [sp, #4]
 8010c24:	9400      	str	r4, [sp, #0]
 8010c26:	462b      	mov	r3, r5
 8010c28:	4632      	mov	r2, r6
 8010c2a:	4918      	ldr	r1, [pc, #96]	; (8010c8c <_ZN6Logger4VLogEPKcSt9__va_list+0x110>)
 8010c2c:	4640      	mov	r0, r8
 8010c2e:	f7ff ff91 	bl	8010b54 <_ZN6Logger3LogEPKcz>
 8010c32:	f7fb f96b 	bl	800bf0c <_ZN3cep11Application12AssertFailedEv>
#if defined(NILAI_USE_UART)
    if (m_uart != nullptr)
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d006      	beq.n	8010c4c <_ZN6Logger4VLogEPKcSt9__va_list+0xd0>
    {
        m_uart->Transmit(buff, s);
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	697a      	ldr	r2, [r7, #20]
 8010c44:	490b      	ldr	r1, [pc, #44]	; (8010c74 <_ZN6Logger4VLogEPKcSt9__va_list+0xf8>)
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7fe fcfe 	bl	800f648 <_ZN10UartModule8TransmitEPKcj>
    }
#endif
    if (m_logFunc)
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	3304      	adds	r3, #4
 8010c50:	4618      	mov	r0, r3
 8010c52:	f000 f843 	bl	8010cdc <_ZNKSt8functionIFvPKcjEEcvbEv>
 8010c56:	4603      	mov	r3, r0
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d006      	beq.n	8010c6a <_ZN6Logger4VLogEPKcSt9__va_list+0xee>
    {
        m_logFunc(buff, s);
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	3304      	adds	r3, #4
 8010c60:	697a      	ldr	r2, [r7, #20]
 8010c62:	4904      	ldr	r1, [pc, #16]	; (8010c74 <_ZN6Logger4VLogEPKcSt9__va_list+0xf8>)
 8010c64:	4618      	mov	r0, r3
 8010c66:	f000 f849 	bl	8010cfc <_ZNKSt8functionIFvPKcjEEclES1_j>
    }
}
 8010c6a:	bf00      	nop
 8010c6c:	3718      	adds	r7, #24
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c74:	20000ae8 	.word	0x20000ae8
 8010c78:	95217cb1 	.word	0x95217cb1
 8010c7c:	45e7b273 	.word	0x45e7b273
 8010c80:	88888889 	.word	0x88888889
 8010c84:	10624dd3 	.word	0x10624dd3
 8010c88:	08017044 	.word	0x08017044
 8010c8c:	08017064 	.word	0x08017064

08010c90 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010c90:	b480      	push	{r7}
 8010c92:	b083      	sub	sp, #12
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	370c      	adds	r7, #12
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr

08010ca6 <_ZNSt8functionIFvPKcjEEaSERKS3_>:
      operator=(const function& __x)
 8010ca6:	b580      	push	{r7, lr}
 8010ca8:	b086      	sub	sp, #24
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	6078      	str	r0, [r7, #4]
 8010cae:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8010cb0:	f107 0308 	add.w	r3, r7, #8
 8010cb4:	6839      	ldr	r1, [r7, #0]
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f000 f845 	bl	8010d46 <_ZNSt8functionIFvPKcjEEC1ERKS3_>
 8010cbc:	f107 0308 	add.w	r3, r7, #8
 8010cc0:	6879      	ldr	r1, [r7, #4]
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f000 f861 	bl	8010d8a <_ZNSt8functionIFvPKcjEE4swapERS3_>
 8010cc8:	f107 0308 	add.w	r3, r7, #8
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fb fad4 	bl	800c27a <_ZNSt8functionIFvPKcjEED1Ev>
	return *this;
 8010cd2:	687b      	ldr	r3, [r7, #4]
      }
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3718      	adds	r7, #24
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <_ZNKSt8functionIFvPKcjEEcvbEv>:
      explicit operator bool() const noexcept
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f7fe f8ef 	bl	800eeca <_ZNKSt14_Function_base8_M_emptyEv>
 8010cec:	4603      	mov	r3, r0
 8010cee:	f083 0301 	eor.w	r3, r3, #1
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3708      	adds	r7, #8
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}

08010cfc <_ZNKSt8functionIFvPKcjEEclES1_j>:
    function<_Res(_ArgTypes...)>::
 8010cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cfe:	b085      	sub	sp, #20
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	60f8      	str	r0, [r7, #12]
 8010d04:	60b9      	str	r1, [r7, #8]
 8010d06:	607a      	str	r2, [r7, #4]
      if (_M_empty())
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f7fe f8dd 	bl	800eeca <_ZNKSt14_Function_base8_M_emptyEv>
 8010d10:	4603      	mov	r3, r0
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d001      	beq.n	8010d1a <_ZNKSt8functionIFvPKcjEEclES1_j+0x1e>
	__throw_bad_function_call();
 8010d16:	f000 f9fd 	bl	8011114 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	68dc      	ldr	r4, [r3, #12]
 8010d1e:	68fd      	ldr	r5, [r7, #12]
 8010d20:	f107 0308 	add.w	r3, r7, #8
 8010d24:	4618      	mov	r0, r3
 8010d26:	f000 f851 	bl	8010dcc <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
 8010d2a:	4606      	mov	r6, r0
 8010d2c:	1d3b      	adds	r3, r7, #4
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7ff ffae 	bl	8010c90 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8010d34:	4603      	mov	r3, r0
 8010d36:	461a      	mov	r2, r3
 8010d38:	4631      	mov	r1, r6
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	47a0      	blx	r4
 8010d3e:	bf00      	nop
    }
 8010d40:	3714      	adds	r7, #20
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010d46 <_ZNSt8functionIFvPKcjEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8010d46:	b580      	push	{r7, lr}
 8010d48:	b082      	sub	sp, #8
 8010d4a:	af00      	add	r7, sp, #0
 8010d4c:	6078      	str	r0, [r7, #4]
 8010d4e:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	4618      	mov	r0, r3
 8010d54:	f7fb fa5c 	bl	800c210 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8010d58:	6838      	ldr	r0, [r7, #0]
 8010d5a:	f7ff ffbf 	bl	8010cdc <_ZNKSt8functionIFvPKcjEEcvbEv>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00d      	beq.n	8010d80 <_ZNSt8functionIFvPKcjEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	689b      	ldr	r3, [r3, #8]
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	6839      	ldr	r1, [r7, #0]
 8010d6c:	2202      	movs	r2, #2
 8010d6e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	68da      	ldr	r2, [r3, #12]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	689a      	ldr	r2, [r3, #8]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	609a      	str	r2, [r3, #8]
    }
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	4618      	mov	r0, r3
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}

08010d8a <_ZNSt8functionIFvPKcjEE4swapERS3_>:
      void swap(function& __x) noexcept
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b082      	sub	sp, #8
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
 8010d92:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	683a      	ldr	r2, [r7, #0]
 8010d98:	4611      	mov	r1, r2
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7ff faf6 	bl	801038c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f103 0208 	add.w	r2, r3, #8
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	3308      	adds	r3, #8
 8010daa:	4619      	mov	r1, r3
 8010dac:	4610      	mov	r0, r2
 8010dae:	f7ff fb1f 	bl	80103f0 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f103 020c 	add.w	r2, r3, #12
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	330c      	adds	r3, #12
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	4610      	mov	r0, r2
 8010dc0:	f000 f81a 	bl	8010df8 <_ZSt4swapIPFvRKSt9_Any_dataOPKcOjEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 8010dc4:	bf00      	nop
 8010dc6:	3708      	adds	r7, #8
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010dcc:	b480      	push	{r7}
 8010dce:	b083      	sub	sp, #12
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	370c      	adds	r7, #12
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr

08010de2 <_ZSt4moveIRPFvRKSt9_Any_dataOPKcOjEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8010de2:	b480      	push	{r7}
 8010de4:	b083      	sub	sp, #12
 8010de6:	af00      	add	r7, sp, #0
 8010de8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	4618      	mov	r0, r3
 8010dee:	370c      	adds	r7, #12
 8010df0:	46bd      	mov	sp, r7
 8010df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df6:	4770      	bx	lr

08010df8 <_ZSt4swapIPFvRKSt9_Any_dataOPKcOjEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
 8010e00:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f7ff ffed 	bl	8010de2 <_ZSt4moveIRPFvRKSt9_Any_dataOPKcOjEEONSt16remove_referenceIT_E4typeEOSB_>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010e0e:	6838      	ldr	r0, [r7, #0]
 8010e10:	f7ff ffe7 	bl	8010de2 <_ZSt4moveIRPFvRKSt9_Any_dataOPKcOjEEONSt16remove_referenceIT_E4typeEOSB_>
 8010e14:	4603      	mov	r3, r0
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010e1c:	f107 030c 	add.w	r3, r7, #12
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7ff ffde 	bl	8010de2 <_ZSt4moveIRPFvRKSt9_Any_dataOPKcOjEEONSt16remove_referenceIT_E4typeEOSB_>
 8010e26:	4603      	mov	r3, r0
 8010e28:	681a      	ldr	r2, [r3, #0]
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	601a      	str	r2, [r3, #0]
    }
 8010e2e:	bf00      	nop
 8010e30:	3710      	adds	r7, #16
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
	...

08010e38 <_ZNSaIcEC1Ev>:
 8010e38:	4770      	bx	lr
 8010e3a:	bf00      	nop

08010e3c <_ZNSaIcEC1ERKS_>:
 8010e3c:	4770      	bx	lr
 8010e3e:	bf00      	nop

08010e40 <_ZNSaIcED1Ev>:
 8010e40:	4770      	bx	lr
 8010e42:	bf00      	nop

08010e44 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8010e44:	7803      	ldrb	r3, [r0, #0]
 8010e46:	b91b      	cbnz	r3, 8010e50 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xc>
 8010e48:	6843      	ldr	r3, [r0, #4]
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	4283      	cmp	r3, r0
 8010e4e:	d014      	beq.n	8010e7a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x36>
 8010e50:	6883      	ldr	r3, [r0, #8]
 8010e52:	b90b      	cbnz	r3, 8010e58 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
 8010e54:	e005      	b.n	8010e62 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1e>
 8010e56:	4613      	mov	r3, r2
 8010e58:	68da      	ldr	r2, [r3, #12]
 8010e5a:	2a00      	cmp	r2, #0
 8010e5c:	d1fb      	bne.n	8010e56 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8010e5e:	4618      	mov	r0, r3
 8010e60:	4770      	bx	lr
 8010e62:	6842      	ldr	r2, [r0, #4]
 8010e64:	6893      	ldr	r3, [r2, #8]
 8010e66:	4298      	cmp	r0, r3
 8010e68:	d001      	beq.n	8010e6e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8010e6a:	e009      	b.n	8010e80 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x3c>
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	6853      	ldr	r3, [r2, #4]
 8010e70:	6899      	ldr	r1, [r3, #8]
 8010e72:	4291      	cmp	r1, r2
 8010e74:	d0fa      	beq.n	8010e6c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x28>
 8010e76:	4618      	mov	r0, r3
 8010e78:	4770      	bx	lr
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	4770      	bx	lr
 8010e80:	4613      	mov	r3, r2
 8010e82:	e7ec      	b.n	8010e5e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1a>

08010e84 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8010e84:	68c3      	ldr	r3, [r0, #12]
 8010e86:	b90b      	cbnz	r3, 8010e8c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x8>
 8010e88:	e005      	b.n	8010e96 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x12>
 8010e8a:	4613      	mov	r3, r2
 8010e8c:	689a      	ldr	r2, [r3, #8]
 8010e8e:	2a00      	cmp	r2, #0
 8010e90:	d1fb      	bne.n	8010e8a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x6>
 8010e92:	4618      	mov	r0, r3
 8010e94:	4770      	bx	lr
 8010e96:	6842      	ldr	r2, [r0, #4]
 8010e98:	68d3      	ldr	r3, [r2, #12]
 8010e9a:	4298      	cmp	r0, r3
 8010e9c:	d001      	beq.n	8010ea2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1e>
 8010e9e:	e00a      	b.n	8010eb6 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x32>
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	6853      	ldr	r3, [r2, #4]
 8010ea4:	68d9      	ldr	r1, [r3, #12]
 8010ea6:	4291      	cmp	r1, r2
 8010ea8:	d0fa      	beq.n	8010ea0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8010eaa:	68d1      	ldr	r1, [r2, #12]
 8010eac:	428b      	cmp	r3, r1
 8010eae:	bf08      	it	eq
 8010eb0:	4613      	moveq	r3, r2
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	4770      	bx	lr
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	e7eb      	b.n	8010e92 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8010eba:	bf00      	nop

08010ebc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8010ebc:	f7ff bfc2 	b.w	8010e44 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08010ec0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8010ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ec4:	2400      	movs	r4, #0
 8010ec6:	e9c1 2401 	strd	r2, r4, [r1, #4]
 8010eca:	60cc      	str	r4, [r1, #12]
 8010ecc:	700c      	strb	r4, [r1, #0]
 8010ece:	b318      	cbz	r0, 8010f18 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	6091      	str	r1, [r2, #8]
 8010ed4:	f000 80a2 	beq.w	801101c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x15c>
 8010ed8:	6898      	ldr	r0, [r3, #8]
 8010eda:	4290      	cmp	r0, r2
 8010edc:	f000 80a1 	beq.w	8011022 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x162>
 8010ee0:	685e      	ldr	r6, [r3, #4]
 8010ee2:	2701      	movs	r7, #1
 8010ee4:	f04f 0c00 	mov.w	ip, #0
 8010ee8:	42b1      	cmp	r1, r6
 8010eea:	d011      	beq.n	8010f10 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8010eec:	6848      	ldr	r0, [r1, #4]
 8010eee:	7802      	ldrb	r2, [r0, #0]
 8010ef0:	2a00      	cmp	r2, #0
 8010ef2:	d171      	bne.n	8010fd8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x118>
 8010ef4:	6842      	ldr	r2, [r0, #4]
 8010ef6:	6894      	ldr	r4, [r2, #8]
 8010ef8:	42a0      	cmp	r0, r4
 8010efa:	4615      	mov	r5, r2
 8010efc:	d02c      	beq.n	8010f58 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
 8010efe:	b18c      	cbz	r4, 8010f24 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8010f00:	7825      	ldrb	r5, [r4, #0]
 8010f02:	b97d      	cbnz	r5, 8010f24 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8010f04:	4611      	mov	r1, r2
 8010f06:	42b1      	cmp	r1, r6
 8010f08:	7007      	strb	r7, [r0, #0]
 8010f0a:	7027      	strb	r7, [r4, #0]
 8010f0c:	7015      	strb	r5, [r2, #0]
 8010f0e:	d1ed      	bne.n	8010eec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2c>
 8010f10:	2301      	movs	r3, #1
 8010f12:	700b      	strb	r3, [r1, #0]
 8010f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f18:	60d1      	str	r1, [r2, #12]
 8010f1a:	68d8      	ldr	r0, [r3, #12]
 8010f1c:	4290      	cmp	r0, r2
 8010f1e:	d1df      	bne.n	8010ee0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8010f20:	60d9      	str	r1, [r3, #12]
 8010f22:	e7dd      	b.n	8010ee0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8010f24:	6884      	ldr	r4, [r0, #8]
 8010f26:	428c      	cmp	r4, r1
 8010f28:	d03f      	beq.n	8010faa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xea>
 8010f2a:	68d4      	ldr	r4, [r2, #12]
 8010f2c:	7007      	strb	r7, [r0, #0]
 8010f2e:	68a0      	ldr	r0, [r4, #8]
 8010f30:	60d0      	str	r0, [r2, #12]
 8010f32:	f882 c000 	strb.w	ip, [r2]
 8010f36:	b100      	cbz	r0, 8010f3a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7a>
 8010f38:	6042      	str	r2, [r0, #4]
 8010f3a:	6850      	ldr	r0, [r2, #4]
 8010f3c:	6060      	str	r0, [r4, #4]
 8010f3e:	6858      	ldr	r0, [r3, #4]
 8010f40:	4282      	cmp	r2, r0
 8010f42:	d047      	beq.n	8010fd4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x114>
 8010f44:	6850      	ldr	r0, [r2, #4]
 8010f46:	6885      	ldr	r5, [r0, #8]
 8010f48:	42aa      	cmp	r2, r5
 8010f4a:	bf0c      	ite	eq
 8010f4c:	6084      	streq	r4, [r0, #8]
 8010f4e:	60c4      	strne	r4, [r0, #12]
 8010f50:	60a2      	str	r2, [r4, #8]
 8010f52:	6054      	str	r4, [r2, #4]
 8010f54:	685e      	ldr	r6, [r3, #4]
 8010f56:	e7c7      	b.n	8010ee8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8010f58:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8010f5c:	f1be 0f00 	cmp.w	lr, #0
 8010f60:	d00b      	beq.n	8010f7a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
 8010f62:	f89e 8000 	ldrb.w	r8, [lr]
 8010f66:	f1b8 0f00 	cmp.w	r8, #0
 8010f6a:	d106      	bne.n	8010f7a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
 8010f6c:	7007      	strb	r7, [r0, #0]
 8010f6e:	4611      	mov	r1, r2
 8010f70:	f88e 7000 	strb.w	r7, [lr]
 8010f74:	f882 8000 	strb.w	r8, [r2]
 8010f78:	e7b6      	b.n	8010ee8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8010f7a:	68c6      	ldr	r6, [r0, #12]
 8010f7c:	428e      	cmp	r6, r1
 8010f7e:	d032      	beq.n	8010fe6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x126>
 8010f80:	7027      	strb	r7, [r4, #0]
 8010f82:	f885 c000 	strb.w	ip, [r5]
 8010f86:	60ae      	str	r6, [r5, #8]
 8010f88:	b106      	cbz	r6, 8010f8c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xcc>
 8010f8a:	6075      	str	r5, [r6, #4]
 8010f8c:	686a      	ldr	r2, [r5, #4]
 8010f8e:	6042      	str	r2, [r0, #4]
 8010f90:	685a      	ldr	r2, [r3, #4]
 8010f92:	4295      	cmp	r5, r2
 8010f94:	d025      	beq.n	8010fe2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x122>
 8010f96:	686a      	ldr	r2, [r5, #4]
 8010f98:	68d4      	ldr	r4, [r2, #12]
 8010f9a:	42a5      	cmp	r5, r4
 8010f9c:	bf0c      	ite	eq
 8010f9e:	60d0      	streq	r0, [r2, #12]
 8010fa0:	6090      	strne	r0, [r2, #8]
 8010fa2:	60c5      	str	r5, [r0, #12]
 8010fa4:	6068      	str	r0, [r5, #4]
 8010fa6:	685e      	ldr	r6, [r3, #4]
 8010fa8:	e79e      	b.n	8010ee8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8010faa:	68cd      	ldr	r5, [r1, #12]
 8010fac:	6085      	str	r5, [r0, #8]
 8010fae:	2d00      	cmp	r5, #0
 8010fb0:	d032      	beq.n	8011018 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x158>
 8010fb2:	6068      	str	r0, [r5, #4]
 8010fb4:	6845      	ldr	r5, [r0, #4]
 8010fb6:	604d      	str	r5, [r1, #4]
 8010fb8:	685d      	ldr	r5, [r3, #4]
 8010fba:	42a8      	cmp	r0, r5
 8010fbc:	d02a      	beq.n	8011014 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x154>
 8010fbe:	6846      	ldr	r6, [r0, #4]
 8010fc0:	68f5      	ldr	r5, [r6, #12]
 8010fc2:	42a8      	cmp	r0, r5
 8010fc4:	bf0c      	ite	eq
 8010fc6:	60f1      	streq	r1, [r6, #12]
 8010fc8:	60b1      	strne	r1, [r6, #8]
 8010fca:	60c8      	str	r0, [r1, #12]
 8010fcc:	6041      	str	r1, [r0, #4]
 8010fce:	4601      	mov	r1, r0
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	e7aa      	b.n	8010f2a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6a>
 8010fd4:	605c      	str	r4, [r3, #4]
 8010fd6:	e7bb      	b.n	8010f50 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
 8010fd8:	4631      	mov	r1, r6
 8010fda:	2301      	movs	r3, #1
 8010fdc:	700b      	strb	r3, [r1, #0]
 8010fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fe2:	6058      	str	r0, [r3, #4]
 8010fe4:	e7dd      	b.n	8010fa2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xe2>
 8010fe6:	688c      	ldr	r4, [r1, #8]
 8010fe8:	60c4      	str	r4, [r0, #12]
 8010fea:	b10c      	cbz	r4, 8010ff0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x130>
 8010fec:	6060      	str	r0, [r4, #4]
 8010fee:	6842      	ldr	r2, [r0, #4]
 8010ff0:	604a      	str	r2, [r1, #4]
 8010ff2:	685a      	ldr	r2, [r3, #4]
 8010ff4:	4290      	cmp	r0, r2
 8010ff6:	d016      	beq.n	8011026 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x166>
 8010ff8:	6844      	ldr	r4, [r0, #4]
 8010ffa:	68a2      	ldr	r2, [r4, #8]
 8010ffc:	4290      	cmp	r0, r2
 8010ffe:	bf0c      	ite	eq
 8011000:	60a1      	streq	r1, [r4, #8]
 8011002:	60e1      	strne	r1, [r4, #12]
 8011004:	6088      	str	r0, [r1, #8]
 8011006:	68aa      	ldr	r2, [r5, #8]
 8011008:	6041      	str	r1, [r0, #4]
 801100a:	4634      	mov	r4, r6
 801100c:	4601      	mov	r1, r0
 801100e:	68d6      	ldr	r6, [r2, #12]
 8011010:	4610      	mov	r0, r2
 8011012:	e7b5      	b.n	8010f80 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 8011014:	6059      	str	r1, [r3, #4]
 8011016:	e7d8      	b.n	8010fca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x10a>
 8011018:	4615      	mov	r5, r2
 801101a:	e7cc      	b.n	8010fb6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xf6>
 801101c:	6059      	str	r1, [r3, #4]
 801101e:	60d9      	str	r1, [r3, #12]
 8011020:	e75e      	b.n	8010ee0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8011022:	6099      	str	r1, [r3, #8]
 8011024:	e75c      	b.n	8010ee0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8011026:	6059      	str	r1, [r3, #4]
 8011028:	e7ec      	b.n	8011004 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x144>
 801102a:	bf00      	nop

0801102c <_ZSt17__throw_bad_allocv>:
 801102c:	b508      	push	{r3, lr}
 801102e:	2004      	movs	r0, #4
 8011030:	f000 ff9a 	bl	8011f68 <__cxa_allocate_exception>
 8011034:	4b02      	ldr	r3, [pc, #8]	; (8011040 <_ZSt17__throw_bad_allocv+0x14>)
 8011036:	6003      	str	r3, [r0, #0]
 8011038:	4a02      	ldr	r2, [pc, #8]	; (8011044 <_ZSt17__throw_bad_allocv+0x18>)
 801103a:	4903      	ldr	r1, [pc, #12]	; (8011048 <_ZSt17__throw_bad_allocv+0x1c>)
 801103c:	f000 fcfc 	bl	8011a38 <__cxa_throw>
 8011040:	08017a10 	.word	0x08017a10
 8011044:	080112ed 	.word	0x080112ed
 8011048:	080179ec 	.word	0x080179ec

0801104c <_ZSt19__throw_logic_errorPKc>:
 801104c:	b538      	push	{r3, r4, r5, lr}
 801104e:	4605      	mov	r5, r0
 8011050:	2008      	movs	r0, #8
 8011052:	f000 ff89 	bl	8011f68 <__cxa_allocate_exception>
 8011056:	4629      	mov	r1, r5
 8011058:	4604      	mov	r4, r0
 801105a:	f001 f893 	bl	8012184 <_ZNSt11logic_errorC1EPKc>
 801105e:	4620      	mov	r0, r4
 8011060:	4a04      	ldr	r2, [pc, #16]	; (8011074 <_ZSt19__throw_logic_errorPKc+0x28>)
 8011062:	4905      	ldr	r1, [pc, #20]	; (8011078 <_ZSt19__throw_logic_errorPKc+0x2c>)
 8011064:	f000 fce8 	bl	8011a38 <__cxa_throw>
 8011068:	4620      	mov	r0, r4
 801106a:	f000 ff95 	bl	8011f98 <__cxa_free_exception>
 801106e:	f000 f871 	bl	8011154 <__cxa_end_cleanup>
 8011072:	bf00      	nop
 8011074:	08011fe5 	.word	0x08011fe5
 8011078:	08017ad8 	.word	0x08017ad8

0801107c <_ZSt20__throw_length_errorPKc>:
 801107c:	b538      	push	{r3, r4, r5, lr}
 801107e:	4605      	mov	r5, r0
 8011080:	2008      	movs	r0, #8
 8011082:	f000 ff71 	bl	8011f68 <__cxa_allocate_exception>
 8011086:	4629      	mov	r1, r5
 8011088:	4604      	mov	r4, r0
 801108a:	f001 f88f 	bl	80121ac <_ZNSt12length_errorC1EPKc>
 801108e:	4620      	mov	r0, r4
 8011090:	4a04      	ldr	r2, [pc, #16]	; (80110a4 <_ZSt20__throw_length_errorPKc+0x28>)
 8011092:	4905      	ldr	r1, [pc, #20]	; (80110a8 <_ZSt20__throw_length_errorPKc+0x2c>)
 8011094:	f000 fcd0 	bl	8011a38 <__cxa_throw>
 8011098:	4620      	mov	r0, r4
 801109a:	f000 ff7d 	bl	8011f98 <__cxa_free_exception>
 801109e:	f000 f859 	bl	8011154 <__cxa_end_cleanup>
 80110a2:	bf00      	nop
 80110a4:	08012039 	.word	0x08012039
 80110a8:	08017ae4 	.word	0x08017ae4

080110ac <_ZSt20__throw_out_of_rangePKc>:
 80110ac:	b538      	push	{r3, r4, r5, lr}
 80110ae:	4605      	mov	r5, r0
 80110b0:	2008      	movs	r0, #8
 80110b2:	f000 ff59 	bl	8011f68 <__cxa_allocate_exception>
 80110b6:	4629      	mov	r1, r5
 80110b8:	4604      	mov	r4, r0
 80110ba:	f001 f881 	bl	80121c0 <_ZNSt12out_of_rangeC1EPKc>
 80110be:	4620      	mov	r0, r4
 80110c0:	4a04      	ldr	r2, [pc, #16]	; (80110d4 <_ZSt20__throw_out_of_rangePKc+0x28>)
 80110c2:	4905      	ldr	r1, [pc, #20]	; (80110d8 <_ZSt20__throw_out_of_rangePKc+0x2c>)
 80110c4:	f000 fcb8 	bl	8011a38 <__cxa_throw>
 80110c8:	4620      	mov	r0, r4
 80110ca:	f000 ff65 	bl	8011f98 <__cxa_free_exception>
 80110ce:	f000 f841 	bl	8011154 <__cxa_end_cleanup>
 80110d2:	bf00      	nop
 80110d4:	08012069 	.word	0x08012069
 80110d8:	08017af0 	.word	0x08017af0

080110dc <_ZNKSt17bad_function_call4whatEv>:
 80110dc:	4800      	ldr	r0, [pc, #0]	; (80110e0 <_ZNKSt17bad_function_call4whatEv+0x4>)
 80110de:	4770      	bx	lr
 80110e0:	080178dc 	.word	0x080178dc

080110e4 <_ZNSt17bad_function_callD1Ev>:
 80110e4:	b510      	push	{r4, lr}
 80110e6:	4b03      	ldr	r3, [pc, #12]	; (80110f4 <_ZNSt17bad_function_callD1Ev+0x10>)
 80110e8:	6003      	str	r3, [r0, #0]
 80110ea:	4604      	mov	r4, r0
 80110ec:	f000 f822 	bl	8011134 <_ZNSt9exceptionD1Ev>
 80110f0:	4620      	mov	r0, r4
 80110f2:	bd10      	pop	{r4, pc}
 80110f4:	0801791c 	.word	0x0801791c

080110f8 <_ZNSt17bad_function_callD0Ev>:
 80110f8:	b510      	push	{r4, lr}
 80110fa:	4b05      	ldr	r3, [pc, #20]	; (8011110 <_ZNSt17bad_function_callD0Ev+0x18>)
 80110fc:	6003      	str	r3, [r0, #0]
 80110fe:	4604      	mov	r4, r0
 8011100:	f000 f818 	bl	8011134 <_ZNSt9exceptionD1Ev>
 8011104:	4620      	mov	r0, r4
 8011106:	f7fd faf7 	bl	800e6f8 <_ZdlPv>
 801110a:	4620      	mov	r0, r4
 801110c:	bd10      	pop	{r4, pc}
 801110e:	bf00      	nop
 8011110:	0801791c 	.word	0x0801791c

08011114 <_ZSt25__throw_bad_function_callv>:
 8011114:	b508      	push	{r3, lr}
 8011116:	2004      	movs	r0, #4
 8011118:	f000 ff26 	bl	8011f68 <__cxa_allocate_exception>
 801111c:	4b02      	ldr	r3, [pc, #8]	; (8011128 <_ZSt25__throw_bad_function_callv+0x14>)
 801111e:	6003      	str	r3, [r0, #0]
 8011120:	4a02      	ldr	r2, [pc, #8]	; (801112c <_ZSt25__throw_bad_function_callv+0x18>)
 8011122:	4903      	ldr	r1, [pc, #12]	; (8011130 <_ZSt25__throw_bad_function_callv+0x1c>)
 8011124:	f000 fc88 	bl	8011a38 <__cxa_throw>
 8011128:	0801791c 	.word	0x0801791c
 801112c:	080110e5 	.word	0x080110e5
 8011130:	080178f0 	.word	0x080178f0

08011134 <_ZNSt9exceptionD1Ev>:
 8011134:	4770      	bx	lr
 8011136:	bf00      	nop

08011138 <_ZNSt13bad_exceptionD1Ev>:
 8011138:	4770      	bx	lr
 801113a:	bf00      	nop

0801113c <_ZGTtNKSt13bad_exception4whatEv>:
 801113c:	4800      	ldr	r0, [pc, #0]	; (8011140 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 801113e:	4770      	bx	lr
 8011140:	08017928 	.word	0x08017928

08011144 <_ZNSt13bad_exceptionD0Ev>:
 8011144:	b510      	push	{r4, lr}
 8011146:	2104      	movs	r1, #4
 8011148:	4604      	mov	r4, r0
 801114a:	f7fd fae0 	bl	800e70e <_ZdlPvj>
 801114e:	4620      	mov	r0, r4
 8011150:	bd10      	pop	{r4, pc}
 8011152:	bf00      	nop

08011154 <__cxa_end_cleanup>:
 8011154:	b41e      	push	{r1, r2, r3, r4}
 8011156:	f000 f88d 	bl	8011274 <__gnu_end_cleanup>
 801115a:	bc1e      	pop	{r1, r2, r3, r4}
 801115c:	f7f7 f9a0 	bl	80084a0 <_Unwind_Resume>

08011160 <__cxa_type_match>:
 8011160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011162:	7802      	ldrb	r2, [r0, #0]
 8011164:	2a47      	cmp	r2, #71	; 0x47
 8011166:	b083      	sub	sp, #12
 8011168:	460d      	mov	r5, r1
 801116a:	461f      	mov	r7, r3
 801116c:	d01e      	beq.n	80111ac <__cxa_type_match+0x4c>
 801116e:	2300      	movs	r3, #0
 8011170:	4c25      	ldr	r4, [pc, #148]	; (8011208 <__cxa_type_match+0xa8>)
 8011172:	9301      	str	r3, [sp, #4]
 8011174:	6823      	ldr	r3, [r4, #0]
 8011176:	4620      	mov	r0, r4
 8011178:	689b      	ldr	r3, [r3, #8]
 801117a:	4798      	blx	r3
 801117c:	b180      	cbz	r0, 80111a0 <__cxa_type_match+0x40>
 801117e:	9b01      	ldr	r3, [sp, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	9301      	str	r3, [sp, #4]
 8011184:	2602      	movs	r6, #2
 8011186:	682b      	ldr	r3, [r5, #0]
 8011188:	4621      	mov	r1, r4
 801118a:	4628      	mov	r0, r5
 801118c:	691c      	ldr	r4, [r3, #16]
 801118e:	aa01      	add	r2, sp, #4
 8011190:	2301      	movs	r3, #1
 8011192:	47a0      	blx	r4
 8011194:	b130      	cbz	r0, 80111a4 <__cxa_type_match+0x44>
 8011196:	9b01      	ldr	r3, [sp, #4]
 8011198:	603b      	str	r3, [r7, #0]
 801119a:	4630      	mov	r0, r6
 801119c:	b003      	add	sp, #12
 801119e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111a0:	2601      	movs	r6, #1
 80111a2:	e7f0      	b.n	8011186 <__cxa_type_match+0x26>
 80111a4:	4606      	mov	r6, r0
 80111a6:	4630      	mov	r0, r6
 80111a8:	b003      	add	sp, #12
 80111aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111ac:	7843      	ldrb	r3, [r0, #1]
 80111ae:	2b4e      	cmp	r3, #78	; 0x4e
 80111b0:	d1dd      	bne.n	801116e <__cxa_type_match+0xe>
 80111b2:	7883      	ldrb	r3, [r0, #2]
 80111b4:	2b55      	cmp	r3, #85	; 0x55
 80111b6:	d1da      	bne.n	801116e <__cxa_type_match+0xe>
 80111b8:	78c3      	ldrb	r3, [r0, #3]
 80111ba:	2b43      	cmp	r3, #67	; 0x43
 80111bc:	d1d7      	bne.n	801116e <__cxa_type_match+0xe>
 80111be:	7903      	ldrb	r3, [r0, #4]
 80111c0:	2b46      	cmp	r3, #70	; 0x46
 80111c2:	d015      	beq.n	80111f0 <__cxa_type_match+0x90>
 80111c4:	7903      	ldrb	r3, [r0, #4]
 80111c6:	2b43      	cmp	r3, #67	; 0x43
 80111c8:	d1d1      	bne.n	801116e <__cxa_type_match+0xe>
 80111ca:	7943      	ldrb	r3, [r0, #5]
 80111cc:	2b2b      	cmp	r3, #43	; 0x2b
 80111ce:	d1ce      	bne.n	801116e <__cxa_type_match+0xe>
 80111d0:	7983      	ldrb	r3, [r0, #6]
 80111d2:	2b2b      	cmp	r3, #43	; 0x2b
 80111d4:	d1cb      	bne.n	801116e <__cxa_type_match+0xe>
 80111d6:	79c3      	ldrb	r3, [r0, #7]
 80111d8:	2b01      	cmp	r3, #1
 80111da:	d8c8      	bhi.n	801116e <__cxa_type_match+0xe>
 80111dc:	f850 4c20 	ldr.w	r4, [r0, #-32]
 80111e0:	d002      	beq.n	80111e8 <__cxa_type_match+0x88>
 80111e2:	3058      	adds	r0, #88	; 0x58
 80111e4:	9001      	str	r0, [sp, #4]
 80111e6:	e7c5      	b.n	8011174 <__cxa_type_match+0x14>
 80111e8:	4620      	mov	r0, r4
 80111ea:	f854 4c78 	ldr.w	r4, [r4, #-120]
 80111ee:	e7f9      	b.n	80111e4 <__cxa_type_match+0x84>
 80111f0:	7943      	ldrb	r3, [r0, #5]
 80111f2:	2b4f      	cmp	r3, #79	; 0x4f
 80111f4:	d1e6      	bne.n	80111c4 <__cxa_type_match+0x64>
 80111f6:	7983      	ldrb	r3, [r0, #6]
 80111f8:	2b52      	cmp	r3, #82	; 0x52
 80111fa:	d1e3      	bne.n	80111c4 <__cxa_type_match+0x64>
 80111fc:	79c3      	ldrb	r3, [r0, #7]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d1e0      	bne.n	80111c4 <__cxa_type_match+0x64>
 8011202:	9301      	str	r3, [sp, #4]
 8011204:	4c01      	ldr	r4, [pc, #4]	; (801120c <__cxa_type_match+0xac>)
 8011206:	e7b5      	b.n	8011174 <__cxa_type_match+0x14>
 8011208:	08017944 	.word	0x08017944
 801120c:	0801793c 	.word	0x0801793c

08011210 <__cxa_begin_cleanup>:
 8011210:	b510      	push	{r4, lr}
 8011212:	4604      	mov	r4, r0
 8011214:	f000 f886 	bl	8011324 <__cxa_get_globals>
 8011218:	7823      	ldrb	r3, [r4, #0]
 801121a:	2b47      	cmp	r3, #71	; 0x47
 801121c:	f1a4 0220 	sub.w	r2, r4, #32
 8011220:	d004      	beq.n	801122c <__cxa_begin_cleanup+0x1c>
 8011222:	6883      	ldr	r3, [r0, #8]
 8011224:	bb23      	cbnz	r3, 8011270 <__cxa_begin_cleanup+0x60>
 8011226:	6082      	str	r2, [r0, #8]
 8011228:	2001      	movs	r0, #1
 801122a:	bd10      	pop	{r4, pc}
 801122c:	7863      	ldrb	r3, [r4, #1]
 801122e:	2b4e      	cmp	r3, #78	; 0x4e
 8011230:	d1f7      	bne.n	8011222 <__cxa_begin_cleanup+0x12>
 8011232:	78a3      	ldrb	r3, [r4, #2]
 8011234:	2b55      	cmp	r3, #85	; 0x55
 8011236:	d1f4      	bne.n	8011222 <__cxa_begin_cleanup+0x12>
 8011238:	78e3      	ldrb	r3, [r4, #3]
 801123a:	2b43      	cmp	r3, #67	; 0x43
 801123c:	d1f1      	bne.n	8011222 <__cxa_begin_cleanup+0x12>
 801123e:	7923      	ldrb	r3, [r4, #4]
 8011240:	2b43      	cmp	r3, #67	; 0x43
 8011242:	d1ee      	bne.n	8011222 <__cxa_begin_cleanup+0x12>
 8011244:	7963      	ldrb	r3, [r4, #5]
 8011246:	2b2b      	cmp	r3, #43	; 0x2b
 8011248:	d1eb      	bne.n	8011222 <__cxa_begin_cleanup+0x12>
 801124a:	79a3      	ldrb	r3, [r4, #6]
 801124c:	2b2b      	cmp	r3, #43	; 0x2b
 801124e:	d1e8      	bne.n	8011222 <__cxa_begin_cleanup+0x12>
 8011250:	79e3      	ldrb	r3, [r4, #7]
 8011252:	2b01      	cmp	r3, #1
 8011254:	d8e5      	bhi.n	8011222 <__cxa_begin_cleanup+0x12>
 8011256:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801125a:	3301      	adds	r3, #1
 801125c:	2b01      	cmp	r3, #1
 801125e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011262:	d1e1      	bne.n	8011228 <__cxa_begin_cleanup+0x18>
 8011264:	6883      	ldr	r3, [r0, #8]
 8011266:	f844 3c08 	str.w	r3, [r4, #-8]
 801126a:	6082      	str	r2, [r0, #8]
 801126c:	2001      	movs	r0, #1
 801126e:	bd10      	pop	{r4, pc}
 8011270:	f000 fdd8 	bl	8011e24 <_ZSt9terminatev>

08011274 <__gnu_end_cleanup>:
 8011274:	b508      	push	{r3, lr}
 8011276:	f000 f855 	bl	8011324 <__cxa_get_globals>
 801127a:	6883      	ldr	r3, [r0, #8]
 801127c:	b383      	cbz	r3, 80112e0 <__gnu_end_cleanup+0x6c>
 801127e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8011282:	2a47      	cmp	r2, #71	; 0x47
 8011284:	d004      	beq.n	8011290 <__gnu_end_cleanup+0x1c>
 8011286:	2200      	movs	r2, #0
 8011288:	6082      	str	r2, [r0, #8]
 801128a:	f103 0020 	add.w	r0, r3, #32
 801128e:	bd08      	pop	{r3, pc}
 8011290:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8011294:	2a4e      	cmp	r2, #78	; 0x4e
 8011296:	d1f6      	bne.n	8011286 <__gnu_end_cleanup+0x12>
 8011298:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801129c:	2a55      	cmp	r2, #85	; 0x55
 801129e:	d1f2      	bne.n	8011286 <__gnu_end_cleanup+0x12>
 80112a0:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80112a4:	2a43      	cmp	r2, #67	; 0x43
 80112a6:	d1ee      	bne.n	8011286 <__gnu_end_cleanup+0x12>
 80112a8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80112ac:	2a43      	cmp	r2, #67	; 0x43
 80112ae:	d1ea      	bne.n	8011286 <__gnu_end_cleanup+0x12>
 80112b0:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80112b4:	2a2b      	cmp	r2, #43	; 0x2b
 80112b6:	d1e6      	bne.n	8011286 <__gnu_end_cleanup+0x12>
 80112b8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80112bc:	2a2b      	cmp	r2, #43	; 0x2b
 80112be:	d1e2      	bne.n	8011286 <__gnu_end_cleanup+0x12>
 80112c0:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80112c4:	2a01      	cmp	r2, #1
 80112c6:	d8de      	bhi.n	8011286 <__gnu_end_cleanup+0x12>
 80112c8:	69da      	ldr	r2, [r3, #28]
 80112ca:	3a01      	subs	r2, #1
 80112cc:	61da      	str	r2, [r3, #28]
 80112ce:	2a00      	cmp	r2, #0
 80112d0:	d1db      	bne.n	801128a <__gnu_end_cleanup+0x16>
 80112d2:	699a      	ldr	r2, [r3, #24]
 80112d4:	6082      	str	r2, [r0, #8]
 80112d6:	2200      	movs	r2, #0
 80112d8:	619a      	str	r2, [r3, #24]
 80112da:	f103 0020 	add.w	r0, r3, #32
 80112de:	bd08      	pop	{r3, pc}
 80112e0:	f000 fda0 	bl	8011e24 <_ZSt9terminatev>

080112e4 <_ZNKSt9bad_alloc4whatEv>:
 80112e4:	4800      	ldr	r0, [pc, #0]	; (80112e8 <_ZNKSt9bad_alloc4whatEv+0x4>)
 80112e6:	4770      	bx	lr
 80112e8:	080179dc 	.word	0x080179dc

080112ec <_ZNSt9bad_allocD1Ev>:
 80112ec:	b510      	push	{r4, lr}
 80112ee:	4b03      	ldr	r3, [pc, #12]	; (80112fc <_ZNSt9bad_allocD1Ev+0x10>)
 80112f0:	6003      	str	r3, [r0, #0]
 80112f2:	4604      	mov	r4, r0
 80112f4:	f7ff ff1e 	bl	8011134 <_ZNSt9exceptionD1Ev>
 80112f8:	4620      	mov	r0, r4
 80112fa:	bd10      	pop	{r4, pc}
 80112fc:	08017a10 	.word	0x08017a10

08011300 <_ZNSt9bad_allocD0Ev>:
 8011300:	b510      	push	{r4, lr}
 8011302:	4b05      	ldr	r3, [pc, #20]	; (8011318 <_ZNSt9bad_allocD0Ev+0x18>)
 8011304:	6003      	str	r3, [r0, #0]
 8011306:	4604      	mov	r4, r0
 8011308:	f7ff ff14 	bl	8011134 <_ZNSt9exceptionD1Ev>
 801130c:	4620      	mov	r0, r4
 801130e:	2104      	movs	r1, #4
 8011310:	f7fd f9fd 	bl	800e70e <_ZdlPvj>
 8011314:	4620      	mov	r0, r4
 8011316:	bd10      	pop	{r4, pc}
 8011318:	08017a10 	.word	0x08017a10

0801131c <__cxa_get_globals_fast>:
 801131c:	4800      	ldr	r0, [pc, #0]	; (8011320 <__cxa_get_globals_fast+0x4>)
 801131e:	4770      	bx	lr
 8011320:	20000ee8 	.word	0x20000ee8

08011324 <__cxa_get_globals>:
 8011324:	4800      	ldr	r0, [pc, #0]	; (8011328 <__cxa_get_globals+0x4>)
 8011326:	4770      	bx	lr
 8011328:	20000ee8 	.word	0x20000ee8

0801132c <_ZL28read_encoded_value_with_basehjPKhPj>:
 801132c:	2850      	cmp	r0, #80	; 0x50
 801132e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011330:	d01c      	beq.n	801136c <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 8011332:	f000 040f 	and.w	r4, r0, #15
 8011336:	2c0c      	cmp	r4, #12
 8011338:	d856      	bhi.n	80113e8 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
 801133a:	e8df f004 	tbb	[pc, r4]
 801133e:	4107      	.short	0x4107
 8011340:	551f0751 	.word	0x551f0751
 8011344:	27555555 	.word	0x27555555
 8011348:	0723      	.short	0x0723
 801134a:	1f          	.byte	0x1f
 801134b:	00          	.byte	0x00
 801134c:	4614      	mov	r4, r2
 801134e:	f854 5b04 	ldr.w	r5, [r4], #4
 8011352:	b145      	cbz	r5, 8011366 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 8011354:	f000 0670 	and.w	r6, r0, #112	; 0x70
 8011358:	2e10      	cmp	r6, #16
 801135a:	bf08      	it	eq
 801135c:	4611      	moveq	r1, r2
 801135e:	440d      	add	r5, r1
 8011360:	0602      	lsls	r2, r0, #24
 8011362:	bf48      	it	mi
 8011364:	682d      	ldrmi	r5, [r5, #0]
 8011366:	601d      	str	r5, [r3, #0]
 8011368:	4620      	mov	r0, r4
 801136a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801136c:	3203      	adds	r2, #3
 801136e:	f022 0403 	bic.w	r4, r2, #3
 8011372:	f854 5b04 	ldr.w	r5, [r4], #4
 8011376:	601d      	str	r5, [r3, #0]
 8011378:	4620      	mov	r0, r4
 801137a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801137c:	4614      	mov	r4, r2
 801137e:	f854 5b08 	ldr.w	r5, [r4], #8
 8011382:	e7e6      	b.n	8011352 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8011384:	4614      	mov	r4, r2
 8011386:	f934 5b02 	ldrsh.w	r5, [r4], #2
 801138a:	e7e2      	b.n	8011352 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 801138c:	2500      	movs	r5, #0
 801138e:	462f      	mov	r7, r5
 8011390:	4614      	mov	r4, r2
 8011392:	f814 cb01 	ldrb.w	ip, [r4], #1
 8011396:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 801139a:	40be      	lsls	r6, r7
 801139c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80113a0:	ea45 0506 	orr.w	r5, r5, r6
 80113a4:	f107 0707 	add.w	r7, r7, #7
 80113a8:	d1f3      	bne.n	8011392 <_ZL28read_encoded_value_with_basehjPKhPj+0x66>
 80113aa:	2f1f      	cmp	r7, #31
 80113ac:	d8d1      	bhi.n	8011352 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 80113ae:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80113b2:	d0ce      	beq.n	8011352 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 80113b4:	f04f 36ff 	mov.w	r6, #4294967295
 80113b8:	fa06 f707 	lsl.w	r7, r6, r7
 80113bc:	433d      	orrs	r5, r7
 80113be:	e7c9      	b.n	8011354 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 80113c0:	2500      	movs	r5, #0
 80113c2:	462f      	mov	r7, r5
 80113c4:	4614      	mov	r4, r2
 80113c6:	f814 cb01 	ldrb.w	ip, [r4], #1
 80113ca:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 80113ce:	40be      	lsls	r6, r7
 80113d0:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80113d4:	ea45 0506 	orr.w	r5, r5, r6
 80113d8:	f107 0707 	add.w	r7, r7, #7
 80113dc:	d1f3      	bne.n	80113c6 <_ZL28read_encoded_value_with_basehjPKhPj+0x9a>
 80113de:	e7b8      	b.n	8011352 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 80113e0:	4614      	mov	r4, r2
 80113e2:	f834 5b02 	ldrh.w	r5, [r4], #2
 80113e6:	e7b4      	b.n	8011352 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 80113e8:	f001 f840 	bl	801246c <abort>

080113ec <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>:
 80113ec:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80113f0:	2820      	cmp	r0, #32
 80113f2:	d011      	beq.n	8011418 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x2c>
 80113f4:	d90b      	bls.n	801140e <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x22>
 80113f6:	2840      	cmp	r0, #64	; 0x40
 80113f8:	d006      	beq.n	8011408 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x1c>
 80113fa:	2850      	cmp	r0, #80	; 0x50
 80113fc:	d00a      	beq.n	8011414 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 80113fe:	2830      	cmp	r0, #48	; 0x30
 8011400:	d10d      	bne.n	801141e <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 8011402:	4608      	mov	r0, r1
 8011404:	f7f7 ba46 	b.w	8008894 <_Unwind_GetDataRelBase>
 8011408:	4608      	mov	r0, r1
 801140a:	f7f7 ba33 	b.w	8008874 <_Unwind_GetRegionStart>
 801140e:	b108      	cbz	r0, 8011414 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 8011410:	2810      	cmp	r0, #16
 8011412:	d104      	bne.n	801141e <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 8011414:	2000      	movs	r0, #0
 8011416:	4770      	bx	lr
 8011418:	4608      	mov	r0, r1
 801141a:	f7f7 ba3f 	b.w	800889c <_Unwind_GetTextRelBase>
 801141e:	b508      	push	{r3, lr}
 8011420:	f001 f824 	bl	801246c <abort>

08011424 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8011424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011426:	460c      	mov	r4, r1
 8011428:	4615      	mov	r5, r2
 801142a:	4607      	mov	r7, r0
 801142c:	b108      	cbz	r0, 8011432 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 801142e:	f7f7 fa21 	bl	8008874 <_Unwind_GetRegionStart>
 8011432:	6028      	str	r0, [r5, #0]
 8011434:	7826      	ldrb	r6, [r4, #0]
 8011436:	2eff      	cmp	r6, #255	; 0xff
 8011438:	f104 0401 	add.w	r4, r4, #1
 801143c:	d129      	bne.n	8011492 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6e>
 801143e:	6068      	str	r0, [r5, #4]
 8011440:	7823      	ldrb	r3, [r4, #0]
 8011442:	752b      	strb	r3, [r5, #20]
 8011444:	2bff      	cmp	r3, #255	; 0xff
 8011446:	f104 0001 	add.w	r0, r4, #1
 801144a:	d032      	beq.n	80114b2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8e>
 801144c:	2310      	movs	r3, #16
 801144e:	2400      	movs	r4, #0
 8011450:	752b      	strb	r3, [r5, #20]
 8011452:	4622      	mov	r2, r4
 8011454:	f810 1b01 	ldrb.w	r1, [r0], #1
 8011458:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801145c:	4093      	lsls	r3, r2
 801145e:	0609      	lsls	r1, r1, #24
 8011460:	ea44 0403 	orr.w	r4, r4, r3
 8011464:	f102 0207 	add.w	r2, r2, #7
 8011468:	d4f4      	bmi.n	8011454 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 801146a:	4404      	add	r4, r0
 801146c:	60ec      	str	r4, [r5, #12]
 801146e:	7803      	ldrb	r3, [r0, #0]
 8011470:	756b      	strb	r3, [r5, #21]
 8011472:	2400      	movs	r4, #0
 8011474:	3001      	adds	r0, #1
 8011476:	4622      	mov	r2, r4
 8011478:	f810 1b01 	ldrb.w	r1, [r0], #1
 801147c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8011480:	4093      	lsls	r3, r2
 8011482:	431c      	orrs	r4, r3
 8011484:	060b      	lsls	r3, r1, #24
 8011486:	f102 0207 	add.w	r2, r2, #7
 801148a:	d4f5      	bmi.n	8011478 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 801148c:	4404      	add	r4, r0
 801148e:	612c      	str	r4, [r5, #16]
 8011490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011492:	4639      	mov	r1, r7
 8011494:	4630      	mov	r0, r6
 8011496:	f7ff ffa9 	bl	80113ec <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 801149a:	4622      	mov	r2, r4
 801149c:	4601      	mov	r1, r0
 801149e:	1d2b      	adds	r3, r5, #4
 80114a0:	4630      	mov	r0, r6
 80114a2:	f7ff ff43 	bl	801132c <_ZL28read_encoded_value_with_basehjPKhPj>
 80114a6:	4604      	mov	r4, r0
 80114a8:	1c60      	adds	r0, r4, #1
 80114aa:	7823      	ldrb	r3, [r4, #0]
 80114ac:	752b      	strb	r3, [r5, #20]
 80114ae:	2bff      	cmp	r3, #255	; 0xff
 80114b0:	d1cc      	bne.n	801144c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x28>
 80114b2:	2300      	movs	r3, #0
 80114b4:	60eb      	str	r3, [r5, #12]
 80114b6:	e7da      	b.n	801146e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x4a>

080114b8 <__gxx_personality_v0>:
 80114b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114bc:	f000 0403 	and.w	r4, r0, #3
 80114c0:	b099      	sub	sp, #100	; 0x64
 80114c2:	2300      	movs	r3, #0
 80114c4:	2c01      	cmp	r4, #1
 80114c6:	4688      	mov	r8, r1
 80114c8:	4617      	mov	r7, r2
 80114ca:	930c      	str	r3, [sp, #48]	; 0x30
 80114cc:	f000 8096 	beq.w	80115fc <__gxx_personality_v0+0x144>
 80114d0:	d30d      	bcc.n	80114ee <__gxx_personality_v0+0x36>
 80114d2:	2c02      	cmp	r4, #2
 80114d4:	f040 825f 	bne.w	8011996 <__gxx_personality_v0+0x4de>
 80114d8:	4639      	mov	r1, r7
 80114da:	4640      	mov	r0, r8
 80114dc:	f7f7 f9b6 	bl	800884c <__gnu_unwind_frame>
 80114e0:	2800      	cmp	r0, #0
 80114e2:	f000 809b 	beq.w	801161c <__gxx_personality_v0+0x164>
 80114e6:	2009      	movs	r0, #9
 80114e8:	b019      	add	sp, #100	; 0x64
 80114ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114ee:	0702      	lsls	r2, r0, #28
 80114f0:	d4f2      	bmi.n	80114d8 <__gxx_personality_v0+0x20>
 80114f2:	2301      	movs	r3, #1
 80114f4:	9304      	str	r3, [sp, #16]
 80114f6:	aa18      	add	r2, sp, #96	; 0x60
 80114f8:	2300      	movs	r3, #0
 80114fa:	f842 8d2c 	str.w	r8, [r2, #-44]!
 80114fe:	4619      	mov	r1, r3
 8011500:	9200      	str	r2, [sp, #0]
 8011502:	4638      	mov	r0, r7
 8011504:	220c      	movs	r2, #12
 8011506:	f7f6 fc31 	bl	8007d6c <_Unwind_VRS_Set>
 801150a:	4638      	mov	r0, r7
 801150c:	f7f7 f9b8 	bl	8008880 <_Unwind_GetLanguageSpecificData>
 8011510:	9005      	str	r0, [sp, #20]
 8011512:	2800      	cmp	r0, #0
 8011514:	d0e0      	beq.n	80114d8 <__gxx_personality_v0+0x20>
 8011516:	ab12      	add	r3, sp, #72	; 0x48
 8011518:	461a      	mov	r2, r3
 801151a:	9905      	ldr	r1, [sp, #20]
 801151c:	9306      	str	r3, [sp, #24]
 801151e:	4638      	mov	r0, r7
 8011520:	f7ff ff80 	bl	8011424 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8011524:	4605      	mov	r5, r0
 8011526:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801152a:	28ff      	cmp	r0, #255	; 0xff
 801152c:	f000 80e5 	beq.w	80116fa <__gxx_personality_v0+0x242>
 8011530:	4639      	mov	r1, r7
 8011532:	f7ff ff5b 	bl	80113ec <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8011536:	4604      	mov	r4, r0
 8011538:	2300      	movs	r3, #0
 801153a:	f10d 0b44 	add.w	fp, sp, #68	; 0x44
 801153e:	4619      	mov	r1, r3
 8011540:	f8cd b000 	str.w	fp, [sp]
 8011544:	220f      	movs	r2, #15
 8011546:	4638      	mov	r0, r7
 8011548:	9414      	str	r4, [sp, #80]	; 0x50
 801154a:	f7f6 fbed 	bl	8007d28 <_Unwind_VRS_Get>
 801154e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011550:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011552:	f026 0601 	bic.w	r6, r6, #1
 8011556:	429d      	cmp	r5, r3
 8011558:	f106 36ff 	add.w	r6, r6, #4294967295
 801155c:	f080 80d4 	bcs.w	8011708 <__gxx_personality_v0+0x250>
 8011560:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8011564:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8011568:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 801156c:	2cff      	cmp	r4, #255	; 0xff
 801156e:	f04f 0100 	mov.w	r1, #0
 8011572:	d003      	beq.n	801157c <__gxx_personality_v0+0xc4>
 8011574:	4620      	mov	r0, r4
 8011576:	f7ff ff39 	bl	80113ec <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 801157a:	4601      	mov	r1, r0
 801157c:	462a      	mov	r2, r5
 801157e:	4620      	mov	r0, r4
 8011580:	4653      	mov	r3, sl
 8011582:	f7ff fed3 	bl	801132c <_ZL28read_encoded_value_with_basehjPKhPj>
 8011586:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 801158a:	2cff      	cmp	r4, #255	; 0xff
 801158c:	4605      	mov	r5, r0
 801158e:	f04f 0100 	mov.w	r1, #0
 8011592:	d003      	beq.n	801159c <__gxx_personality_v0+0xe4>
 8011594:	4620      	mov	r0, r4
 8011596:	f7ff ff29 	bl	80113ec <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 801159a:	4601      	mov	r1, r0
 801159c:	462a      	mov	r2, r5
 801159e:	4620      	mov	r0, r4
 80115a0:	464b      	mov	r3, r9
 80115a2:	f7ff fec3 	bl	801132c <_ZL28read_encoded_value_with_basehjPKhPj>
 80115a6:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 80115aa:	2cff      	cmp	r4, #255	; 0xff
 80115ac:	4605      	mov	r5, r0
 80115ae:	f04f 0100 	mov.w	r1, #0
 80115b2:	d003      	beq.n	80115bc <__gxx_personality_v0+0x104>
 80115b4:	4620      	mov	r0, r4
 80115b6:	f7ff ff19 	bl	80113ec <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 80115ba:	4601      	mov	r1, r0
 80115bc:	462a      	mov	r2, r5
 80115be:	4620      	mov	r0, r4
 80115c0:	465b      	mov	r3, fp
 80115c2:	f7ff feb3 	bl	801132c <_ZL28read_encoded_value_with_basehjPKhPj>
 80115c6:	2400      	movs	r4, #0
 80115c8:	4605      	mov	r5, r0
 80115ca:	4621      	mov	r1, r4
 80115cc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80115d0:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 80115d4:	408b      	lsls	r3, r1
 80115d6:	431c      	orrs	r4, r3
 80115d8:	0613      	lsls	r3, r2, #24
 80115da:	f101 0107 	add.w	r1, r1, #7
 80115de:	d4f5      	bmi.n	80115cc <__gxx_personality_v0+0x114>
 80115e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80115e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80115e4:	4413      	add	r3, r2
 80115e6:	42b3      	cmp	r3, r6
 80115e8:	d91f      	bls.n	801162a <__gxx_personality_v0+0x172>
 80115ea:	9b04      	ldr	r3, [sp, #16]
 80115ec:	07db      	lsls	r3, r3, #31
 80115ee:	f100 8091 	bmi.w	8011714 <__gxx_personality_v0+0x25c>
 80115f2:	9b04      	ldr	r3, [sp, #16]
 80115f4:	071c      	lsls	r4, r3, #28
 80115f6:	d515      	bpl.n	8011624 <__gxx_personality_v0+0x16c>
 80115f8:	f000 fc14 	bl	8011e24 <_ZSt9terminatev>
 80115fc:	f010 0408 	ands.w	r4, r0, #8
 8011600:	d01c      	beq.n	801163c <__gxx_personality_v0+0x184>
 8011602:	aa18      	add	r2, sp, #96	; 0x60
 8011604:	f044 0402 	orr.w	r4, r4, #2
 8011608:	f842 1d2c 	str.w	r1, [r2, #-44]!
 801160c:	4638      	mov	r0, r7
 801160e:	9200      	str	r2, [sp, #0]
 8011610:	4619      	mov	r1, r3
 8011612:	220c      	movs	r2, #12
 8011614:	9404      	str	r4, [sp, #16]
 8011616:	f7f6 fba9 	bl	8007d6c <_Unwind_VRS_Set>
 801161a:	e776      	b.n	801150a <__gxx_personality_v0+0x52>
 801161c:	2008      	movs	r0, #8
 801161e:	b019      	add	sp, #100	; 0x64
 8011620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011624:	4640      	mov	r0, r8
 8011626:	f000 fe0d 	bl	8012244 <__cxa_call_terminate>
 801162a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801162c:	4413      	add	r3, r2
 801162e:	42b3      	cmp	r3, r6
 8011630:	f200 8088 	bhi.w	8011744 <__gxx_personality_v0+0x28c>
 8011634:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011636:	42ab      	cmp	r3, r5
 8011638:	d896      	bhi.n	8011568 <__gxx_personality_v0+0xb0>
 801163a:	e7d6      	b.n	80115ea <__gxx_personality_v0+0x132>
 801163c:	ab12      	add	r3, sp, #72	; 0x48
 801163e:	9300      	str	r3, [sp, #0]
 8011640:	9306      	str	r3, [sp, #24]
 8011642:	220d      	movs	r2, #13
 8011644:	4623      	mov	r3, r4
 8011646:	4621      	mov	r1, r4
 8011648:	4638      	mov	r0, r7
 801164a:	f8d8 5020 	ldr.w	r5, [r8, #32]
 801164e:	f7f6 fb6b 	bl	8007d28 <_Unwind_VRS_Get>
 8011652:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011654:	429d      	cmp	r5, r3
 8011656:	d002      	beq.n	801165e <__gxx_personality_v0+0x1a6>
 8011658:	2302      	movs	r3, #2
 801165a:	9304      	str	r3, [sp, #16]
 801165c:	e74b      	b.n	80114f6 <__gxx_personality_v0+0x3e>
 801165e:	aa18      	add	r2, sp, #96	; 0x60
 8011660:	4623      	mov	r3, r4
 8011662:	f842 8d2c 	str.w	r8, [r2, #-44]!
 8011666:	4621      	mov	r1, r4
 8011668:	9200      	str	r2, [sp, #0]
 801166a:	4638      	mov	r0, r7
 801166c:	220c      	movs	r2, #12
 801166e:	f7f6 fb7d 	bl	8007d6c <_Unwind_VRS_Set>
 8011672:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8011676:	9303      	str	r3, [sp, #12]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d0d3      	beq.n	8011624 <__gxx_personality_v0+0x16c>
 801167c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8011680:	461a      	mov	r2, r3
 8011682:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8011686:	9305      	str	r3, [sp, #20]
 8011688:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 801168c:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8011690:	4613      	mov	r3, r2
 8011692:	2b00      	cmp	r3, #0
 8011694:	461c      	mov	r4, r3
 8011696:	f2c0 8127 	blt.w	80118e8 <__gxx_personality_v0+0x430>
 801169a:	2503      	movs	r5, #3
 801169c:	a918      	add	r1, sp, #96	; 0x60
 801169e:	2300      	movs	r3, #0
 80116a0:	f841 8d28 	str.w	r8, [r1, #-40]!
 80116a4:	461a      	mov	r2, r3
 80116a6:	9100      	str	r1, [sp, #0]
 80116a8:	4638      	mov	r0, r7
 80116aa:	4619      	mov	r1, r3
 80116ac:	f7f6 fb5e 	bl	8007d6c <_Unwind_VRS_Set>
 80116b0:	2300      	movs	r3, #0
 80116b2:	4619      	mov	r1, r3
 80116b4:	2201      	movs	r2, #1
 80116b6:	f8cd a000 	str.w	sl, [sp]
 80116ba:	4638      	mov	r0, r7
 80116bc:	940f      	str	r4, [sp, #60]	; 0x3c
 80116be:	f7f6 fb55 	bl	8007d6c <_Unwind_VRS_Set>
 80116c2:	2300      	movs	r3, #0
 80116c4:	4619      	mov	r1, r3
 80116c6:	220f      	movs	r2, #15
 80116c8:	f8cd 9000 	str.w	r9, [sp]
 80116cc:	4638      	mov	r0, r7
 80116ce:	f7f6 fb2b 	bl	8007d28 <_Unwind_VRS_Get>
 80116d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80116d4:	9a03      	ldr	r2, [sp, #12]
 80116d6:	f8cd 9000 	str.w	r9, [sp]
 80116da:	f003 0401 	and.w	r4, r3, #1
 80116de:	2300      	movs	r3, #0
 80116e0:	4314      	orrs	r4, r2
 80116e2:	4638      	mov	r0, r7
 80116e4:	4619      	mov	r1, r3
 80116e6:	220f      	movs	r2, #15
 80116e8:	9410      	str	r4, [sp, #64]	; 0x40
 80116ea:	f7f6 fb3f 	bl	8007d6c <_Unwind_VRS_Set>
 80116ee:	2d02      	cmp	r5, #2
 80116f0:	d005      	beq.n	80116fe <__gxx_personality_v0+0x246>
 80116f2:	2007      	movs	r0, #7
 80116f4:	b019      	add	sp, #100	; 0x64
 80116f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116fa:	2400      	movs	r4, #0
 80116fc:	e71c      	b.n	8011538 <__gxx_personality_v0+0x80>
 80116fe:	4640      	mov	r0, r8
 8011700:	f7ff fd86 	bl	8011210 <__cxa_begin_cleanup>
 8011704:	2007      	movs	r0, #7
 8011706:	e6ef      	b.n	80114e8 <__gxx_personality_v0+0x30>
 8011708:	9b04      	ldr	r3, [sp, #16]
 801170a:	07d9      	lsls	r1, r3, #31
 801170c:	f57f af71 	bpl.w	80115f2 <__gxx_personality_v0+0x13a>
 8011710:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8011714:	2400      	movs	r4, #0
 8011716:	9403      	str	r4, [sp, #12]
 8011718:	2300      	movs	r3, #0
 801171a:	4619      	mov	r1, r3
 801171c:	220d      	movs	r2, #13
 801171e:	f8cd 9000 	str.w	r9, [sp]
 8011722:	4638      	mov	r0, r7
 8011724:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011726:	f7f6 faff 	bl	8007d28 <_Unwind_VRS_Get>
 801172a:	9a05      	ldr	r2, [sp, #20]
 801172c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801172e:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 8011732:	9a03      	ldr	r2, [sp, #12]
 8011734:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 8011738:	e9c8 5409 	strd	r5, r4, [r8, #36]	; 0x24
 801173c:	f8c8 3020 	str.w	r3, [r8, #32]
 8011740:	2006      	movs	r0, #6
 8011742:	e6d1      	b.n	80114e8 <__gxx_personality_v0+0x30>
 8011744:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011746:	2b00      	cmp	r3, #0
 8011748:	f43f aec6 	beq.w	80114d8 <__gxx_personality_v0+0x20>
 801174c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801174e:	189a      	adds	r2, r3, r2
 8011750:	9203      	str	r2, [sp, #12]
 8011752:	2c00      	cmp	r4, #0
 8011754:	f000 80f0 	beq.w	8011938 <__gxx_personality_v0+0x480>
 8011758:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801175a:	3c01      	subs	r4, #1
 801175c:	4423      	add	r3, r4
 801175e:	2a00      	cmp	r2, #0
 8011760:	f43f aeba 	beq.w	80114d8 <__gxx_personality_v0+0x20>
 8011764:	2b00      	cmp	r3, #0
 8011766:	f000 80f8 	beq.w	801195a <__gxx_personality_v0+0x4a2>
 801176a:	9a04      	ldr	r2, [sp, #16]
 801176c:	f012 0208 	ands.w	r2, r2, #8
 8011770:	9209      	str	r2, [sp, #36]	; 0x24
 8011772:	f000 8103 	beq.w	801197c <__gxx_personality_v0+0x4c4>
 8011776:	2147      	movs	r1, #71	; 0x47
 8011778:	224e      	movs	r2, #78	; 0x4e
 801177a:	f888 1000 	strb.w	r1, [r8]
 801177e:	f888 2001 	strb.w	r2, [r8, #1]
 8011782:	2155      	movs	r1, #85	; 0x55
 8011784:	2243      	movs	r2, #67	; 0x43
 8011786:	f888 1002 	strb.w	r1, [r8, #2]
 801178a:	f888 2003 	strb.w	r2, [r8, #3]
 801178e:	2146      	movs	r1, #70	; 0x46
 8011790:	224f      	movs	r2, #79	; 0x4f
 8011792:	f888 1004 	strb.w	r1, [r8, #4]
 8011796:	f888 2005 	strb.w	r2, [r8, #5]
 801179a:	2152      	movs	r1, #82	; 0x52
 801179c:	2200      	movs	r2, #0
 801179e:	f888 1006 	strb.w	r1, [r8, #6]
 80117a2:	f888 2007 	strb.w	r2, [r8, #7]
 80117a6:	e9cd 7a0a 	strd	r7, sl, [sp, #40]	; 0x28
 80117aa:	2200      	movs	r2, #0
 80117ac:	9207      	str	r2, [sp, #28]
 80117ae:	f8cd 9020 	str.w	r9, [sp, #32]
 80117b2:	2400      	movs	r4, #0
 80117b4:	4621      	mov	r1, r4
 80117b6:	e000      	b.n	80117ba <__gxx_personality_v0+0x302>
 80117b8:	462b      	mov	r3, r5
 80117ba:	461d      	mov	r5, r3
 80117bc:	f815 0b01 	ldrb.w	r0, [r5], #1
 80117c0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80117c4:	408a      	lsls	r2, r1
 80117c6:	0606      	lsls	r6, r0, #24
 80117c8:	ea44 0402 	orr.w	r4, r4, r2
 80117cc:	f101 0107 	add.w	r1, r1, #7
 80117d0:	d4f2      	bmi.n	80117b8 <__gxx_personality_v0+0x300>
 80117d2:	291f      	cmp	r1, #31
 80117d4:	d805      	bhi.n	80117e2 <__gxx_personality_v0+0x32a>
 80117d6:	0640      	lsls	r0, r0, #25
 80117d8:	d503      	bpl.n	80117e2 <__gxx_personality_v0+0x32a>
 80117da:	2201      	movs	r2, #1
 80117dc:	408a      	lsls	r2, r1
 80117de:	4252      	negs	r2, r2
 80117e0:	4314      	orrs	r4, r2
 80117e2:	2600      	movs	r6, #0
 80117e4:	4631      	mov	r1, r6
 80117e6:	46a1      	mov	r9, r4
 80117e8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80117ec:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80117f0:	408a      	lsls	r2, r1
 80117f2:	4316      	orrs	r6, r2
 80117f4:	0602      	lsls	r2, r0, #24
 80117f6:	f101 0107 	add.w	r1, r1, #7
 80117fa:	d4f5      	bmi.n	80117e8 <__gxx_personality_v0+0x330>
 80117fc:	291f      	cmp	r1, #31
 80117fe:	d805      	bhi.n	801180c <__gxx_personality_v0+0x354>
 8011800:	0647      	lsls	r7, r0, #25
 8011802:	d503      	bpl.n	801180c <__gxx_personality_v0+0x354>
 8011804:	2301      	movs	r3, #1
 8011806:	408b      	lsls	r3, r1
 8011808:	425b      	negs	r3, r3
 801180a:	431e      	orrs	r6, r3
 801180c:	2c00      	cmp	r4, #0
 801180e:	d04c      	beq.n	80118aa <__gxx_personality_v0+0x3f2>
 8011810:	dc4e      	bgt.n	80118b0 <__gxx_personality_v0+0x3f8>
 8011812:	f104 0a01 	add.w	sl, r4, #1
 8011816:	ebca 728a 	rsb	r2, sl, sl, lsl #30
 801181a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801181c:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8011820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011824:	f1b8 0f00 	cmp.w	r8, #0
 8011828:	d001      	beq.n	801182e <__gxx_personality_v0+0x376>
 801182a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801182c:	b12b      	cbz	r3, 801183a <__gxx_personality_v0+0x382>
 801182e:	b351      	cbz	r1, 8011886 <__gxx_personality_v0+0x3ce>
 8011830:	2e00      	cmp	r6, #0
 8011832:	f000 808b 	beq.w	801194c <__gxx_personality_v0+0x494>
 8011836:	19ab      	adds	r3, r5, r6
 8011838:	e7bb      	b.n	80117b2 <__gxx_personality_v0+0x2fa>
 801183a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801183c:	9311      	str	r3, [sp, #68]	; 0x44
 801183e:	b929      	cbnz	r1, 801184c <__gxx_personality_v0+0x394>
 8011840:	e091      	b.n	8011966 <__gxx_personality_v0+0x4ae>
 8011842:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8011846:	2900      	cmp	r1, #0
 8011848:	f000 808d 	beq.w	8011966 <__gxx_personality_v0+0x4ae>
 801184c:	4439      	add	r1, r7
 801184e:	465b      	mov	r3, fp
 8011850:	2200      	movs	r2, #0
 8011852:	4640      	mov	r0, r8
 8011854:	f7ff fc84 	bl	8011160 <__cxa_type_match>
 8011858:	2800      	cmp	r0, #0
 801185a:	d0f2      	beq.n	8011842 <__gxx_personality_v0+0x38a>
 801185c:	e7e8      	b.n	8011830 <__gxx_personality_v0+0x378>
 801185e:	00e2      	lsls	r2, r4, #3
 8011860:	4252      	negs	r2, r2
 8011862:	e9dd 1314 	ldrd	r1, r3, [sp, #80]	; 0x50
 8011866:	441a      	add	r2, r3
 8011868:	9b08      	ldr	r3, [sp, #32]
 801186a:	f7ff fd5f 	bl	801132c <_ZL28read_encoded_value_with_basehjPKhPj>
 801186e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011870:	b149      	cbz	r1, 8011886 <__gxx_personality_v0+0x3ce>
 8011872:	f1b8 0f00 	cmp.w	r8, #0
 8011876:	d0db      	beq.n	8011830 <__gxx_personality_v0+0x378>
 8011878:	ab0c      	add	r3, sp, #48	; 0x30
 801187a:	2200      	movs	r2, #0
 801187c:	4640      	mov	r0, r8
 801187e:	f7ff fc6f 	bl	8011160 <__cxa_type_match>
 8011882:	2800      	cmp	r0, #0
 8011884:	d0d4      	beq.n	8011830 <__gxx_personality_v0+0x378>
 8011886:	9b04      	ldr	r3, [sp, #16]
 8011888:	07d8      	lsls	r0, r3, #31
 801188a:	464a      	mov	r2, r9
 801188c:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 8011890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011894:	f53f af40 	bmi.w	8011718 <__gxx_personality_v0+0x260>
 8011898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801189a:	2b00      	cmp	r3, #0
 801189c:	f43f aef8 	beq.w	8011690 <__gxx_personality_v0+0x1d8>
 80118a0:	2c00      	cmp	r4, #0
 80118a2:	f6bf aefa 	bge.w	801169a <__gxx_personality_v0+0x1e2>
 80118a6:	f000 facb 	bl	8011e40 <_ZSt10unexpectedv>
 80118aa:	2301      	movs	r3, #1
 80118ac:	9307      	str	r3, [sp, #28]
 80118ae:	e7bf      	b.n	8011830 <__gxx_personality_v0+0x378>
 80118b0:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80118b4:	28ff      	cmp	r0, #255	; 0xff
 80118b6:	d03b      	beq.n	8011930 <__gxx_personality_v0+0x478>
 80118b8:	f000 0307 	and.w	r3, r0, #7
 80118bc:	2b04      	cmp	r3, #4
 80118be:	d86a      	bhi.n	8011996 <__gxx_personality_v0+0x4de>
 80118c0:	a201      	add	r2, pc, #4	; (adr r2, 80118c8 <__gxx_personality_v0+0x410>)
 80118c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118c6:	bf00      	nop
 80118c8:	080118e3 	.word	0x080118e3
 80118cc:	08011997 	.word	0x08011997
 80118d0:	080118dd 	.word	0x080118dd
 80118d4:	080118e3 	.word	0x080118e3
 80118d8:	0801185f 	.word	0x0801185f
 80118dc:	0062      	lsls	r2, r4, #1
 80118de:	4252      	negs	r2, r2
 80118e0:	e7bf      	b.n	8011862 <__gxx_personality_v0+0x3aa>
 80118e2:	00a2      	lsls	r2, r4, #2
 80118e4:	4252      	negs	r2, r2
 80118e6:	e7bc      	b.n	8011862 <__gxx_personality_v0+0x3aa>
 80118e8:	3301      	adds	r3, #1
 80118ea:	461d      	mov	r5, r3
 80118ec:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80118f0:	4638      	mov	r0, r7
 80118f2:	f7ff fd97 	bl	8011424 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80118f6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80118fa:	28ff      	cmp	r0, #255	; 0xff
 80118fc:	d01a      	beq.n	8011934 <__gxx_personality_v0+0x47c>
 80118fe:	4639      	mov	r1, r7
 8011900:	f7ff fd74 	bl	80113ec <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8011904:	ebc5 7285 	rsb	r2, r5, r5, lsl #30
 8011908:	0092      	lsls	r2, r2, #2
 801190a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801190c:	9014      	str	r0, [sp, #80]	; 0x50
 801190e:	58ab      	ldr	r3, [r5, r2]
 8011910:	4415      	add	r5, r2
 8011912:	b133      	cbz	r3, 8011922 <__gxx_personality_v0+0x46a>
 8011914:	462a      	mov	r2, r5
 8011916:	2300      	movs	r3, #0
 8011918:	f852 1f04 	ldr.w	r1, [r2, #4]!
 801191c:	3301      	adds	r3, #1
 801191e:	2900      	cmp	r1, #0
 8011920:	d1fa      	bne.n	8011918 <__gxx_personality_v0+0x460>
 8011922:	2204      	movs	r2, #4
 8011924:	e9c8 250c 	strd	r2, r5, [r8, #48]	; 0x30
 8011928:	e9c8 300a 	strd	r3, r0, [r8, #40]	; 0x28
 801192c:	2503      	movs	r5, #3
 801192e:	e6b5      	b.n	801169c <__gxx_personality_v0+0x1e4>
 8011930:	2200      	movs	r2, #0
 8011932:	e796      	b.n	8011862 <__gxx_personality_v0+0x3aa>
 8011934:	2000      	movs	r0, #0
 8011936:	e7e5      	b.n	8011904 <__gxx_personality_v0+0x44c>
 8011938:	9b03      	ldr	r3, [sp, #12]
 801193a:	2b00      	cmp	r3, #0
 801193c:	f43f adcc 	beq.w	80114d8 <__gxx_personality_v0+0x20>
 8011940:	9b04      	ldr	r3, [sp, #16]
 8011942:	07da      	lsls	r2, r3, #31
 8011944:	f53f adc8 	bmi.w	80114d8 <__gxx_personality_v0+0x20>
 8011948:	2502      	movs	r5, #2
 801194a:	e6a7      	b.n	801169c <__gxx_personality_v0+0x1e4>
 801194c:	e9dd 3907 	ldrd	r3, r9, [sp, #28]
 8011950:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 8011954:	2b00      	cmp	r3, #0
 8011956:	f43f adbf 	beq.w	80114d8 <__gxx_personality_v0+0x20>
 801195a:	9b04      	ldr	r3, [sp, #16]
 801195c:	07dd      	lsls	r5, r3, #31
 801195e:	f53f adbb 	bmi.w	80114d8 <__gxx_personality_v0+0x20>
 8011962:	2400      	movs	r4, #0
 8011964:	e7f0      	b.n	8011948 <__gxx_personality_v0+0x490>
 8011966:	9b04      	ldr	r3, [sp, #16]
 8011968:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801196a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801196e:	07de      	lsls	r6, r3, #31
 8011970:	4655      	mov	r5, sl
 8011972:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8011976:	f53f aecf 	bmi.w	8011718 <__gxx_personality_v0+0x260>
 801197a:	e7b7      	b.n	80118ec <__gxx_personality_v0+0x434>
 801197c:	f898 2007 	ldrb.w	r2, [r8, #7]
 8011980:	2a01      	cmp	r2, #1
 8011982:	bf0c      	ite	eq
 8011984:	f858 2c20 	ldreq.w	r2, [r8, #-32]
 8011988:	f108 0258 	addne.w	r2, r8, #88	; 0x58
 801198c:	920c      	str	r2, [sp, #48]	; 0x30
 801198e:	e70a      	b.n	80117a6 <__gxx_personality_v0+0x2ee>
 8011990:	f000 f8a6 	bl	8011ae0 <__cxa_begin_catch>
 8011994:	e630      	b.n	80115f8 <__gxx_personality_v0+0x140>
 8011996:	f000 fd69 	bl	801246c <abort>
 801199a:	bf00      	nop

0801199c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 801199c:	2801      	cmp	r0, #1
 801199e:	b510      	push	{r4, lr}
 80119a0:	d81a      	bhi.n	80119d8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 80119a2:	f3bf 8f5b 	dmb	ish
 80119a6:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 80119aa:	e853 2f00 	ldrex	r2, [r3]
 80119ae:	3a01      	subs	r2, #1
 80119b0:	e843 2000 	strex	r0, r2, [r3]
 80119b4:	2800      	cmp	r0, #0
 80119b6:	d1f8      	bne.n	80119aa <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 80119b8:	f3bf 8f5b 	dmb	ish
 80119bc:	b95a      	cbnz	r2, 80119d6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 80119be:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 80119c2:	f101 0458 	add.w	r4, r1, #88	; 0x58
 80119c6:	b10b      	cbz	r3, 80119cc <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 80119c8:	4620      	mov	r0, r4
 80119ca:	4798      	blx	r3
 80119cc:	4620      	mov	r0, r4
 80119ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119d2:	f000 bae1 	b.w	8011f98 <__cxa_free_exception>
 80119d6:	bd10      	pop	{r4, pc}
 80119d8:	f851 0c14 	ldr.w	r0, [r1, #-20]
 80119dc:	f000 fa0e 	bl	8011dfc <_ZN10__cxxabiv111__terminateEPFvvE>

080119e0 <__cxa_init_primary_exception>:
 80119e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119e2:	2500      	movs	r5, #0
 80119e4:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 80119e8:	f840 5c80 	str.w	r5, [r0, #-128]
 80119ec:	4604      	mov	r4, r0
 80119ee:	f000 fa39 	bl	8011e64 <_ZSt14get_unexpectedv>
 80119f2:	f844 0c70 	str.w	r0, [r4, #-112]
 80119f6:	f000 fa2d 	bl	8011e54 <_ZSt13get_terminatev>
 80119fa:	2347      	movs	r3, #71	; 0x47
 80119fc:	2243      	movs	r2, #67	; 0x43
 80119fe:	274e      	movs	r7, #78	; 0x4e
 8011a00:	2655      	movs	r6, #85	; 0x55
 8011a02:	490c      	ldr	r1, [pc, #48]	; (8011a34 <__cxa_init_primary_exception+0x54>)
 8011a04:	f804 3c58 	strb.w	r3, [r4, #-88]
 8011a08:	232b      	movs	r3, #43	; 0x2b
 8011a0a:	f804 5c51 	strb.w	r5, [r4, #-81]
 8011a0e:	f804 7c57 	strb.w	r7, [r4, #-87]
 8011a12:	f804 6c56 	strb.w	r6, [r4, #-86]
 8011a16:	f844 1c50 	str.w	r1, [r4, #-80]
 8011a1a:	f804 2c55 	strb.w	r2, [r4, #-85]
 8011a1e:	f804 2c54 	strb.w	r2, [r4, #-84]
 8011a22:	f804 3c53 	strb.w	r3, [r4, #-83]
 8011a26:	f804 3c52 	strb.w	r3, [r4, #-82]
 8011a2a:	f844 0c6c 	str.w	r0, [r4, #-108]
 8011a2e:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 8011a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a34:	0801199d 	.word	0x0801199d

08011a38 <__cxa_throw>:
 8011a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a3a:	4605      	mov	r5, r0
 8011a3c:	460e      	mov	r6, r1
 8011a3e:	4617      	mov	r7, r2
 8011a40:	f7ff fc70 	bl	8011324 <__cxa_get_globals>
 8011a44:	6843      	ldr	r3, [r0, #4]
 8011a46:	4604      	mov	r4, r0
 8011a48:	3301      	adds	r3, #1
 8011a4a:	463a      	mov	r2, r7
 8011a4c:	4631      	mov	r1, r6
 8011a4e:	6063      	str	r3, [r4, #4]
 8011a50:	4628      	mov	r0, r5
 8011a52:	f7ff ffc5 	bl	80119e0 <__cxa_init_primary_exception>
 8011a56:	4604      	mov	r4, r0
 8011a58:	2301      	movs	r3, #1
 8011a5a:	f844 3b28 	str.w	r3, [r4], #40
 8011a5e:	4620      	mov	r0, r4
 8011a60:	f7f6 fd0c 	bl	800847c <_Unwind_RaiseException>
 8011a64:	4620      	mov	r0, r4
 8011a66:	f000 f83b 	bl	8011ae0 <__cxa_begin_catch>
 8011a6a:	f000 f9db 	bl	8011e24 <_ZSt9terminatev>
 8011a6e:	bf00      	nop

08011a70 <__cxa_rethrow>:
 8011a70:	b510      	push	{r4, lr}
 8011a72:	f7ff fc57 	bl	8011324 <__cxa_get_globals>
 8011a76:	e9d0 4200 	ldrd	r4, r2, [r0]
 8011a7a:	3201      	adds	r2, #1
 8011a7c:	6042      	str	r2, [r0, #4]
 8011a7e:	b164      	cbz	r4, 8011a9a <__cxa_rethrow+0x2a>
 8011a80:	f894 2020 	ldrb.w	r2, [r4, #32]
 8011a84:	2a47      	cmp	r2, #71	; 0x47
 8011a86:	d00a      	beq.n	8011a9e <__cxa_rethrow+0x2e>
 8011a88:	2200      	movs	r2, #0
 8011a8a:	6002      	str	r2, [r0, #0]
 8011a8c:	3420      	adds	r4, #32
 8011a8e:	4620      	mov	r0, r4
 8011a90:	f7f6 fd18 	bl	80084c4 <_Unwind_Resume_or_Rethrow>
 8011a94:	4620      	mov	r0, r4
 8011a96:	f000 f823 	bl	8011ae0 <__cxa_begin_catch>
 8011a9a:	f000 f9c3 	bl	8011e24 <_ZSt9terminatev>
 8011a9e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8011aa2:	2a4e      	cmp	r2, #78	; 0x4e
 8011aa4:	d1f0      	bne.n	8011a88 <__cxa_rethrow+0x18>
 8011aa6:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8011aaa:	2a55      	cmp	r2, #85	; 0x55
 8011aac:	d1ec      	bne.n	8011a88 <__cxa_rethrow+0x18>
 8011aae:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8011ab2:	2a43      	cmp	r2, #67	; 0x43
 8011ab4:	d1e8      	bne.n	8011a88 <__cxa_rethrow+0x18>
 8011ab6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8011aba:	2a43      	cmp	r2, #67	; 0x43
 8011abc:	d1e4      	bne.n	8011a88 <__cxa_rethrow+0x18>
 8011abe:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8011ac2:	2a2b      	cmp	r2, #43	; 0x2b
 8011ac4:	d1e0      	bne.n	8011a88 <__cxa_rethrow+0x18>
 8011ac6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8011aca:	2a2b      	cmp	r2, #43	; 0x2b
 8011acc:	d1dc      	bne.n	8011a88 <__cxa_rethrow+0x18>
 8011ace:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8011ad2:	2a01      	cmp	r2, #1
 8011ad4:	d8d8      	bhi.n	8011a88 <__cxa_rethrow+0x18>
 8011ad6:	6962      	ldr	r2, [r4, #20]
 8011ad8:	4252      	negs	r2, r2
 8011ada:	6162      	str	r2, [r4, #20]
 8011adc:	e7d6      	b.n	8011a8c <__cxa_rethrow+0x1c>
 8011ade:	bf00      	nop

08011ae0 <__cxa_begin_catch>:
 8011ae0:	b538      	push	{r3, r4, r5, lr}
 8011ae2:	4604      	mov	r4, r0
 8011ae4:	f7ff fc1e 	bl	8011324 <__cxa_get_globals>
 8011ae8:	7822      	ldrb	r2, [r4, #0]
 8011aea:	6803      	ldr	r3, [r0, #0]
 8011aec:	2a47      	cmp	r2, #71	; 0x47
 8011aee:	f1a4 0120 	sub.w	r1, r4, #32
 8011af2:	d004      	beq.n	8011afe <__cxa_begin_catch+0x1e>
 8011af4:	bb8b      	cbnz	r3, 8011b5a <__cxa_begin_catch+0x7a>
 8011af6:	461c      	mov	r4, r3
 8011af8:	6001      	str	r1, [r0, #0]
 8011afa:	4620      	mov	r0, r4
 8011afc:	bd38      	pop	{r3, r4, r5, pc}
 8011afe:	7862      	ldrb	r2, [r4, #1]
 8011b00:	2a4e      	cmp	r2, #78	; 0x4e
 8011b02:	d1f7      	bne.n	8011af4 <__cxa_begin_catch+0x14>
 8011b04:	78a2      	ldrb	r2, [r4, #2]
 8011b06:	2a55      	cmp	r2, #85	; 0x55
 8011b08:	d1f4      	bne.n	8011af4 <__cxa_begin_catch+0x14>
 8011b0a:	78e2      	ldrb	r2, [r4, #3]
 8011b0c:	2a43      	cmp	r2, #67	; 0x43
 8011b0e:	d1f1      	bne.n	8011af4 <__cxa_begin_catch+0x14>
 8011b10:	7922      	ldrb	r2, [r4, #4]
 8011b12:	2a43      	cmp	r2, #67	; 0x43
 8011b14:	d1ee      	bne.n	8011af4 <__cxa_begin_catch+0x14>
 8011b16:	7962      	ldrb	r2, [r4, #5]
 8011b18:	2a2b      	cmp	r2, #43	; 0x2b
 8011b1a:	d1eb      	bne.n	8011af4 <__cxa_begin_catch+0x14>
 8011b1c:	79a2      	ldrb	r2, [r4, #6]
 8011b1e:	2a2b      	cmp	r2, #43	; 0x2b
 8011b20:	d1e8      	bne.n	8011af4 <__cxa_begin_catch+0x14>
 8011b22:	79e2      	ldrb	r2, [r4, #7]
 8011b24:	2a01      	cmp	r2, #1
 8011b26:	d8e5      	bhi.n	8011af4 <__cxa_begin_catch+0x14>
 8011b28:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8011b2c:	2a00      	cmp	r2, #0
 8011b2e:	db11      	blt.n	8011b54 <__cxa_begin_catch+0x74>
 8011b30:	3201      	adds	r2, #1
 8011b32:	6845      	ldr	r5, [r0, #4]
 8011b34:	f844 2c0c 	str.w	r2, [r4, #-12]
 8011b38:	428b      	cmp	r3, r1
 8011b3a:	f105 35ff 	add.w	r5, r5, #4294967295
 8011b3e:	6045      	str	r5, [r0, #4]
 8011b40:	bf1c      	itt	ne
 8011b42:	f844 3c10 	strne.w	r3, [r4, #-16]
 8011b46:	6001      	strne	r1, [r0, #0]
 8011b48:	4620      	mov	r0, r4
 8011b4a:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8011b4c:	f7f6 f8e4 	bl	8007d18 <_Unwind_Complete>
 8011b50:	4620      	mov	r0, r4
 8011b52:	bd38      	pop	{r3, r4, r5, pc}
 8011b54:	f1c2 0201 	rsb	r2, r2, #1
 8011b58:	e7eb      	b.n	8011b32 <__cxa_begin_catch+0x52>
 8011b5a:	f000 f963 	bl	8011e24 <_ZSt9terminatev>
 8011b5e:	bf00      	nop

08011b60 <__cxa_end_catch>:
 8011b60:	b508      	push	{r3, lr}
 8011b62:	f7ff fbdb 	bl	801131c <__cxa_get_globals_fast>
 8011b66:	4602      	mov	r2, r0
 8011b68:	6800      	ldr	r0, [r0, #0]
 8011b6a:	b370      	cbz	r0, 8011bca <__cxa_end_catch+0x6a>
 8011b6c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8011b70:	2b47      	cmp	r3, #71	; 0x47
 8011b72:	d006      	beq.n	8011b82 <__cxa_end_catch+0x22>
 8011b74:	2300      	movs	r3, #0
 8011b76:	6013      	str	r3, [r2, #0]
 8011b78:	3020      	adds	r0, #32
 8011b7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011b7e:	f7f6 b8cd 	b.w	8007d1c <_Unwind_DeleteException>
 8011b82:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8011b86:	2b4e      	cmp	r3, #78	; 0x4e
 8011b88:	d1f4      	bne.n	8011b74 <__cxa_end_catch+0x14>
 8011b8a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8011b8e:	2b55      	cmp	r3, #85	; 0x55
 8011b90:	d1f0      	bne.n	8011b74 <__cxa_end_catch+0x14>
 8011b92:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8011b96:	2b43      	cmp	r3, #67	; 0x43
 8011b98:	d1ec      	bne.n	8011b74 <__cxa_end_catch+0x14>
 8011b9a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8011b9e:	2b43      	cmp	r3, #67	; 0x43
 8011ba0:	d1e8      	bne.n	8011b74 <__cxa_end_catch+0x14>
 8011ba2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8011ba6:	2b2b      	cmp	r3, #43	; 0x2b
 8011ba8:	d1e4      	bne.n	8011b74 <__cxa_end_catch+0x14>
 8011baa:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8011bae:	2b2b      	cmp	r3, #43	; 0x2b
 8011bb0:	d1e0      	bne.n	8011b74 <__cxa_end_catch+0x14>
 8011bb2:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8011bb6:	2b01      	cmp	r3, #1
 8011bb8:	d8dc      	bhi.n	8011b74 <__cxa_end_catch+0x14>
 8011bba:	6943      	ldr	r3, [r0, #20]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	db05      	blt.n	8011bcc <__cxa_end_catch+0x6c>
 8011bc0:	3b01      	subs	r3, #1
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d007      	beq.n	8011bd6 <__cxa_end_catch+0x76>
 8011bc6:	db0d      	blt.n	8011be4 <__cxa_end_catch+0x84>
 8011bc8:	6143      	str	r3, [r0, #20]
 8011bca:	bd08      	pop	{r3, pc}
 8011bcc:	3301      	adds	r3, #1
 8011bce:	d1fb      	bne.n	8011bc8 <__cxa_end_catch+0x68>
 8011bd0:	6901      	ldr	r1, [r0, #16]
 8011bd2:	6011      	str	r1, [r2, #0]
 8011bd4:	e7f8      	b.n	8011bc8 <__cxa_end_catch+0x68>
 8011bd6:	6903      	ldr	r3, [r0, #16]
 8011bd8:	6013      	str	r3, [r2, #0]
 8011bda:	3020      	adds	r0, #32
 8011bdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011be0:	f7f6 b89c 	b.w	8007d1c <_Unwind_DeleteException>
 8011be4:	f000 f91e 	bl	8011e24 <_ZSt9terminatev>

08011be8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8011be8:	b570      	push	{r4, r5, r6, lr}
 8011bea:	6803      	ldr	r3, [r0, #0]
 8011bec:	b084      	sub	sp, #16
 8011bee:	2400      	movs	r4, #0
 8011bf0:	699e      	ldr	r6, [r3, #24]
 8011bf2:	9400      	str	r4, [sp, #0]
 8011bf4:	2310      	movs	r3, #16
 8011bf6:	4615      	mov	r5, r2
 8011bf8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011bfc:	6812      	ldr	r2, [r2, #0]
 8011bfe:	f88d 4004 	strb.w	r4, [sp, #4]
 8011c02:	466b      	mov	r3, sp
 8011c04:	47b0      	blx	r6
 8011c06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011c0a:	f003 0306 	and.w	r3, r3, #6
 8011c0e:	2b06      	cmp	r3, #6
 8011c10:	bf03      	ittte	eq
 8011c12:	9b00      	ldreq	r3, [sp, #0]
 8011c14:	602b      	streq	r3, [r5, #0]
 8011c16:	2001      	moveq	r0, #1
 8011c18:	4620      	movne	r0, r4
 8011c1a:	b004      	add	sp, #16
 8011c1c:	bd70      	pop	{r4, r5, r6, pc}
 8011c1e:	bf00      	nop

08011c20 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8011c20:	9800      	ldr	r0, [sp, #0]
 8011c22:	4290      	cmp	r0, r2
 8011c24:	bf0c      	ite	eq
 8011c26:	2006      	moveq	r0, #6
 8011c28:	2001      	movne	r0, #1
 8011c2a:	4770      	bx	lr

08011c2c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8011c2c:	b510      	push	{r4, lr}
 8011c2e:	4b03      	ldr	r3, [pc, #12]	; (8011c3c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8011c30:	6003      	str	r3, [r0, #0]
 8011c32:	4604      	mov	r4, r0
 8011c34:	f000 face 	bl	80121d4 <_ZNSt9type_infoD1Ev>
 8011c38:	4620      	mov	r0, r4
 8011c3a:	bd10      	pop	{r4, pc}
 8011c3c:	08017a54 	.word	0x08017a54

08011c40 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8011c40:	b510      	push	{r4, lr}
 8011c42:	4b05      	ldr	r3, [pc, #20]	; (8011c58 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 8011c44:	6003      	str	r3, [r0, #0]
 8011c46:	4604      	mov	r4, r0
 8011c48:	f000 fac4 	bl	80121d4 <_ZNSt9type_infoD1Ev>
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	2108      	movs	r1, #8
 8011c50:	f7fc fd5d 	bl	800e70e <_ZdlPvj>
 8011c54:	4620      	mov	r0, r4
 8011c56:	bd10      	pop	{r4, pc}
 8011c58:	08017a54 	.word	0x08017a54

08011c5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8011c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c60:	e9dd 1408 	ldrd	r1, r4, [sp, #32]
 8011c64:	9d06      	ldr	r5, [sp, #24]
 8011c66:	428d      	cmp	r5, r1
 8011c68:	4690      	mov	r8, r2
 8011c6a:	461f      	mov	r7, r3
 8011c6c:	4606      	mov	r6, r0
 8011c6e:	d00c      	beq.n	8011c8a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8011c70:	4639      	mov	r1, r7
 8011c72:	4630      	mov	r0, r6
 8011c74:	f000 fab2 	bl	80121dc <_ZNKSt9type_infoeqERKS_>
 8011c78:	b120      	cbz	r0, 8011c84 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	6025      	str	r5, [r4, #0]
 8011c7e:	f884 8004 	strb.w	r8, [r4, #4]
 8011c82:	71a3      	strb	r3, [r4, #6]
 8011c84:	2000      	movs	r0, #0
 8011c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c8a:	9907      	ldr	r1, [sp, #28]
 8011c8c:	f000 faa6 	bl	80121dc <_ZNKSt9type_infoeqERKS_>
 8011c90:	2800      	cmp	r0, #0
 8011c92:	d0ed      	beq.n	8011c70 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 8011c94:	f884 8005 	strb.w	r8, [r4, #5]
 8011c98:	2000      	movs	r0, #0
 8011c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c9e:	bf00      	nop

08011ca0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8011ca0:	b538      	push	{r3, r4, r5, lr}
 8011ca2:	4615      	mov	r5, r2
 8011ca4:	461c      	mov	r4, r3
 8011ca6:	f000 fa99 	bl	80121dc <_ZNKSt9type_infoeqERKS_>
 8011caa:	b120      	cbz	r0, 8011cb6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8011cac:	2208      	movs	r2, #8
 8011cae:	2306      	movs	r3, #6
 8011cb0:	6025      	str	r5, [r4, #0]
 8011cb2:	60e2      	str	r2, [r4, #12]
 8011cb4:	7123      	strb	r3, [r4, #4]
 8011cb6:	bd38      	pop	{r3, r4, r5, pc}

08011cb8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8011cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cbc:	4617      	mov	r7, r2
 8011cbe:	461c      	mov	r4, r3
 8011cc0:	4606      	mov	r6, r0
 8011cc2:	460d      	mov	r5, r1
 8011cc4:	f000 fa8a 	bl	80121dc <_ZNKSt9type_infoeqERKS_>
 8011cc8:	b908      	cbnz	r0, 8011cce <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 8011cca:	2c03      	cmp	r4, #3
 8011ccc:	d901      	bls.n	8011cd2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 8011cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cd2:	682b      	ldr	r3, [r5, #0]
 8011cd4:	463a      	mov	r2, r7
 8011cd6:	4631      	mov	r1, r6
 8011cd8:	4628      	mov	r0, r5
 8011cda:	695b      	ldr	r3, [r3, #20]
 8011cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce0:	4718      	bx	r3
 8011ce2:	bf00      	nop

08011ce4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8011ce4:	b510      	push	{r4, lr}
 8011ce6:	4b03      	ldr	r3, [pc, #12]	; (8011cf4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8011ce8:	6003      	str	r3, [r0, #0]
 8011cea:	4604      	mov	r4, r0
 8011cec:	f7ff ff9e 	bl	8011c2c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	bd10      	pop	{r4, pc}
 8011cf4:	08017ab4 	.word	0x08017ab4

08011cf8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8011cf8:	b510      	push	{r4, lr}
 8011cfa:	4b05      	ldr	r3, [pc, #20]	; (8011d10 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 8011cfc:	6003      	str	r3, [r0, #0]
 8011cfe:	4604      	mov	r4, r0
 8011d00:	f7ff ff94 	bl	8011c2c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8011d04:	4620      	mov	r0, r4
 8011d06:	210c      	movs	r1, #12
 8011d08:	f7fc fd01 	bl	800e70e <_ZdlPvj>
 8011d0c:	4620      	mov	r0, r4
 8011d0e:	bd10      	pop	{r4, pc}
 8011d10:	08017ab4 	.word	0x08017ab4

08011d14 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8011d14:	b570      	push	{r4, r5, r6, lr}
 8011d16:	b082      	sub	sp, #8
 8011d18:	460e      	mov	r6, r1
 8011d1a:	9c06      	ldr	r4, [sp, #24]
 8011d1c:	4294      	cmp	r4, r2
 8011d1e:	4605      	mov	r5, r0
 8011d20:	d009      	beq.n	8011d36 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 8011d22:	68a8      	ldr	r0, [r5, #8]
 8011d24:	6805      	ldr	r5, [r0, #0]
 8011d26:	9406      	str	r4, [sp, #24]
 8011d28:	6a2c      	ldr	r4, [r5, #32]
 8011d2a:	4631      	mov	r1, r6
 8011d2c:	46a4      	mov	ip, r4
 8011d2e:	b002      	add	sp, #8
 8011d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d34:	4760      	bx	ip
 8011d36:	4619      	mov	r1, r3
 8011d38:	9201      	str	r2, [sp, #4]
 8011d3a:	9300      	str	r3, [sp, #0]
 8011d3c:	f000 fa4e 	bl	80121dc <_ZNKSt9type_infoeqERKS_>
 8011d40:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011d44:	2800      	cmp	r0, #0
 8011d46:	d0ec      	beq.n	8011d22 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8011d48:	2006      	movs	r0, #6
 8011d4a:	b002      	add	sp, #8
 8011d4c:	bd70      	pop	{r4, r5, r6, pc}
 8011d4e:	bf00      	nop

08011d50 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8011d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d54:	460e      	mov	r6, r1
 8011d56:	b081      	sub	sp, #4
 8011d58:	4619      	mov	r1, r3
 8011d5a:	461f      	mov	r7, r3
 8011d5c:	4691      	mov	r9, r2
 8011d5e:	4683      	mov	fp, r0
 8011d60:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 8011d64:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 8011d68:	f000 fa38 	bl	80121dc <_ZNKSt9type_infoeqERKS_>
 8011d6c:	b170      	cbz	r0, 8011d8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8011d6e:	2e00      	cmp	r6, #0
 8011d70:	602c      	str	r4, [r5, #0]
 8011d72:	f885 9004 	strb.w	r9, [r5, #4]
 8011d76:	db1d      	blt.n	8011db4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 8011d78:	4434      	add	r4, r6
 8011d7a:	45a0      	cmp	r8, r4
 8011d7c:	bf0c      	ite	eq
 8011d7e:	2406      	moveq	r4, #6
 8011d80:	2401      	movne	r4, #1
 8011d82:	71ac      	strb	r4, [r5, #6]
 8011d84:	2000      	movs	r0, #0
 8011d86:	b001      	add	sp, #4
 8011d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d8c:	4544      	cmp	r4, r8
 8011d8e:	d016      	beq.n	8011dbe <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 8011d90:	f8db 0008 	ldr.w	r0, [fp, #8]
 8011d94:	f8d0 c000 	ldr.w	ip, [r0]
 8011d98:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 8011d9c:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8011da0:	f8dc 401c 	ldr.w	r4, [ip, #28]
 8011da4:	463b      	mov	r3, r7
 8011da6:	464a      	mov	r2, r9
 8011da8:	4631      	mov	r1, r6
 8011daa:	46a4      	mov	ip, r4
 8011dac:	b001      	add	sp, #4
 8011dae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011db2:	4760      	bx	ip
 8011db4:	3602      	adds	r6, #2
 8011db6:	d1e5      	bne.n	8011d84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8011db8:	2301      	movs	r3, #1
 8011dba:	71ab      	strb	r3, [r5, #6]
 8011dbc:	e7e2      	b.n	8011d84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8011dbe:	4651      	mov	r1, sl
 8011dc0:	4658      	mov	r0, fp
 8011dc2:	f000 fa0b 	bl	80121dc <_ZNKSt9type_infoeqERKS_>
 8011dc6:	2800      	cmp	r0, #0
 8011dc8:	d0e2      	beq.n	8011d90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 8011dca:	f885 9005 	strb.w	r9, [r5, #5]
 8011dce:	e7d9      	b.n	8011d84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08011dd0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8011dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dd4:	4607      	mov	r7, r0
 8011dd6:	460c      	mov	r4, r1
 8011dd8:	4615      	mov	r5, r2
 8011dda:	461e      	mov	r6, r3
 8011ddc:	f7ff ff60 	bl	8011ca0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8011de0:	b108      	cbz	r0, 8011de6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 8011de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de6:	68b8      	ldr	r0, [r7, #8]
 8011de8:	6807      	ldr	r7, [r0, #0]
 8011dea:	4621      	mov	r1, r4
 8011dec:	69bc      	ldr	r4, [r7, #24]
 8011dee:	4633      	mov	r3, r6
 8011df0:	462a      	mov	r2, r5
 8011df2:	46a4      	mov	ip, r4
 8011df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011df8:	4760      	bx	ip
 8011dfa:	bf00      	nop

08011dfc <_ZN10__cxxabiv111__terminateEPFvvE>:
 8011dfc:	b508      	push	{r3, lr}
 8011dfe:	4780      	blx	r0
 8011e00:	f000 fb34 	bl	801246c <abort>
 8011e04:	f7ff fe6c 	bl	8011ae0 <__cxa_begin_catch>
 8011e08:	f000 fb30 	bl	801246c <abort>
 8011e0c:	460d      	mov	r5, r1
 8011e0e:	4604      	mov	r4, r0
 8011e10:	f7ff fea6 	bl	8011b60 <__cxa_end_catch>
 8011e14:	3501      	adds	r5, #1
 8011e16:	d001      	beq.n	8011e1c <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 8011e18:	f7ff f99c 	bl	8011154 <__cxa_end_cleanup>
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	f000 fa21 	bl	8012264 <__cxa_call_unexpected>
 8011e22:	bf00      	nop

08011e24 <_ZSt9terminatev>:
 8011e24:	b508      	push	{r3, lr}
 8011e26:	4b03      	ldr	r3, [pc, #12]	; (8011e34 <_ZSt9terminatev+0x10>)
 8011e28:	6818      	ldr	r0, [r3, #0]
 8011e2a:	f3bf 8f5b 	dmb	ish
 8011e2e:	f7ff ffe5 	bl	8011dfc <_ZN10__cxxabiv111__terminateEPFvvE>
 8011e32:	bf00      	nop
 8011e34:	20000010 	.word	0x20000010

08011e38 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8011e38:	b508      	push	{r3, lr}
 8011e3a:	4780      	blx	r0
 8011e3c:	f7ff fff2 	bl	8011e24 <_ZSt9terminatev>

08011e40 <_ZSt10unexpectedv>:
 8011e40:	b508      	push	{r3, lr}
 8011e42:	4b03      	ldr	r3, [pc, #12]	; (8011e50 <_ZSt10unexpectedv+0x10>)
 8011e44:	6818      	ldr	r0, [r3, #0]
 8011e46:	f3bf 8f5b 	dmb	ish
 8011e4a:	f7ff fff5 	bl	8011e38 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8011e4e:	bf00      	nop
 8011e50:	2000000c 	.word	0x2000000c

08011e54 <_ZSt13get_terminatev>:
 8011e54:	4b02      	ldr	r3, [pc, #8]	; (8011e60 <_ZSt13get_terminatev+0xc>)
 8011e56:	6818      	ldr	r0, [r3, #0]
 8011e58:	f3bf 8f5b 	dmb	ish
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop
 8011e60:	20000010 	.word	0x20000010

08011e64 <_ZSt14get_unexpectedv>:
 8011e64:	4b02      	ldr	r3, [pc, #8]	; (8011e70 <_ZSt14get_unexpectedv+0xc>)
 8011e66:	6818      	ldr	r0, [r3, #0]
 8011e68:	f3bf 8f5b 	dmb	ish
 8011e6c:	4770      	bx	lr
 8011e6e:	bf00      	nop
 8011e70:	2000000c 	.word	0x2000000c

08011e74 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 8011e74:	b4f0      	push	{r4, r5, r6, r7}
 8011e76:	4c22      	ldr	r4, [pc, #136]	; (8011f00 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>)
 8011e78:	6863      	ldr	r3, [r4, #4]
 8011e7a:	f1a0 0608 	sub.w	r6, r0, #8
 8011e7e:	b31b      	cbz	r3, 8011ec8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 8011e80:	f850 7c08 	ldr.w	r7, [r0, #-8]
 8011e84:	19f5      	adds	r5, r6, r7
 8011e86:	42ab      	cmp	r3, r5
 8011e88:	d81e      	bhi.n	8011ec8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 8011e8a:	d022      	beq.n	8011ed2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5e>
 8011e8c:	6859      	ldr	r1, [r3, #4]
 8011e8e:	2900      	cmp	r1, #0
 8011e90:	d031      	beq.n	8011ef6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 8011e92:	428d      	cmp	r5, r1
 8011e94:	d303      	bcc.n	8011e9e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x2a>
 8011e96:	e02e      	b.n	8011ef6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 8011e98:	4295      	cmp	r5, r2
 8011e9a:	d205      	bcs.n	8011ea8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 8011e9c:	4611      	mov	r1, r2
 8011e9e:	684a      	ldr	r2, [r1, #4]
 8011ea0:	1d1c      	adds	r4, r3, #4
 8011ea2:	460b      	mov	r3, r1
 8011ea4:	2a00      	cmp	r2, #0
 8011ea6:	d1f7      	bne.n	8011e98 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x24>
 8011ea8:	4295      	cmp	r5, r2
 8011eaa:	d01c      	beq.n	8011ee6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x72>
 8011eac:	6823      	ldr	r3, [r4, #0]
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	1899      	adds	r1, r3, r2
 8011eb2:	428e      	cmp	r6, r1
 8011eb4:	d01c      	beq.n	8011ef0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x7c>
 8011eb6:	685b      	ldr	r3, [r3, #4]
 8011eb8:	f840 3c04 	str.w	r3, [r0, #-4]
 8011ebc:	6823      	ldr	r3, [r4, #0]
 8011ebe:	f840 7c08 	str.w	r7, [r0, #-8]
 8011ec2:	605e      	str	r6, [r3, #4]
 8011ec4:	bcf0      	pop	{r4, r5, r6, r7}
 8011ec6:	4770      	bx	lr
 8011ec8:	f840 3c04 	str.w	r3, [r0, #-4]
 8011ecc:	6066      	str	r6, [r4, #4]
 8011ece:	bcf0      	pop	{r4, r5, r6, r7}
 8011ed0:	4770      	bx	lr
 8011ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed6:	4417      	add	r7, r2
 8011ed8:	f840 7c08 	str.w	r7, [r0, #-8]
 8011edc:	f840 3c04 	str.w	r3, [r0, #-4]
 8011ee0:	6066      	str	r6, [r4, #4]
 8011ee2:	bcf0      	pop	{r4, r5, r6, r7}
 8011ee4:	4770      	bx	lr
 8011ee6:	e9d5 3200 	ldrd	r3, r2, [r5]
 8011eea:	604a      	str	r2, [r1, #4]
 8011eec:	441f      	add	r7, r3
 8011eee:	e7dd      	b.n	8011eac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 8011ef0:	4417      	add	r7, r2
 8011ef2:	601f      	str	r7, [r3, #0]
 8011ef4:	e7eb      	b.n	8011ece <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5a>
 8011ef6:	460a      	mov	r2, r1
 8011ef8:	3404      	adds	r4, #4
 8011efa:	4619      	mov	r1, r3
 8011efc:	e7d4      	b.n	8011ea8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 8011efe:	bf00      	nop
 8011f00:	20000ef4 	.word	0x20000ef4

08011f04 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 8011f04:	b430      	push	{r4, r5}
 8011f06:	4c17      	ldr	r4, [pc, #92]	; (8011f64 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x60>)
 8011f08:	f100 0208 	add.w	r2, r0, #8
 8011f0c:	6863      	ldr	r3, [r4, #4]
 8011f0e:	2a08      	cmp	r2, #8
 8011f10:	bf38      	it	cc
 8011f12:	2208      	movcc	r2, #8
 8011f14:	b303      	cbz	r3, 8011f58 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x54>
 8011f16:	3207      	adds	r2, #7
 8011f18:	6819      	ldr	r1, [r3, #0]
 8011f1a:	f022 0207 	bic.w	r2, r2, #7
 8011f1e:	428a      	cmp	r2, r1
 8011f20:	d804      	bhi.n	8011f2c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 8011f22:	e01b      	b.n	8011f5c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 8011f24:	6801      	ldr	r1, [r0, #0]
 8011f26:	428a      	cmp	r2, r1
 8011f28:	d905      	bls.n	8011f36 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	6858      	ldr	r0, [r3, #4]
 8011f2e:	2800      	cmp	r0, #0
 8011f30:	d1f8      	bne.n	8011f24 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
 8011f32:	bc30      	pop	{r4, r5}
 8011f34:	4770      	bx	lr
 8011f36:	3304      	adds	r3, #4
 8011f38:	1a8c      	subs	r4, r1, r2
 8011f3a:	2c07      	cmp	r4, #7
 8011f3c:	6845      	ldr	r5, [r0, #4]
 8011f3e:	d908      	bls.n	8011f52 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x4e>
 8011f40:	1881      	adds	r1, r0, r2
 8011f42:	604d      	str	r5, [r1, #4]
 8011f44:	5084      	str	r4, [r0, r2]
 8011f46:	6818      	ldr	r0, [r3, #0]
 8011f48:	6002      	str	r2, [r0, #0]
 8011f4a:	6019      	str	r1, [r3, #0]
 8011f4c:	3008      	adds	r0, #8
 8011f4e:	bc30      	pop	{r4, r5}
 8011f50:	4770      	bx	lr
 8011f52:	6001      	str	r1, [r0, #0]
 8011f54:	601d      	str	r5, [r3, #0]
 8011f56:	e7f9      	b.n	8011f4c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 8011f58:	4618      	mov	r0, r3
 8011f5a:	e7ea      	b.n	8011f32 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	1d23      	adds	r3, r4, #4
 8011f60:	e7ea      	b.n	8011f38 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 8011f62:	bf00      	nop
 8011f64:	20000ef4 	.word	0x20000ef4

08011f68 <__cxa_allocate_exception>:
 8011f68:	b510      	push	{r4, lr}
 8011f6a:	f100 0480 	add.w	r4, r0, #128	; 0x80
 8011f6e:	4620      	mov	r0, r4
 8011f70:	f000 fd44 	bl	80129fc <malloc>
 8011f74:	b138      	cbz	r0, 8011f86 <__cxa_allocate_exception+0x1e>
 8011f76:	4603      	mov	r3, r0
 8011f78:	2280      	movs	r2, #128	; 0x80
 8011f7a:	2100      	movs	r1, #0
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f000 ffb6 	bl	8012eee <memset>
 8011f82:	3080      	adds	r0, #128	; 0x80
 8011f84:	bd10      	pop	{r4, pc}
 8011f86:	4620      	mov	r0, r4
 8011f88:	f7ff ffbc 	bl	8011f04 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	d1f2      	bne.n	8011f78 <__cxa_allocate_exception+0x10>
 8011f92:	f7ff ff47 	bl	8011e24 <_ZSt9terminatev>
 8011f96:	bf00      	nop

08011f98 <__cxa_free_exception>:
 8011f98:	4a06      	ldr	r2, [pc, #24]	; (8011fb4 <__cxa_free_exception+0x1c>)
 8011f9a:	6893      	ldr	r3, [r2, #8]
 8011f9c:	3880      	subs	r0, #128	; 0x80
 8011f9e:	4298      	cmp	r0, r3
 8011fa0:	d903      	bls.n	8011faa <__cxa_free_exception+0x12>
 8011fa2:	68d2      	ldr	r2, [r2, #12]
 8011fa4:	4413      	add	r3, r2
 8011fa6:	4298      	cmp	r0, r3
 8011fa8:	d301      	bcc.n	8011fae <__cxa_free_exception+0x16>
 8011faa:	f000 bd2f 	b.w	8012a0c <free>
 8011fae:	f7ff bf61 	b.w	8011e74 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 8011fb2:	bf00      	nop
 8011fb4:	20000ef4 	.word	0x20000ef4

08011fb8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8011fb8:	b538      	push	{r3, r4, r5, lr}
 8011fba:	4c08      	ldr	r4, [pc, #32]	; (8011fdc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8011fbc:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8011fc0:	4628      	mov	r0, r5
 8011fc2:	60e5      	str	r5, [r4, #12]
 8011fc4:	f000 fd1a 	bl	80129fc <malloc>
 8011fc8:	60a0      	str	r0, [r4, #8]
 8011fca:	b120      	cbz	r0, 8011fd6 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 8011fcc:	2300      	movs	r3, #0
 8011fce:	6060      	str	r0, [r4, #4]
 8011fd0:	e9c0 5300 	strd	r5, r3, [r0]
 8011fd4:	bd38      	pop	{r3, r4, r5, pc}
 8011fd6:	60e0      	str	r0, [r4, #12]
 8011fd8:	6060      	str	r0, [r4, #4]
 8011fda:	bd38      	pop	{r3, r4, r5, pc}
 8011fdc:	20000ef4 	.word	0x20000ef4

08011fe0 <_ZNKSt11logic_error4whatEv>:
 8011fe0:	6840      	ldr	r0, [r0, #4]
 8011fe2:	4770      	bx	lr

08011fe4 <_ZNSt11logic_errorD1Ev>:
 8011fe4:	b510      	push	{r4, lr}
 8011fe6:	6843      	ldr	r3, [r0, #4]
 8011fe8:	4a0c      	ldr	r2, [pc, #48]	; (801201c <_ZNSt11logic_errorD1Ev+0x38>)
 8011fea:	490d      	ldr	r1, [pc, #52]	; (8012020 <_ZNSt11logic_errorD1Ev+0x3c>)
 8011fec:	6001      	str	r1, [r0, #0]
 8011fee:	4604      	mov	r4, r0
 8011ff0:	f1a3 000c 	sub.w	r0, r3, #12
 8011ff4:	4290      	cmp	r0, r2
 8011ff6:	b082      	sub	sp, #8
 8011ff8:	d105      	bne.n	8012006 <_ZNSt11logic_errorD1Ev+0x22>
 8011ffa:	4620      	mov	r0, r4
 8011ffc:	f7ff f89a 	bl	8011134 <_ZNSt9exceptionD1Ev>
 8012000:	4620      	mov	r0, r4
 8012002:	b002      	add	sp, #8
 8012004:	bd10      	pop	{r4, pc}
 8012006:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801200a:	1e51      	subs	r1, r2, #1
 801200c:	2a00      	cmp	r2, #0
 801200e:	f843 1c04 	str.w	r1, [r3, #-4]
 8012012:	dcf2      	bgt.n	8011ffa <_ZNSt11logic_errorD1Ev+0x16>
 8012014:	a901      	add	r1, sp, #4
 8012016:	f000 f86b 	bl	80120f0 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 801201a:	e7ee      	b.n	8011ffa <_ZNSt11logic_errorD1Ev+0x16>
 801201c:	20000f04 	.word	0x20000f04
 8012020:	08017b3c 	.word	0x08017b3c

08012024 <_ZNSt11logic_errorD0Ev>:
 8012024:	b510      	push	{r4, lr}
 8012026:	4604      	mov	r4, r0
 8012028:	f7ff ffdc 	bl	8011fe4 <_ZNSt11logic_errorD1Ev>
 801202c:	4620      	mov	r0, r4
 801202e:	f7fc fb63 	bl	800e6f8 <_ZdlPv>
 8012032:	4620      	mov	r0, r4
 8012034:	bd10      	pop	{r4, pc}
 8012036:	bf00      	nop

08012038 <_ZNSt12length_errorD1Ev>:
 8012038:	b510      	push	{r4, lr}
 801203a:	4b03      	ldr	r3, [pc, #12]	; (8012048 <_ZNSt12length_errorD1Ev+0x10>)
 801203c:	6003      	str	r3, [r0, #0]
 801203e:	4604      	mov	r4, r0
 8012040:	f7ff ffd0 	bl	8011fe4 <_ZNSt11logic_errorD1Ev>
 8012044:	4620      	mov	r0, r4
 8012046:	bd10      	pop	{r4, pc}
 8012048:	08017b50 	.word	0x08017b50

0801204c <_ZNSt12length_errorD0Ev>:
 801204c:	b510      	push	{r4, lr}
 801204e:	4b05      	ldr	r3, [pc, #20]	; (8012064 <_ZNSt12length_errorD0Ev+0x18>)
 8012050:	6003      	str	r3, [r0, #0]
 8012052:	4604      	mov	r4, r0
 8012054:	f7ff ffc6 	bl	8011fe4 <_ZNSt11logic_errorD1Ev>
 8012058:	4620      	mov	r0, r4
 801205a:	f7fc fb4d 	bl	800e6f8 <_ZdlPv>
 801205e:	4620      	mov	r0, r4
 8012060:	bd10      	pop	{r4, pc}
 8012062:	bf00      	nop
 8012064:	08017b50 	.word	0x08017b50

08012068 <_ZNSt12out_of_rangeD1Ev>:
 8012068:	b510      	push	{r4, lr}
 801206a:	4b03      	ldr	r3, [pc, #12]	; (8012078 <_ZNSt12out_of_rangeD1Ev+0x10>)
 801206c:	6003      	str	r3, [r0, #0]
 801206e:	4604      	mov	r4, r0
 8012070:	f7ff ffb8 	bl	8011fe4 <_ZNSt11logic_errorD1Ev>
 8012074:	4620      	mov	r0, r4
 8012076:	bd10      	pop	{r4, pc}
 8012078:	08017b64 	.word	0x08017b64

0801207c <_ZNSt12out_of_rangeD0Ev>:
 801207c:	b510      	push	{r4, lr}
 801207e:	4b05      	ldr	r3, [pc, #20]	; (8012094 <_ZNSt12out_of_rangeD0Ev+0x18>)
 8012080:	6003      	str	r3, [r0, #0]
 8012082:	4604      	mov	r4, r0
 8012084:	f7ff ffae 	bl	8011fe4 <_ZNSt11logic_errorD1Ev>
 8012088:	4620      	mov	r0, r4
 801208a:	f7fc fb35 	bl	800e6f8 <_ZdlPv>
 801208e:	4620      	mov	r0, r4
 8012090:	bd10      	pop	{r4, pc}
 8012092:	bf00      	nop
 8012094:	08017b64 	.word	0x08017b64

08012098 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 8012098:	4b13      	ldr	r3, [pc, #76]	; (80120e8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
 801209a:	4298      	cmp	r0, r3
 801209c:	b510      	push	{r4, lr}
 801209e:	d81f      	bhi.n	80120e0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x48>
 80120a0:	4288      	cmp	r0, r1
 80120a2:	4604      	mov	r4, r0
 80120a4:	d914      	bls.n	80120d0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x38>
 80120a6:	004a      	lsls	r2, r1, #1
 80120a8:	4290      	cmp	r0, r2
 80120aa:	bf38      	it	cc
 80120ac:	4614      	movcc	r4, r2
 80120ae:	f104 021d 	add.w	r2, r4, #29
 80120b2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80120b6:	f104 000d 	add.w	r0, r4, #13
 80120ba:	d90b      	bls.n	80120d4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
 80120bc:	42a1      	cmp	r1, r4
 80120be:	d209      	bcs.n	80120d4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
 80120c0:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80120c4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80120c8:	1aa4      	subs	r4, r4, r2
 80120ca:	429c      	cmp	r4, r3
 80120cc:	bf28      	it	cs
 80120ce:	461c      	movcs	r4, r3
 80120d0:	f104 000d 	add.w	r0, r4, #13
 80120d4:	f7fc fb04 	bl	800e6e0 <_Znwj>
 80120d8:	2200      	movs	r2, #0
 80120da:	e9c0 4201 	strd	r4, r2, [r0, #4]
 80120de:	bd10      	pop	{r4, pc}
 80120e0:	4802      	ldr	r0, [pc, #8]	; (80120ec <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x54>)
 80120e2:	f7fe ffcb 	bl	801107c <_ZSt20__throw_length_errorPKc>
 80120e6:	bf00      	nop
 80120e8:	3ffffffc 	.word	0x3ffffffc
 80120ec:	08017b9c 	.word	0x08017b9c

080120f0 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 80120f0:	f7fc bb02 	b.w	800e6f8 <_ZdlPv>

080120f4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 80120f4:	4288      	cmp	r0, r1
 80120f6:	d015      	beq.n	8012124 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x30>
 80120f8:	b570      	push	{r4, r5, r6, lr}
 80120fa:	4605      	mov	r5, r0
 80120fc:	b310      	cbz	r0, 8012144 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x50>
 80120fe:	1a0c      	subs	r4, r1, r0
 8012100:	4620      	mov	r0, r4
 8012102:	2100      	movs	r1, #0
 8012104:	f7ff ffc8 	bl	8012098 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8012108:	2c01      	cmp	r4, #1
 801210a:	4606      	mov	r6, r0
 801210c:	f100 030c 	add.w	r3, r0, #12
 8012110:	d005      	beq.n	801211e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x2a>
 8012112:	b954      	cbnz	r4, 801212a <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x36>
 8012114:	4a0d      	ldr	r2, [pc, #52]	; (801214c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x58>)
 8012116:	4296      	cmp	r6, r2
 8012118:	d10e      	bne.n	8012138 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x44>
 801211a:	4618      	mov	r0, r3
 801211c:	bd70      	pop	{r4, r5, r6, pc}
 801211e:	782a      	ldrb	r2, [r5, #0]
 8012120:	7302      	strb	r2, [r0, #12]
 8012122:	e7f7      	b.n	8012114 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x20>
 8012124:	4b0a      	ldr	r3, [pc, #40]	; (8012150 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x5c>)
 8012126:	4618      	mov	r0, r3
 8012128:	4770      	bx	lr
 801212a:	4618      	mov	r0, r3
 801212c:	4629      	mov	r1, r5
 801212e:	4622      	mov	r2, r4
 8012130:	f000 feb9 	bl	8012ea6 <memcpy>
 8012134:	4603      	mov	r3, r0
 8012136:	e7ed      	b.n	8012114 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x20>
 8012138:	1931      	adds	r1, r6, r4
 801213a:	2200      	movs	r2, #0
 801213c:	6034      	str	r4, [r6, #0]
 801213e:	60b2      	str	r2, [r6, #8]
 8012140:	730a      	strb	r2, [r1, #12]
 8012142:	e7ea      	b.n	801211a <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x26>
 8012144:	4803      	ldr	r0, [pc, #12]	; (8012154 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x60>)
 8012146:	f7fe ff81 	bl	801104c <_ZSt19__throw_logic_errorPKc>
 801214a:	bf00      	nop
 801214c:	20000f04 	.word	0x20000f04
 8012150:	20000f10 	.word	0x20000f10
 8012154:	08017b70 	.word	0x08017b70

08012158 <_ZNSsC1EPKcRKSaIcE>:
 8012158:	b570      	push	{r4, r5, r6, lr}
 801215a:	4605      	mov	r5, r0
 801215c:	4616      	mov	r6, r2
 801215e:	460c      	mov	r4, r1
 8012160:	b161      	cbz	r1, 801217c <_ZNSsC1EPKcRKSaIcE+0x24>
 8012162:	4608      	mov	r0, r1
 8012164:	f7f4 fdfe 	bl	8006d64 <strlen>
 8012168:	1821      	adds	r1, r4, r0
 801216a:	4632      	mov	r2, r6
 801216c:	4620      	mov	r0, r4
 801216e:	f04f 0300 	mov.w	r3, #0
 8012172:	f7ff ffbf 	bl	80120f4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 8012176:	6028      	str	r0, [r5, #0]
 8012178:	4628      	mov	r0, r5
 801217a:	bd70      	pop	{r4, r5, r6, pc}
 801217c:	f04f 31ff 	mov.w	r1, #4294967295
 8012180:	e7f3      	b.n	801216a <_ZNSsC1EPKcRKSaIcE+0x12>
 8012182:	bf00      	nop

08012184 <_ZNSt11logic_errorC1EPKc>:
 8012184:	b510      	push	{r4, lr}
 8012186:	4b08      	ldr	r3, [pc, #32]	; (80121a8 <_ZNSt11logic_errorC1EPKc+0x24>)
 8012188:	b082      	sub	sp, #8
 801218a:	4604      	mov	r4, r0
 801218c:	aa01      	add	r2, sp, #4
 801218e:	f840 3b04 	str.w	r3, [r0], #4
 8012192:	f7ff ffe1 	bl	8012158 <_ZNSsC1EPKcRKSaIcE>
 8012196:	4620      	mov	r0, r4
 8012198:	b002      	add	sp, #8
 801219a:	bd10      	pop	{r4, pc}
 801219c:	4620      	mov	r0, r4
 801219e:	f7fe ffc9 	bl	8011134 <_ZNSt9exceptionD1Ev>
 80121a2:	f7fe ffd7 	bl	8011154 <__cxa_end_cleanup>
 80121a6:	bf00      	nop
 80121a8:	08017b3c 	.word	0x08017b3c

080121ac <_ZNSt12length_errorC1EPKc>:
 80121ac:	b510      	push	{r4, lr}
 80121ae:	4604      	mov	r4, r0
 80121b0:	f7ff ffe8 	bl	8012184 <_ZNSt11logic_errorC1EPKc>
 80121b4:	4b01      	ldr	r3, [pc, #4]	; (80121bc <_ZNSt12length_errorC1EPKc+0x10>)
 80121b6:	6023      	str	r3, [r4, #0]
 80121b8:	4620      	mov	r0, r4
 80121ba:	bd10      	pop	{r4, pc}
 80121bc:	08017b50 	.word	0x08017b50

080121c0 <_ZNSt12out_of_rangeC1EPKc>:
 80121c0:	b510      	push	{r4, lr}
 80121c2:	4604      	mov	r4, r0
 80121c4:	f7ff ffde 	bl	8012184 <_ZNSt11logic_errorC1EPKc>
 80121c8:	4b01      	ldr	r3, [pc, #4]	; (80121d0 <_ZNSt12out_of_rangeC1EPKc+0x10>)
 80121ca:	6023      	str	r3, [r4, #0]
 80121cc:	4620      	mov	r0, r4
 80121ce:	bd10      	pop	{r4, pc}
 80121d0:	08017b64 	.word	0x08017b64

080121d4 <_ZNSt9type_infoD1Ev>:
 80121d4:	4770      	bx	lr
 80121d6:	bf00      	nop

080121d8 <_ZNKSt9type_info14__is_pointer_pEv>:
 80121d8:	2000      	movs	r0, #0
 80121da:	4770      	bx	lr

080121dc <_ZNKSt9type_infoeqERKS_>:
 80121dc:	4281      	cmp	r1, r0
 80121de:	d00f      	beq.n	8012200 <_ZNKSt9type_infoeqERKS_+0x24>
 80121e0:	b508      	push	{r3, lr}
 80121e2:	6840      	ldr	r0, [r0, #4]
 80121e4:	7803      	ldrb	r3, [r0, #0]
 80121e6:	2b2a      	cmp	r3, #42	; 0x2a
 80121e8:	d00c      	beq.n	8012204 <_ZNKSt9type_infoeqERKS_+0x28>
 80121ea:	6849      	ldr	r1, [r1, #4]
 80121ec:	780b      	ldrb	r3, [r1, #0]
 80121ee:	2b2a      	cmp	r3, #42	; 0x2a
 80121f0:	bf08      	it	eq
 80121f2:	3101      	addeq	r1, #1
 80121f4:	f7f4 fdac 	bl	8006d50 <strcmp>
 80121f8:	fab0 f080 	clz	r0, r0
 80121fc:	0940      	lsrs	r0, r0, #5
 80121fe:	bd08      	pop	{r3, pc}
 8012200:	2001      	movs	r0, #1
 8012202:	4770      	bx	lr
 8012204:	2000      	movs	r0, #0
 8012206:	bd08      	pop	{r3, pc}

08012208 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8012208:	7803      	ldrb	r3, [r0, #0]
 801220a:	2b47      	cmp	r3, #71	; 0x47
 801220c:	d001      	beq.n	8012212 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 801220e:	2000      	movs	r0, #0
 8012210:	4770      	bx	lr
 8012212:	7843      	ldrb	r3, [r0, #1]
 8012214:	2b4e      	cmp	r3, #78	; 0x4e
 8012216:	d1fa      	bne.n	801220e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8012218:	7883      	ldrb	r3, [r0, #2]
 801221a:	2b55      	cmp	r3, #85	; 0x55
 801221c:	d1f7      	bne.n	801220e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801221e:	78c3      	ldrb	r3, [r0, #3]
 8012220:	2b43      	cmp	r3, #67	; 0x43
 8012222:	d1f4      	bne.n	801220e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8012224:	7903      	ldrb	r3, [r0, #4]
 8012226:	2b43      	cmp	r3, #67	; 0x43
 8012228:	d1f1      	bne.n	801220e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801222a:	7943      	ldrb	r3, [r0, #5]
 801222c:	2b2b      	cmp	r3, #43	; 0x2b
 801222e:	d1ee      	bne.n	801220e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8012230:	7983      	ldrb	r3, [r0, #6]
 8012232:	2b2b      	cmp	r3, #43	; 0x2b
 8012234:	d1eb      	bne.n	801220e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8012236:	79c0      	ldrb	r0, [r0, #7]
 8012238:	2801      	cmp	r0, #1
 801223a:	bf8c      	ite	hi
 801223c:	2000      	movhi	r0, #0
 801223e:	2001      	movls	r0, #1
 8012240:	4770      	bx	lr
 8012242:	bf00      	nop

08012244 <__cxa_call_terminate>:
 8012244:	b510      	push	{r4, lr}
 8012246:	b130      	cbz	r0, 8012256 <__cxa_call_terminate+0x12>
 8012248:	4604      	mov	r4, r0
 801224a:	f7ff fc49 	bl	8011ae0 <__cxa_begin_catch>
 801224e:	4620      	mov	r0, r4
 8012250:	f7ff ffda 	bl	8012208 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012254:	b908      	cbnz	r0, 801225a <__cxa_call_terminate+0x16>
 8012256:	f7ff fde5 	bl	8011e24 <_ZSt9terminatev>
 801225a:	f854 0c14 	ldr.w	r0, [r4, #-20]
 801225e:	f7ff fdcd 	bl	8011dfc <_ZN10__cxxabiv111__terminateEPFvvE>
 8012262:	bf00      	nop

08012264 <__cxa_call_unexpected>:
 8012264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012268:	b085      	sub	sp, #20
 801226a:	4602      	mov	r2, r0
 801226c:	f7ff ffcc 	bl	8012208 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012270:	b150      	cbz	r0, 8012288 <__cxa_call_unexpected+0x24>
 8012272:	e952 8506 	ldrd	r8, r5, [r2, #-24]
 8012276:	4610      	mov	r0, r2
 8012278:	6a96      	ldr	r6, [r2, #40]	; 0x28
 801227a:	e9d2 740c 	ldrd	r7, r4, [r2, #48]	; 0x30
 801227e:	f7ff fc2f 	bl	8011ae0 <__cxa_begin_catch>
 8012282:	4640      	mov	r0, r8
 8012284:	f7ff fdd8 	bl	8011e38 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8012288:	4610      	mov	r0, r2
 801228a:	f7ff fc29 	bl	8011ae0 <__cxa_begin_catch>
 801228e:	f7ff fdd7 	bl	8011e40 <_ZSt10unexpectedv>
 8012292:	f7ff fc25 	bl	8011ae0 <__cxa_begin_catch>
 8012296:	f7ff fdc5 	bl	8011e24 <_ZSt9terminatev>
 801229a:	f7ff fc21 	bl	8011ae0 <__cxa_begin_catch>
 801229e:	f7ff f83d 	bl	801131c <__cxa_get_globals_fast>
 80122a2:	6803      	ldr	r3, [r0, #0]
 80122a4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80122a8:	f10d 0a10 	add.w	sl, sp, #16
 80122ac:	2a01      	cmp	r2, #1
 80122ae:	bf0c      	ite	eq
 80122b0:	681a      	ldreq	r2, [r3, #0]
 80122b2:	f103 0278 	addne.w	r2, r3, #120	; 0x78
 80122b6:	f04f 0800 	mov.w	r8, #0
 80122ba:	3320      	adds	r3, #32
 80122bc:	f84a 2d08 	str.w	r2, [sl, #-8]!
 80122c0:	f027 0b03 	bic.w	fp, r7, #3
 80122c4:	9301      	str	r3, [sp, #4]
 80122c6:	46c1      	mov	r9, r8
 80122c8:	45b1      	cmp	r9, r6
 80122ca:	da1b      	bge.n	8012304 <__cxa_call_unexpected+0xa0>
 80122cc:	6827      	ldr	r7, [r4, #0]
 80122ce:	b107      	cbz	r7, 80122d2 <__cxa_call_unexpected+0x6e>
 80122d0:	4427      	add	r7, r4
 80122d2:	4653      	mov	r3, sl
 80122d4:	2200      	movs	r2, #0
 80122d6:	4639      	mov	r1, r7
 80122d8:	9801      	ldr	r0, [sp, #4]
 80122da:	f7fe ff41 	bl	8011160 <__cxa_type_match>
 80122de:	b9e8      	cbnz	r0, 801231c <__cxa_call_unexpected+0xb8>
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	4914      	ldr	r1, [pc, #80]	; (8012334 <__cxa_call_unexpected+0xd0>)
 80122e4:	691b      	ldr	r3, [r3, #16]
 80122e6:	9300      	str	r3, [sp, #0]
 80122e8:	aa04      	add	r2, sp, #16
 80122ea:	2301      	movs	r3, #1
 80122ec:	f842 0d04 	str.w	r0, [r2, #-4]!
 80122f0:	4638      	mov	r0, r7
 80122f2:	9f00      	ldr	r7, [sp, #0]
 80122f4:	47b8      	blx	r7
 80122f6:	2800      	cmp	r0, #0
 80122f8:	bf18      	it	ne
 80122fa:	4680      	movne	r8, r0
 80122fc:	f109 0901 	add.w	r9, r9, #1
 8012300:	445c      	add	r4, fp
 8012302:	e7e1      	b.n	80122c8 <__cxa_call_unexpected+0x64>
 8012304:	f1b8 0f00 	cmp.w	r8, #0
 8012308:	d010      	beq.n	801232c <__cxa_call_unexpected+0xc8>
 801230a:	2004      	movs	r0, #4
 801230c:	f7ff fe2c 	bl	8011f68 <__cxa_allocate_exception>
 8012310:	4b09      	ldr	r3, [pc, #36]	; (8012338 <__cxa_call_unexpected+0xd4>)
 8012312:	6003      	str	r3, [r0, #0]
 8012314:	4a09      	ldr	r2, [pc, #36]	; (801233c <__cxa_call_unexpected+0xd8>)
 8012316:	4907      	ldr	r1, [pc, #28]	; (8012334 <__cxa_call_unexpected+0xd0>)
 8012318:	f7ff fb8e 	bl	8011a38 <__cxa_throw>
 801231c:	f7ff fba8 	bl	8011a70 <__cxa_rethrow>
 8012320:	f7ff fc1e 	bl	8011b60 <__cxa_end_catch>
 8012324:	f7ff fc1c 	bl	8011b60 <__cxa_end_catch>
 8012328:	f7fe ff14 	bl	8011154 <__cxa_end_cleanup>
 801232c:	4628      	mov	r0, r5
 801232e:	f7ff fd65 	bl	8011dfc <_ZN10__cxxabiv111__terminateEPFvvE>
 8012332:	bf00      	nop
 8012334:	0801794c 	.word	0x0801794c
 8012338:	080179d0 	.word	0x080179d0
 801233c:	08011139 	.word	0x08011139

08012340 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 8012340:	b570      	push	{r4, r5, r6, lr}
 8012342:	4b3c      	ldr	r3, [pc, #240]	; (8012434 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 8012344:	781a      	ldrb	r2, [r3, #0]
 8012346:	b082      	sub	sp, #8
 8012348:	2a00      	cmp	r2, #0
 801234a:	d135      	bne.n	80123b8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 801234c:	2401      	movs	r4, #1
 801234e:	701c      	strb	r4, [r3, #0]
 8012350:	f000 f87e 	bl	8012450 <__cxa_current_exception_type>
 8012354:	2800      	cmp	r0, #0
 8012356:	d03d      	beq.n	80123d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x94>
 8012358:	6844      	ldr	r4, [r0, #4]
 801235a:	4d37      	ldr	r5, [pc, #220]	; (8012438 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 801235c:	7823      	ldrb	r3, [r4, #0]
 801235e:	2b2a      	cmp	r3, #42	; 0x2a
 8012360:	ab02      	add	r3, sp, #8
 8012362:	f04f 32ff 	mov.w	r2, #4294967295
 8012366:	bf08      	it	eq
 8012368:	3401      	addeq	r4, #1
 801236a:	f843 2d04 	str.w	r2, [r3, #-4]!
 801236e:	2200      	movs	r2, #0
 8012370:	4611      	mov	r1, r2
 8012372:	4620      	mov	r0, r4
 8012374:	f7f4 fc24 	bl	8006bc0 <__cxa_demangle>
 8012378:	682b      	ldr	r3, [r5, #0]
 801237a:	4606      	mov	r6, r0
 801237c:	68db      	ldr	r3, [r3, #12]
 801237e:	482f      	ldr	r0, [pc, #188]	; (801243c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8012380:	2230      	movs	r2, #48	; 0x30
 8012382:	2101      	movs	r1, #1
 8012384:	f000 fa98 	bl	80128b8 <fwrite>
 8012388:	9b01      	ldr	r3, [sp, #4]
 801238a:	b17b      	cbz	r3, 80123ac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 801238c:	682b      	ldr	r3, [r5, #0]
 801238e:	4620      	mov	r0, r4
 8012390:	68d9      	ldr	r1, [r3, #12]
 8012392:	f000 f8df 	bl	8012554 <fputs>
 8012396:	682b      	ldr	r3, [r5, #0]
 8012398:	4829      	ldr	r0, [pc, #164]	; (8012440 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 801239a:	68db      	ldr	r3, [r3, #12]
 801239c:	2202      	movs	r2, #2
 801239e:	2101      	movs	r1, #1
 80123a0:	f000 fa8a 	bl	80128b8 <fwrite>
 80123a4:	9b01      	ldr	r3, [sp, #4]
 80123a6:	b18b      	cbz	r3, 80123cc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 80123a8:	f7ff fb62 	bl	8011a70 <__cxa_rethrow>
 80123ac:	682b      	ldr	r3, [r5, #0]
 80123ae:	4630      	mov	r0, r6
 80123b0:	68d9      	ldr	r1, [r3, #12]
 80123b2:	f000 f8cf 	bl	8012554 <fputs>
 80123b6:	e7ee      	b.n	8012396 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 80123b8:	4b1f      	ldr	r3, [pc, #124]	; (8012438 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 80123ba:	4822      	ldr	r0, [pc, #136]	; (8012444 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	221d      	movs	r2, #29
 80123c0:	68db      	ldr	r3, [r3, #12]
 80123c2:	2101      	movs	r1, #1
 80123c4:	f000 fa78 	bl	80128b8 <fwrite>
 80123c8:	f000 f850 	bl	801246c <abort>
 80123cc:	4630      	mov	r0, r6
 80123ce:	f000 fb1d 	bl	8012a0c <free>
 80123d2:	e7e9      	b.n	80123a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
 80123d4:	4b18      	ldr	r3, [pc, #96]	; (8012438 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 80123d6:	481c      	ldr	r0, [pc, #112]	; (8012448 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	4621      	mov	r1, r4
 80123dc:	68db      	ldr	r3, [r3, #12]
 80123de:	222d      	movs	r2, #45	; 0x2d
 80123e0:	f000 fa6a 	bl	80128b8 <fwrite>
 80123e4:	f000 f842 	bl	801246c <abort>
 80123e8:	2901      	cmp	r1, #1
 80123ea:	460c      	mov	r4, r1
 80123ec:	d119      	bne.n	8012422 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe2>
 80123ee:	f7ff fb77 	bl	8011ae0 <__cxa_begin_catch>
 80123f2:	6803      	ldr	r3, [r0, #0]
 80123f4:	689b      	ldr	r3, [r3, #8]
 80123f6:	4798      	blx	r3
 80123f8:	682b      	ldr	r3, [r5, #0]
 80123fa:	4606      	mov	r6, r0
 80123fc:	68db      	ldr	r3, [r3, #12]
 80123fe:	4813      	ldr	r0, [pc, #76]	; (801244c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 8012400:	4621      	mov	r1, r4
 8012402:	220b      	movs	r2, #11
 8012404:	f000 fa58 	bl	80128b8 <fwrite>
 8012408:	682b      	ldr	r3, [r5, #0]
 801240a:	4630      	mov	r0, r6
 801240c:	68d9      	ldr	r1, [r3, #12]
 801240e:	f000 f8a1 	bl	8012554 <fputs>
 8012412:	682b      	ldr	r3, [r5, #0]
 8012414:	200a      	movs	r0, #10
 8012416:	68d9      	ldr	r1, [r3, #12]
 8012418:	f000 f85a 	bl	80124d0 <fputc>
 801241c:	f7ff fba0 	bl	8011b60 <__cxa_end_catch>
 8012420:	e7e0      	b.n	80123e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 8012422:	f7ff fb5d 	bl	8011ae0 <__cxa_begin_catch>
 8012426:	f7ff fb9b 	bl	8011b60 <__cxa_end_catch>
 801242a:	e7db      	b.n	80123e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 801242c:	f7ff fb98 	bl	8011b60 <__cxa_end_catch>
 8012430:	f7fe fe90 	bl	8011154 <__cxa_end_cleanup>
 8012434:	20000f14 	.word	0x20000f14
 8012438:	20000014 	.word	0x20000014
 801243c:	08017bec 	.word	0x08017bec
 8012440:	08017c20 	.word	0x08017c20
 8012444:	08017bcc 	.word	0x08017bcc
 8012448:	08017c24 	.word	0x08017c24
 801244c:	08017c54 	.word	0x08017c54

08012450 <__cxa_current_exception_type>:
 8012450:	b508      	push	{r3, lr}
 8012452:	f7fe ff67 	bl	8011324 <__cxa_get_globals>
 8012456:	6800      	ldr	r0, [r0, #0]
 8012458:	b130      	cbz	r0, 8012468 <__cxa_current_exception_type+0x18>
 801245a:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 801245e:	6800      	ldr	r0, [r0, #0]
 8012460:	2b01      	cmp	r3, #1
 8012462:	bf08      	it	eq
 8012464:	f850 0c78 	ldreq.w	r0, [r0, #-120]
 8012468:	bd08      	pop	{r3, pc}
 801246a:	bf00      	nop

0801246c <abort>:
 801246c:	b508      	push	{r3, lr}
 801246e:	2006      	movs	r0, #6
 8012470:	f000 ffa0 	bl	80133b4 <raise>
 8012474:	2001      	movs	r0, #1
 8012476:	f7f6 faf3 	bl	8008a60 <_exit>
	...

0801247c <__errno>:
 801247c:	4b01      	ldr	r3, [pc, #4]	; (8012484 <__errno+0x8>)
 801247e:	6818      	ldr	r0, [r3, #0]
 8012480:	4770      	bx	lr
 8012482:	bf00      	nop
 8012484:	20000014 	.word	0x20000014

08012488 <_fputc_r>:
 8012488:	b570      	push	{r4, r5, r6, lr}
 801248a:	460e      	mov	r6, r1
 801248c:	4614      	mov	r4, r2
 801248e:	4605      	mov	r5, r0
 8012490:	b118      	cbz	r0, 801249a <_fputc_r+0x12>
 8012492:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8012494:	b90b      	cbnz	r3, 801249a <_fputc_r+0x12>
 8012496:	f003 fa91 	bl	80159bc <__sinit>
 801249a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801249c:	07d8      	lsls	r0, r3, #31
 801249e:	d405      	bmi.n	80124ac <_fputc_r+0x24>
 80124a0:	89a3      	ldrh	r3, [r4, #12]
 80124a2:	0599      	lsls	r1, r3, #22
 80124a4:	d402      	bmi.n	80124ac <_fputc_r+0x24>
 80124a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124a8:	f000 fa3a 	bl	8012920 <__retarget_lock_acquire_recursive>
 80124ac:	4622      	mov	r2, r4
 80124ae:	4628      	mov	r0, r5
 80124b0:	4631      	mov	r1, r6
 80124b2:	f000 fd31 	bl	8012f18 <_putc_r>
 80124b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124b8:	07da      	lsls	r2, r3, #31
 80124ba:	4605      	mov	r5, r0
 80124bc:	d405      	bmi.n	80124ca <_fputc_r+0x42>
 80124be:	89a3      	ldrh	r3, [r4, #12]
 80124c0:	059b      	lsls	r3, r3, #22
 80124c2:	d402      	bmi.n	80124ca <_fputc_r+0x42>
 80124c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124c6:	f000 fa2c 	bl	8012922 <__retarget_lock_release_recursive>
 80124ca:	4628      	mov	r0, r5
 80124cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080124d0 <fputc>:
 80124d0:	4b02      	ldr	r3, [pc, #8]	; (80124dc <fputc+0xc>)
 80124d2:	460a      	mov	r2, r1
 80124d4:	4601      	mov	r1, r0
 80124d6:	6818      	ldr	r0, [r3, #0]
 80124d8:	f7ff bfd6 	b.w	8012488 <_fputc_r>
 80124dc:	20000014 	.word	0x20000014

080124e0 <_fputs_r>:
 80124e0:	b530      	push	{r4, r5, lr}
 80124e2:	b087      	sub	sp, #28
 80124e4:	4605      	mov	r5, r0
 80124e6:	4608      	mov	r0, r1
 80124e8:	4614      	mov	r4, r2
 80124ea:	9101      	str	r1, [sp, #4]
 80124ec:	f7f4 fc3a 	bl	8006d64 <strlen>
 80124f0:	ab01      	add	r3, sp, #4
 80124f2:	9303      	str	r3, [sp, #12]
 80124f4:	2301      	movs	r3, #1
 80124f6:	9005      	str	r0, [sp, #20]
 80124f8:	9002      	str	r0, [sp, #8]
 80124fa:	9304      	str	r3, [sp, #16]
 80124fc:	b125      	cbz	r5, 8012508 <_fputs_r+0x28>
 80124fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012500:	b913      	cbnz	r3, 8012508 <_fputs_r+0x28>
 8012502:	4628      	mov	r0, r5
 8012504:	f003 fa5a 	bl	80159bc <__sinit>
 8012508:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801250a:	07db      	lsls	r3, r3, #31
 801250c:	d405      	bmi.n	801251a <_fputs_r+0x3a>
 801250e:	89a3      	ldrh	r3, [r4, #12]
 8012510:	0598      	lsls	r0, r3, #22
 8012512:	d402      	bmi.n	801251a <_fputs_r+0x3a>
 8012514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012516:	f000 fa03 	bl	8012920 <__retarget_lock_acquire_recursive>
 801251a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801251e:	0499      	lsls	r1, r3, #18
 8012520:	d406      	bmi.n	8012530 <_fputs_r+0x50>
 8012522:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012526:	81a3      	strh	r3, [r4, #12]
 8012528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801252a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801252e:	6663      	str	r3, [r4, #100]	; 0x64
 8012530:	aa03      	add	r2, sp, #12
 8012532:	4628      	mov	r0, r5
 8012534:	4621      	mov	r1, r4
 8012536:	f000 f827 	bl	8012588 <__sfvwrite_r>
 801253a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801253c:	07da      	lsls	r2, r3, #31
 801253e:	4605      	mov	r5, r0
 8012540:	d405      	bmi.n	801254e <_fputs_r+0x6e>
 8012542:	89a3      	ldrh	r3, [r4, #12]
 8012544:	059b      	lsls	r3, r3, #22
 8012546:	d402      	bmi.n	801254e <_fputs_r+0x6e>
 8012548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801254a:	f000 f9ea 	bl	8012922 <__retarget_lock_release_recursive>
 801254e:	4628      	mov	r0, r5
 8012550:	b007      	add	sp, #28
 8012552:	bd30      	pop	{r4, r5, pc}

08012554 <fputs>:
 8012554:	4b02      	ldr	r3, [pc, #8]	; (8012560 <fputs+0xc>)
 8012556:	460a      	mov	r2, r1
 8012558:	4601      	mov	r1, r0
 801255a:	6818      	ldr	r0, [r3, #0]
 801255c:	f7ff bfc0 	b.w	80124e0 <_fputs_r>
 8012560:	20000014 	.word	0x20000014

08012564 <_fstat_r>:
 8012564:	b538      	push	{r3, r4, r5, lr}
 8012566:	4c07      	ldr	r4, [pc, #28]	; (8012584 <_fstat_r+0x20>)
 8012568:	2300      	movs	r3, #0
 801256a:	4605      	mov	r5, r0
 801256c:	4608      	mov	r0, r1
 801256e:	4611      	mov	r1, r2
 8012570:	6023      	str	r3, [r4, #0]
 8012572:	f7f6 fac4 	bl	8008afe <_fstat>
 8012576:	1c43      	adds	r3, r0, #1
 8012578:	d102      	bne.n	8012580 <_fstat_r+0x1c>
 801257a:	6823      	ldr	r3, [r4, #0]
 801257c:	b103      	cbz	r3, 8012580 <_fstat_r+0x1c>
 801257e:	602b      	str	r3, [r5, #0]
 8012580:	bd38      	pop	{r3, r4, r5, pc}
 8012582:	bf00      	nop
 8012584:	2000105c 	.word	0x2000105c

08012588 <__sfvwrite_r>:
 8012588:	6893      	ldr	r3, [r2, #8]
 801258a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801258e:	4680      	mov	r8, r0
 8012590:	460c      	mov	r4, r1
 8012592:	4691      	mov	r9, r2
 8012594:	b91b      	cbnz	r3, 801259e <__sfvwrite_r+0x16>
 8012596:	2000      	movs	r0, #0
 8012598:	b003      	add	sp, #12
 801259a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801259e:	898b      	ldrh	r3, [r1, #12]
 80125a0:	0718      	lsls	r0, r3, #28
 80125a2:	d54f      	bpl.n	8012644 <__sfvwrite_r+0xbc>
 80125a4:	690b      	ldr	r3, [r1, #16]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d04c      	beq.n	8012644 <__sfvwrite_r+0xbc>
 80125aa:	89a5      	ldrh	r5, [r4, #12]
 80125ac:	f8d9 6000 	ldr.w	r6, [r9]
 80125b0:	f015 0702 	ands.w	r7, r5, #2
 80125b4:	d169      	bne.n	801268a <__sfvwrite_r+0x102>
 80125b6:	f015 0501 	ands.w	r5, r5, #1
 80125ba:	f000 809a 	beq.w	80126f2 <__sfvwrite_r+0x16a>
 80125be:	4638      	mov	r0, r7
 80125c0:	46ba      	mov	sl, r7
 80125c2:	46bb      	mov	fp, r7
 80125c4:	f1bb 0f00 	cmp.w	fp, #0
 80125c8:	f000 8103 	beq.w	80127d2 <__sfvwrite_r+0x24a>
 80125cc:	b950      	cbnz	r0, 80125e4 <__sfvwrite_r+0x5c>
 80125ce:	465a      	mov	r2, fp
 80125d0:	210a      	movs	r1, #10
 80125d2:	4650      	mov	r0, sl
 80125d4:	f7f4 fb6c 	bl	8006cb0 <memchr>
 80125d8:	2800      	cmp	r0, #0
 80125da:	f000 80ff 	beq.w	80127dc <__sfvwrite_r+0x254>
 80125de:	3001      	adds	r0, #1
 80125e0:	eba0 070a 	sub.w	r7, r0, sl
 80125e4:	6820      	ldr	r0, [r4, #0]
 80125e6:	6921      	ldr	r1, [r4, #16]
 80125e8:	6962      	ldr	r2, [r4, #20]
 80125ea:	455f      	cmp	r7, fp
 80125ec:	463b      	mov	r3, r7
 80125ee:	bf28      	it	cs
 80125f0:	465b      	movcs	r3, fp
 80125f2:	4288      	cmp	r0, r1
 80125f4:	f240 80f5 	bls.w	80127e2 <__sfvwrite_r+0x25a>
 80125f8:	68a5      	ldr	r5, [r4, #8]
 80125fa:	4415      	add	r5, r2
 80125fc:	42ab      	cmp	r3, r5
 80125fe:	f340 80f0 	ble.w	80127e2 <__sfvwrite_r+0x25a>
 8012602:	4651      	mov	r1, sl
 8012604:	462a      	mov	r2, r5
 8012606:	f000 fc59 	bl	8012ebc <memmove>
 801260a:	6823      	ldr	r3, [r4, #0]
 801260c:	442b      	add	r3, r5
 801260e:	6023      	str	r3, [r4, #0]
 8012610:	4621      	mov	r1, r4
 8012612:	4640      	mov	r0, r8
 8012614:	f003 f966 	bl	80158e4 <_fflush_r>
 8012618:	2800      	cmp	r0, #0
 801261a:	d165      	bne.n	80126e8 <__sfvwrite_r+0x160>
 801261c:	1b7f      	subs	r7, r7, r5
 801261e:	f040 80fa 	bne.w	8012816 <__sfvwrite_r+0x28e>
 8012622:	4621      	mov	r1, r4
 8012624:	4640      	mov	r0, r8
 8012626:	f003 f95d 	bl	80158e4 <_fflush_r>
 801262a:	2800      	cmp	r0, #0
 801262c:	d15c      	bne.n	80126e8 <__sfvwrite_r+0x160>
 801262e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012632:	44aa      	add	sl, r5
 8012634:	ebab 0b05 	sub.w	fp, fp, r5
 8012638:	1b5d      	subs	r5, r3, r5
 801263a:	f8c9 5008 	str.w	r5, [r9, #8]
 801263e:	2d00      	cmp	r5, #0
 8012640:	d1c0      	bne.n	80125c4 <__sfvwrite_r+0x3c>
 8012642:	e7a8      	b.n	8012596 <__sfvwrite_r+0xe>
 8012644:	4621      	mov	r1, r4
 8012646:	4640      	mov	r0, r8
 8012648:	f002 fa10 	bl	8014a6c <__swsetup_r>
 801264c:	2800      	cmp	r0, #0
 801264e:	d0ac      	beq.n	80125aa <__sfvwrite_r+0x22>
 8012650:	f04f 30ff 	mov.w	r0, #4294967295
 8012654:	e7a0      	b.n	8012598 <__sfvwrite_r+0x10>
 8012656:	e9d6 a700 	ldrd	sl, r7, [r6]
 801265a:	3608      	adds	r6, #8
 801265c:	2f00      	cmp	r7, #0
 801265e:	d0fa      	beq.n	8012656 <__sfvwrite_r+0xce>
 8012660:	455f      	cmp	r7, fp
 8012662:	463b      	mov	r3, r7
 8012664:	4652      	mov	r2, sl
 8012666:	bf28      	it	cs
 8012668:	465b      	movcs	r3, fp
 801266a:	69e1      	ldr	r1, [r4, #28]
 801266c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801266e:	4640      	mov	r0, r8
 8012670:	47a8      	blx	r5
 8012672:	2800      	cmp	r0, #0
 8012674:	dd38      	ble.n	80126e8 <__sfvwrite_r+0x160>
 8012676:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801267a:	4482      	add	sl, r0
 801267c:	1a3f      	subs	r7, r7, r0
 801267e:	1a18      	subs	r0, r3, r0
 8012680:	f8c9 0008 	str.w	r0, [r9, #8]
 8012684:	2800      	cmp	r0, #0
 8012686:	d1e9      	bne.n	801265c <__sfvwrite_r+0xd4>
 8012688:	e785      	b.n	8012596 <__sfvwrite_r+0xe>
 801268a:	f04f 0a00 	mov.w	sl, #0
 801268e:	4657      	mov	r7, sl
 8012690:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8012820 <__sfvwrite_r+0x298>
 8012694:	e7e2      	b.n	801265c <__sfvwrite_r+0xd4>
 8012696:	e9d6 5a00 	ldrd	r5, sl, [r6]
 801269a:	3608      	adds	r6, #8
 801269c:	f1ba 0f00 	cmp.w	sl, #0
 80126a0:	d0f9      	beq.n	8012696 <__sfvwrite_r+0x10e>
 80126a2:	89a2      	ldrh	r2, [r4, #12]
 80126a4:	68a3      	ldr	r3, [r4, #8]
 80126a6:	6820      	ldr	r0, [r4, #0]
 80126a8:	0591      	lsls	r1, r2, #22
 80126aa:	d564      	bpl.n	8012776 <__sfvwrite_r+0x1ee>
 80126ac:	4553      	cmp	r3, sl
 80126ae:	d836      	bhi.n	801271e <__sfvwrite_r+0x196>
 80126b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80126b4:	d033      	beq.n	801271e <__sfvwrite_r+0x196>
 80126b6:	6921      	ldr	r1, [r4, #16]
 80126b8:	6967      	ldr	r7, [r4, #20]
 80126ba:	eba0 0b01 	sub.w	fp, r0, r1
 80126be:	2302      	movs	r3, #2
 80126c0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80126c4:	fb97 f7f3 	sdiv	r7, r7, r3
 80126c8:	f10b 0301 	add.w	r3, fp, #1
 80126cc:	4453      	add	r3, sl
 80126ce:	429f      	cmp	r7, r3
 80126d0:	bf38      	it	cc
 80126d2:	461f      	movcc	r7, r3
 80126d4:	0553      	lsls	r3, r2, #21
 80126d6:	d53e      	bpl.n	8012756 <__sfvwrite_r+0x1ce>
 80126d8:	4639      	mov	r1, r7
 80126da:	4640      	mov	r0, r8
 80126dc:	f000 f99e 	bl	8012a1c <_malloc_r>
 80126e0:	b948      	cbnz	r0, 80126f6 <__sfvwrite_r+0x16e>
 80126e2:	230c      	movs	r3, #12
 80126e4:	f8c8 3000 	str.w	r3, [r8]
 80126e8:	89a3      	ldrh	r3, [r4, #12]
 80126ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126ee:	81a3      	strh	r3, [r4, #12]
 80126f0:	e7ae      	b.n	8012650 <__sfvwrite_r+0xc8>
 80126f2:	46aa      	mov	sl, r5
 80126f4:	e7d2      	b.n	801269c <__sfvwrite_r+0x114>
 80126f6:	465a      	mov	r2, fp
 80126f8:	6921      	ldr	r1, [r4, #16]
 80126fa:	9001      	str	r0, [sp, #4]
 80126fc:	f000 fbd3 	bl	8012ea6 <memcpy>
 8012700:	89a2      	ldrh	r2, [r4, #12]
 8012702:	9b01      	ldr	r3, [sp, #4]
 8012704:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8012708:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801270c:	81a2      	strh	r2, [r4, #12]
 801270e:	6123      	str	r3, [r4, #16]
 8012710:	6167      	str	r7, [r4, #20]
 8012712:	445b      	add	r3, fp
 8012714:	eba7 070b 	sub.w	r7, r7, fp
 8012718:	6023      	str	r3, [r4, #0]
 801271a:	60a7      	str	r7, [r4, #8]
 801271c:	4653      	mov	r3, sl
 801271e:	4553      	cmp	r3, sl
 8012720:	bf28      	it	cs
 8012722:	4653      	movcs	r3, sl
 8012724:	461a      	mov	r2, r3
 8012726:	4629      	mov	r1, r5
 8012728:	6820      	ldr	r0, [r4, #0]
 801272a:	9301      	str	r3, [sp, #4]
 801272c:	f000 fbc6 	bl	8012ebc <memmove>
 8012730:	68a2      	ldr	r2, [r4, #8]
 8012732:	9b01      	ldr	r3, [sp, #4]
 8012734:	1ad2      	subs	r2, r2, r3
 8012736:	60a2      	str	r2, [r4, #8]
 8012738:	6822      	ldr	r2, [r4, #0]
 801273a:	4413      	add	r3, r2
 801273c:	4657      	mov	r7, sl
 801273e:	6023      	str	r3, [r4, #0]
 8012740:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012744:	443d      	add	r5, r7
 8012746:	ebaa 0a07 	sub.w	sl, sl, r7
 801274a:	1bdf      	subs	r7, r3, r7
 801274c:	f8c9 7008 	str.w	r7, [r9, #8]
 8012750:	2f00      	cmp	r7, #0
 8012752:	d1a3      	bne.n	801269c <__sfvwrite_r+0x114>
 8012754:	e71f      	b.n	8012596 <__sfvwrite_r+0xe>
 8012756:	463a      	mov	r2, r7
 8012758:	4640      	mov	r0, r8
 801275a:	f000 fc19 	bl	8012f90 <_realloc_r>
 801275e:	4603      	mov	r3, r0
 8012760:	2800      	cmp	r0, #0
 8012762:	d1d4      	bne.n	801270e <__sfvwrite_r+0x186>
 8012764:	6921      	ldr	r1, [r4, #16]
 8012766:	4640      	mov	r0, r8
 8012768:	f003 f9b8 	bl	8015adc <_free_r>
 801276c:	89a3      	ldrh	r3, [r4, #12]
 801276e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012772:	81a3      	strh	r3, [r4, #12]
 8012774:	e7b5      	b.n	80126e2 <__sfvwrite_r+0x15a>
 8012776:	6922      	ldr	r2, [r4, #16]
 8012778:	4282      	cmp	r2, r0
 801277a:	d302      	bcc.n	8012782 <__sfvwrite_r+0x1fa>
 801277c:	6962      	ldr	r2, [r4, #20]
 801277e:	4552      	cmp	r2, sl
 8012780:	d916      	bls.n	80127b0 <__sfvwrite_r+0x228>
 8012782:	4553      	cmp	r3, sl
 8012784:	bf28      	it	cs
 8012786:	4653      	movcs	r3, sl
 8012788:	461a      	mov	r2, r3
 801278a:	4629      	mov	r1, r5
 801278c:	461f      	mov	r7, r3
 801278e:	f000 fb95 	bl	8012ebc <memmove>
 8012792:	68a3      	ldr	r3, [r4, #8]
 8012794:	6822      	ldr	r2, [r4, #0]
 8012796:	1bdb      	subs	r3, r3, r7
 8012798:	443a      	add	r2, r7
 801279a:	60a3      	str	r3, [r4, #8]
 801279c:	6022      	str	r2, [r4, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d1ce      	bne.n	8012740 <__sfvwrite_r+0x1b8>
 80127a2:	4621      	mov	r1, r4
 80127a4:	4640      	mov	r0, r8
 80127a6:	f003 f89d 	bl	80158e4 <_fflush_r>
 80127aa:	2800      	cmp	r0, #0
 80127ac:	d0c8      	beq.n	8012740 <__sfvwrite_r+0x1b8>
 80127ae:	e79b      	b.n	80126e8 <__sfvwrite_r+0x160>
 80127b0:	4b1a      	ldr	r3, [pc, #104]	; (801281c <__sfvwrite_r+0x294>)
 80127b2:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80127b4:	69e1      	ldr	r1, [r4, #28]
 80127b6:	459a      	cmp	sl, r3
 80127b8:	bf94      	ite	ls
 80127ba:	4653      	movls	r3, sl
 80127bc:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 80127c0:	4640      	mov	r0, r8
 80127c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80127c6:	4353      	muls	r3, r2
 80127c8:	462a      	mov	r2, r5
 80127ca:	47b8      	blx	r7
 80127cc:	1e07      	subs	r7, r0, #0
 80127ce:	dcb7      	bgt.n	8012740 <__sfvwrite_r+0x1b8>
 80127d0:	e78a      	b.n	80126e8 <__sfvwrite_r+0x160>
 80127d2:	e9d6 ab00 	ldrd	sl, fp, [r6]
 80127d6:	2000      	movs	r0, #0
 80127d8:	3608      	adds	r6, #8
 80127da:	e6f3      	b.n	80125c4 <__sfvwrite_r+0x3c>
 80127dc:	f10b 0701 	add.w	r7, fp, #1
 80127e0:	e700      	b.n	80125e4 <__sfvwrite_r+0x5c>
 80127e2:	429a      	cmp	r2, r3
 80127e4:	dc09      	bgt.n	80127fa <__sfvwrite_r+0x272>
 80127e6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80127e8:	69e1      	ldr	r1, [r4, #28]
 80127ea:	4613      	mov	r3, r2
 80127ec:	4640      	mov	r0, r8
 80127ee:	4652      	mov	r2, sl
 80127f0:	47a8      	blx	r5
 80127f2:	1e05      	subs	r5, r0, #0
 80127f4:	f73f af12 	bgt.w	801261c <__sfvwrite_r+0x94>
 80127f8:	e776      	b.n	80126e8 <__sfvwrite_r+0x160>
 80127fa:	461a      	mov	r2, r3
 80127fc:	4651      	mov	r1, sl
 80127fe:	9301      	str	r3, [sp, #4]
 8012800:	f000 fb5c 	bl	8012ebc <memmove>
 8012804:	9b01      	ldr	r3, [sp, #4]
 8012806:	68a2      	ldr	r2, [r4, #8]
 8012808:	1ad2      	subs	r2, r2, r3
 801280a:	60a2      	str	r2, [r4, #8]
 801280c:	6822      	ldr	r2, [r4, #0]
 801280e:	441a      	add	r2, r3
 8012810:	6022      	str	r2, [r4, #0]
 8012812:	461d      	mov	r5, r3
 8012814:	e702      	b.n	801261c <__sfvwrite_r+0x94>
 8012816:	2001      	movs	r0, #1
 8012818:	e709      	b.n	801262e <__sfvwrite_r+0xa6>
 801281a:	bf00      	nop
 801281c:	7ffffffe 	.word	0x7ffffffe
 8012820:	7ffffc00 	.word	0x7ffffc00

08012824 <_fwrite_r>:
 8012824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012828:	b086      	sub	sp, #24
 801282a:	fb02 f503 	mul.w	r5, r2, r3
 801282e:	461e      	mov	r6, r3
 8012830:	ab01      	add	r3, sp, #4
 8012832:	9303      	str	r3, [sp, #12]
 8012834:	2301      	movs	r3, #1
 8012836:	4617      	mov	r7, r2
 8012838:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801283a:	9101      	str	r1, [sp, #4]
 801283c:	9502      	str	r5, [sp, #8]
 801283e:	9505      	str	r5, [sp, #20]
 8012840:	9304      	str	r3, [sp, #16]
 8012842:	4680      	mov	r8, r0
 8012844:	b118      	cbz	r0, 801284e <_fwrite_r+0x2a>
 8012846:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8012848:	b90b      	cbnz	r3, 801284e <_fwrite_r+0x2a>
 801284a:	f003 f8b7 	bl	80159bc <__sinit>
 801284e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012850:	07d8      	lsls	r0, r3, #31
 8012852:	d405      	bmi.n	8012860 <_fwrite_r+0x3c>
 8012854:	89a3      	ldrh	r3, [r4, #12]
 8012856:	0599      	lsls	r1, r3, #22
 8012858:	d402      	bmi.n	8012860 <_fwrite_r+0x3c>
 801285a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801285c:	f000 f860 	bl	8012920 <__retarget_lock_acquire_recursive>
 8012860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012864:	049a      	lsls	r2, r3, #18
 8012866:	d406      	bmi.n	8012876 <_fwrite_r+0x52>
 8012868:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801286c:	81a3      	strh	r3, [r4, #12]
 801286e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012874:	6663      	str	r3, [r4, #100]	; 0x64
 8012876:	aa03      	add	r2, sp, #12
 8012878:	4621      	mov	r1, r4
 801287a:	4640      	mov	r0, r8
 801287c:	f7ff fe84 	bl	8012588 <__sfvwrite_r>
 8012880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012882:	b958      	cbnz	r0, 801289c <_fwrite_r+0x78>
 8012884:	07d8      	lsls	r0, r3, #31
 8012886:	d405      	bmi.n	8012894 <_fwrite_r+0x70>
 8012888:	89a3      	ldrh	r3, [r4, #12]
 801288a:	0599      	lsls	r1, r3, #22
 801288c:	d402      	bmi.n	8012894 <_fwrite_r+0x70>
 801288e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012890:	f000 f847 	bl	8012922 <__retarget_lock_release_recursive>
 8012894:	4630      	mov	r0, r6
 8012896:	b006      	add	sp, #24
 8012898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801289c:	07da      	lsls	r2, r3, #31
 801289e:	d405      	bmi.n	80128ac <_fwrite_r+0x88>
 80128a0:	89a3      	ldrh	r3, [r4, #12]
 80128a2:	059b      	lsls	r3, r3, #22
 80128a4:	d402      	bmi.n	80128ac <_fwrite_r+0x88>
 80128a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128a8:	f000 f83b 	bl	8012922 <__retarget_lock_release_recursive>
 80128ac:	9b05      	ldr	r3, [sp, #20]
 80128ae:	1aed      	subs	r5, r5, r3
 80128b0:	fbb5 f6f7 	udiv	r6, r5, r7
 80128b4:	e7ee      	b.n	8012894 <_fwrite_r+0x70>
	...

080128b8 <fwrite>:
 80128b8:	b507      	push	{r0, r1, r2, lr}
 80128ba:	9300      	str	r3, [sp, #0]
 80128bc:	4613      	mov	r3, r2
 80128be:	460a      	mov	r2, r1
 80128c0:	4601      	mov	r1, r0
 80128c2:	4803      	ldr	r0, [pc, #12]	; (80128d0 <fwrite+0x18>)
 80128c4:	6800      	ldr	r0, [r0, #0]
 80128c6:	f7ff ffad 	bl	8012824 <_fwrite_r>
 80128ca:	b003      	add	sp, #12
 80128cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80128d0:	20000014 	.word	0x20000014

080128d4 <__libc_init_array>:
 80128d4:	b570      	push	{r4, r5, r6, lr}
 80128d6:	4e0d      	ldr	r6, [pc, #52]	; (801290c <__libc_init_array+0x38>)
 80128d8:	4c0d      	ldr	r4, [pc, #52]	; (8012910 <__libc_init_array+0x3c>)
 80128da:	1ba4      	subs	r4, r4, r6
 80128dc:	10a4      	asrs	r4, r4, #2
 80128de:	2500      	movs	r5, #0
 80128e0:	42a5      	cmp	r5, r4
 80128e2:	d109      	bne.n	80128f8 <__libc_init_array+0x24>
 80128e4:	4e0b      	ldr	r6, [pc, #44]	; (8012914 <__libc_init_array+0x40>)
 80128e6:	4c0c      	ldr	r4, [pc, #48]	; (8012918 <__libc_init_array+0x44>)
 80128e8:	f003 fe80 	bl	80165ec <_init>
 80128ec:	1ba4      	subs	r4, r4, r6
 80128ee:	10a4      	asrs	r4, r4, #2
 80128f0:	2500      	movs	r5, #0
 80128f2:	42a5      	cmp	r5, r4
 80128f4:	d105      	bne.n	8012902 <__libc_init_array+0x2e>
 80128f6:	bd70      	pop	{r4, r5, r6, pc}
 80128f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80128fc:	4798      	blx	r3
 80128fe:	3501      	adds	r5, #1
 8012900:	e7ee      	b.n	80128e0 <__libc_init_array+0xc>
 8012902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012906:	4798      	blx	r3
 8012908:	3501      	adds	r5, #1
 801290a:	e7f2      	b.n	80128f2 <__libc_init_array+0x1e>
 801290c:	08018a6c 	.word	0x08018a6c
 8012910:	08018a6c 	.word	0x08018a6c
 8012914:	08018a6c 	.word	0x08018a6c
 8012918:	08018a78 	.word	0x08018a78

0801291c <__retarget_lock_init_recursive>:
 801291c:	4770      	bx	lr

0801291e <__retarget_lock_close_recursive>:
 801291e:	4770      	bx	lr

08012920 <__retarget_lock_acquire_recursive>:
 8012920:	4770      	bx	lr

08012922 <__retarget_lock_release_recursive>:
 8012922:	4770      	bx	lr

08012924 <__swhatbuf_r>:
 8012924:	b570      	push	{r4, r5, r6, lr}
 8012926:	460e      	mov	r6, r1
 8012928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801292c:	2900      	cmp	r1, #0
 801292e:	b096      	sub	sp, #88	; 0x58
 8012930:	4614      	mov	r4, r2
 8012932:	461d      	mov	r5, r3
 8012934:	da09      	bge.n	801294a <__swhatbuf_r+0x26>
 8012936:	89b3      	ldrh	r3, [r6, #12]
 8012938:	2200      	movs	r2, #0
 801293a:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801293e:	602a      	str	r2, [r5, #0]
 8012940:	d116      	bne.n	8012970 <__swhatbuf_r+0x4c>
 8012942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012946:	6023      	str	r3, [r4, #0]
 8012948:	e015      	b.n	8012976 <__swhatbuf_r+0x52>
 801294a:	466a      	mov	r2, sp
 801294c:	f7ff fe0a 	bl	8012564 <_fstat_r>
 8012950:	2800      	cmp	r0, #0
 8012952:	dbf0      	blt.n	8012936 <__swhatbuf_r+0x12>
 8012954:	9a01      	ldr	r2, [sp, #4]
 8012956:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801295a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801295e:	425a      	negs	r2, r3
 8012960:	415a      	adcs	r2, r3
 8012962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012966:	602a      	str	r2, [r5, #0]
 8012968:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801296c:	6023      	str	r3, [r4, #0]
 801296e:	e002      	b.n	8012976 <__swhatbuf_r+0x52>
 8012970:	2340      	movs	r3, #64	; 0x40
 8012972:	6023      	str	r3, [r4, #0]
 8012974:	4610      	mov	r0, r2
 8012976:	b016      	add	sp, #88	; 0x58
 8012978:	bd70      	pop	{r4, r5, r6, pc}
	...

0801297c <__smakebuf_r>:
 801297c:	898b      	ldrh	r3, [r1, #12]
 801297e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012980:	079d      	lsls	r5, r3, #30
 8012982:	4606      	mov	r6, r0
 8012984:	460c      	mov	r4, r1
 8012986:	d507      	bpl.n	8012998 <__smakebuf_r+0x1c>
 8012988:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801298c:	6023      	str	r3, [r4, #0]
 801298e:	6123      	str	r3, [r4, #16]
 8012990:	2301      	movs	r3, #1
 8012992:	6163      	str	r3, [r4, #20]
 8012994:	b002      	add	sp, #8
 8012996:	bd70      	pop	{r4, r5, r6, pc}
 8012998:	ab01      	add	r3, sp, #4
 801299a:	466a      	mov	r2, sp
 801299c:	f7ff ffc2 	bl	8012924 <__swhatbuf_r>
 80129a0:	9900      	ldr	r1, [sp, #0]
 80129a2:	4605      	mov	r5, r0
 80129a4:	4630      	mov	r0, r6
 80129a6:	f000 f839 	bl	8012a1c <_malloc_r>
 80129aa:	b948      	cbnz	r0, 80129c0 <__smakebuf_r+0x44>
 80129ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129b0:	059a      	lsls	r2, r3, #22
 80129b2:	d4ef      	bmi.n	8012994 <__smakebuf_r+0x18>
 80129b4:	f023 0303 	bic.w	r3, r3, #3
 80129b8:	f043 0302 	orr.w	r3, r3, #2
 80129bc:	81a3      	strh	r3, [r4, #12]
 80129be:	e7e3      	b.n	8012988 <__smakebuf_r+0xc>
 80129c0:	4b0d      	ldr	r3, [pc, #52]	; (80129f8 <__smakebuf_r+0x7c>)
 80129c2:	63f3      	str	r3, [r6, #60]	; 0x3c
 80129c4:	89a3      	ldrh	r3, [r4, #12]
 80129c6:	6020      	str	r0, [r4, #0]
 80129c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129cc:	81a3      	strh	r3, [r4, #12]
 80129ce:	9b00      	ldr	r3, [sp, #0]
 80129d0:	6163      	str	r3, [r4, #20]
 80129d2:	9b01      	ldr	r3, [sp, #4]
 80129d4:	6120      	str	r0, [r4, #16]
 80129d6:	b15b      	cbz	r3, 80129f0 <__smakebuf_r+0x74>
 80129d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129dc:	4630      	mov	r0, r6
 80129de:	f003 f957 	bl	8015c90 <_isatty_r>
 80129e2:	b128      	cbz	r0, 80129f0 <__smakebuf_r+0x74>
 80129e4:	89a3      	ldrh	r3, [r4, #12]
 80129e6:	f023 0303 	bic.w	r3, r3, #3
 80129ea:	f043 0301 	orr.w	r3, r3, #1
 80129ee:	81a3      	strh	r3, [r4, #12]
 80129f0:	89a3      	ldrh	r3, [r4, #12]
 80129f2:	431d      	orrs	r5, r3
 80129f4:	81a5      	strh	r5, [r4, #12]
 80129f6:	e7cd      	b.n	8012994 <__smakebuf_r+0x18>
 80129f8:	08015981 	.word	0x08015981

080129fc <malloc>:
 80129fc:	4b02      	ldr	r3, [pc, #8]	; (8012a08 <malloc+0xc>)
 80129fe:	4601      	mov	r1, r0
 8012a00:	6818      	ldr	r0, [r3, #0]
 8012a02:	f000 b80b 	b.w	8012a1c <_malloc_r>
 8012a06:	bf00      	nop
 8012a08:	20000014 	.word	0x20000014

08012a0c <free>:
 8012a0c:	4b02      	ldr	r3, [pc, #8]	; (8012a18 <free+0xc>)
 8012a0e:	4601      	mov	r1, r0
 8012a10:	6818      	ldr	r0, [r3, #0]
 8012a12:	f003 b863 	b.w	8015adc <_free_r>
 8012a16:	bf00      	nop
 8012a18:	20000014 	.word	0x20000014

08012a1c <_malloc_r>:
 8012a1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a20:	f101 050b 	add.w	r5, r1, #11
 8012a24:	2d16      	cmp	r5, #22
 8012a26:	4606      	mov	r6, r0
 8012a28:	d906      	bls.n	8012a38 <_malloc_r+0x1c>
 8012a2a:	f035 0507 	bics.w	r5, r5, #7
 8012a2e:	d504      	bpl.n	8012a3a <_malloc_r+0x1e>
 8012a30:	230c      	movs	r3, #12
 8012a32:	6033      	str	r3, [r6, #0]
 8012a34:	2400      	movs	r4, #0
 8012a36:	e1a8      	b.n	8012d8a <_malloc_r+0x36e>
 8012a38:	2510      	movs	r5, #16
 8012a3a:	428d      	cmp	r5, r1
 8012a3c:	d3f8      	bcc.n	8012a30 <_malloc_r+0x14>
 8012a3e:	4630      	mov	r0, r6
 8012a40:	f000 fa5e 	bl	8012f00 <__malloc_lock>
 8012a44:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8012a48:	4fc0      	ldr	r7, [pc, #768]	; (8012d4c <_malloc_r+0x330>)
 8012a4a:	d238      	bcs.n	8012abe <_malloc_r+0xa2>
 8012a4c:	f105 0208 	add.w	r2, r5, #8
 8012a50:	443a      	add	r2, r7
 8012a52:	f1a2 0108 	sub.w	r1, r2, #8
 8012a56:	6854      	ldr	r4, [r2, #4]
 8012a58:	428c      	cmp	r4, r1
 8012a5a:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8012a5e:	d102      	bne.n	8012a66 <_malloc_r+0x4a>
 8012a60:	68d4      	ldr	r4, [r2, #12]
 8012a62:	42a2      	cmp	r2, r4
 8012a64:	d010      	beq.n	8012a88 <_malloc_r+0x6c>
 8012a66:	6863      	ldr	r3, [r4, #4]
 8012a68:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8012a6c:	f023 0303 	bic.w	r3, r3, #3
 8012a70:	60ca      	str	r2, [r1, #12]
 8012a72:	4423      	add	r3, r4
 8012a74:	6091      	str	r1, [r2, #8]
 8012a76:	685a      	ldr	r2, [r3, #4]
 8012a78:	f042 0201 	orr.w	r2, r2, #1
 8012a7c:	605a      	str	r2, [r3, #4]
 8012a7e:	4630      	mov	r0, r6
 8012a80:	f000 fa44 	bl	8012f0c <__malloc_unlock>
 8012a84:	3408      	adds	r4, #8
 8012a86:	e180      	b.n	8012d8a <_malloc_r+0x36e>
 8012a88:	3302      	adds	r3, #2
 8012a8a:	4ab1      	ldr	r2, [pc, #708]	; (8012d50 <_malloc_r+0x334>)
 8012a8c:	693c      	ldr	r4, [r7, #16]
 8012a8e:	4294      	cmp	r4, r2
 8012a90:	4611      	mov	r1, r2
 8012a92:	d075      	beq.n	8012b80 <_malloc_r+0x164>
 8012a94:	6860      	ldr	r0, [r4, #4]
 8012a96:	f020 0c03 	bic.w	ip, r0, #3
 8012a9a:	ebac 0005 	sub.w	r0, ip, r5
 8012a9e:	280f      	cmp	r0, #15
 8012aa0:	dd48      	ble.n	8012b34 <_malloc_r+0x118>
 8012aa2:	1963      	adds	r3, r4, r5
 8012aa4:	f045 0501 	orr.w	r5, r5, #1
 8012aa8:	6065      	str	r5, [r4, #4]
 8012aaa:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8012aae:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8012ab2:	f040 0201 	orr.w	r2, r0, #1
 8012ab6:	605a      	str	r2, [r3, #4]
 8012ab8:	f844 000c 	str.w	r0, [r4, ip]
 8012abc:	e7df      	b.n	8012a7e <_malloc_r+0x62>
 8012abe:	0a6b      	lsrs	r3, r5, #9
 8012ac0:	d02a      	beq.n	8012b18 <_malloc_r+0xfc>
 8012ac2:	2b04      	cmp	r3, #4
 8012ac4:	d812      	bhi.n	8012aec <_malloc_r+0xd0>
 8012ac6:	09ab      	lsrs	r3, r5, #6
 8012ac8:	3338      	adds	r3, #56	; 0x38
 8012aca:	1c5a      	adds	r2, r3, #1
 8012acc:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8012ad0:	f1a2 0c08 	sub.w	ip, r2, #8
 8012ad4:	6854      	ldr	r4, [r2, #4]
 8012ad6:	4564      	cmp	r4, ip
 8012ad8:	d006      	beq.n	8012ae8 <_malloc_r+0xcc>
 8012ada:	6862      	ldr	r2, [r4, #4]
 8012adc:	f022 0203 	bic.w	r2, r2, #3
 8012ae0:	1b50      	subs	r0, r2, r5
 8012ae2:	280f      	cmp	r0, #15
 8012ae4:	dd1c      	ble.n	8012b20 <_malloc_r+0x104>
 8012ae6:	3b01      	subs	r3, #1
 8012ae8:	3301      	adds	r3, #1
 8012aea:	e7ce      	b.n	8012a8a <_malloc_r+0x6e>
 8012aec:	2b14      	cmp	r3, #20
 8012aee:	d801      	bhi.n	8012af4 <_malloc_r+0xd8>
 8012af0:	335b      	adds	r3, #91	; 0x5b
 8012af2:	e7ea      	b.n	8012aca <_malloc_r+0xae>
 8012af4:	2b54      	cmp	r3, #84	; 0x54
 8012af6:	d802      	bhi.n	8012afe <_malloc_r+0xe2>
 8012af8:	0b2b      	lsrs	r3, r5, #12
 8012afa:	336e      	adds	r3, #110	; 0x6e
 8012afc:	e7e5      	b.n	8012aca <_malloc_r+0xae>
 8012afe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8012b02:	d802      	bhi.n	8012b0a <_malloc_r+0xee>
 8012b04:	0beb      	lsrs	r3, r5, #15
 8012b06:	3377      	adds	r3, #119	; 0x77
 8012b08:	e7df      	b.n	8012aca <_malloc_r+0xae>
 8012b0a:	f240 5254 	movw	r2, #1364	; 0x554
 8012b0e:	4293      	cmp	r3, r2
 8012b10:	d804      	bhi.n	8012b1c <_malloc_r+0x100>
 8012b12:	0cab      	lsrs	r3, r5, #18
 8012b14:	337c      	adds	r3, #124	; 0x7c
 8012b16:	e7d8      	b.n	8012aca <_malloc_r+0xae>
 8012b18:	233f      	movs	r3, #63	; 0x3f
 8012b1a:	e7d6      	b.n	8012aca <_malloc_r+0xae>
 8012b1c:	237e      	movs	r3, #126	; 0x7e
 8012b1e:	e7d4      	b.n	8012aca <_malloc_r+0xae>
 8012b20:	2800      	cmp	r0, #0
 8012b22:	68e1      	ldr	r1, [r4, #12]
 8012b24:	db04      	blt.n	8012b30 <_malloc_r+0x114>
 8012b26:	68a3      	ldr	r3, [r4, #8]
 8012b28:	60d9      	str	r1, [r3, #12]
 8012b2a:	608b      	str	r3, [r1, #8]
 8012b2c:	18a3      	adds	r3, r4, r2
 8012b2e:	e7a2      	b.n	8012a76 <_malloc_r+0x5a>
 8012b30:	460c      	mov	r4, r1
 8012b32:	e7d0      	b.n	8012ad6 <_malloc_r+0xba>
 8012b34:	2800      	cmp	r0, #0
 8012b36:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8012b3a:	db07      	blt.n	8012b4c <_malloc_r+0x130>
 8012b3c:	44a4      	add	ip, r4
 8012b3e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8012b42:	f043 0301 	orr.w	r3, r3, #1
 8012b46:	f8cc 3004 	str.w	r3, [ip, #4]
 8012b4a:	e798      	b.n	8012a7e <_malloc_r+0x62>
 8012b4c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f080 8099 	bcs.w	8012c88 <_malloc_r+0x26c>
 8012b56:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8012b5a:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8012b5e:	2201      	movs	r2, #1
 8012b60:	f10c 0c01 	add.w	ip, ip, #1
 8012b64:	fa02 f20e 	lsl.w	r2, r2, lr
 8012b68:	4310      	orrs	r0, r2
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8012b70:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8012b74:	3a08      	subs	r2, #8
 8012b76:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8012b7a:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8012b7e:	60c4      	str	r4, [r0, #12]
 8012b80:	2001      	movs	r0, #1
 8012b82:	109a      	asrs	r2, r3, #2
 8012b84:	fa00 f202 	lsl.w	r2, r0, r2
 8012b88:	6878      	ldr	r0, [r7, #4]
 8012b8a:	4290      	cmp	r0, r2
 8012b8c:	d326      	bcc.n	8012bdc <_malloc_r+0x1c0>
 8012b8e:	4210      	tst	r0, r2
 8012b90:	d106      	bne.n	8012ba0 <_malloc_r+0x184>
 8012b92:	f023 0303 	bic.w	r3, r3, #3
 8012b96:	0052      	lsls	r2, r2, #1
 8012b98:	4210      	tst	r0, r2
 8012b9a:	f103 0304 	add.w	r3, r3, #4
 8012b9e:	d0fa      	beq.n	8012b96 <_malloc_r+0x17a>
 8012ba0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8012ba4:	46e1      	mov	r9, ip
 8012ba6:	4698      	mov	r8, r3
 8012ba8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8012bac:	454c      	cmp	r4, r9
 8012bae:	f040 80af 	bne.w	8012d10 <_malloc_r+0x2f4>
 8012bb2:	f108 0801 	add.w	r8, r8, #1
 8012bb6:	f018 0f03 	tst.w	r8, #3
 8012bba:	f109 0908 	add.w	r9, r9, #8
 8012bbe:	d1f3      	bne.n	8012ba8 <_malloc_r+0x18c>
 8012bc0:	0798      	lsls	r0, r3, #30
 8012bc2:	f040 80e8 	bne.w	8012d96 <_malloc_r+0x37a>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	ea23 0302 	bic.w	r3, r3, r2
 8012bcc:	607b      	str	r3, [r7, #4]
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	0052      	lsls	r2, r2, #1
 8012bd2:	4290      	cmp	r0, r2
 8012bd4:	d302      	bcc.n	8012bdc <_malloc_r+0x1c0>
 8012bd6:	2a00      	cmp	r2, #0
 8012bd8:	f040 80ec 	bne.w	8012db4 <_malloc_r+0x398>
 8012bdc:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012be0:	f8da 4004 	ldr.w	r4, [sl, #4]
 8012be4:	f024 0203 	bic.w	r2, r4, #3
 8012be8:	42aa      	cmp	r2, r5
 8012bea:	d303      	bcc.n	8012bf4 <_malloc_r+0x1d8>
 8012bec:	1b53      	subs	r3, r2, r5
 8012bee:	2b0f      	cmp	r3, #15
 8012bf0:	f300 8140 	bgt.w	8012e74 <_malloc_r+0x458>
 8012bf4:	4b57      	ldr	r3, [pc, #348]	; (8012d54 <_malloc_r+0x338>)
 8012bf6:	9200      	str	r2, [sp, #0]
 8012bf8:	2008      	movs	r0, #8
 8012bfa:	681c      	ldr	r4, [r3, #0]
 8012bfc:	f001 fe92 	bl	8014924 <sysconf>
 8012c00:	4b55      	ldr	r3, [pc, #340]	; (8012d58 <_malloc_r+0x33c>)
 8012c02:	9a00      	ldr	r2, [sp, #0]
 8012c04:	6819      	ldr	r1, [r3, #0]
 8012c06:	3410      	adds	r4, #16
 8012c08:	3101      	adds	r1, #1
 8012c0a:	442c      	add	r4, r5
 8012c0c:	bf1f      	itttt	ne
 8012c0e:	f104 34ff 	addne.w	r4, r4, #4294967295
 8012c12:	1824      	addne	r4, r4, r0
 8012c14:	4241      	negne	r1, r0
 8012c16:	400c      	andne	r4, r1
 8012c18:	4680      	mov	r8, r0
 8012c1a:	4621      	mov	r1, r4
 8012c1c:	4630      	mov	r0, r6
 8012c1e:	e9cd 2300 	strd	r2, r3, [sp]
 8012c22:	f000 fb5d 	bl	80132e0 <_sbrk_r>
 8012c26:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012c2a:	4683      	mov	fp, r0
 8012c2c:	f000 80fb 	beq.w	8012e26 <_malloc_r+0x40a>
 8012c30:	9a00      	ldr	r2, [sp, #0]
 8012c32:	9b01      	ldr	r3, [sp, #4]
 8012c34:	eb0a 0102 	add.w	r1, sl, r2
 8012c38:	4281      	cmp	r1, r0
 8012c3a:	d902      	bls.n	8012c42 <_malloc_r+0x226>
 8012c3c:	45ba      	cmp	sl, r7
 8012c3e:	f040 80f2 	bne.w	8012e26 <_malloc_r+0x40a>
 8012c42:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8012d64 <_malloc_r+0x348>
 8012c46:	f8d9 0000 	ldr.w	r0, [r9]
 8012c4a:	4559      	cmp	r1, fp
 8012c4c:	eb00 0e04 	add.w	lr, r0, r4
 8012c50:	f8c9 e000 	str.w	lr, [r9]
 8012c54:	f108 3cff 	add.w	ip, r8, #4294967295
 8012c58:	f040 80ae 	bne.w	8012db8 <_malloc_r+0x39c>
 8012c5c:	ea11 0f0c 	tst.w	r1, ip
 8012c60:	f040 80aa 	bne.w	8012db8 <_malloc_r+0x39c>
 8012c64:	68bb      	ldr	r3, [r7, #8]
 8012c66:	4414      	add	r4, r2
 8012c68:	f044 0401 	orr.w	r4, r4, #1
 8012c6c:	605c      	str	r4, [r3, #4]
 8012c6e:	4a3b      	ldr	r2, [pc, #236]	; (8012d5c <_malloc_r+0x340>)
 8012c70:	f8d9 3000 	ldr.w	r3, [r9]
 8012c74:	6811      	ldr	r1, [r2, #0]
 8012c76:	428b      	cmp	r3, r1
 8012c78:	bf88      	it	hi
 8012c7a:	6013      	strhi	r3, [r2, #0]
 8012c7c:	4a38      	ldr	r2, [pc, #224]	; (8012d60 <_malloc_r+0x344>)
 8012c7e:	6811      	ldr	r1, [r2, #0]
 8012c80:	428b      	cmp	r3, r1
 8012c82:	bf88      	it	hi
 8012c84:	6013      	strhi	r3, [r2, #0]
 8012c86:	e0ce      	b.n	8012e26 <_malloc_r+0x40a>
 8012c88:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8012c8c:	2a04      	cmp	r2, #4
 8012c8e:	d818      	bhi.n	8012cc2 <_malloc_r+0x2a6>
 8012c90:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8012c94:	3238      	adds	r2, #56	; 0x38
 8012c96:	f102 0e01 	add.w	lr, r2, #1
 8012c9a:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8012c9e:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8012ca2:	45f0      	cmp	r8, lr
 8012ca4:	d12b      	bne.n	8012cfe <_malloc_r+0x2e2>
 8012ca6:	1092      	asrs	r2, r2, #2
 8012ca8:	f04f 0c01 	mov.w	ip, #1
 8012cac:	fa0c f202 	lsl.w	r2, ip, r2
 8012cb0:	4310      	orrs	r0, r2
 8012cb2:	6078      	str	r0, [r7, #4]
 8012cb4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8012cb8:	f8c8 4008 	str.w	r4, [r8, #8]
 8012cbc:	f8ce 400c 	str.w	r4, [lr, #12]
 8012cc0:	e75e      	b.n	8012b80 <_malloc_r+0x164>
 8012cc2:	2a14      	cmp	r2, #20
 8012cc4:	d801      	bhi.n	8012cca <_malloc_r+0x2ae>
 8012cc6:	325b      	adds	r2, #91	; 0x5b
 8012cc8:	e7e5      	b.n	8012c96 <_malloc_r+0x27a>
 8012cca:	2a54      	cmp	r2, #84	; 0x54
 8012ccc:	d803      	bhi.n	8012cd6 <_malloc_r+0x2ba>
 8012cce:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8012cd2:	326e      	adds	r2, #110	; 0x6e
 8012cd4:	e7df      	b.n	8012c96 <_malloc_r+0x27a>
 8012cd6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8012cda:	d803      	bhi.n	8012ce4 <_malloc_r+0x2c8>
 8012cdc:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8012ce0:	3277      	adds	r2, #119	; 0x77
 8012ce2:	e7d8      	b.n	8012c96 <_malloc_r+0x27a>
 8012ce4:	f240 5e54 	movw	lr, #1364	; 0x554
 8012ce8:	4572      	cmp	r2, lr
 8012cea:	bf9a      	itte	ls
 8012cec:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8012cf0:	327c      	addls	r2, #124	; 0x7c
 8012cf2:	227e      	movhi	r2, #126	; 0x7e
 8012cf4:	e7cf      	b.n	8012c96 <_malloc_r+0x27a>
 8012cf6:	f8de e008 	ldr.w	lr, [lr, #8]
 8012cfa:	45f0      	cmp	r8, lr
 8012cfc:	d005      	beq.n	8012d0a <_malloc_r+0x2ee>
 8012cfe:	f8de 2004 	ldr.w	r2, [lr, #4]
 8012d02:	f022 0203 	bic.w	r2, r2, #3
 8012d06:	4562      	cmp	r2, ip
 8012d08:	d8f5      	bhi.n	8012cf6 <_malloc_r+0x2da>
 8012d0a:	f8de 800c 	ldr.w	r8, [lr, #12]
 8012d0e:	e7d1      	b.n	8012cb4 <_malloc_r+0x298>
 8012d10:	6860      	ldr	r0, [r4, #4]
 8012d12:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8012d16:	f020 0003 	bic.w	r0, r0, #3
 8012d1a:	eba0 0a05 	sub.w	sl, r0, r5
 8012d1e:	f1ba 0f0f 	cmp.w	sl, #15
 8012d22:	dd21      	ble.n	8012d68 <_malloc_r+0x34c>
 8012d24:	68a2      	ldr	r2, [r4, #8]
 8012d26:	1963      	adds	r3, r4, r5
 8012d28:	f045 0501 	orr.w	r5, r5, #1
 8012d2c:	6065      	str	r5, [r4, #4]
 8012d2e:	f8c2 e00c 	str.w	lr, [r2, #12]
 8012d32:	f8ce 2008 	str.w	r2, [lr, #8]
 8012d36:	f04a 0201 	orr.w	r2, sl, #1
 8012d3a:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8012d3e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8012d42:	605a      	str	r2, [r3, #4]
 8012d44:	f844 a000 	str.w	sl, [r4, r0]
 8012d48:	e699      	b.n	8012a7e <_malloc_r+0x62>
 8012d4a:	bf00      	nop
 8012d4c:	20000440 	.word	0x20000440
 8012d50:	20000448 	.word	0x20000448
 8012d54:	20000f48 	.word	0x20000f48
 8012d58:	20000848 	.word	0x20000848
 8012d5c:	20000f40 	.word	0x20000f40
 8012d60:	20000f44 	.word	0x20000f44
 8012d64:	20000f18 	.word	0x20000f18
 8012d68:	f1ba 0f00 	cmp.w	sl, #0
 8012d6c:	db11      	blt.n	8012d92 <_malloc_r+0x376>
 8012d6e:	4420      	add	r0, r4
 8012d70:	6843      	ldr	r3, [r0, #4]
 8012d72:	f043 0301 	orr.w	r3, r3, #1
 8012d76:	6043      	str	r3, [r0, #4]
 8012d78:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8012d7c:	4630      	mov	r0, r6
 8012d7e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8012d82:	f8ce 3008 	str.w	r3, [lr, #8]
 8012d86:	f000 f8c1 	bl	8012f0c <__malloc_unlock>
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	b003      	add	sp, #12
 8012d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d92:	4674      	mov	r4, lr
 8012d94:	e70a      	b.n	8012bac <_malloc_r+0x190>
 8012d96:	f1ac 0008 	sub.w	r0, ip, #8
 8012d9a:	f8dc c000 	ldr.w	ip, [ip]
 8012d9e:	4584      	cmp	ip, r0
 8012da0:	f103 33ff 	add.w	r3, r3, #4294967295
 8012da4:	f43f af0c 	beq.w	8012bc0 <_malloc_r+0x1a4>
 8012da8:	e711      	b.n	8012bce <_malloc_r+0x1b2>
 8012daa:	3304      	adds	r3, #4
 8012dac:	0052      	lsls	r2, r2, #1
 8012dae:	4210      	tst	r0, r2
 8012db0:	d0fb      	beq.n	8012daa <_malloc_r+0x38e>
 8012db2:	e6f5      	b.n	8012ba0 <_malloc_r+0x184>
 8012db4:	4643      	mov	r3, r8
 8012db6:	e7fa      	b.n	8012dae <_malloc_r+0x392>
 8012db8:	6818      	ldr	r0, [r3, #0]
 8012dba:	9200      	str	r2, [sp, #0]
 8012dbc:	3001      	adds	r0, #1
 8012dbe:	bf1b      	ittet	ne
 8012dc0:	ebab 0101 	subne.w	r1, fp, r1
 8012dc4:	4471      	addne	r1, lr
 8012dc6:	f8c3 b000 	streq.w	fp, [r3]
 8012dca:	f8c9 1000 	strne.w	r1, [r9]
 8012dce:	f01b 0307 	ands.w	r3, fp, #7
 8012dd2:	bf1c      	itt	ne
 8012dd4:	f1c3 0308 	rsbne	r3, r3, #8
 8012dd8:	449b      	addne	fp, r3
 8012dda:	445c      	add	r4, fp
 8012ddc:	4498      	add	r8, r3
 8012dde:	ea04 030c 	and.w	r3, r4, ip
 8012de2:	eba8 0803 	sub.w	r8, r8, r3
 8012de6:	4641      	mov	r1, r8
 8012de8:	4630      	mov	r0, r6
 8012dea:	f000 fa79 	bl	80132e0 <_sbrk_r>
 8012dee:	1c43      	adds	r3, r0, #1
 8012df0:	bf04      	itt	eq
 8012df2:	4658      	moveq	r0, fp
 8012df4:	f04f 0800 	moveq.w	r8, #0
 8012df8:	f8d9 3000 	ldr.w	r3, [r9]
 8012dfc:	f8c7 b008 	str.w	fp, [r7, #8]
 8012e00:	eba0 000b 	sub.w	r0, r0, fp
 8012e04:	4440      	add	r0, r8
 8012e06:	4443      	add	r3, r8
 8012e08:	f040 0001 	orr.w	r0, r0, #1
 8012e0c:	45ba      	cmp	sl, r7
 8012e0e:	9a00      	ldr	r2, [sp, #0]
 8012e10:	f8c9 3000 	str.w	r3, [r9]
 8012e14:	f8cb 0004 	str.w	r0, [fp, #4]
 8012e18:	f43f af29 	beq.w	8012c6e <_malloc_r+0x252>
 8012e1c:	2a0f      	cmp	r2, #15
 8012e1e:	d810      	bhi.n	8012e42 <_malloc_r+0x426>
 8012e20:	2301      	movs	r3, #1
 8012e22:	f8cb 3004 	str.w	r3, [fp, #4]
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	685a      	ldr	r2, [r3, #4]
 8012e2a:	f022 0203 	bic.w	r2, r2, #3
 8012e2e:	42aa      	cmp	r2, r5
 8012e30:	eba2 0305 	sub.w	r3, r2, r5
 8012e34:	d301      	bcc.n	8012e3a <_malloc_r+0x41e>
 8012e36:	2b0f      	cmp	r3, #15
 8012e38:	dc1c      	bgt.n	8012e74 <_malloc_r+0x458>
 8012e3a:	4630      	mov	r0, r6
 8012e3c:	f000 f866 	bl	8012f0c <__malloc_unlock>
 8012e40:	e5f8      	b.n	8012a34 <_malloc_r+0x18>
 8012e42:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012e46:	f1a2 040c 	sub.w	r4, r2, #12
 8012e4a:	f024 0407 	bic.w	r4, r4, #7
 8012e4e:	f003 0301 	and.w	r3, r3, #1
 8012e52:	4323      	orrs	r3, r4
 8012e54:	f8ca 3004 	str.w	r3, [sl, #4]
 8012e58:	2205      	movs	r2, #5
 8012e5a:	eb0a 0304 	add.w	r3, sl, r4
 8012e5e:	2c0f      	cmp	r4, #15
 8012e60:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8012e64:	f67f af03 	bls.w	8012c6e <_malloc_r+0x252>
 8012e68:	f10a 0108 	add.w	r1, sl, #8
 8012e6c:	4630      	mov	r0, r6
 8012e6e:	f002 fe35 	bl	8015adc <_free_r>
 8012e72:	e6fc      	b.n	8012c6e <_malloc_r+0x252>
 8012e74:	68bc      	ldr	r4, [r7, #8]
 8012e76:	f045 0201 	orr.w	r2, r5, #1
 8012e7a:	4425      	add	r5, r4
 8012e7c:	f043 0301 	orr.w	r3, r3, #1
 8012e80:	6062      	str	r2, [r4, #4]
 8012e82:	60bd      	str	r5, [r7, #8]
 8012e84:	606b      	str	r3, [r5, #4]
 8012e86:	e5fa      	b.n	8012a7e <_malloc_r+0x62>

08012e88 <memcmp>:
 8012e88:	b530      	push	{r4, r5, lr}
 8012e8a:	2400      	movs	r4, #0
 8012e8c:	42a2      	cmp	r2, r4
 8012e8e:	d101      	bne.n	8012e94 <memcmp+0xc>
 8012e90:	2000      	movs	r0, #0
 8012e92:	e007      	b.n	8012ea4 <memcmp+0x1c>
 8012e94:	5d03      	ldrb	r3, [r0, r4]
 8012e96:	3401      	adds	r4, #1
 8012e98:	190d      	adds	r5, r1, r4
 8012e9a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8012e9e:	42ab      	cmp	r3, r5
 8012ea0:	d0f4      	beq.n	8012e8c <memcmp+0x4>
 8012ea2:	1b58      	subs	r0, r3, r5
 8012ea4:	bd30      	pop	{r4, r5, pc}

08012ea6 <memcpy>:
 8012ea6:	b510      	push	{r4, lr}
 8012ea8:	1e43      	subs	r3, r0, #1
 8012eaa:	440a      	add	r2, r1
 8012eac:	4291      	cmp	r1, r2
 8012eae:	d100      	bne.n	8012eb2 <memcpy+0xc>
 8012eb0:	bd10      	pop	{r4, pc}
 8012eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012eba:	e7f7      	b.n	8012eac <memcpy+0x6>

08012ebc <memmove>:
 8012ebc:	4288      	cmp	r0, r1
 8012ebe:	b510      	push	{r4, lr}
 8012ec0:	eb01 0302 	add.w	r3, r1, r2
 8012ec4:	d807      	bhi.n	8012ed6 <memmove+0x1a>
 8012ec6:	1e42      	subs	r2, r0, #1
 8012ec8:	4299      	cmp	r1, r3
 8012eca:	d00a      	beq.n	8012ee2 <memmove+0x26>
 8012ecc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ed0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012ed4:	e7f8      	b.n	8012ec8 <memmove+0xc>
 8012ed6:	4283      	cmp	r3, r0
 8012ed8:	d9f5      	bls.n	8012ec6 <memmove+0xa>
 8012eda:	1881      	adds	r1, r0, r2
 8012edc:	1ad2      	subs	r2, r2, r3
 8012ede:	42d3      	cmn	r3, r2
 8012ee0:	d100      	bne.n	8012ee4 <memmove+0x28>
 8012ee2:	bd10      	pop	{r4, pc}
 8012ee4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ee8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012eec:	e7f7      	b.n	8012ede <memmove+0x22>

08012eee <memset>:
 8012eee:	4402      	add	r2, r0
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	4293      	cmp	r3, r2
 8012ef4:	d100      	bne.n	8012ef8 <memset+0xa>
 8012ef6:	4770      	bx	lr
 8012ef8:	f803 1b01 	strb.w	r1, [r3], #1
 8012efc:	e7f9      	b.n	8012ef2 <memset+0x4>
	...

08012f00 <__malloc_lock>:
 8012f00:	4801      	ldr	r0, [pc, #4]	; (8012f08 <__malloc_lock+0x8>)
 8012f02:	f7ff bd0d 	b.w	8012920 <__retarget_lock_acquire_recursive>
 8012f06:	bf00      	nop
 8012f08:	20001054 	.word	0x20001054

08012f0c <__malloc_unlock>:
 8012f0c:	4801      	ldr	r0, [pc, #4]	; (8012f14 <__malloc_unlock+0x8>)
 8012f0e:	f7ff bd08 	b.w	8012922 <__retarget_lock_release_recursive>
 8012f12:	bf00      	nop
 8012f14:	20001054 	.word	0x20001054

08012f18 <_putc_r>:
 8012f18:	b570      	push	{r4, r5, r6, lr}
 8012f1a:	460d      	mov	r5, r1
 8012f1c:	4614      	mov	r4, r2
 8012f1e:	4606      	mov	r6, r0
 8012f20:	b118      	cbz	r0, 8012f2a <_putc_r+0x12>
 8012f22:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8012f24:	b90b      	cbnz	r3, 8012f2a <_putc_r+0x12>
 8012f26:	f002 fd49 	bl	80159bc <__sinit>
 8012f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f2c:	07d8      	lsls	r0, r3, #31
 8012f2e:	d405      	bmi.n	8012f3c <_putc_r+0x24>
 8012f30:	89a3      	ldrh	r3, [r4, #12]
 8012f32:	0599      	lsls	r1, r3, #22
 8012f34:	d402      	bmi.n	8012f3c <_putc_r+0x24>
 8012f36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f38:	f7ff fcf2 	bl	8012920 <__retarget_lock_acquire_recursive>
 8012f3c:	68a3      	ldr	r3, [r4, #8]
 8012f3e:	3b01      	subs	r3, #1
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	60a3      	str	r3, [r4, #8]
 8012f44:	da05      	bge.n	8012f52 <_putc_r+0x3a>
 8012f46:	69a2      	ldr	r2, [r4, #24]
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	db12      	blt.n	8012f72 <_putc_r+0x5a>
 8012f4c:	b2eb      	uxtb	r3, r5
 8012f4e:	2b0a      	cmp	r3, #10
 8012f50:	d00f      	beq.n	8012f72 <_putc_r+0x5a>
 8012f52:	6823      	ldr	r3, [r4, #0]
 8012f54:	1c5a      	adds	r2, r3, #1
 8012f56:	6022      	str	r2, [r4, #0]
 8012f58:	701d      	strb	r5, [r3, #0]
 8012f5a:	b2ed      	uxtb	r5, r5
 8012f5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f5e:	07da      	lsls	r2, r3, #31
 8012f60:	d405      	bmi.n	8012f6e <_putc_r+0x56>
 8012f62:	89a3      	ldrh	r3, [r4, #12]
 8012f64:	059b      	lsls	r3, r3, #22
 8012f66:	d402      	bmi.n	8012f6e <_putc_r+0x56>
 8012f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f6a:	f7ff fcda 	bl	8012922 <__retarget_lock_release_recursive>
 8012f6e:	4628      	mov	r0, r5
 8012f70:	bd70      	pop	{r4, r5, r6, pc}
 8012f72:	4629      	mov	r1, r5
 8012f74:	4622      	mov	r2, r4
 8012f76:	4630      	mov	r0, r6
 8012f78:	f001 fd1c 	bl	80149b4 <__swbuf_r>
 8012f7c:	4605      	mov	r5, r0
 8012f7e:	e7ed      	b.n	8012f5c <_putc_r+0x44>

08012f80 <realloc>:
 8012f80:	4b02      	ldr	r3, [pc, #8]	; (8012f8c <realloc+0xc>)
 8012f82:	460a      	mov	r2, r1
 8012f84:	4601      	mov	r1, r0
 8012f86:	6818      	ldr	r0, [r3, #0]
 8012f88:	f000 b802 	b.w	8012f90 <_realloc_r>
 8012f8c:	20000014 	.word	0x20000014

08012f90 <_realloc_r>:
 8012f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f94:	4682      	mov	sl, r0
 8012f96:	460c      	mov	r4, r1
 8012f98:	b929      	cbnz	r1, 8012fa6 <_realloc_r+0x16>
 8012f9a:	4611      	mov	r1, r2
 8012f9c:	b003      	add	sp, #12
 8012f9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa2:	f7ff bd3b 	b.w	8012a1c <_malloc_r>
 8012fa6:	9201      	str	r2, [sp, #4]
 8012fa8:	f7ff ffaa 	bl	8012f00 <__malloc_lock>
 8012fac:	9a01      	ldr	r2, [sp, #4]
 8012fae:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8012fb2:	f102 080b 	add.w	r8, r2, #11
 8012fb6:	f1b8 0f16 	cmp.w	r8, #22
 8012fba:	f1a4 0908 	sub.w	r9, r4, #8
 8012fbe:	f025 0603 	bic.w	r6, r5, #3
 8012fc2:	d90b      	bls.n	8012fdc <_realloc_r+0x4c>
 8012fc4:	f038 0807 	bics.w	r8, r8, #7
 8012fc8:	d50a      	bpl.n	8012fe0 <_realloc_r+0x50>
 8012fca:	230c      	movs	r3, #12
 8012fcc:	f8ca 3000 	str.w	r3, [sl]
 8012fd0:	f04f 0b00 	mov.w	fp, #0
 8012fd4:	4658      	mov	r0, fp
 8012fd6:	b003      	add	sp, #12
 8012fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fdc:	f04f 0810 	mov.w	r8, #16
 8012fe0:	4590      	cmp	r8, r2
 8012fe2:	d3f2      	bcc.n	8012fca <_realloc_r+0x3a>
 8012fe4:	45b0      	cmp	r8, r6
 8012fe6:	f340 8170 	ble.w	80132ca <_realloc_r+0x33a>
 8012fea:	49a9      	ldr	r1, [pc, #676]	; (8013290 <_realloc_r+0x300>)
 8012fec:	9101      	str	r1, [sp, #4]
 8012fee:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8012ff2:	eb09 0306 	add.w	r3, r9, r6
 8012ff6:	459c      	cmp	ip, r3
 8012ff8:	6858      	ldr	r0, [r3, #4]
 8012ffa:	d005      	beq.n	8013008 <_realloc_r+0x78>
 8012ffc:	f020 0101 	bic.w	r1, r0, #1
 8013000:	4419      	add	r1, r3
 8013002:	6849      	ldr	r1, [r1, #4]
 8013004:	07cf      	lsls	r7, r1, #31
 8013006:	d447      	bmi.n	8013098 <_realloc_r+0x108>
 8013008:	f020 0003 	bic.w	r0, r0, #3
 801300c:	459c      	cmp	ip, r3
 801300e:	eb06 0700 	add.w	r7, r6, r0
 8013012:	d119      	bne.n	8013048 <_realloc_r+0xb8>
 8013014:	f108 0110 	add.w	r1, r8, #16
 8013018:	42b9      	cmp	r1, r7
 801301a:	dc3f      	bgt.n	801309c <_realloc_r+0x10c>
 801301c:	eb09 0308 	add.w	r3, r9, r8
 8013020:	9a01      	ldr	r2, [sp, #4]
 8013022:	eba7 0708 	sub.w	r7, r7, r8
 8013026:	f047 0701 	orr.w	r7, r7, #1
 801302a:	6093      	str	r3, [r2, #8]
 801302c:	605f      	str	r7, [r3, #4]
 801302e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013032:	f003 0301 	and.w	r3, r3, #1
 8013036:	ea43 0308 	orr.w	r3, r3, r8
 801303a:	f844 3c04 	str.w	r3, [r4, #-4]
 801303e:	4650      	mov	r0, sl
 8013040:	f7ff ff64 	bl	8012f0c <__malloc_unlock>
 8013044:	46a3      	mov	fp, r4
 8013046:	e7c5      	b.n	8012fd4 <_realloc_r+0x44>
 8013048:	45b8      	cmp	r8, r7
 801304a:	dc27      	bgt.n	801309c <_realloc_r+0x10c>
 801304c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8013050:	60da      	str	r2, [r3, #12]
 8013052:	6093      	str	r3, [r2, #8]
 8013054:	eba7 0008 	sub.w	r0, r7, r8
 8013058:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801305c:	280f      	cmp	r0, #15
 801305e:	f002 0201 	and.w	r2, r2, #1
 8013062:	eb09 0307 	add.w	r3, r9, r7
 8013066:	f240 8132 	bls.w	80132ce <_realloc_r+0x33e>
 801306a:	eb09 0108 	add.w	r1, r9, r8
 801306e:	ea48 0202 	orr.w	r2, r8, r2
 8013072:	f040 0001 	orr.w	r0, r0, #1
 8013076:	f8c9 2004 	str.w	r2, [r9, #4]
 801307a:	6048      	str	r0, [r1, #4]
 801307c:	685a      	ldr	r2, [r3, #4]
 801307e:	f042 0201 	orr.w	r2, r2, #1
 8013082:	605a      	str	r2, [r3, #4]
 8013084:	3108      	adds	r1, #8
 8013086:	4650      	mov	r0, sl
 8013088:	f002 fd28 	bl	8015adc <_free_r>
 801308c:	4650      	mov	r0, sl
 801308e:	f7ff ff3d 	bl	8012f0c <__malloc_unlock>
 8013092:	f109 0b08 	add.w	fp, r9, #8
 8013096:	e79d      	b.n	8012fd4 <_realloc_r+0x44>
 8013098:	2000      	movs	r0, #0
 801309a:	4603      	mov	r3, r0
 801309c:	07e9      	lsls	r1, r5, #31
 801309e:	f100 80c6 	bmi.w	801322e <_realloc_r+0x29e>
 80130a2:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80130a6:	eba9 0505 	sub.w	r5, r9, r5
 80130aa:	6869      	ldr	r1, [r5, #4]
 80130ac:	f021 0103 	bic.w	r1, r1, #3
 80130b0:	eb01 0b06 	add.w	fp, r1, r6
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	f000 8086 	beq.w	80131c6 <_realloc_r+0x236>
 80130ba:	459c      	cmp	ip, r3
 80130bc:	eb00 070b 	add.w	r7, r0, fp
 80130c0:	d149      	bne.n	8013156 <_realloc_r+0x1c6>
 80130c2:	f108 0310 	add.w	r3, r8, #16
 80130c6:	42bb      	cmp	r3, r7
 80130c8:	dc7d      	bgt.n	80131c6 <_realloc_r+0x236>
 80130ca:	46ab      	mov	fp, r5
 80130cc:	68eb      	ldr	r3, [r5, #12]
 80130ce:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80130d2:	60d3      	str	r3, [r2, #12]
 80130d4:	609a      	str	r2, [r3, #8]
 80130d6:	1f32      	subs	r2, r6, #4
 80130d8:	2a24      	cmp	r2, #36	; 0x24
 80130da:	d837      	bhi.n	801314c <_realloc_r+0x1bc>
 80130dc:	2a13      	cmp	r2, #19
 80130de:	d933      	bls.n	8013148 <_realloc_r+0x1b8>
 80130e0:	6823      	ldr	r3, [r4, #0]
 80130e2:	60ab      	str	r3, [r5, #8]
 80130e4:	6863      	ldr	r3, [r4, #4]
 80130e6:	60eb      	str	r3, [r5, #12]
 80130e8:	2a1b      	cmp	r2, #27
 80130ea:	d81b      	bhi.n	8013124 <_realloc_r+0x194>
 80130ec:	3408      	adds	r4, #8
 80130ee:	f105 0310 	add.w	r3, r5, #16
 80130f2:	6822      	ldr	r2, [r4, #0]
 80130f4:	601a      	str	r2, [r3, #0]
 80130f6:	6862      	ldr	r2, [r4, #4]
 80130f8:	605a      	str	r2, [r3, #4]
 80130fa:	68a2      	ldr	r2, [r4, #8]
 80130fc:	609a      	str	r2, [r3, #8]
 80130fe:	eb05 0308 	add.w	r3, r5, r8
 8013102:	9a01      	ldr	r2, [sp, #4]
 8013104:	eba7 0708 	sub.w	r7, r7, r8
 8013108:	f047 0701 	orr.w	r7, r7, #1
 801310c:	6093      	str	r3, [r2, #8]
 801310e:	605f      	str	r7, [r3, #4]
 8013110:	686b      	ldr	r3, [r5, #4]
 8013112:	f003 0301 	and.w	r3, r3, #1
 8013116:	ea43 0308 	orr.w	r3, r3, r8
 801311a:	606b      	str	r3, [r5, #4]
 801311c:	4650      	mov	r0, sl
 801311e:	f7ff fef5 	bl	8012f0c <__malloc_unlock>
 8013122:	e757      	b.n	8012fd4 <_realloc_r+0x44>
 8013124:	68a3      	ldr	r3, [r4, #8]
 8013126:	612b      	str	r3, [r5, #16]
 8013128:	68e3      	ldr	r3, [r4, #12]
 801312a:	616b      	str	r3, [r5, #20]
 801312c:	2a24      	cmp	r2, #36	; 0x24
 801312e:	bf01      	itttt	eq
 8013130:	6923      	ldreq	r3, [r4, #16]
 8013132:	61ab      	streq	r3, [r5, #24]
 8013134:	6962      	ldreq	r2, [r4, #20]
 8013136:	61ea      	streq	r2, [r5, #28]
 8013138:	bf19      	ittee	ne
 801313a:	3410      	addne	r4, #16
 801313c:	f105 0318 	addne.w	r3, r5, #24
 8013140:	f105 0320 	addeq.w	r3, r5, #32
 8013144:	3418      	addeq	r4, #24
 8013146:	e7d4      	b.n	80130f2 <_realloc_r+0x162>
 8013148:	465b      	mov	r3, fp
 801314a:	e7d2      	b.n	80130f2 <_realloc_r+0x162>
 801314c:	4621      	mov	r1, r4
 801314e:	4658      	mov	r0, fp
 8013150:	f7ff feb4 	bl	8012ebc <memmove>
 8013154:	e7d3      	b.n	80130fe <_realloc_r+0x16e>
 8013156:	45b8      	cmp	r8, r7
 8013158:	dc35      	bgt.n	80131c6 <_realloc_r+0x236>
 801315a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801315e:	4628      	mov	r0, r5
 8013160:	60da      	str	r2, [r3, #12]
 8013162:	6093      	str	r3, [r2, #8]
 8013164:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8013168:	68eb      	ldr	r3, [r5, #12]
 801316a:	60d3      	str	r3, [r2, #12]
 801316c:	609a      	str	r2, [r3, #8]
 801316e:	1f32      	subs	r2, r6, #4
 8013170:	2a24      	cmp	r2, #36	; 0x24
 8013172:	d824      	bhi.n	80131be <_realloc_r+0x22e>
 8013174:	2a13      	cmp	r2, #19
 8013176:	d908      	bls.n	801318a <_realloc_r+0x1fa>
 8013178:	6823      	ldr	r3, [r4, #0]
 801317a:	60ab      	str	r3, [r5, #8]
 801317c:	6863      	ldr	r3, [r4, #4]
 801317e:	60eb      	str	r3, [r5, #12]
 8013180:	2a1b      	cmp	r2, #27
 8013182:	d80a      	bhi.n	801319a <_realloc_r+0x20a>
 8013184:	3408      	adds	r4, #8
 8013186:	f105 0010 	add.w	r0, r5, #16
 801318a:	6823      	ldr	r3, [r4, #0]
 801318c:	6003      	str	r3, [r0, #0]
 801318e:	6863      	ldr	r3, [r4, #4]
 8013190:	6043      	str	r3, [r0, #4]
 8013192:	68a3      	ldr	r3, [r4, #8]
 8013194:	6083      	str	r3, [r0, #8]
 8013196:	46a9      	mov	r9, r5
 8013198:	e75c      	b.n	8013054 <_realloc_r+0xc4>
 801319a:	68a3      	ldr	r3, [r4, #8]
 801319c:	612b      	str	r3, [r5, #16]
 801319e:	68e3      	ldr	r3, [r4, #12]
 80131a0:	616b      	str	r3, [r5, #20]
 80131a2:	2a24      	cmp	r2, #36	; 0x24
 80131a4:	bf01      	itttt	eq
 80131a6:	6923      	ldreq	r3, [r4, #16]
 80131a8:	61ab      	streq	r3, [r5, #24]
 80131aa:	6963      	ldreq	r3, [r4, #20]
 80131ac:	61eb      	streq	r3, [r5, #28]
 80131ae:	bf19      	ittee	ne
 80131b0:	3410      	addne	r4, #16
 80131b2:	f105 0018 	addne.w	r0, r5, #24
 80131b6:	f105 0020 	addeq.w	r0, r5, #32
 80131ba:	3418      	addeq	r4, #24
 80131bc:	e7e5      	b.n	801318a <_realloc_r+0x1fa>
 80131be:	4621      	mov	r1, r4
 80131c0:	f7ff fe7c 	bl	8012ebc <memmove>
 80131c4:	e7e7      	b.n	8013196 <_realloc_r+0x206>
 80131c6:	45d8      	cmp	r8, fp
 80131c8:	dc31      	bgt.n	801322e <_realloc_r+0x29e>
 80131ca:	4628      	mov	r0, r5
 80131cc:	68eb      	ldr	r3, [r5, #12]
 80131ce:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80131d2:	60d3      	str	r3, [r2, #12]
 80131d4:	609a      	str	r2, [r3, #8]
 80131d6:	1f32      	subs	r2, r6, #4
 80131d8:	2a24      	cmp	r2, #36	; 0x24
 80131da:	d824      	bhi.n	8013226 <_realloc_r+0x296>
 80131dc:	2a13      	cmp	r2, #19
 80131de:	d908      	bls.n	80131f2 <_realloc_r+0x262>
 80131e0:	6823      	ldr	r3, [r4, #0]
 80131e2:	60ab      	str	r3, [r5, #8]
 80131e4:	6863      	ldr	r3, [r4, #4]
 80131e6:	60eb      	str	r3, [r5, #12]
 80131e8:	2a1b      	cmp	r2, #27
 80131ea:	d80a      	bhi.n	8013202 <_realloc_r+0x272>
 80131ec:	3408      	adds	r4, #8
 80131ee:	f105 0010 	add.w	r0, r5, #16
 80131f2:	6823      	ldr	r3, [r4, #0]
 80131f4:	6003      	str	r3, [r0, #0]
 80131f6:	6863      	ldr	r3, [r4, #4]
 80131f8:	6043      	str	r3, [r0, #4]
 80131fa:	68a3      	ldr	r3, [r4, #8]
 80131fc:	6083      	str	r3, [r0, #8]
 80131fe:	465f      	mov	r7, fp
 8013200:	e7c9      	b.n	8013196 <_realloc_r+0x206>
 8013202:	68a3      	ldr	r3, [r4, #8]
 8013204:	612b      	str	r3, [r5, #16]
 8013206:	68e3      	ldr	r3, [r4, #12]
 8013208:	616b      	str	r3, [r5, #20]
 801320a:	2a24      	cmp	r2, #36	; 0x24
 801320c:	bf01      	itttt	eq
 801320e:	6923      	ldreq	r3, [r4, #16]
 8013210:	61ab      	streq	r3, [r5, #24]
 8013212:	6963      	ldreq	r3, [r4, #20]
 8013214:	61eb      	streq	r3, [r5, #28]
 8013216:	bf19      	ittee	ne
 8013218:	3410      	addne	r4, #16
 801321a:	f105 0018 	addne.w	r0, r5, #24
 801321e:	f105 0020 	addeq.w	r0, r5, #32
 8013222:	3418      	addeq	r4, #24
 8013224:	e7e5      	b.n	80131f2 <_realloc_r+0x262>
 8013226:	4621      	mov	r1, r4
 8013228:	f7ff fe48 	bl	8012ebc <memmove>
 801322c:	e7e7      	b.n	80131fe <_realloc_r+0x26e>
 801322e:	4611      	mov	r1, r2
 8013230:	4650      	mov	r0, sl
 8013232:	f7ff fbf3 	bl	8012a1c <_malloc_r>
 8013236:	4683      	mov	fp, r0
 8013238:	2800      	cmp	r0, #0
 801323a:	f43f af6f 	beq.w	801311c <_realloc_r+0x18c>
 801323e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013242:	f023 0301 	bic.w	r3, r3, #1
 8013246:	444b      	add	r3, r9
 8013248:	f1a0 0208 	sub.w	r2, r0, #8
 801324c:	4293      	cmp	r3, r2
 801324e:	d105      	bne.n	801325c <_realloc_r+0x2cc>
 8013250:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8013254:	f027 0703 	bic.w	r7, r7, #3
 8013258:	4437      	add	r7, r6
 801325a:	e6fb      	b.n	8013054 <_realloc_r+0xc4>
 801325c:	1f32      	subs	r2, r6, #4
 801325e:	2a24      	cmp	r2, #36	; 0x24
 8013260:	d82f      	bhi.n	80132c2 <_realloc_r+0x332>
 8013262:	2a13      	cmp	r2, #19
 8013264:	d92a      	bls.n	80132bc <_realloc_r+0x32c>
 8013266:	6823      	ldr	r3, [r4, #0]
 8013268:	6003      	str	r3, [r0, #0]
 801326a:	6863      	ldr	r3, [r4, #4]
 801326c:	6043      	str	r3, [r0, #4]
 801326e:	2a1b      	cmp	r2, #27
 8013270:	d810      	bhi.n	8013294 <_realloc_r+0x304>
 8013272:	f104 0208 	add.w	r2, r4, #8
 8013276:	f100 0308 	add.w	r3, r0, #8
 801327a:	6811      	ldr	r1, [r2, #0]
 801327c:	6019      	str	r1, [r3, #0]
 801327e:	6851      	ldr	r1, [r2, #4]
 8013280:	6059      	str	r1, [r3, #4]
 8013282:	6892      	ldr	r2, [r2, #8]
 8013284:	609a      	str	r2, [r3, #8]
 8013286:	4621      	mov	r1, r4
 8013288:	4650      	mov	r0, sl
 801328a:	f002 fc27 	bl	8015adc <_free_r>
 801328e:	e745      	b.n	801311c <_realloc_r+0x18c>
 8013290:	20000440 	.word	0x20000440
 8013294:	68a3      	ldr	r3, [r4, #8]
 8013296:	6083      	str	r3, [r0, #8]
 8013298:	68e3      	ldr	r3, [r4, #12]
 801329a:	60c3      	str	r3, [r0, #12]
 801329c:	2a24      	cmp	r2, #36	; 0x24
 801329e:	bf01      	itttt	eq
 80132a0:	6923      	ldreq	r3, [r4, #16]
 80132a2:	6103      	streq	r3, [r0, #16]
 80132a4:	6961      	ldreq	r1, [r4, #20]
 80132a6:	6141      	streq	r1, [r0, #20]
 80132a8:	bf19      	ittee	ne
 80132aa:	f104 0210 	addne.w	r2, r4, #16
 80132ae:	f100 0310 	addne.w	r3, r0, #16
 80132b2:	f104 0218 	addeq.w	r2, r4, #24
 80132b6:	f100 0318 	addeq.w	r3, r0, #24
 80132ba:	e7de      	b.n	801327a <_realloc_r+0x2ea>
 80132bc:	4603      	mov	r3, r0
 80132be:	4622      	mov	r2, r4
 80132c0:	e7db      	b.n	801327a <_realloc_r+0x2ea>
 80132c2:	4621      	mov	r1, r4
 80132c4:	f7ff fdfa 	bl	8012ebc <memmove>
 80132c8:	e7dd      	b.n	8013286 <_realloc_r+0x2f6>
 80132ca:	4637      	mov	r7, r6
 80132cc:	e6c2      	b.n	8013054 <_realloc_r+0xc4>
 80132ce:	4317      	orrs	r7, r2
 80132d0:	f8c9 7004 	str.w	r7, [r9, #4]
 80132d4:	685a      	ldr	r2, [r3, #4]
 80132d6:	f042 0201 	orr.w	r2, r2, #1
 80132da:	605a      	str	r2, [r3, #4]
 80132dc:	e6d6      	b.n	801308c <_realloc_r+0xfc>
 80132de:	bf00      	nop

080132e0 <_sbrk_r>:
 80132e0:	b538      	push	{r3, r4, r5, lr}
 80132e2:	4c06      	ldr	r4, [pc, #24]	; (80132fc <_sbrk_r+0x1c>)
 80132e4:	2300      	movs	r3, #0
 80132e6:	4605      	mov	r5, r0
 80132e8:	4608      	mov	r0, r1
 80132ea:	6023      	str	r3, [r4, #0]
 80132ec:	f7f5 fc30 	bl	8008b50 <_sbrk>
 80132f0:	1c43      	adds	r3, r0, #1
 80132f2:	d102      	bne.n	80132fa <_sbrk_r+0x1a>
 80132f4:	6823      	ldr	r3, [r4, #0]
 80132f6:	b103      	cbz	r3, 80132fa <_sbrk_r+0x1a>
 80132f8:	602b      	str	r3, [r5, #0]
 80132fa:	bd38      	pop	{r3, r4, r5, pc}
 80132fc:	2000105c 	.word	0x2000105c

08013300 <_init_signal_r>:
 8013300:	b538      	push	{r3, r4, r5, lr}
 8013302:	f8d0 42dc 	ldr.w	r4, [r0, #732]	; 0x2dc
 8013306:	4605      	mov	r5, r0
 8013308:	b95c      	cbnz	r4, 8013322 <_init_signal_r+0x22>
 801330a:	2180      	movs	r1, #128	; 0x80
 801330c:	f7ff fb86 	bl	8012a1c <_malloc_r>
 8013310:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8013314:	b138      	cbz	r0, 8013326 <_init_signal_r+0x26>
 8013316:	1f03      	subs	r3, r0, #4
 8013318:	307c      	adds	r0, #124	; 0x7c
 801331a:	f843 4f04 	str.w	r4, [r3, #4]!
 801331e:	4283      	cmp	r3, r0
 8013320:	d1fb      	bne.n	801331a <_init_signal_r+0x1a>
 8013322:	2000      	movs	r0, #0
 8013324:	bd38      	pop	{r3, r4, r5, pc}
 8013326:	f04f 30ff 	mov.w	r0, #4294967295
 801332a:	e7fb      	b.n	8013324 <_init_signal_r+0x24>

0801332c <_signal_r>:
 801332c:	291f      	cmp	r1, #31
 801332e:	b570      	push	{r4, r5, r6, lr}
 8013330:	4604      	mov	r4, r0
 8013332:	460d      	mov	r5, r1
 8013334:	4616      	mov	r6, r2
 8013336:	d904      	bls.n	8013342 <_signal_r+0x16>
 8013338:	2316      	movs	r3, #22
 801333a:	6003      	str	r3, [r0, #0]
 801333c:	f04f 30ff 	mov.w	r0, #4294967295
 8013340:	e008      	b.n	8013354 <_signal_r+0x28>
 8013342:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8013346:	b133      	cbz	r3, 8013356 <_signal_r+0x2a>
 8013348:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 801334c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013350:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8013354:	bd70      	pop	{r4, r5, r6, pc}
 8013356:	f7ff ffd3 	bl	8013300 <_init_signal_r>
 801335a:	2800      	cmp	r0, #0
 801335c:	d0f4      	beq.n	8013348 <_signal_r+0x1c>
 801335e:	e7ed      	b.n	801333c <_signal_r+0x10>

08013360 <_raise_r>:
 8013360:	291f      	cmp	r1, #31
 8013362:	b538      	push	{r3, r4, r5, lr}
 8013364:	4604      	mov	r4, r0
 8013366:	460d      	mov	r5, r1
 8013368:	d904      	bls.n	8013374 <_raise_r+0x14>
 801336a:	2316      	movs	r3, #22
 801336c:	6003      	str	r3, [r0, #0]
 801336e:	f04f 30ff 	mov.w	r0, #4294967295
 8013372:	bd38      	pop	{r3, r4, r5, pc}
 8013374:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8013378:	b112      	cbz	r2, 8013380 <_raise_r+0x20>
 801337a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801337e:	b94b      	cbnz	r3, 8013394 <_raise_r+0x34>
 8013380:	4620      	mov	r0, r4
 8013382:	f000 f839 	bl	80133f8 <_getpid_r>
 8013386:	462a      	mov	r2, r5
 8013388:	4601      	mov	r1, r0
 801338a:	4620      	mov	r0, r4
 801338c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013390:	f000 b820 	b.w	80133d4 <_kill_r>
 8013394:	2b01      	cmp	r3, #1
 8013396:	d00a      	beq.n	80133ae <_raise_r+0x4e>
 8013398:	1c59      	adds	r1, r3, #1
 801339a:	d103      	bne.n	80133a4 <_raise_r+0x44>
 801339c:	2316      	movs	r3, #22
 801339e:	6003      	str	r3, [r0, #0]
 80133a0:	2001      	movs	r0, #1
 80133a2:	e7e6      	b.n	8013372 <_raise_r+0x12>
 80133a4:	2400      	movs	r4, #0
 80133a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80133aa:	4628      	mov	r0, r5
 80133ac:	4798      	blx	r3
 80133ae:	2000      	movs	r0, #0
 80133b0:	e7df      	b.n	8013372 <_raise_r+0x12>
	...

080133b4 <raise>:
 80133b4:	4b02      	ldr	r3, [pc, #8]	; (80133c0 <raise+0xc>)
 80133b6:	4601      	mov	r1, r0
 80133b8:	6818      	ldr	r0, [r3, #0]
 80133ba:	f7ff bfd1 	b.w	8013360 <_raise_r>
 80133be:	bf00      	nop
 80133c0:	20000014 	.word	0x20000014

080133c4 <signal>:
 80133c4:	4b02      	ldr	r3, [pc, #8]	; (80133d0 <signal+0xc>)
 80133c6:	460a      	mov	r2, r1
 80133c8:	4601      	mov	r1, r0
 80133ca:	6818      	ldr	r0, [r3, #0]
 80133cc:	f7ff bfae 	b.w	801332c <_signal_r>
 80133d0:	20000014 	.word	0x20000014

080133d4 <_kill_r>:
 80133d4:	b538      	push	{r3, r4, r5, lr}
 80133d6:	4c07      	ldr	r4, [pc, #28]	; (80133f4 <_kill_r+0x20>)
 80133d8:	2300      	movs	r3, #0
 80133da:	4605      	mov	r5, r0
 80133dc:	4608      	mov	r0, r1
 80133de:	4611      	mov	r1, r2
 80133e0:	6023      	str	r3, [r4, #0]
 80133e2:	f7f5 fb2d 	bl	8008a40 <_kill>
 80133e6:	1c43      	adds	r3, r0, #1
 80133e8:	d102      	bne.n	80133f0 <_kill_r+0x1c>
 80133ea:	6823      	ldr	r3, [r4, #0]
 80133ec:	b103      	cbz	r3, 80133f0 <_kill_r+0x1c>
 80133ee:	602b      	str	r3, [r5, #0]
 80133f0:	bd38      	pop	{r3, r4, r5, pc}
 80133f2:	bf00      	nop
 80133f4:	2000105c 	.word	0x2000105c

080133f8 <_getpid_r>:
 80133f8:	f7f5 bb1a 	b.w	8008a30 <_getpid>

080133fc <sprintf>:
 80133fc:	b40e      	push	{r1, r2, r3}
 80133fe:	b500      	push	{lr}
 8013400:	b09c      	sub	sp, #112	; 0x70
 8013402:	ab1d      	add	r3, sp, #116	; 0x74
 8013404:	9002      	str	r0, [sp, #8]
 8013406:	9006      	str	r0, [sp, #24]
 8013408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801340c:	4809      	ldr	r0, [pc, #36]	; (8013434 <sprintf+0x38>)
 801340e:	9107      	str	r1, [sp, #28]
 8013410:	9104      	str	r1, [sp, #16]
 8013412:	4909      	ldr	r1, [pc, #36]	; (8013438 <sprintf+0x3c>)
 8013414:	f853 2b04 	ldr.w	r2, [r3], #4
 8013418:	9105      	str	r1, [sp, #20]
 801341a:	6800      	ldr	r0, [r0, #0]
 801341c:	9301      	str	r3, [sp, #4]
 801341e:	a902      	add	r1, sp, #8
 8013420:	f000 f862 	bl	80134e8 <_svfprintf_r>
 8013424:	9b02      	ldr	r3, [sp, #8]
 8013426:	2200      	movs	r2, #0
 8013428:	701a      	strb	r2, [r3, #0]
 801342a:	b01c      	add	sp, #112	; 0x70
 801342c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013430:	b003      	add	sp, #12
 8013432:	4770      	bx	lr
 8013434:	20000014 	.word	0x20000014
 8013438:	ffff0208 	.word	0xffff0208

0801343c <__sread>:
 801343c:	b510      	push	{r4, lr}
 801343e:	460c      	mov	r4, r1
 8013440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013444:	f002 ff16 	bl	8016274 <_read_r>
 8013448:	2800      	cmp	r0, #0
 801344a:	bfab      	itete	ge
 801344c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 801344e:	89a3      	ldrhlt	r3, [r4, #12]
 8013450:	181b      	addge	r3, r3, r0
 8013452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013456:	bfac      	ite	ge
 8013458:	6523      	strge	r3, [r4, #80]	; 0x50
 801345a:	81a3      	strhlt	r3, [r4, #12]
 801345c:	bd10      	pop	{r4, pc}

0801345e <__swrite>:
 801345e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013462:	461f      	mov	r7, r3
 8013464:	898b      	ldrh	r3, [r1, #12]
 8013466:	05db      	lsls	r3, r3, #23
 8013468:	4605      	mov	r5, r0
 801346a:	460c      	mov	r4, r1
 801346c:	4616      	mov	r6, r2
 801346e:	d505      	bpl.n	801347c <__swrite+0x1e>
 8013470:	2302      	movs	r3, #2
 8013472:	2200      	movs	r2, #0
 8013474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013478:	f002 fc28 	bl	8015ccc <_lseek_r>
 801347c:	89a3      	ldrh	r3, [r4, #12]
 801347e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013486:	81a3      	strh	r3, [r4, #12]
 8013488:	4632      	mov	r2, r6
 801348a:	463b      	mov	r3, r7
 801348c:	4628      	mov	r0, r5
 801348e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013492:	f001 bad9 	b.w	8014a48 <_write_r>

08013496 <__sseek>:
 8013496:	b510      	push	{r4, lr}
 8013498:	460c      	mov	r4, r1
 801349a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801349e:	f002 fc15 	bl	8015ccc <_lseek_r>
 80134a2:	1c43      	adds	r3, r0, #1
 80134a4:	89a3      	ldrh	r3, [r4, #12]
 80134a6:	bf15      	itete	ne
 80134a8:	6520      	strne	r0, [r4, #80]	; 0x50
 80134aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80134ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80134b2:	81a3      	strheq	r3, [r4, #12]
 80134b4:	bf18      	it	ne
 80134b6:	81a3      	strhne	r3, [r4, #12]
 80134b8:	bd10      	pop	{r4, pc}

080134ba <__sclose>:
 80134ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134be:	f001 bb3d 	b.w	8014b3c <_close_r>

080134c2 <strncmp>:
 80134c2:	b510      	push	{r4, lr}
 80134c4:	b16a      	cbz	r2, 80134e2 <strncmp+0x20>
 80134c6:	3901      	subs	r1, #1
 80134c8:	1884      	adds	r4, r0, r2
 80134ca:	f810 3b01 	ldrb.w	r3, [r0], #1
 80134ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80134d2:	4293      	cmp	r3, r2
 80134d4:	d103      	bne.n	80134de <strncmp+0x1c>
 80134d6:	42a0      	cmp	r0, r4
 80134d8:	d001      	beq.n	80134de <strncmp+0x1c>
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d1f5      	bne.n	80134ca <strncmp+0x8>
 80134de:	1a98      	subs	r0, r3, r2
 80134e0:	bd10      	pop	{r4, pc}
 80134e2:	4610      	mov	r0, r2
 80134e4:	e7fc      	b.n	80134e0 <strncmp+0x1e>
	...

080134e8 <_svfprintf_r>:
 80134e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ec:	b0d3      	sub	sp, #332	; 0x14c
 80134ee:	4688      	mov	r8, r1
 80134f0:	4693      	mov	fp, r2
 80134f2:	461e      	mov	r6, r3
 80134f4:	9003      	str	r0, [sp, #12]
 80134f6:	f002 fbdb 	bl	8015cb0 <_localeconv_r>
 80134fa:	6803      	ldr	r3, [r0, #0]
 80134fc:	9316      	str	r3, [sp, #88]	; 0x58
 80134fe:	4618      	mov	r0, r3
 8013500:	f7f3 fc30 	bl	8006d64 <strlen>
 8013504:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8013508:	900d      	str	r0, [sp, #52]	; 0x34
 801350a:	0618      	lsls	r0, r3, #24
 801350c:	d518      	bpl.n	8013540 <_svfprintf_r+0x58>
 801350e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013512:	b9ab      	cbnz	r3, 8013540 <_svfprintf_r+0x58>
 8013514:	2140      	movs	r1, #64	; 0x40
 8013516:	9803      	ldr	r0, [sp, #12]
 8013518:	f7ff fa80 	bl	8012a1c <_malloc_r>
 801351c:	f8c8 0000 	str.w	r0, [r8]
 8013520:	f8c8 0010 	str.w	r0, [r8, #16]
 8013524:	b948      	cbnz	r0, 801353a <_svfprintf_r+0x52>
 8013526:	9a03      	ldr	r2, [sp, #12]
 8013528:	230c      	movs	r3, #12
 801352a:	6013      	str	r3, [r2, #0]
 801352c:	f04f 33ff 	mov.w	r3, #4294967295
 8013530:	930e      	str	r3, [sp, #56]	; 0x38
 8013532:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013534:	b053      	add	sp, #332	; 0x14c
 8013536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801353a:	2340      	movs	r3, #64	; 0x40
 801353c:	f8c8 3014 	str.w	r3, [r8, #20]
 8013540:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 8013868 <_svfprintf_r+0x380>
 8013544:	2300      	movs	r3, #0
 8013546:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 801354a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801354e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8013552:	ac29      	add	r4, sp, #164	; 0xa4
 8013554:	9426      	str	r4, [sp, #152]	; 0x98
 8013556:	9304      	str	r3, [sp, #16]
 8013558:	9309      	str	r3, [sp, #36]	; 0x24
 801355a:	9312      	str	r3, [sp, #72]	; 0x48
 801355c:	9319      	str	r3, [sp, #100]	; 0x64
 801355e:	930e      	str	r3, [sp, #56]	; 0x38
 8013560:	465d      	mov	r5, fp
 8013562:	462b      	mov	r3, r5
 8013564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013568:	b112      	cbz	r2, 8013570 <_svfprintf_r+0x88>
 801356a:	2a25      	cmp	r2, #37	; 0x25
 801356c:	f040 80e4 	bne.w	8013738 <_svfprintf_r+0x250>
 8013570:	ebb5 070b 	subs.w	r7, r5, fp
 8013574:	d00e      	beq.n	8013594 <_svfprintf_r+0xac>
 8013576:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013578:	443b      	add	r3, r7
 801357a:	9328      	str	r3, [sp, #160]	; 0xa0
 801357c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801357e:	3301      	adds	r3, #1
 8013580:	2b07      	cmp	r3, #7
 8013582:	e9c4 b700 	strd	fp, r7, [r4]
 8013586:	9327      	str	r3, [sp, #156]	; 0x9c
 8013588:	f300 80d8 	bgt.w	801373c <_svfprintf_r+0x254>
 801358c:	3408      	adds	r4, #8
 801358e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013590:	443b      	add	r3, r7
 8013592:	930e      	str	r3, [sp, #56]	; 0x38
 8013594:	782b      	ldrb	r3, [r5, #0]
 8013596:	2b00      	cmp	r3, #0
 8013598:	f001 81b4 	beq.w	8014904 <_svfprintf_r+0x141c>
 801359c:	1c6b      	adds	r3, r5, #1
 801359e:	930c      	str	r3, [sp, #48]	; 0x30
 80135a0:	2300      	movs	r3, #0
 80135a2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80135a6:	f04f 35ff 	mov.w	r5, #4294967295
 80135aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80135ac:	469a      	mov	sl, r3
 80135ae:	270a      	movs	r7, #10
 80135b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	9306      	str	r3, [sp, #24]
 80135b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135b8:	3301      	adds	r3, #1
 80135ba:	930c      	str	r3, [sp, #48]	; 0x30
 80135bc:	9b06      	ldr	r3, [sp, #24]
 80135be:	3b20      	subs	r3, #32
 80135c0:	2b5a      	cmp	r3, #90	; 0x5a
 80135c2:	f200 8624 	bhi.w	801420e <_svfprintf_r+0xd26>
 80135c6:	a201      	add	r2, pc, #4	; (adr r2, 80135cc <_svfprintf_r+0xe4>)
 80135c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135cc:	080137cf 	.word	0x080137cf
 80135d0:	0801420f 	.word	0x0801420f
 80135d4:	0801420f 	.word	0x0801420f
 80135d8:	080137e1 	.word	0x080137e1
 80135dc:	0801420f 	.word	0x0801420f
 80135e0:	0801420f 	.word	0x0801420f
 80135e4:	0801420f 	.word	0x0801420f
 80135e8:	08013795 	.word	0x08013795
 80135ec:	0801420f 	.word	0x0801420f
 80135f0:	0801420f 	.word	0x0801420f
 80135f4:	080137e7 	.word	0x080137e7
 80135f8:	080137ff 	.word	0x080137ff
 80135fc:	0801420f 	.word	0x0801420f
 8013600:	080137f9 	.word	0x080137f9
 8013604:	08013803 	.word	0x08013803
 8013608:	0801420f 	.word	0x0801420f
 801360c:	08013837 	.word	0x08013837
 8013610:	0801383d 	.word	0x0801383d
 8013614:	0801383d 	.word	0x0801383d
 8013618:	0801383d 	.word	0x0801383d
 801361c:	0801383d 	.word	0x0801383d
 8013620:	0801383d 	.word	0x0801383d
 8013624:	0801383d 	.word	0x0801383d
 8013628:	0801383d 	.word	0x0801383d
 801362c:	0801383d 	.word	0x0801383d
 8013630:	0801383d 	.word	0x0801383d
 8013634:	0801420f 	.word	0x0801420f
 8013638:	0801420f 	.word	0x0801420f
 801363c:	0801420f 	.word	0x0801420f
 8013640:	0801420f 	.word	0x0801420f
 8013644:	0801420f 	.word	0x0801420f
 8013648:	0801420f 	.word	0x0801420f
 801364c:	0801420f 	.word	0x0801420f
 8013650:	0801393f 	.word	0x0801393f
 8013654:	0801420f 	.word	0x0801420f
 8013658:	080138a9 	.word	0x080138a9
 801365c:	080138cb 	.word	0x080138cb
 8013660:	0801393f 	.word	0x0801393f
 8013664:	0801393f 	.word	0x0801393f
 8013668:	0801393f 	.word	0x0801393f
 801366c:	0801420f 	.word	0x0801420f
 8013670:	0801420f 	.word	0x0801420f
 8013674:	0801420f 	.word	0x0801420f
 8013678:	0801420f 	.word	0x0801420f
 801367c:	0801385d 	.word	0x0801385d
 8013680:	0801420f 	.word	0x0801420f
 8013684:	0801420f 	.word	0x0801420f
 8013688:	08013e11 	.word	0x08013e11
 801368c:	0801420f 	.word	0x0801420f
 8013690:	0801420f 	.word	0x0801420f
 8013694:	0801420f 	.word	0x0801420f
 8013698:	08013e9d 	.word	0x08013e9d
 801369c:	0801420f 	.word	0x0801420f
 80136a0:	0801407f 	.word	0x0801407f
 80136a4:	0801420f 	.word	0x0801420f
 80136a8:	0801420f 	.word	0x0801420f
 80136ac:	08013755 	.word	0x08013755
 80136b0:	0801420f 	.word	0x0801420f
 80136b4:	0801420f 	.word	0x0801420f
 80136b8:	0801420f 	.word	0x0801420f
 80136bc:	0801420f 	.word	0x0801420f
 80136c0:	0801420f 	.word	0x0801420f
 80136c4:	0801420f 	.word	0x0801420f
 80136c8:	0801420f 	.word	0x0801420f
 80136cc:	0801420f 	.word	0x0801420f
 80136d0:	0801393f 	.word	0x0801393f
 80136d4:	0801420f 	.word	0x0801420f
 80136d8:	080138a9 	.word	0x080138a9
 80136dc:	080138cf 	.word	0x080138cf
 80136e0:	0801393f 	.word	0x0801393f
 80136e4:	0801393f 	.word	0x0801393f
 80136e8:	0801393f 	.word	0x0801393f
 80136ec:	08013875 	.word	0x08013875
 80136f0:	080138cf 	.word	0x080138cf
 80136f4:	0801389d 	.word	0x0801389d
 80136f8:	0801420f 	.word	0x0801420f
 80136fc:	0801388f 	.word	0x0801388f
 8013700:	0801420f 	.word	0x0801420f
 8013704:	08013dcb 	.word	0x08013dcb
 8013708:	08013e15 	.word	0x08013e15
 801370c:	08013e7d 	.word	0x08013e7d
 8013710:	0801389d 	.word	0x0801389d
 8013714:	0801420f 	.word	0x0801420f
 8013718:	08013e9d 	.word	0x08013e9d
 801371c:	080135b1 	.word	0x080135b1
 8013720:	08014083 	.word	0x08014083
 8013724:	0801420f 	.word	0x0801420f
 8013728:	0801420f 	.word	0x0801420f
 801372c:	080140c1 	.word	0x080140c1
 8013730:	0801420f 	.word	0x0801420f
 8013734:	080135b1 	.word	0x080135b1
 8013738:	461d      	mov	r5, r3
 801373a:	e712      	b.n	8013562 <_svfprintf_r+0x7a>
 801373c:	aa26      	add	r2, sp, #152	; 0x98
 801373e:	4641      	mov	r1, r8
 8013740:	9803      	ldr	r0, [sp, #12]
 8013742:	f002 fdf4 	bl	801632e <__ssprint_r>
 8013746:	2800      	cmp	r0, #0
 8013748:	f040 8166 	bne.w	8013a18 <_svfprintf_r+0x530>
 801374c:	ac29      	add	r4, sp, #164	; 0xa4
 801374e:	e71e      	b.n	801358e <_svfprintf_r+0xa6>
 8013750:	461e      	mov	r6, r3
 8013752:	e72d      	b.n	80135b0 <_svfprintf_r+0xc8>
 8013754:	4b46      	ldr	r3, [pc, #280]	; (8013870 <_svfprintf_r+0x388>)
 8013756:	9318      	str	r3, [sp, #96]	; 0x60
 8013758:	f01a 0f20 	tst.w	sl, #32
 801375c:	f000 84b3 	beq.w	80140c6 <_svfprintf_r+0xbde>
 8013760:	3607      	adds	r6, #7
 8013762:	f026 0607 	bic.w	r6, r6, #7
 8013766:	f106 0308 	add.w	r3, r6, #8
 801376a:	e9d6 6700 	ldrd	r6, r7, [r6]
 801376e:	9308      	str	r3, [sp, #32]
 8013770:	f01a 0f01 	tst.w	sl, #1
 8013774:	d00a      	beq.n	801378c <_svfprintf_r+0x2a4>
 8013776:	ea56 0307 	orrs.w	r3, r6, r7
 801377a:	d007      	beq.n	801378c <_svfprintf_r+0x2a4>
 801377c:	2330      	movs	r3, #48	; 0x30
 801377e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8013782:	9b06      	ldr	r3, [sp, #24]
 8013784:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8013788:	f04a 0a02 	orr.w	sl, sl, #2
 801378c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8013790:	2302      	movs	r3, #2
 8013792:	e34d      	b.n	8013e30 <_svfprintf_r+0x948>
 8013794:	9803      	ldr	r0, [sp, #12]
 8013796:	f002 fa8b 	bl	8015cb0 <_localeconv_r>
 801379a:	6843      	ldr	r3, [r0, #4]
 801379c:	9319      	str	r3, [sp, #100]	; 0x64
 801379e:	4618      	mov	r0, r3
 80137a0:	f7f3 fae0 	bl	8006d64 <strlen>
 80137a4:	9012      	str	r0, [sp, #72]	; 0x48
 80137a6:	9803      	ldr	r0, [sp, #12]
 80137a8:	f002 fa82 	bl	8015cb0 <_localeconv_r>
 80137ac:	6883      	ldr	r3, [r0, #8]
 80137ae:	9309      	str	r3, [sp, #36]	; 0x24
 80137b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	f43f aefc 	beq.w	80135b0 <_svfprintf_r+0xc8>
 80137b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	f43f aef8 	beq.w	80135b0 <_svfprintf_r+0xc8>
 80137c0:	781b      	ldrb	r3, [r3, #0]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	f43f aef4 	beq.w	80135b0 <_svfprintf_r+0xc8>
 80137c8:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80137cc:	e6f0      	b.n	80135b0 <_svfprintf_r+0xc8>
 80137ce:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	f47f aeec 	bne.w	80135b0 <_svfprintf_r+0xc8>
 80137d8:	2320      	movs	r3, #32
 80137da:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80137de:	e6e7      	b.n	80135b0 <_svfprintf_r+0xc8>
 80137e0:	f04a 0a01 	orr.w	sl, sl, #1
 80137e4:	e6e4      	b.n	80135b0 <_svfprintf_r+0xc8>
 80137e6:	6832      	ldr	r2, [r6, #0]
 80137e8:	920f      	str	r2, [sp, #60]	; 0x3c
 80137ea:	2a00      	cmp	r2, #0
 80137ec:	f106 0304 	add.w	r3, r6, #4
 80137f0:	daae      	bge.n	8013750 <_svfprintf_r+0x268>
 80137f2:	4252      	negs	r2, r2
 80137f4:	920f      	str	r2, [sp, #60]	; 0x3c
 80137f6:	461e      	mov	r6, r3
 80137f8:	f04a 0a04 	orr.w	sl, sl, #4
 80137fc:	e6d8      	b.n	80135b0 <_svfprintf_r+0xc8>
 80137fe:	232b      	movs	r3, #43	; 0x2b
 8013800:	e7eb      	b.n	80137da <_svfprintf_r+0x2f2>
 8013802:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013806:	7812      	ldrb	r2, [r2, #0]
 8013808:	9206      	str	r2, [sp, #24]
 801380a:	2a2a      	cmp	r2, #42	; 0x2a
 801380c:	f103 0301 	add.w	r3, r3, #1
 8013810:	d10f      	bne.n	8013832 <_svfprintf_r+0x34a>
 8013812:	6835      	ldr	r5, [r6, #0]
 8013814:	930c      	str	r3, [sp, #48]	; 0x30
 8013816:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 801381a:	3604      	adds	r6, #4
 801381c:	e6c8      	b.n	80135b0 <_svfprintf_r+0xc8>
 801381e:	fb07 2505 	mla	r5, r7, r5, r2
 8013822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013826:	9206      	str	r2, [sp, #24]
 8013828:	9a06      	ldr	r2, [sp, #24]
 801382a:	3a30      	subs	r2, #48	; 0x30
 801382c:	2a09      	cmp	r2, #9
 801382e:	d9f6      	bls.n	801381e <_svfprintf_r+0x336>
 8013830:	e6c3      	b.n	80135ba <_svfprintf_r+0xd2>
 8013832:	2500      	movs	r5, #0
 8013834:	e7f8      	b.n	8013828 <_svfprintf_r+0x340>
 8013836:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 801383a:	e6b9      	b.n	80135b0 <_svfprintf_r+0xc8>
 801383c:	2200      	movs	r2, #0
 801383e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013840:	920f      	str	r2, [sp, #60]	; 0x3c
 8013842:	9a06      	ldr	r2, [sp, #24]
 8013844:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013846:	3a30      	subs	r2, #48	; 0x30
 8013848:	fb07 2201 	mla	r2, r7, r1, r2
 801384c:	920f      	str	r2, [sp, #60]	; 0x3c
 801384e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013852:	9206      	str	r2, [sp, #24]
 8013854:	3a30      	subs	r2, #48	; 0x30
 8013856:	2a09      	cmp	r2, #9
 8013858:	d9f3      	bls.n	8013842 <_svfprintf_r+0x35a>
 801385a:	e6ae      	b.n	80135ba <_svfprintf_r+0xd2>
 801385c:	f04a 0a08 	orr.w	sl, sl, #8
 8013860:	e6a6      	b.n	80135b0 <_svfprintf_r+0xc8>
 8013862:	bf00      	nop
 8013864:	f3af 8000 	nop.w
	...
 8013870:	080184e9 	.word	0x080184e9
 8013874:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013876:	781b      	ldrb	r3, [r3, #0]
 8013878:	2b68      	cmp	r3, #104	; 0x68
 801387a:	bf01      	itttt	eq
 801387c:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 801387e:	3301      	addeq	r3, #1
 8013880:	930c      	streq	r3, [sp, #48]	; 0x30
 8013882:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8013886:	bf18      	it	ne
 8013888:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 801388c:	e690      	b.n	80135b0 <_svfprintf_r+0xc8>
 801388e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	2b6c      	cmp	r3, #108	; 0x6c
 8013894:	d105      	bne.n	80138a2 <_svfprintf_r+0x3ba>
 8013896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013898:	3301      	adds	r3, #1
 801389a:	930c      	str	r3, [sp, #48]	; 0x30
 801389c:	f04a 0a20 	orr.w	sl, sl, #32
 80138a0:	e686      	b.n	80135b0 <_svfprintf_r+0xc8>
 80138a2:	f04a 0a10 	orr.w	sl, sl, #16
 80138a6:	e683      	b.n	80135b0 <_svfprintf_r+0xc8>
 80138a8:	1d33      	adds	r3, r6, #4
 80138aa:	9308      	str	r3, [sp, #32]
 80138ac:	2000      	movs	r0, #0
 80138ae:	6833      	ldr	r3, [r6, #0]
 80138b0:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80138b4:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 80138b8:	4681      	mov	r9, r0
 80138ba:	2501      	movs	r5, #1
 80138bc:	9010      	str	r0, [sp, #64]	; 0x40
 80138be:	4607      	mov	r7, r0
 80138c0:	9007      	str	r0, [sp, #28]
 80138c2:	4606      	mov	r6, r0
 80138c4:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80138c8:	e301      	b.n	8013ece <_svfprintf_r+0x9e6>
 80138ca:	f04a 0a10 	orr.w	sl, sl, #16
 80138ce:	f01a 0f20 	tst.w	sl, #32
 80138d2:	d021      	beq.n	8013918 <_svfprintf_r+0x430>
 80138d4:	3607      	adds	r6, #7
 80138d6:	f026 0607 	bic.w	r6, r6, #7
 80138da:	f106 0308 	add.w	r3, r6, #8
 80138de:	e9d6 6700 	ldrd	r6, r7, [r6]
 80138e2:	9308      	str	r3, [sp, #32]
 80138e4:	2e00      	cmp	r6, #0
 80138e6:	f177 0300 	sbcs.w	r3, r7, #0
 80138ea:	da06      	bge.n	80138fa <_svfprintf_r+0x412>
 80138ec:	4276      	negs	r6, r6
 80138ee:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80138f2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80138f6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80138fa:	1c6b      	adds	r3, r5, #1
 80138fc:	f040 83f6 	bne.w	80140ec <_svfprintf_r+0xc04>
 8013900:	2f00      	cmp	r7, #0
 8013902:	bf08      	it	eq
 8013904:	2e0a      	cmpeq	r6, #10
 8013906:	f080 8427 	bcs.w	8014158 <_svfprintf_r+0xc70>
 801390a:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 801390e:	3630      	adds	r6, #48	; 0x30
 8013910:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 8013914:	f000 bc0d 	b.w	8014132 <_svfprintf_r+0xc4a>
 8013918:	1d33      	adds	r3, r6, #4
 801391a:	f01a 0f10 	tst.w	sl, #16
 801391e:	9308      	str	r3, [sp, #32]
 8013920:	d002      	beq.n	8013928 <_svfprintf_r+0x440>
 8013922:	6836      	ldr	r6, [r6, #0]
 8013924:	17f7      	asrs	r7, r6, #31
 8013926:	e7dd      	b.n	80138e4 <_svfprintf_r+0x3fc>
 8013928:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801392c:	6836      	ldr	r6, [r6, #0]
 801392e:	d001      	beq.n	8013934 <_svfprintf_r+0x44c>
 8013930:	b236      	sxth	r6, r6
 8013932:	e7f7      	b.n	8013924 <_svfprintf_r+0x43c>
 8013934:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8013938:	bf18      	it	ne
 801393a:	b276      	sxtbne	r6, r6
 801393c:	e7f2      	b.n	8013924 <_svfprintf_r+0x43c>
 801393e:	3607      	adds	r6, #7
 8013940:	f026 0607 	bic.w	r6, r6, #7
 8013944:	ed96 7b00 	vldr	d7, [r6]
 8013948:	f106 0308 	add.w	r3, r6, #8
 801394c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013950:	9308      	str	r3, [sp, #32]
 8013952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013954:	931a      	str	r3, [sp, #104]	; 0x68
 8013956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013958:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801395c:	931b      	str	r3, [sp, #108]	; 0x6c
 801395e:	f04f 32ff 	mov.w	r2, #4294967295
 8013962:	4bb2      	ldr	r3, [pc, #712]	; (8013c2c <_svfprintf_r+0x744>)
 8013964:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8013968:	f7f3 fe5a 	bl	8007620 <__aeabi_dcmpun>
 801396c:	bb00      	cbnz	r0, 80139b0 <_svfprintf_r+0x4c8>
 801396e:	f04f 32ff 	mov.w	r2, #4294967295
 8013972:	4bae      	ldr	r3, [pc, #696]	; (8013c2c <_svfprintf_r+0x744>)
 8013974:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8013978:	f7f3 fe34 	bl	80075e4 <__aeabi_dcmple>
 801397c:	b9c0      	cbnz	r0, 80139b0 <_svfprintf_r+0x4c8>
 801397e:	2200      	movs	r2, #0
 8013980:	2300      	movs	r3, #0
 8013982:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013986:	f7f3 fe23 	bl	80075d0 <__aeabi_dcmplt>
 801398a:	b110      	cbz	r0, 8013992 <_svfprintf_r+0x4aa>
 801398c:	232d      	movs	r3, #45	; 0x2d
 801398e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8013992:	4aa7      	ldr	r2, [pc, #668]	; (8013c30 <_svfprintf_r+0x748>)
 8013994:	4ba7      	ldr	r3, [pc, #668]	; (8013c34 <_svfprintf_r+0x74c>)
 8013996:	9906      	ldr	r1, [sp, #24]
 8013998:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 801399c:	2947      	cmp	r1, #71	; 0x47
 801399e:	bfcc      	ite	gt
 80139a0:	4693      	movgt	fp, r2
 80139a2:	469b      	movle	fp, r3
 80139a4:	f04f 0900 	mov.w	r9, #0
 80139a8:	2503      	movs	r5, #3
 80139aa:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80139ae:	e3c6      	b.n	801413e <_svfprintf_r+0xc56>
 80139b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80139b4:	4610      	mov	r0, r2
 80139b6:	4619      	mov	r1, r3
 80139b8:	f7f3 fe32 	bl	8007620 <__aeabi_dcmpun>
 80139bc:	4681      	mov	r9, r0
 80139be:	b140      	cbz	r0, 80139d2 <_svfprintf_r+0x4ea>
 80139c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139c2:	4a9d      	ldr	r2, [pc, #628]	; (8013c38 <_svfprintf_r+0x750>)
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	bfbc      	itt	lt
 80139c8:	232d      	movlt	r3, #45	; 0x2d
 80139ca:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 80139ce:	4b9b      	ldr	r3, [pc, #620]	; (8013c3c <_svfprintf_r+0x754>)
 80139d0:	e7e1      	b.n	8013996 <_svfprintf_r+0x4ae>
 80139d2:	9b06      	ldr	r3, [sp, #24]
 80139d4:	f023 0320 	bic.w	r3, r3, #32
 80139d8:	2b41      	cmp	r3, #65	; 0x41
 80139da:	9307      	str	r3, [sp, #28]
 80139dc:	d125      	bne.n	8013a2a <_svfprintf_r+0x542>
 80139de:	2330      	movs	r3, #48	; 0x30
 80139e0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80139e4:	9b06      	ldr	r3, [sp, #24]
 80139e6:	2b61      	cmp	r3, #97	; 0x61
 80139e8:	bf14      	ite	ne
 80139ea:	2358      	movne	r3, #88	; 0x58
 80139ec:	2378      	moveq	r3, #120	; 0x78
 80139ee:	2d63      	cmp	r5, #99	; 0x63
 80139f0:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80139f4:	f04a 0a02 	orr.w	sl, sl, #2
 80139f8:	f340 8108 	ble.w	8013c0c <_svfprintf_r+0x724>
 80139fc:	1c69      	adds	r1, r5, #1
 80139fe:	9803      	ldr	r0, [sp, #12]
 8013a00:	f7ff f80c 	bl	8012a1c <_malloc_r>
 8013a04:	4683      	mov	fp, r0
 8013a06:	2800      	cmp	r0, #0
 8013a08:	f040 8103 	bne.w	8013c12 <_svfprintf_r+0x72a>
 8013a0c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8013a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a14:	f8a8 300c 	strh.w	r3, [r8, #12]
 8013a18:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8013a1c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a22:	bf18      	it	ne
 8013a24:	f04f 33ff 	movne.w	r3, #4294967295
 8013a28:	e582      	b.n	8013530 <_svfprintf_r+0x48>
 8013a2a:	1c69      	adds	r1, r5, #1
 8013a2c:	f000 80f3 	beq.w	8013c16 <_svfprintf_r+0x72e>
 8013a30:	9b07      	ldr	r3, [sp, #28]
 8013a32:	2b47      	cmp	r3, #71	; 0x47
 8013a34:	d102      	bne.n	8013a3c <_svfprintf_r+0x554>
 8013a36:	2d00      	cmp	r5, #0
 8013a38:	f000 80ef 	beq.w	8013c1a <_svfprintf_r+0x732>
 8013a3c:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8013a40:	9310      	str	r3, [sp, #64]	; 0x40
 8013a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	f280 80eb 	bge.w	8013c20 <_svfprintf_r+0x738>
 8013a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a4c:	9314      	str	r3, [sp, #80]	; 0x50
 8013a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013a54:	9315      	str	r3, [sp, #84]	; 0x54
 8013a56:	232d      	movs	r3, #45	; 0x2d
 8013a58:	9313      	str	r3, [sp, #76]	; 0x4c
 8013a5a:	9b07      	ldr	r3, [sp, #28]
 8013a5c:	2b41      	cmp	r3, #65	; 0x41
 8013a5e:	f040 8105 	bne.w	8013c6c <_svfprintf_r+0x784>
 8013a62:	a820      	add	r0, sp, #128	; 0x80
 8013a64:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8013a68:	f002 fc16 	bl	8016298 <frexp>
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013a72:	ec51 0b10 	vmov	r0, r1, d0
 8013a76:	f7f3 fb39 	bl	80070ec <__aeabi_dmul>
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a82:	f7f3 fd9b 	bl	80075bc <__aeabi_dcmpeq>
 8013a86:	b108      	cbz	r0, 8013a8c <_svfprintf_r+0x5a4>
 8013a88:	2301      	movs	r3, #1
 8013a8a:	9320      	str	r3, [sp, #128]	; 0x80
 8013a8c:	4f6c      	ldr	r7, [pc, #432]	; (8013c40 <_svfprintf_r+0x758>)
 8013a8e:	4b6d      	ldr	r3, [pc, #436]	; (8013c44 <_svfprintf_r+0x75c>)
 8013a90:	9a06      	ldr	r2, [sp, #24]
 8013a92:	2a61      	cmp	r2, #97	; 0x61
 8013a94:	bf08      	it	eq
 8013a96:	461f      	moveq	r7, r3
 8013a98:	9711      	str	r7, [sp, #68]	; 0x44
 8013a9a:	465e      	mov	r6, fp
 8013a9c:	1e6f      	subs	r7, r5, #1
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	4b69      	ldr	r3, [pc, #420]	; (8013c48 <_svfprintf_r+0x760>)
 8013aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013aa6:	f7f3 fb21 	bl	80070ec <__aeabi_dmul>
 8013aaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013aae:	f7f3 fdcd 	bl	800764c <__aeabi_d2iz>
 8013ab2:	901c      	str	r0, [sp, #112]	; 0x70
 8013ab4:	f7f3 fab0 	bl	8007018 <__aeabi_i2d>
 8013ab8:	4602      	mov	r2, r0
 8013aba:	460b      	mov	r3, r1
 8013abc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ac0:	f7f3 f95c 	bl	8006d7c <__aeabi_dsub>
 8013ac4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013ac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ac8:	971d      	str	r7, [sp, #116]	; 0x74
 8013aca:	5c9b      	ldrb	r3, [r3, r2]
 8013acc:	f806 3b01 	strb.w	r3, [r6], #1
 8013ad0:	1c7a      	adds	r2, r7, #1
 8013ad2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ad6:	d006      	beq.n	8013ae6 <_svfprintf_r+0x5fe>
 8013ad8:	2200      	movs	r2, #0
 8013ada:	2300      	movs	r3, #0
 8013adc:	3f01      	subs	r7, #1
 8013ade:	f7f3 fd6d 	bl	80075bc <__aeabi_dcmpeq>
 8013ae2:	2800      	cmp	r0, #0
 8013ae4:	d0db      	beq.n	8013a9e <_svfprintf_r+0x5b6>
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	4b58      	ldr	r3, [pc, #352]	; (8013c4c <_svfprintf_r+0x764>)
 8013aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013aee:	f7f3 fd8d 	bl	800760c <__aeabi_dcmpgt>
 8013af2:	b960      	cbnz	r0, 8013b0e <_svfprintf_r+0x626>
 8013af4:	2200      	movs	r2, #0
 8013af6:	4b55      	ldr	r3, [pc, #340]	; (8013c4c <_svfprintf_r+0x764>)
 8013af8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013afc:	f7f3 fd5e 	bl	80075bc <__aeabi_dcmpeq>
 8013b00:	2800      	cmp	r0, #0
 8013b02:	f000 80ae 	beq.w	8013c62 <_svfprintf_r+0x77a>
 8013b06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013b08:	07db      	lsls	r3, r3, #31
 8013b0a:	f140 80aa 	bpl.w	8013c62 <_svfprintf_r+0x77a>
 8013b0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b10:	9624      	str	r6, [sp, #144]	; 0x90
 8013b12:	7bd9      	ldrb	r1, [r3, #15]
 8013b14:	2030      	movs	r0, #48	; 0x30
 8013b16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013b18:	1e53      	subs	r3, r2, #1
 8013b1a:	9324      	str	r3, [sp, #144]	; 0x90
 8013b1c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8013b20:	428b      	cmp	r3, r1
 8013b22:	f000 8095 	beq.w	8013c50 <_svfprintf_r+0x768>
 8013b26:	2b39      	cmp	r3, #57	; 0x39
 8013b28:	bf0b      	itete	eq
 8013b2a:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 8013b2c:	3301      	addne	r3, #1
 8013b2e:	7a9b      	ldrbeq	r3, [r3, #10]
 8013b30:	b2db      	uxtbne	r3, r3
 8013b32:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013b36:	4633      	mov	r3, r6
 8013b38:	eba3 030b 	sub.w	r3, r3, fp
 8013b3c:	9304      	str	r3, [sp, #16]
 8013b3e:	9b07      	ldr	r3, [sp, #28]
 8013b40:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013b42:	2b47      	cmp	r3, #71	; 0x47
 8013b44:	f040 80d7 	bne.w	8013cf6 <_svfprintf_r+0x80e>
 8013b48:	1cf7      	adds	r7, r6, #3
 8013b4a:	db02      	blt.n	8013b52 <_svfprintf_r+0x66a>
 8013b4c:	42b5      	cmp	r5, r6
 8013b4e:	f280 80fd 	bge.w	8013d4c <_svfprintf_r+0x864>
 8013b52:	9b06      	ldr	r3, [sp, #24]
 8013b54:	3b02      	subs	r3, #2
 8013b56:	9306      	str	r3, [sp, #24]
 8013b58:	9906      	ldr	r1, [sp, #24]
 8013b5a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8013b5e:	f021 0120 	bic.w	r1, r1, #32
 8013b62:	2941      	cmp	r1, #65	; 0x41
 8013b64:	bf08      	it	eq
 8013b66:	320f      	addeq	r2, #15
 8013b68:	f106 33ff 	add.w	r3, r6, #4294967295
 8013b6c:	bf06      	itte	eq
 8013b6e:	b2d2      	uxtbeq	r2, r2
 8013b70:	2101      	moveq	r1, #1
 8013b72:	2100      	movne	r1, #0
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	9320      	str	r3, [sp, #128]	; 0x80
 8013b78:	bfb8      	it	lt
 8013b7a:	f1c6 0301 	rsblt	r3, r6, #1
 8013b7e:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8013b82:	bfb4      	ite	lt
 8013b84:	222d      	movlt	r2, #45	; 0x2d
 8013b86:	222b      	movge	r2, #43	; 0x2b
 8013b88:	2b09      	cmp	r3, #9
 8013b8a:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8013b8e:	f340 80c9 	ble.w	8013d24 <_svfprintf_r+0x83c>
 8013b92:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8013b96:	250a      	movs	r5, #10
 8013b98:	fb93 f0f5 	sdiv	r0, r3, r5
 8013b9c:	fb05 3310 	mls	r3, r5, r0, r3
 8013ba0:	3330      	adds	r3, #48	; 0x30
 8013ba2:	2809      	cmp	r0, #9
 8013ba4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013ba8:	f102 31ff 	add.w	r1, r2, #4294967295
 8013bac:	4603      	mov	r3, r0
 8013bae:	f300 80b2 	bgt.w	8013d16 <_svfprintf_r+0x82e>
 8013bb2:	3330      	adds	r3, #48	; 0x30
 8013bb4:	f801 3c01 	strb.w	r3, [r1, #-1]
 8013bb8:	3a02      	subs	r2, #2
 8013bba:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8013bbe:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8013bc2:	4282      	cmp	r2, r0
 8013bc4:	4619      	mov	r1, r3
 8013bc6:	f0c0 80a8 	bcc.w	8013d1a <_svfprintf_r+0x832>
 8013bca:	9a04      	ldr	r2, [sp, #16]
 8013bcc:	ab22      	add	r3, sp, #136	; 0x88
 8013bce:	1acb      	subs	r3, r1, r3
 8013bd0:	2a01      	cmp	r2, #1
 8013bd2:	9317      	str	r3, [sp, #92]	; 0x5c
 8013bd4:	eb03 0502 	add.w	r5, r3, r2
 8013bd8:	dc02      	bgt.n	8013be0 <_svfprintf_r+0x6f8>
 8013bda:	f01a 0f01 	tst.w	sl, #1
 8013bde:	d001      	beq.n	8013be4 <_svfprintf_r+0x6fc>
 8013be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013be2:	441d      	add	r5, r3
 8013be4:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8013be8:	2700      	movs	r7, #0
 8013bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013bee:	9310      	str	r3, [sp, #64]	; 0x40
 8013bf0:	9707      	str	r7, [sp, #28]
 8013bf2:	463e      	mov	r6, r7
 8013bf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	f000 8315 	beq.w	8014226 <_svfprintf_r+0xd3e>
 8013bfc:	232d      	movs	r3, #45	; 0x2d
 8013bfe:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8013c02:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8013c06:	2300      	movs	r3, #0
 8013c08:	9310      	str	r3, [sp, #64]	; 0x40
 8013c0a:	e160      	b.n	8013ece <_svfprintf_r+0x9e6>
 8013c0c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8013c10:	e714      	b.n	8013a3c <_svfprintf_r+0x554>
 8013c12:	4681      	mov	r9, r0
 8013c14:	e712      	b.n	8013a3c <_svfprintf_r+0x554>
 8013c16:	2506      	movs	r5, #6
 8013c18:	e710      	b.n	8013a3c <_svfprintf_r+0x554>
 8013c1a:	46a9      	mov	r9, r5
 8013c1c:	2501      	movs	r5, #1
 8013c1e:	e70d      	b.n	8013a3c <_svfprintf_r+0x554>
 8013c20:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8013c24:	2300      	movs	r3, #0
 8013c26:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8013c2a:	e715      	b.n	8013a58 <_svfprintf_r+0x570>
 8013c2c:	7fefffff 	.word	0x7fefffff
 8013c30:	080184cc 	.word	0x080184cc
 8013c34:	080184c8 	.word	0x080184c8
 8013c38:	080184d4 	.word	0x080184d4
 8013c3c:	080184d0 	.word	0x080184d0
 8013c40:	080184e9 	.word	0x080184e9
 8013c44:	080184d8 	.word	0x080184d8
 8013c48:	40300000 	.word	0x40300000
 8013c4c:	3fe00000 	.word	0x3fe00000
 8013c50:	f802 0c01 	strb.w	r0, [r2, #-1]
 8013c54:	e75f      	b.n	8013b16 <_svfprintf_r+0x62e>
 8013c56:	f803 1b01 	strb.w	r1, [r3], #1
 8013c5a:	1af2      	subs	r2, r6, r3
 8013c5c:	2a00      	cmp	r2, #0
 8013c5e:	dafa      	bge.n	8013c56 <_svfprintf_r+0x76e>
 8013c60:	e76a      	b.n	8013b38 <_svfprintf_r+0x650>
 8013c62:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013c64:	4633      	mov	r3, r6
 8013c66:	2130      	movs	r1, #48	; 0x30
 8013c68:	4416      	add	r6, r2
 8013c6a:	e7f6      	b.n	8013c5a <_svfprintf_r+0x772>
 8013c6c:	9b07      	ldr	r3, [sp, #28]
 8013c6e:	2b46      	cmp	r3, #70	; 0x46
 8013c70:	d004      	beq.n	8013c7c <_svfprintf_r+0x794>
 8013c72:	2b45      	cmp	r3, #69	; 0x45
 8013c74:	d13a      	bne.n	8013cec <_svfprintf_r+0x804>
 8013c76:	1c6e      	adds	r6, r5, #1
 8013c78:	2102      	movs	r1, #2
 8013c7a:	e001      	b.n	8013c80 <_svfprintf_r+0x798>
 8013c7c:	462e      	mov	r6, r5
 8013c7e:	2103      	movs	r1, #3
 8013c80:	ab24      	add	r3, sp, #144	; 0x90
 8013c82:	9301      	str	r3, [sp, #4]
 8013c84:	ab21      	add	r3, sp, #132	; 0x84
 8013c86:	9300      	str	r3, [sp, #0]
 8013c88:	4632      	mov	r2, r6
 8013c8a:	ab20      	add	r3, sp, #128	; 0x80
 8013c8c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8013c90:	9803      	ldr	r0, [sp, #12]
 8013c92:	f000 fff1 	bl	8014c78 <_dtoa_r>
 8013c96:	9b07      	ldr	r3, [sp, #28]
 8013c98:	2b47      	cmp	r3, #71	; 0x47
 8013c9a:	4683      	mov	fp, r0
 8013c9c:	d102      	bne.n	8013ca4 <_svfprintf_r+0x7bc>
 8013c9e:	f01a 0f01 	tst.w	sl, #1
 8013ca2:	d026      	beq.n	8013cf2 <_svfprintf_r+0x80a>
 8013ca4:	9b07      	ldr	r3, [sp, #28]
 8013ca6:	2b46      	cmp	r3, #70	; 0x46
 8013ca8:	eb0b 0706 	add.w	r7, fp, r6
 8013cac:	d10f      	bne.n	8013cce <_svfprintf_r+0x7e6>
 8013cae:	f89b 3000 	ldrb.w	r3, [fp]
 8013cb2:	2b30      	cmp	r3, #48	; 0x30
 8013cb4:	d109      	bne.n	8013cca <_svfprintf_r+0x7e2>
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	2300      	movs	r3, #0
 8013cba:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8013cbe:	f7f3 fc7d 	bl	80075bc <__aeabi_dcmpeq>
 8013cc2:	b910      	cbnz	r0, 8013cca <_svfprintf_r+0x7e2>
 8013cc4:	f1c6 0601 	rsb	r6, r6, #1
 8013cc8:	9620      	str	r6, [sp, #128]	; 0x80
 8013cca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013ccc:	441f      	add	r7, r3
 8013cce:	2200      	movs	r2, #0
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8013cd6:	f7f3 fc71 	bl	80075bc <__aeabi_dcmpeq>
 8013cda:	b948      	cbnz	r0, 8013cf0 <_svfprintf_r+0x808>
 8013cdc:	2230      	movs	r2, #48	; 0x30
 8013cde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013ce0:	429f      	cmp	r7, r3
 8013ce2:	d906      	bls.n	8013cf2 <_svfprintf_r+0x80a>
 8013ce4:	1c59      	adds	r1, r3, #1
 8013ce6:	9124      	str	r1, [sp, #144]	; 0x90
 8013ce8:	701a      	strb	r2, [r3, #0]
 8013cea:	e7f8      	b.n	8013cde <_svfprintf_r+0x7f6>
 8013cec:	462e      	mov	r6, r5
 8013cee:	e7c3      	b.n	8013c78 <_svfprintf_r+0x790>
 8013cf0:	9724      	str	r7, [sp, #144]	; 0x90
 8013cf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013cf4:	e720      	b.n	8013b38 <_svfprintf_r+0x650>
 8013cf6:	9b07      	ldr	r3, [sp, #28]
 8013cf8:	2b46      	cmp	r3, #70	; 0x46
 8013cfa:	f47f af2d 	bne.w	8013b58 <_svfprintf_r+0x670>
 8013cfe:	2e00      	cmp	r6, #0
 8013d00:	dd1d      	ble.n	8013d3e <_svfprintf_r+0x856>
 8013d02:	b915      	cbnz	r5, 8013d0a <_svfprintf_r+0x822>
 8013d04:	f01a 0f01 	tst.w	sl, #1
 8013d08:	d034      	beq.n	8013d74 <_svfprintf_r+0x88c>
 8013d0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d0c:	18f3      	adds	r3, r6, r3
 8013d0e:	441d      	add	r5, r3
 8013d10:	2366      	movs	r3, #102	; 0x66
 8013d12:	9306      	str	r3, [sp, #24]
 8013d14:	e033      	b.n	8013d7e <_svfprintf_r+0x896>
 8013d16:	460a      	mov	r2, r1
 8013d18:	e73e      	b.n	8013b98 <_svfprintf_r+0x6b0>
 8013d1a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8013d22:	e74e      	b.n	8013bc2 <_svfprintf_r+0x6da>
 8013d24:	b941      	cbnz	r1, 8013d38 <_svfprintf_r+0x850>
 8013d26:	2230      	movs	r2, #48	; 0x30
 8013d28:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8013d2c:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8013d30:	3330      	adds	r3, #48	; 0x30
 8013d32:	1c51      	adds	r1, r2, #1
 8013d34:	7013      	strb	r3, [r2, #0]
 8013d36:	e748      	b.n	8013bca <_svfprintf_r+0x6e2>
 8013d38:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8013d3c:	e7f8      	b.n	8013d30 <_svfprintf_r+0x848>
 8013d3e:	b915      	cbnz	r5, 8013d46 <_svfprintf_r+0x85e>
 8013d40:	f01a 0f01 	tst.w	sl, #1
 8013d44:	d018      	beq.n	8013d78 <_svfprintf_r+0x890>
 8013d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d48:	3301      	adds	r3, #1
 8013d4a:	e7e0      	b.n	8013d0e <_svfprintf_r+0x826>
 8013d4c:	9b04      	ldr	r3, [sp, #16]
 8013d4e:	42b3      	cmp	r3, r6
 8013d50:	dc06      	bgt.n	8013d60 <_svfprintf_r+0x878>
 8013d52:	f01a 0f01 	tst.w	sl, #1
 8013d56:	d025      	beq.n	8013da4 <_svfprintf_r+0x8bc>
 8013d58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d5a:	18f5      	adds	r5, r6, r3
 8013d5c:	2367      	movs	r3, #103	; 0x67
 8013d5e:	e7d8      	b.n	8013d12 <_svfprintf_r+0x82a>
 8013d60:	9b04      	ldr	r3, [sp, #16]
 8013d62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013d64:	2e00      	cmp	r6, #0
 8013d66:	eb03 0502 	add.w	r5, r3, r2
 8013d6a:	dcf7      	bgt.n	8013d5c <_svfprintf_r+0x874>
 8013d6c:	f1c6 0301 	rsb	r3, r6, #1
 8013d70:	441d      	add	r5, r3
 8013d72:	e7f3      	b.n	8013d5c <_svfprintf_r+0x874>
 8013d74:	4635      	mov	r5, r6
 8013d76:	e7cb      	b.n	8013d10 <_svfprintf_r+0x828>
 8013d78:	2366      	movs	r3, #102	; 0x66
 8013d7a:	9306      	str	r3, [sp, #24]
 8013d7c:	2501      	movs	r5, #1
 8013d7e:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8013d82:	9307      	str	r3, [sp, #28]
 8013d84:	d01f      	beq.n	8013dc6 <_svfprintf_r+0x8de>
 8013d86:	2700      	movs	r7, #0
 8013d88:	2e00      	cmp	r6, #0
 8013d8a:	9707      	str	r7, [sp, #28]
 8013d8c:	f77f af32 	ble.w	8013bf4 <_svfprintf_r+0x70c>
 8013d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d92:	781b      	ldrb	r3, [r3, #0]
 8013d94:	2bff      	cmp	r3, #255	; 0xff
 8013d96:	d107      	bne.n	8013da8 <_svfprintf_r+0x8c0>
 8013d98:	9b07      	ldr	r3, [sp, #28]
 8013d9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d9c:	443b      	add	r3, r7
 8013d9e:	fb02 5503 	mla	r5, r2, r3, r5
 8013da2:	e727      	b.n	8013bf4 <_svfprintf_r+0x70c>
 8013da4:	4635      	mov	r5, r6
 8013da6:	e7d9      	b.n	8013d5c <_svfprintf_r+0x874>
 8013da8:	42b3      	cmp	r3, r6
 8013daa:	daf5      	bge.n	8013d98 <_svfprintf_r+0x8b0>
 8013dac:	1af6      	subs	r6, r6, r3
 8013dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013db0:	785b      	ldrb	r3, [r3, #1]
 8013db2:	b133      	cbz	r3, 8013dc2 <_svfprintf_r+0x8da>
 8013db4:	9b07      	ldr	r3, [sp, #28]
 8013db6:	3301      	adds	r3, #1
 8013db8:	9307      	str	r3, [sp, #28]
 8013dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dbc:	3301      	adds	r3, #1
 8013dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8013dc0:	e7e6      	b.n	8013d90 <_svfprintf_r+0x8a8>
 8013dc2:	3701      	adds	r7, #1
 8013dc4:	e7e4      	b.n	8013d90 <_svfprintf_r+0x8a8>
 8013dc6:	9f07      	ldr	r7, [sp, #28]
 8013dc8:	e714      	b.n	8013bf4 <_svfprintf_r+0x70c>
 8013dca:	4632      	mov	r2, r6
 8013dcc:	f01a 0f20 	tst.w	sl, #32
 8013dd0:	f852 3b04 	ldr.w	r3, [r2], #4
 8013dd4:	9208      	str	r2, [sp, #32]
 8013dd6:	d009      	beq.n	8013dec <_svfprintf_r+0x904>
 8013dd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013dda:	4610      	mov	r0, r2
 8013ddc:	17d1      	asrs	r1, r2, #31
 8013dde:	e9c3 0100 	strd	r0, r1, [r3]
 8013de2:	9e08      	ldr	r6, [sp, #32]
 8013de4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8013de8:	f7ff bbba 	b.w	8013560 <_svfprintf_r+0x78>
 8013dec:	f01a 0f10 	tst.w	sl, #16
 8013df0:	d002      	beq.n	8013df8 <_svfprintf_r+0x910>
 8013df2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013df4:	601a      	str	r2, [r3, #0]
 8013df6:	e7f4      	b.n	8013de2 <_svfprintf_r+0x8fa>
 8013df8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8013dfc:	d002      	beq.n	8013e04 <_svfprintf_r+0x91c>
 8013dfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013e00:	801a      	strh	r2, [r3, #0]
 8013e02:	e7ee      	b.n	8013de2 <_svfprintf_r+0x8fa>
 8013e04:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8013e08:	d0f3      	beq.n	8013df2 <_svfprintf_r+0x90a>
 8013e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013e0c:	701a      	strb	r2, [r3, #0]
 8013e0e:	e7e8      	b.n	8013de2 <_svfprintf_r+0x8fa>
 8013e10:	f04a 0a10 	orr.w	sl, sl, #16
 8013e14:	f01a 0f20 	tst.w	sl, #32
 8013e18:	d01e      	beq.n	8013e58 <_svfprintf_r+0x970>
 8013e1a:	3607      	adds	r6, #7
 8013e1c:	f026 0607 	bic.w	r6, r6, #7
 8013e20:	f106 0308 	add.w	r3, r6, #8
 8013e24:	e9d6 6700 	ldrd	r6, r7, [r6]
 8013e28:	9308      	str	r3, [sp, #32]
 8013e2a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8013e2e:	2300      	movs	r3, #0
 8013e30:	2200      	movs	r2, #0
 8013e32:	1c69      	adds	r1, r5, #1
 8013e34:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8013e38:	f000 815b 	beq.w	80140f2 <_svfprintf_r+0xc0a>
 8013e3c:	4652      	mov	r2, sl
 8013e3e:	ea56 0107 	orrs.w	r1, r6, r7
 8013e42:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8013e46:	f040 8154 	bne.w	80140f2 <_svfprintf_r+0xc0a>
 8013e4a:	2d00      	cmp	r5, #0
 8013e4c:	f000 81d5 	beq.w	80141fa <_svfprintf_r+0xd12>
 8013e50:	2b01      	cmp	r3, #1
 8013e52:	f040 8151 	bne.w	80140f8 <_svfprintf_r+0xc10>
 8013e56:	e558      	b.n	801390a <_svfprintf_r+0x422>
 8013e58:	1d33      	adds	r3, r6, #4
 8013e5a:	f01a 0f10 	tst.w	sl, #16
 8013e5e:	9308      	str	r3, [sp, #32]
 8013e60:	d001      	beq.n	8013e66 <_svfprintf_r+0x97e>
 8013e62:	6836      	ldr	r6, [r6, #0]
 8013e64:	e003      	b.n	8013e6e <_svfprintf_r+0x986>
 8013e66:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8013e6a:	d002      	beq.n	8013e72 <_svfprintf_r+0x98a>
 8013e6c:	8836      	ldrh	r6, [r6, #0]
 8013e6e:	2700      	movs	r7, #0
 8013e70:	e7db      	b.n	8013e2a <_svfprintf_r+0x942>
 8013e72:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8013e76:	d0f4      	beq.n	8013e62 <_svfprintf_r+0x97a>
 8013e78:	7836      	ldrb	r6, [r6, #0]
 8013e7a:	e7f8      	b.n	8013e6e <_svfprintf_r+0x986>
 8013e7c:	1d33      	adds	r3, r6, #4
 8013e7e:	9308      	str	r3, [sp, #32]
 8013e80:	f647 0330 	movw	r3, #30768	; 0x7830
 8013e84:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8013e88:	2278      	movs	r2, #120	; 0x78
 8013e8a:	4bb0      	ldr	r3, [pc, #704]	; (801414c <_svfprintf_r+0xc64>)
 8013e8c:	9318      	str	r3, [sp, #96]	; 0x60
 8013e8e:	6836      	ldr	r6, [r6, #0]
 8013e90:	9206      	str	r2, [sp, #24]
 8013e92:	2700      	movs	r7, #0
 8013e94:	f04a 0a02 	orr.w	sl, sl, #2
 8013e98:	2302      	movs	r3, #2
 8013e9a:	e7c9      	b.n	8013e30 <_svfprintf_r+0x948>
 8013e9c:	1d33      	adds	r3, r6, #4
 8013e9e:	f8d6 b000 	ldr.w	fp, [r6]
 8013ea2:	9308      	str	r3, [sp, #32]
 8013ea4:	2600      	movs	r6, #0
 8013ea6:	1c68      	adds	r0, r5, #1
 8013ea8:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 8013eac:	f000 80e1 	beq.w	8014072 <_svfprintf_r+0xb8a>
 8013eb0:	462a      	mov	r2, r5
 8013eb2:	4631      	mov	r1, r6
 8013eb4:	4658      	mov	r0, fp
 8013eb6:	f7f2 fefb 	bl	8006cb0 <memchr>
 8013eba:	4681      	mov	r9, r0
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	f43f ad74 	beq.w	80139aa <_svfprintf_r+0x4c2>
 8013ec2:	eba0 050b 	sub.w	r5, r0, fp
 8013ec6:	46b1      	mov	r9, r6
 8013ec8:	9610      	str	r6, [sp, #64]	; 0x40
 8013eca:	4637      	mov	r7, r6
 8013ecc:	9607      	str	r6, [sp, #28]
 8013ece:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013ed0:	42ab      	cmp	r3, r5
 8013ed2:	bfb8      	it	lt
 8013ed4:	462b      	movlt	r3, r5
 8013ed6:	9311      	str	r3, [sp, #68]	; 0x44
 8013ed8:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8013edc:	b113      	cbz	r3, 8013ee4 <_svfprintf_r+0x9fc>
 8013ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ee0:	3301      	adds	r3, #1
 8013ee2:	9311      	str	r3, [sp, #68]	; 0x44
 8013ee4:	f01a 0302 	ands.w	r3, sl, #2
 8013ee8:	931c      	str	r3, [sp, #112]	; 0x70
 8013eea:	bf1e      	ittt	ne
 8013eec:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8013eee:	3302      	addne	r3, #2
 8013ef0:	9311      	strne	r3, [sp, #68]	; 0x44
 8013ef2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8013ef6:	931d      	str	r3, [sp, #116]	; 0x74
 8013ef8:	d122      	bne.n	8013f40 <_svfprintf_r+0xa58>
 8013efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013efc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013efe:	1a9b      	subs	r3, r3, r2
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	9313      	str	r3, [sp, #76]	; 0x4c
 8013f04:	dd1c      	ble.n	8013f40 <_svfprintf_r+0xa58>
 8013f06:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013f08:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8013f0c:	2810      	cmp	r0, #16
 8013f0e:	4890      	ldr	r0, [pc, #576]	; (8014150 <_svfprintf_r+0xc68>)
 8013f10:	6020      	str	r0, [r4, #0]
 8013f12:	f102 0201 	add.w	r2, r2, #1
 8013f16:	f104 0108 	add.w	r1, r4, #8
 8013f1a:	f300 8188 	bgt.w	801422e <_svfprintf_r+0xd46>
 8013f1e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013f20:	6060      	str	r0, [r4, #4]
 8013f22:	4403      	add	r3, r0
 8013f24:	2a07      	cmp	r2, #7
 8013f26:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8013f2a:	f340 8195 	ble.w	8014258 <_svfprintf_r+0xd70>
 8013f2e:	aa26      	add	r2, sp, #152	; 0x98
 8013f30:	4641      	mov	r1, r8
 8013f32:	9803      	ldr	r0, [sp, #12]
 8013f34:	f002 f9fb 	bl	801632e <__ssprint_r>
 8013f38:	2800      	cmp	r0, #0
 8013f3a:	f040 84c1 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 8013f3e:	ac29      	add	r4, sp, #164	; 0xa4
 8013f40:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8013f44:	b173      	cbz	r3, 8013f64 <_svfprintf_r+0xa7c>
 8013f46:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8013f4a:	6023      	str	r3, [r4, #0]
 8013f4c:	2301      	movs	r3, #1
 8013f4e:	6063      	str	r3, [r4, #4]
 8013f50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013f52:	3301      	adds	r3, #1
 8013f54:	9328      	str	r3, [sp, #160]	; 0xa0
 8013f56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8013f58:	3301      	adds	r3, #1
 8013f5a:	2b07      	cmp	r3, #7
 8013f5c:	9327      	str	r3, [sp, #156]	; 0x9c
 8013f5e:	f300 817d 	bgt.w	801425c <_svfprintf_r+0xd74>
 8013f62:	3408      	adds	r4, #8
 8013f64:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013f66:	b16b      	cbz	r3, 8013f84 <_svfprintf_r+0xa9c>
 8013f68:	ab1f      	add	r3, sp, #124	; 0x7c
 8013f6a:	6023      	str	r3, [r4, #0]
 8013f6c:	2302      	movs	r3, #2
 8013f6e:	6063      	str	r3, [r4, #4]
 8013f70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013f72:	3302      	adds	r3, #2
 8013f74:	9328      	str	r3, [sp, #160]	; 0xa0
 8013f76:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8013f78:	3301      	adds	r3, #1
 8013f7a:	2b07      	cmp	r3, #7
 8013f7c:	9327      	str	r3, [sp, #156]	; 0x9c
 8013f7e:	f300 8177 	bgt.w	8014270 <_svfprintf_r+0xd88>
 8013f82:	3408      	adds	r4, #8
 8013f84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013f86:	2b80      	cmp	r3, #128	; 0x80
 8013f88:	d122      	bne.n	8013fd0 <_svfprintf_r+0xae8>
 8013f8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013f8e:	1a9b      	subs	r3, r3, r2
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	9313      	str	r3, [sp, #76]	; 0x4c
 8013f94:	dd1c      	ble.n	8013fd0 <_svfprintf_r+0xae8>
 8013f96:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013f98:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8013f9c:	2810      	cmp	r0, #16
 8013f9e:	486d      	ldr	r0, [pc, #436]	; (8014154 <_svfprintf_r+0xc6c>)
 8013fa0:	6020      	str	r0, [r4, #0]
 8013fa2:	f102 0201 	add.w	r2, r2, #1
 8013fa6:	f104 0108 	add.w	r1, r4, #8
 8013faa:	f300 816b 	bgt.w	8014284 <_svfprintf_r+0xd9c>
 8013fae:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013fb0:	6060      	str	r0, [r4, #4]
 8013fb2:	4403      	add	r3, r0
 8013fb4:	2a07      	cmp	r2, #7
 8013fb6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8013fba:	f340 8178 	ble.w	80142ae <_svfprintf_r+0xdc6>
 8013fbe:	aa26      	add	r2, sp, #152	; 0x98
 8013fc0:	4641      	mov	r1, r8
 8013fc2:	9803      	ldr	r0, [sp, #12]
 8013fc4:	f002 f9b3 	bl	801632e <__ssprint_r>
 8013fc8:	2800      	cmp	r0, #0
 8013fca:	f040 8479 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 8013fce:	ac29      	add	r4, sp, #164	; 0xa4
 8013fd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013fd2:	1b5b      	subs	r3, r3, r5
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	9310      	str	r3, [sp, #64]	; 0x40
 8013fd8:	dd1c      	ble.n	8014014 <_svfprintf_r+0xb2c>
 8013fda:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013fdc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8013fe0:	2810      	cmp	r0, #16
 8013fe2:	485c      	ldr	r0, [pc, #368]	; (8014154 <_svfprintf_r+0xc6c>)
 8013fe4:	6020      	str	r0, [r4, #0]
 8013fe6:	f102 0201 	add.w	r2, r2, #1
 8013fea:	f104 0108 	add.w	r1, r4, #8
 8013fee:	f300 8160 	bgt.w	80142b2 <_svfprintf_r+0xdca>
 8013ff2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013ff4:	6060      	str	r0, [r4, #4]
 8013ff6:	4403      	add	r3, r0
 8013ff8:	2a07      	cmp	r2, #7
 8013ffa:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8013ffe:	f340 816d 	ble.w	80142dc <_svfprintf_r+0xdf4>
 8014002:	aa26      	add	r2, sp, #152	; 0x98
 8014004:	4641      	mov	r1, r8
 8014006:	9803      	ldr	r0, [sp, #12]
 8014008:	f002 f991 	bl	801632e <__ssprint_r>
 801400c:	2800      	cmp	r0, #0
 801400e:	f040 8457 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 8014012:	ac29      	add	r4, sp, #164	; 0xa4
 8014014:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014016:	9310      	str	r3, [sp, #64]	; 0x40
 8014018:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801401c:	f040 8160 	bne.w	80142e0 <_svfprintf_r+0xdf8>
 8014020:	e9c4 b500 	strd	fp, r5, [r4]
 8014024:	441d      	add	r5, r3
 8014026:	9528      	str	r5, [sp, #160]	; 0xa0
 8014028:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801402a:	3301      	adds	r3, #1
 801402c:	2b07      	cmp	r3, #7
 801402e:	9327      	str	r3, [sp, #156]	; 0x9c
 8014030:	f300 819c 	bgt.w	801436c <_svfprintf_r+0xe84>
 8014034:	3408      	adds	r4, #8
 8014036:	f01a 0f04 	tst.w	sl, #4
 801403a:	f040 8423 	bne.w	8014884 <_svfprintf_r+0x139c>
 801403e:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8014042:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014044:	428a      	cmp	r2, r1
 8014046:	bfac      	ite	ge
 8014048:	189b      	addge	r3, r3, r2
 801404a:	185b      	addlt	r3, r3, r1
 801404c:	930e      	str	r3, [sp, #56]	; 0x38
 801404e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014050:	b13b      	cbz	r3, 8014062 <_svfprintf_r+0xb7a>
 8014052:	aa26      	add	r2, sp, #152	; 0x98
 8014054:	4641      	mov	r1, r8
 8014056:	9803      	ldr	r0, [sp, #12]
 8014058:	f002 f969 	bl	801632e <__ssprint_r>
 801405c:	2800      	cmp	r0, #0
 801405e:	f040 842f 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 8014062:	2300      	movs	r3, #0
 8014064:	9327      	str	r3, [sp, #156]	; 0x9c
 8014066:	f1b9 0f00 	cmp.w	r9, #0
 801406a:	f040 8445 	bne.w	80148f8 <_svfprintf_r+0x1410>
 801406e:	ac29      	add	r4, sp, #164	; 0xa4
 8014070:	e6b7      	b.n	8013de2 <_svfprintf_r+0x8fa>
 8014072:	4658      	mov	r0, fp
 8014074:	f7f2 fe76 	bl	8006d64 <strlen>
 8014078:	46b1      	mov	r9, r6
 801407a:	4605      	mov	r5, r0
 801407c:	e495      	b.n	80139aa <_svfprintf_r+0x4c2>
 801407e:	f04a 0a10 	orr.w	sl, sl, #16
 8014082:	f01a 0f20 	tst.w	sl, #32
 8014086:	d009      	beq.n	801409c <_svfprintf_r+0xbb4>
 8014088:	3607      	adds	r6, #7
 801408a:	f026 0607 	bic.w	r6, r6, #7
 801408e:	f106 0308 	add.w	r3, r6, #8
 8014092:	e9d6 6700 	ldrd	r6, r7, [r6]
 8014096:	9308      	str	r3, [sp, #32]
 8014098:	2301      	movs	r3, #1
 801409a:	e6c9      	b.n	8013e30 <_svfprintf_r+0x948>
 801409c:	1d33      	adds	r3, r6, #4
 801409e:	f01a 0f10 	tst.w	sl, #16
 80140a2:	9308      	str	r3, [sp, #32]
 80140a4:	d001      	beq.n	80140aa <_svfprintf_r+0xbc2>
 80140a6:	6836      	ldr	r6, [r6, #0]
 80140a8:	e003      	b.n	80140b2 <_svfprintf_r+0xbca>
 80140aa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80140ae:	d002      	beq.n	80140b6 <_svfprintf_r+0xbce>
 80140b0:	8836      	ldrh	r6, [r6, #0]
 80140b2:	2700      	movs	r7, #0
 80140b4:	e7f0      	b.n	8014098 <_svfprintf_r+0xbb0>
 80140b6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80140ba:	d0f4      	beq.n	80140a6 <_svfprintf_r+0xbbe>
 80140bc:	7836      	ldrb	r6, [r6, #0]
 80140be:	e7f8      	b.n	80140b2 <_svfprintf_r+0xbca>
 80140c0:	4b22      	ldr	r3, [pc, #136]	; (801414c <_svfprintf_r+0xc64>)
 80140c2:	f7ff bb48 	b.w	8013756 <_svfprintf_r+0x26e>
 80140c6:	1d33      	adds	r3, r6, #4
 80140c8:	f01a 0f10 	tst.w	sl, #16
 80140cc:	9308      	str	r3, [sp, #32]
 80140ce:	d001      	beq.n	80140d4 <_svfprintf_r+0xbec>
 80140d0:	6836      	ldr	r6, [r6, #0]
 80140d2:	e003      	b.n	80140dc <_svfprintf_r+0xbf4>
 80140d4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80140d8:	d003      	beq.n	80140e2 <_svfprintf_r+0xbfa>
 80140da:	8836      	ldrh	r6, [r6, #0]
 80140dc:	2700      	movs	r7, #0
 80140de:	f7ff bb47 	b.w	8013770 <_svfprintf_r+0x288>
 80140e2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80140e6:	d0f3      	beq.n	80140d0 <_svfprintf_r+0xbe8>
 80140e8:	7836      	ldrb	r6, [r6, #0]
 80140ea:	e7f7      	b.n	80140dc <_svfprintf_r+0xbf4>
 80140ec:	4652      	mov	r2, sl
 80140ee:	2301      	movs	r3, #1
 80140f0:	e6a5      	b.n	8013e3e <_svfprintf_r+0x956>
 80140f2:	2b01      	cmp	r3, #1
 80140f4:	f43f ac04 	beq.w	8013900 <_svfprintf_r+0x418>
 80140f8:	2b02      	cmp	r3, #2
 80140fa:	d06c      	beq.n	80141d6 <_svfprintf_r+0xcee>
 80140fc:	ab52      	add	r3, sp, #328	; 0x148
 80140fe:	08f1      	lsrs	r1, r6, #3
 8014100:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8014104:	08f8      	lsrs	r0, r7, #3
 8014106:	f006 0207 	and.w	r2, r6, #7
 801410a:	4607      	mov	r7, r0
 801410c:	460e      	mov	r6, r1
 801410e:	3230      	adds	r2, #48	; 0x30
 8014110:	ea56 0107 	orrs.w	r1, r6, r7
 8014114:	f103 3bff 	add.w	fp, r3, #4294967295
 8014118:	f803 2c01 	strb.w	r2, [r3, #-1]
 801411c:	d114      	bne.n	8014148 <_svfprintf_r+0xc60>
 801411e:	f01a 0f01 	tst.w	sl, #1
 8014122:	d006      	beq.n	8014132 <_svfprintf_r+0xc4a>
 8014124:	2a30      	cmp	r2, #48	; 0x30
 8014126:	d004      	beq.n	8014132 <_svfprintf_r+0xc4a>
 8014128:	2230      	movs	r2, #48	; 0x30
 801412a:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801412e:	f1a3 0b02 	sub.w	fp, r3, #2
 8014132:	ab52      	add	r3, sp, #328	; 0x148
 8014134:	9510      	str	r5, [sp, #64]	; 0x40
 8014136:	f04f 0900 	mov.w	r9, #0
 801413a:	eba3 050b 	sub.w	r5, r3, fp
 801413e:	464f      	mov	r7, r9
 8014140:	f8cd 901c 	str.w	r9, [sp, #28]
 8014144:	464e      	mov	r6, r9
 8014146:	e6c2      	b.n	8013ece <_svfprintf_r+0x9e6>
 8014148:	465b      	mov	r3, fp
 801414a:	e7d8      	b.n	80140fe <_svfprintf_r+0xc16>
 801414c:	080184d8 	.word	0x080184d8
 8014150:	080184fc 	.word	0x080184fc
 8014154:	0801850c 	.word	0x0801850c
 8014158:	2300      	movs	r3, #0
 801415a:	9304      	str	r3, [sp, #16]
 801415c:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8014160:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8014164:	9307      	str	r3, [sp, #28]
 8014166:	220a      	movs	r2, #10
 8014168:	2300      	movs	r3, #0
 801416a:	4630      	mov	r0, r6
 801416c:	4639      	mov	r1, r7
 801416e:	f7f3 fa95 	bl	800769c <__aeabi_uldivmod>
 8014172:	9b04      	ldr	r3, [sp, #16]
 8014174:	3301      	adds	r3, #1
 8014176:	9304      	str	r3, [sp, #16]
 8014178:	9b07      	ldr	r3, [sp, #28]
 801417a:	3230      	adds	r2, #48	; 0x30
 801417c:	f109 3bff 	add.w	fp, r9, #4294967295
 8014180:	f809 2c01 	strb.w	r2, [r9, #-1]
 8014184:	b1d3      	cbz	r3, 80141bc <_svfprintf_r+0xcd4>
 8014186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014188:	9a04      	ldr	r2, [sp, #16]
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	429a      	cmp	r2, r3
 801418e:	d115      	bne.n	80141bc <_svfprintf_r+0xcd4>
 8014190:	2aff      	cmp	r2, #255	; 0xff
 8014192:	d013      	beq.n	80141bc <_svfprintf_r+0xcd4>
 8014194:	2f00      	cmp	r7, #0
 8014196:	bf08      	it	eq
 8014198:	2e0a      	cmpeq	r6, #10
 801419a:	d30f      	bcc.n	80141bc <_svfprintf_r+0xcd4>
 801419c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801419e:	9919      	ldr	r1, [sp, #100]	; 0x64
 80141a0:	ebab 0b03 	sub.w	fp, fp, r3
 80141a4:	461a      	mov	r2, r3
 80141a6:	4658      	mov	r0, fp
 80141a8:	f002 f8ac 	bl	8016304 <strncpy>
 80141ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141ae:	785b      	ldrb	r3, [r3, #1]
 80141b0:	b11b      	cbz	r3, 80141ba <_svfprintf_r+0xcd2>
 80141b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141b4:	3301      	adds	r3, #1
 80141b6:	9309      	str	r3, [sp, #36]	; 0x24
 80141b8:	2300      	movs	r3, #0
 80141ba:	9304      	str	r3, [sp, #16]
 80141bc:	2300      	movs	r3, #0
 80141be:	4630      	mov	r0, r6
 80141c0:	4639      	mov	r1, r7
 80141c2:	220a      	movs	r2, #10
 80141c4:	f7f3 fa6a 	bl	800769c <__aeabi_uldivmod>
 80141c8:	4606      	mov	r6, r0
 80141ca:	460f      	mov	r7, r1
 80141cc:	ea56 0307 	orrs.w	r3, r6, r7
 80141d0:	d0af      	beq.n	8014132 <_svfprintf_r+0xc4a>
 80141d2:	46d9      	mov	r9, fp
 80141d4:	e7c7      	b.n	8014166 <_svfprintf_r+0xc7e>
 80141d6:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 80141da:	f006 030f 	and.w	r3, r6, #15
 80141de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80141e0:	5cd3      	ldrb	r3, [r2, r3]
 80141e2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80141e6:	0933      	lsrs	r3, r6, #4
 80141e8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80141ec:	093a      	lsrs	r2, r7, #4
 80141ee:	461e      	mov	r6, r3
 80141f0:	4617      	mov	r7, r2
 80141f2:	ea56 0307 	orrs.w	r3, r6, r7
 80141f6:	d1f0      	bne.n	80141da <_svfprintf_r+0xcf2>
 80141f8:	e79b      	b.n	8014132 <_svfprintf_r+0xc4a>
 80141fa:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d197      	bne.n	8014132 <_svfprintf_r+0xc4a>
 8014202:	07d2      	lsls	r2, r2, #31
 8014204:	bf44      	itt	mi
 8014206:	2330      	movmi	r3, #48	; 0x30
 8014208:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 801420c:	e791      	b.n	8014132 <_svfprintf_r+0xc4a>
 801420e:	9b06      	ldr	r3, [sp, #24]
 8014210:	2b00      	cmp	r3, #0
 8014212:	f000 8377 	beq.w	8014904 <_svfprintf_r+0x141c>
 8014216:	2000      	movs	r0, #0
 8014218:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801421c:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8014220:	9608      	str	r6, [sp, #32]
 8014222:	f7ff bb49 	b.w	80138b8 <_svfprintf_r+0x3d0>
 8014226:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 801422a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801422c:	e4ec      	b.n	8013c08 <_svfprintf_r+0x720>
 801422e:	2010      	movs	r0, #16
 8014230:	4403      	add	r3, r0
 8014232:	2a07      	cmp	r2, #7
 8014234:	6060      	str	r0, [r4, #4]
 8014236:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801423a:	dd08      	ble.n	801424e <_svfprintf_r+0xd66>
 801423c:	aa26      	add	r2, sp, #152	; 0x98
 801423e:	4641      	mov	r1, r8
 8014240:	9803      	ldr	r0, [sp, #12]
 8014242:	f002 f874 	bl	801632e <__ssprint_r>
 8014246:	2800      	cmp	r0, #0
 8014248:	f040 833a 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 801424c:	a929      	add	r1, sp, #164	; 0xa4
 801424e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014250:	3b10      	subs	r3, #16
 8014252:	9313      	str	r3, [sp, #76]	; 0x4c
 8014254:	460c      	mov	r4, r1
 8014256:	e656      	b.n	8013f06 <_svfprintf_r+0xa1e>
 8014258:	460c      	mov	r4, r1
 801425a:	e671      	b.n	8013f40 <_svfprintf_r+0xa58>
 801425c:	aa26      	add	r2, sp, #152	; 0x98
 801425e:	4641      	mov	r1, r8
 8014260:	9803      	ldr	r0, [sp, #12]
 8014262:	f002 f864 	bl	801632e <__ssprint_r>
 8014266:	2800      	cmp	r0, #0
 8014268:	f040 832a 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 801426c:	ac29      	add	r4, sp, #164	; 0xa4
 801426e:	e679      	b.n	8013f64 <_svfprintf_r+0xa7c>
 8014270:	aa26      	add	r2, sp, #152	; 0x98
 8014272:	4641      	mov	r1, r8
 8014274:	9803      	ldr	r0, [sp, #12]
 8014276:	f002 f85a 	bl	801632e <__ssprint_r>
 801427a:	2800      	cmp	r0, #0
 801427c:	f040 8320 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 8014280:	ac29      	add	r4, sp, #164	; 0xa4
 8014282:	e67f      	b.n	8013f84 <_svfprintf_r+0xa9c>
 8014284:	2010      	movs	r0, #16
 8014286:	4403      	add	r3, r0
 8014288:	2a07      	cmp	r2, #7
 801428a:	6060      	str	r0, [r4, #4]
 801428c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8014290:	dd08      	ble.n	80142a4 <_svfprintf_r+0xdbc>
 8014292:	aa26      	add	r2, sp, #152	; 0x98
 8014294:	4641      	mov	r1, r8
 8014296:	9803      	ldr	r0, [sp, #12]
 8014298:	f002 f849 	bl	801632e <__ssprint_r>
 801429c:	2800      	cmp	r0, #0
 801429e:	f040 830f 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 80142a2:	a929      	add	r1, sp, #164	; 0xa4
 80142a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80142a6:	3b10      	subs	r3, #16
 80142a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80142aa:	460c      	mov	r4, r1
 80142ac:	e673      	b.n	8013f96 <_svfprintf_r+0xaae>
 80142ae:	460c      	mov	r4, r1
 80142b0:	e68e      	b.n	8013fd0 <_svfprintf_r+0xae8>
 80142b2:	2010      	movs	r0, #16
 80142b4:	4403      	add	r3, r0
 80142b6:	2a07      	cmp	r2, #7
 80142b8:	6060      	str	r0, [r4, #4]
 80142ba:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80142be:	dd08      	ble.n	80142d2 <_svfprintf_r+0xdea>
 80142c0:	aa26      	add	r2, sp, #152	; 0x98
 80142c2:	4641      	mov	r1, r8
 80142c4:	9803      	ldr	r0, [sp, #12]
 80142c6:	f002 f832 	bl	801632e <__ssprint_r>
 80142ca:	2800      	cmp	r0, #0
 80142cc:	f040 82f8 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 80142d0:	a929      	add	r1, sp, #164	; 0xa4
 80142d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80142d4:	3b10      	subs	r3, #16
 80142d6:	9310      	str	r3, [sp, #64]	; 0x40
 80142d8:	460c      	mov	r4, r1
 80142da:	e67e      	b.n	8013fda <_svfprintf_r+0xaf2>
 80142dc:	460c      	mov	r4, r1
 80142de:	e699      	b.n	8014014 <_svfprintf_r+0xb2c>
 80142e0:	9b06      	ldr	r3, [sp, #24]
 80142e2:	2b65      	cmp	r3, #101	; 0x65
 80142e4:	f340 8234 	ble.w	8014750 <_svfprintf_r+0x1268>
 80142e8:	2200      	movs	r2, #0
 80142ea:	2300      	movs	r3, #0
 80142ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80142f0:	f7f3 f964 	bl	80075bc <__aeabi_dcmpeq>
 80142f4:	2800      	cmp	r0, #0
 80142f6:	d069      	beq.n	80143cc <_svfprintf_r+0xee4>
 80142f8:	4b6e      	ldr	r3, [pc, #440]	; (80144b4 <_svfprintf_r+0xfcc>)
 80142fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80142fc:	6023      	str	r3, [r4, #0]
 80142fe:	2301      	movs	r3, #1
 8014300:	441d      	add	r5, r3
 8014302:	6063      	str	r3, [r4, #4]
 8014304:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014306:	9528      	str	r5, [sp, #160]	; 0xa0
 8014308:	3301      	adds	r3, #1
 801430a:	2b07      	cmp	r3, #7
 801430c:	9327      	str	r3, [sp, #156]	; 0x9c
 801430e:	dc37      	bgt.n	8014380 <_svfprintf_r+0xe98>
 8014310:	3408      	adds	r4, #8
 8014312:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014314:	9a04      	ldr	r2, [sp, #16]
 8014316:	4293      	cmp	r3, r2
 8014318:	db03      	blt.n	8014322 <_svfprintf_r+0xe3a>
 801431a:	f01a 0f01 	tst.w	sl, #1
 801431e:	f43f ae8a 	beq.w	8014036 <_svfprintf_r+0xb4e>
 8014322:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014324:	6023      	str	r3, [r4, #0]
 8014326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014328:	6063      	str	r3, [r4, #4]
 801432a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801432c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801432e:	4413      	add	r3, r2
 8014330:	9328      	str	r3, [sp, #160]	; 0xa0
 8014332:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014334:	3301      	adds	r3, #1
 8014336:	2b07      	cmp	r3, #7
 8014338:	9327      	str	r3, [sp, #156]	; 0x9c
 801433a:	dc2b      	bgt.n	8014394 <_svfprintf_r+0xeac>
 801433c:	3408      	adds	r4, #8
 801433e:	9b04      	ldr	r3, [sp, #16]
 8014340:	1e5d      	subs	r5, r3, #1
 8014342:	2d00      	cmp	r5, #0
 8014344:	f77f ae77 	ble.w	8014036 <_svfprintf_r+0xb4e>
 8014348:	4e5b      	ldr	r6, [pc, #364]	; (80144b8 <_svfprintf_r+0xfd0>)
 801434a:	2710      	movs	r7, #16
 801434c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8014350:	2d10      	cmp	r5, #16
 8014352:	f103 0301 	add.w	r3, r3, #1
 8014356:	f104 0108 	add.w	r1, r4, #8
 801435a:	6026      	str	r6, [r4, #0]
 801435c:	dc24      	bgt.n	80143a8 <_svfprintf_r+0xec0>
 801435e:	6065      	str	r5, [r4, #4]
 8014360:	2b07      	cmp	r3, #7
 8014362:	4415      	add	r5, r2
 8014364:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8014368:	f340 8289 	ble.w	801487e <_svfprintf_r+0x1396>
 801436c:	aa26      	add	r2, sp, #152	; 0x98
 801436e:	4641      	mov	r1, r8
 8014370:	9803      	ldr	r0, [sp, #12]
 8014372:	f001 ffdc 	bl	801632e <__ssprint_r>
 8014376:	2800      	cmp	r0, #0
 8014378:	f040 82a2 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 801437c:	ac29      	add	r4, sp, #164	; 0xa4
 801437e:	e65a      	b.n	8014036 <_svfprintf_r+0xb4e>
 8014380:	aa26      	add	r2, sp, #152	; 0x98
 8014382:	4641      	mov	r1, r8
 8014384:	9803      	ldr	r0, [sp, #12]
 8014386:	f001 ffd2 	bl	801632e <__ssprint_r>
 801438a:	2800      	cmp	r0, #0
 801438c:	f040 8298 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 8014390:	ac29      	add	r4, sp, #164	; 0xa4
 8014392:	e7be      	b.n	8014312 <_svfprintf_r+0xe2a>
 8014394:	aa26      	add	r2, sp, #152	; 0x98
 8014396:	4641      	mov	r1, r8
 8014398:	9803      	ldr	r0, [sp, #12]
 801439a:	f001 ffc8 	bl	801632e <__ssprint_r>
 801439e:	2800      	cmp	r0, #0
 80143a0:	f040 828e 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 80143a4:	ac29      	add	r4, sp, #164	; 0xa4
 80143a6:	e7ca      	b.n	801433e <_svfprintf_r+0xe56>
 80143a8:	3210      	adds	r2, #16
 80143aa:	2b07      	cmp	r3, #7
 80143ac:	6067      	str	r7, [r4, #4]
 80143ae:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80143b2:	dd08      	ble.n	80143c6 <_svfprintf_r+0xede>
 80143b4:	aa26      	add	r2, sp, #152	; 0x98
 80143b6:	4641      	mov	r1, r8
 80143b8:	9803      	ldr	r0, [sp, #12]
 80143ba:	f001 ffb8 	bl	801632e <__ssprint_r>
 80143be:	2800      	cmp	r0, #0
 80143c0:	f040 827e 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 80143c4:	a929      	add	r1, sp, #164	; 0xa4
 80143c6:	3d10      	subs	r5, #16
 80143c8:	460c      	mov	r4, r1
 80143ca:	e7bf      	b.n	801434c <_svfprintf_r+0xe64>
 80143cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	dc74      	bgt.n	80144bc <_svfprintf_r+0xfd4>
 80143d2:	4b38      	ldr	r3, [pc, #224]	; (80144b4 <_svfprintf_r+0xfcc>)
 80143d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80143d6:	6023      	str	r3, [r4, #0]
 80143d8:	2301      	movs	r3, #1
 80143da:	441d      	add	r5, r3
 80143dc:	6063      	str	r3, [r4, #4]
 80143de:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80143e0:	9528      	str	r5, [sp, #160]	; 0xa0
 80143e2:	3301      	adds	r3, #1
 80143e4:	2b07      	cmp	r3, #7
 80143e6:	9327      	str	r3, [sp, #156]	; 0x9c
 80143e8:	dc3e      	bgt.n	8014468 <_svfprintf_r+0xf80>
 80143ea:	3408      	adds	r4, #8
 80143ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80143ee:	b92b      	cbnz	r3, 80143fc <_svfprintf_r+0xf14>
 80143f0:	9b04      	ldr	r3, [sp, #16]
 80143f2:	b91b      	cbnz	r3, 80143fc <_svfprintf_r+0xf14>
 80143f4:	f01a 0f01 	tst.w	sl, #1
 80143f8:	f43f ae1d 	beq.w	8014036 <_svfprintf_r+0xb4e>
 80143fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80143fe:	6023      	str	r3, [r4, #0]
 8014400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014402:	6063      	str	r3, [r4, #4]
 8014404:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014406:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014408:	4413      	add	r3, r2
 801440a:	9328      	str	r3, [sp, #160]	; 0xa0
 801440c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801440e:	3301      	adds	r3, #1
 8014410:	2b07      	cmp	r3, #7
 8014412:	9327      	str	r3, [sp, #156]	; 0x9c
 8014414:	dc32      	bgt.n	801447c <_svfprintf_r+0xf94>
 8014416:	3408      	adds	r4, #8
 8014418:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801441a:	2d00      	cmp	r5, #0
 801441c:	da1b      	bge.n	8014456 <_svfprintf_r+0xf6e>
 801441e:	4e26      	ldr	r6, [pc, #152]	; (80144b8 <_svfprintf_r+0xfd0>)
 8014420:	426d      	negs	r5, r5
 8014422:	4623      	mov	r3, r4
 8014424:	2710      	movs	r7, #16
 8014426:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 801442a:	2d10      	cmp	r5, #16
 801442c:	f102 0201 	add.w	r2, r2, #1
 8014430:	f104 0408 	add.w	r4, r4, #8
 8014434:	601e      	str	r6, [r3, #0]
 8014436:	dc2b      	bgt.n	8014490 <_svfprintf_r+0xfa8>
 8014438:	605d      	str	r5, [r3, #4]
 801443a:	2a07      	cmp	r2, #7
 801443c:	440d      	add	r5, r1
 801443e:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8014442:	dd08      	ble.n	8014456 <_svfprintf_r+0xf6e>
 8014444:	aa26      	add	r2, sp, #152	; 0x98
 8014446:	4641      	mov	r1, r8
 8014448:	9803      	ldr	r0, [sp, #12]
 801444a:	f001 ff70 	bl	801632e <__ssprint_r>
 801444e:	2800      	cmp	r0, #0
 8014450:	f040 8236 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 8014454:	ac29      	add	r4, sp, #164	; 0xa4
 8014456:	9b04      	ldr	r3, [sp, #16]
 8014458:	6063      	str	r3, [r4, #4]
 801445a:	9a04      	ldr	r2, [sp, #16]
 801445c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801445e:	f8c4 b000 	str.w	fp, [r4]
 8014462:	4413      	add	r3, r2
 8014464:	9328      	str	r3, [sp, #160]	; 0xa0
 8014466:	e5df      	b.n	8014028 <_svfprintf_r+0xb40>
 8014468:	aa26      	add	r2, sp, #152	; 0x98
 801446a:	4641      	mov	r1, r8
 801446c:	9803      	ldr	r0, [sp, #12]
 801446e:	f001 ff5e 	bl	801632e <__ssprint_r>
 8014472:	2800      	cmp	r0, #0
 8014474:	f040 8224 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 8014478:	ac29      	add	r4, sp, #164	; 0xa4
 801447a:	e7b7      	b.n	80143ec <_svfprintf_r+0xf04>
 801447c:	aa26      	add	r2, sp, #152	; 0x98
 801447e:	4641      	mov	r1, r8
 8014480:	9803      	ldr	r0, [sp, #12]
 8014482:	f001 ff54 	bl	801632e <__ssprint_r>
 8014486:	2800      	cmp	r0, #0
 8014488:	f040 821a 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 801448c:	ac29      	add	r4, sp, #164	; 0xa4
 801448e:	e7c3      	b.n	8014418 <_svfprintf_r+0xf30>
 8014490:	3110      	adds	r1, #16
 8014492:	2a07      	cmp	r2, #7
 8014494:	605f      	str	r7, [r3, #4]
 8014496:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 801449a:	dd08      	ble.n	80144ae <_svfprintf_r+0xfc6>
 801449c:	aa26      	add	r2, sp, #152	; 0x98
 801449e:	4641      	mov	r1, r8
 80144a0:	9803      	ldr	r0, [sp, #12]
 80144a2:	f001 ff44 	bl	801632e <__ssprint_r>
 80144a6:	2800      	cmp	r0, #0
 80144a8:	f040 820a 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 80144ac:	ac29      	add	r4, sp, #164	; 0xa4
 80144ae:	3d10      	subs	r5, #16
 80144b0:	4623      	mov	r3, r4
 80144b2:	e7b8      	b.n	8014426 <_svfprintf_r+0xf3e>
 80144b4:	080184fa 	.word	0x080184fa
 80144b8:	0801850c 	.word	0x0801850c
 80144bc:	9b04      	ldr	r3, [sp, #16]
 80144be:	42b3      	cmp	r3, r6
 80144c0:	bfa8      	it	ge
 80144c2:	4633      	movge	r3, r6
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	461d      	mov	r5, r3
 80144c8:	dd0b      	ble.n	80144e2 <_svfprintf_r+0xffa>
 80144ca:	e9c4 b300 	strd	fp, r3, [r4]
 80144ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80144d0:	442b      	add	r3, r5
 80144d2:	9328      	str	r3, [sp, #160]	; 0xa0
 80144d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80144d6:	3301      	adds	r3, #1
 80144d8:	2b07      	cmp	r3, #7
 80144da:	9327      	str	r3, [sp, #156]	; 0x9c
 80144dc:	f300 8086 	bgt.w	80145ec <_svfprintf_r+0x1104>
 80144e0:	3408      	adds	r4, #8
 80144e2:	2d00      	cmp	r5, #0
 80144e4:	bfac      	ite	ge
 80144e6:	1b75      	subge	r5, r6, r5
 80144e8:	4635      	movlt	r5, r6
 80144ea:	2d00      	cmp	r5, #0
 80144ec:	dd19      	ble.n	8014522 <_svfprintf_r+0x103a>
 80144ee:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80144f2:	4896      	ldr	r0, [pc, #600]	; (801474c <_svfprintf_r+0x1264>)
 80144f4:	6020      	str	r0, [r4, #0]
 80144f6:	2d10      	cmp	r5, #16
 80144f8:	f103 0301 	add.w	r3, r3, #1
 80144fc:	f104 0108 	add.w	r1, r4, #8
 8014500:	dc7e      	bgt.n	8014600 <_svfprintf_r+0x1118>
 8014502:	6065      	str	r5, [r4, #4]
 8014504:	2b07      	cmp	r3, #7
 8014506:	4415      	add	r5, r2
 8014508:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801450c:	f340 808b 	ble.w	8014626 <_svfprintf_r+0x113e>
 8014510:	aa26      	add	r2, sp, #152	; 0x98
 8014512:	4641      	mov	r1, r8
 8014514:	9803      	ldr	r0, [sp, #12]
 8014516:	f001 ff0a 	bl	801632e <__ssprint_r>
 801451a:	2800      	cmp	r0, #0
 801451c:	f040 81d0 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 8014520:	ac29      	add	r4, sp, #164	; 0xa4
 8014522:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8014526:	445e      	add	r6, fp
 8014528:	d009      	beq.n	801453e <_svfprintf_r+0x1056>
 801452a:	9b07      	ldr	r3, [sp, #28]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d17c      	bne.n	801462a <_svfprintf_r+0x1142>
 8014530:	2f00      	cmp	r7, #0
 8014532:	d17c      	bne.n	801462e <_svfprintf_r+0x1146>
 8014534:	9b04      	ldr	r3, [sp, #16]
 8014536:	445b      	add	r3, fp
 8014538:	429e      	cmp	r6, r3
 801453a:	bf28      	it	cs
 801453c:	461e      	movcs	r6, r3
 801453e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014540:	9a04      	ldr	r2, [sp, #16]
 8014542:	4293      	cmp	r3, r2
 8014544:	db02      	blt.n	801454c <_svfprintf_r+0x1064>
 8014546:	f01a 0f01 	tst.w	sl, #1
 801454a:	d00e      	beq.n	801456a <_svfprintf_r+0x1082>
 801454c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801454e:	6023      	str	r3, [r4, #0]
 8014550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014552:	6063      	str	r3, [r4, #4]
 8014554:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014556:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014558:	4413      	add	r3, r2
 801455a:	9328      	str	r3, [sp, #160]	; 0xa0
 801455c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801455e:	3301      	adds	r3, #1
 8014560:	2b07      	cmp	r3, #7
 8014562:	9327      	str	r3, [sp, #156]	; 0x9c
 8014564:	f300 80dd 	bgt.w	8014722 <_svfprintf_r+0x123a>
 8014568:	3408      	adds	r4, #8
 801456a:	9b04      	ldr	r3, [sp, #16]
 801456c:	9a04      	ldr	r2, [sp, #16]
 801456e:	eb0b 0503 	add.w	r5, fp, r3
 8014572:	1bab      	subs	r3, r5, r6
 8014574:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8014576:	1b55      	subs	r5, r2, r5
 8014578:	429d      	cmp	r5, r3
 801457a:	bfa8      	it	ge
 801457c:	461d      	movge	r5, r3
 801457e:	2d00      	cmp	r5, #0
 8014580:	dd0b      	ble.n	801459a <_svfprintf_r+0x10b2>
 8014582:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014584:	442b      	add	r3, r5
 8014586:	9328      	str	r3, [sp, #160]	; 0xa0
 8014588:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801458a:	3301      	adds	r3, #1
 801458c:	2b07      	cmp	r3, #7
 801458e:	e9c4 6500 	strd	r6, r5, [r4]
 8014592:	9327      	str	r3, [sp, #156]	; 0x9c
 8014594:	f300 80cf 	bgt.w	8014736 <_svfprintf_r+0x124e>
 8014598:	3408      	adds	r4, #8
 801459a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801459c:	9a04      	ldr	r2, [sp, #16]
 801459e:	2d00      	cmp	r5, #0
 80145a0:	eba2 0303 	sub.w	r3, r2, r3
 80145a4:	bfac      	ite	ge
 80145a6:	1b5d      	subge	r5, r3, r5
 80145a8:	461d      	movlt	r5, r3
 80145aa:	2d00      	cmp	r5, #0
 80145ac:	f77f ad43 	ble.w	8014036 <_svfprintf_r+0xb4e>
 80145b0:	4e66      	ldr	r6, [pc, #408]	; (801474c <_svfprintf_r+0x1264>)
 80145b2:	2710      	movs	r7, #16
 80145b4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80145b8:	2d10      	cmp	r5, #16
 80145ba:	f103 0301 	add.w	r3, r3, #1
 80145be:	f104 0108 	add.w	r1, r4, #8
 80145c2:	6026      	str	r6, [r4, #0]
 80145c4:	f77f aecb 	ble.w	801435e <_svfprintf_r+0xe76>
 80145c8:	3210      	adds	r2, #16
 80145ca:	2b07      	cmp	r3, #7
 80145cc:	6067      	str	r7, [r4, #4]
 80145ce:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80145d2:	dd08      	ble.n	80145e6 <_svfprintf_r+0x10fe>
 80145d4:	aa26      	add	r2, sp, #152	; 0x98
 80145d6:	4641      	mov	r1, r8
 80145d8:	9803      	ldr	r0, [sp, #12]
 80145da:	f001 fea8 	bl	801632e <__ssprint_r>
 80145de:	2800      	cmp	r0, #0
 80145e0:	f040 816e 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 80145e4:	a929      	add	r1, sp, #164	; 0xa4
 80145e6:	3d10      	subs	r5, #16
 80145e8:	460c      	mov	r4, r1
 80145ea:	e7e3      	b.n	80145b4 <_svfprintf_r+0x10cc>
 80145ec:	aa26      	add	r2, sp, #152	; 0x98
 80145ee:	4641      	mov	r1, r8
 80145f0:	9803      	ldr	r0, [sp, #12]
 80145f2:	f001 fe9c 	bl	801632e <__ssprint_r>
 80145f6:	2800      	cmp	r0, #0
 80145f8:	f040 8162 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 80145fc:	ac29      	add	r4, sp, #164	; 0xa4
 80145fe:	e770      	b.n	80144e2 <_svfprintf_r+0xffa>
 8014600:	2010      	movs	r0, #16
 8014602:	4402      	add	r2, r0
 8014604:	2b07      	cmp	r3, #7
 8014606:	6060      	str	r0, [r4, #4]
 8014608:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801460c:	dd08      	ble.n	8014620 <_svfprintf_r+0x1138>
 801460e:	aa26      	add	r2, sp, #152	; 0x98
 8014610:	4641      	mov	r1, r8
 8014612:	9803      	ldr	r0, [sp, #12]
 8014614:	f001 fe8b 	bl	801632e <__ssprint_r>
 8014618:	2800      	cmp	r0, #0
 801461a:	f040 8151 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 801461e:	a929      	add	r1, sp, #164	; 0xa4
 8014620:	3d10      	subs	r5, #16
 8014622:	460c      	mov	r4, r1
 8014624:	e763      	b.n	80144ee <_svfprintf_r+0x1006>
 8014626:	460c      	mov	r4, r1
 8014628:	e77b      	b.n	8014522 <_svfprintf_r+0x103a>
 801462a:	2f00      	cmp	r7, #0
 801462c:	d049      	beq.n	80146c2 <_svfprintf_r+0x11da>
 801462e:	3f01      	subs	r7, #1
 8014630:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014632:	6023      	str	r3, [r4, #0]
 8014634:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014636:	6063      	str	r3, [r4, #4]
 8014638:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801463a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801463c:	4413      	add	r3, r2
 801463e:	9328      	str	r3, [sp, #160]	; 0xa0
 8014640:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014642:	3301      	adds	r3, #1
 8014644:	2b07      	cmp	r3, #7
 8014646:	9327      	str	r3, [sp, #156]	; 0x9c
 8014648:	dc42      	bgt.n	80146d0 <_svfprintf_r+0x11e8>
 801464a:	3408      	adds	r4, #8
 801464c:	9b04      	ldr	r3, [sp, #16]
 801464e:	445b      	add	r3, fp
 8014650:	1b9a      	subs	r2, r3, r6
 8014652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014654:	781b      	ldrb	r3, [r3, #0]
 8014656:	4293      	cmp	r3, r2
 8014658:	bfa8      	it	ge
 801465a:	4613      	movge	r3, r2
 801465c:	2b00      	cmp	r3, #0
 801465e:	461d      	mov	r5, r3
 8014660:	dd0a      	ble.n	8014678 <_svfprintf_r+0x1190>
 8014662:	e9c4 6300 	strd	r6, r3, [r4]
 8014666:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014668:	442b      	add	r3, r5
 801466a:	9328      	str	r3, [sp, #160]	; 0xa0
 801466c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801466e:	3301      	adds	r3, #1
 8014670:	2b07      	cmp	r3, #7
 8014672:	9327      	str	r3, [sp, #156]	; 0x9c
 8014674:	dc36      	bgt.n	80146e4 <_svfprintf_r+0x11fc>
 8014676:	3408      	adds	r4, #8
 8014678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	2d00      	cmp	r5, #0
 801467e:	bfac      	ite	ge
 8014680:	1b5d      	subge	r5, r3, r5
 8014682:	461d      	movlt	r5, r3
 8014684:	2d00      	cmp	r5, #0
 8014686:	dd18      	ble.n	80146ba <_svfprintf_r+0x11d2>
 8014688:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 801468c:	482f      	ldr	r0, [pc, #188]	; (801474c <_svfprintf_r+0x1264>)
 801468e:	6020      	str	r0, [r4, #0]
 8014690:	2d10      	cmp	r5, #16
 8014692:	f102 0201 	add.w	r2, r2, #1
 8014696:	f104 0108 	add.w	r1, r4, #8
 801469a:	dc2d      	bgt.n	80146f8 <_svfprintf_r+0x1210>
 801469c:	442b      	add	r3, r5
 801469e:	2a07      	cmp	r2, #7
 80146a0:	6065      	str	r5, [r4, #4]
 80146a2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80146a6:	dd3a      	ble.n	801471e <_svfprintf_r+0x1236>
 80146a8:	aa26      	add	r2, sp, #152	; 0x98
 80146aa:	4641      	mov	r1, r8
 80146ac:	9803      	ldr	r0, [sp, #12]
 80146ae:	f001 fe3e 	bl	801632e <__ssprint_r>
 80146b2:	2800      	cmp	r0, #0
 80146b4:	f040 8104 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 80146b8:	ac29      	add	r4, sp, #164	; 0xa4
 80146ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146bc:	781b      	ldrb	r3, [r3, #0]
 80146be:	441e      	add	r6, r3
 80146c0:	e733      	b.n	801452a <_svfprintf_r+0x1042>
 80146c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146c4:	3b01      	subs	r3, #1
 80146c6:	9309      	str	r3, [sp, #36]	; 0x24
 80146c8:	9b07      	ldr	r3, [sp, #28]
 80146ca:	3b01      	subs	r3, #1
 80146cc:	9307      	str	r3, [sp, #28]
 80146ce:	e7af      	b.n	8014630 <_svfprintf_r+0x1148>
 80146d0:	aa26      	add	r2, sp, #152	; 0x98
 80146d2:	4641      	mov	r1, r8
 80146d4:	9803      	ldr	r0, [sp, #12]
 80146d6:	f001 fe2a 	bl	801632e <__ssprint_r>
 80146da:	2800      	cmp	r0, #0
 80146dc:	f040 80f0 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 80146e0:	ac29      	add	r4, sp, #164	; 0xa4
 80146e2:	e7b3      	b.n	801464c <_svfprintf_r+0x1164>
 80146e4:	aa26      	add	r2, sp, #152	; 0x98
 80146e6:	4641      	mov	r1, r8
 80146e8:	9803      	ldr	r0, [sp, #12]
 80146ea:	f001 fe20 	bl	801632e <__ssprint_r>
 80146ee:	2800      	cmp	r0, #0
 80146f0:	f040 80e6 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 80146f4:	ac29      	add	r4, sp, #164	; 0xa4
 80146f6:	e7bf      	b.n	8014678 <_svfprintf_r+0x1190>
 80146f8:	2010      	movs	r0, #16
 80146fa:	4403      	add	r3, r0
 80146fc:	2a07      	cmp	r2, #7
 80146fe:	6060      	str	r0, [r4, #4]
 8014700:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8014704:	dd08      	ble.n	8014718 <_svfprintf_r+0x1230>
 8014706:	aa26      	add	r2, sp, #152	; 0x98
 8014708:	4641      	mov	r1, r8
 801470a:	9803      	ldr	r0, [sp, #12]
 801470c:	f001 fe0f 	bl	801632e <__ssprint_r>
 8014710:	2800      	cmp	r0, #0
 8014712:	f040 80d5 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 8014716:	a929      	add	r1, sp, #164	; 0xa4
 8014718:	3d10      	subs	r5, #16
 801471a:	460c      	mov	r4, r1
 801471c:	e7b4      	b.n	8014688 <_svfprintf_r+0x11a0>
 801471e:	460c      	mov	r4, r1
 8014720:	e7cb      	b.n	80146ba <_svfprintf_r+0x11d2>
 8014722:	aa26      	add	r2, sp, #152	; 0x98
 8014724:	4641      	mov	r1, r8
 8014726:	9803      	ldr	r0, [sp, #12]
 8014728:	f001 fe01 	bl	801632e <__ssprint_r>
 801472c:	2800      	cmp	r0, #0
 801472e:	f040 80c7 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 8014732:	ac29      	add	r4, sp, #164	; 0xa4
 8014734:	e719      	b.n	801456a <_svfprintf_r+0x1082>
 8014736:	aa26      	add	r2, sp, #152	; 0x98
 8014738:	4641      	mov	r1, r8
 801473a:	9803      	ldr	r0, [sp, #12]
 801473c:	f001 fdf7 	bl	801632e <__ssprint_r>
 8014740:	2800      	cmp	r0, #0
 8014742:	f040 80bd 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 8014746:	ac29      	add	r4, sp, #164	; 0xa4
 8014748:	e727      	b.n	801459a <_svfprintf_r+0x10b2>
 801474a:	bf00      	nop
 801474c:	0801850c 	.word	0x0801850c
 8014750:	9a04      	ldr	r2, [sp, #16]
 8014752:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014754:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014756:	2a01      	cmp	r2, #1
 8014758:	f105 0501 	add.w	r5, r5, #1
 801475c:	f103 0301 	add.w	r3, r3, #1
 8014760:	f104 0608 	add.w	r6, r4, #8
 8014764:	dc02      	bgt.n	801476c <_svfprintf_r+0x1284>
 8014766:	f01a 0f01 	tst.w	sl, #1
 801476a:	d07d      	beq.n	8014868 <_svfprintf_r+0x1380>
 801476c:	2201      	movs	r2, #1
 801476e:	2b07      	cmp	r3, #7
 8014770:	f8c4 b000 	str.w	fp, [r4]
 8014774:	6062      	str	r2, [r4, #4]
 8014776:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801477a:	dd08      	ble.n	801478e <_svfprintf_r+0x12a6>
 801477c:	aa26      	add	r2, sp, #152	; 0x98
 801477e:	4641      	mov	r1, r8
 8014780:	9803      	ldr	r0, [sp, #12]
 8014782:	f001 fdd4 	bl	801632e <__ssprint_r>
 8014786:	2800      	cmp	r0, #0
 8014788:	f040 809a 	bne.w	80148c0 <_svfprintf_r+0x13d8>
 801478c:	ae29      	add	r6, sp, #164	; 0xa4
 801478e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014790:	6033      	str	r3, [r6, #0]
 8014792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014794:	6073      	str	r3, [r6, #4]
 8014796:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014798:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801479a:	4413      	add	r3, r2
 801479c:	9328      	str	r3, [sp, #160]	; 0xa0
 801479e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80147a0:	3301      	adds	r3, #1
 80147a2:	2b07      	cmp	r3, #7
 80147a4:	9327      	str	r3, [sp, #156]	; 0x9c
 80147a6:	dc31      	bgt.n	801480c <_svfprintf_r+0x1324>
 80147a8:	3608      	adds	r6, #8
 80147aa:	9b04      	ldr	r3, [sp, #16]
 80147ac:	2200      	movs	r2, #0
 80147ae:	1e5c      	subs	r4, r3, #1
 80147b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80147b4:	2300      	movs	r3, #0
 80147b6:	f7f2 ff01 	bl	80075bc <__aeabi_dcmpeq>
 80147ba:	2800      	cmp	r0, #0
 80147bc:	d12f      	bne.n	801481e <_svfprintf_r+0x1336>
 80147be:	f10b 0301 	add.w	r3, fp, #1
 80147c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80147c4:	9904      	ldr	r1, [sp, #16]
 80147c6:	e9c6 3400 	strd	r3, r4, [r6]
 80147ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80147cc:	3201      	adds	r2, #1
 80147ce:	3b01      	subs	r3, #1
 80147d0:	440b      	add	r3, r1
 80147d2:	2a07      	cmp	r2, #7
 80147d4:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80147d8:	dd4f      	ble.n	801487a <_svfprintf_r+0x1392>
 80147da:	aa26      	add	r2, sp, #152	; 0x98
 80147dc:	4641      	mov	r1, r8
 80147de:	9803      	ldr	r0, [sp, #12]
 80147e0:	f001 fda5 	bl	801632e <__ssprint_r>
 80147e4:	2800      	cmp	r0, #0
 80147e6:	d16b      	bne.n	80148c0 <_svfprintf_r+0x13d8>
 80147e8:	ae29      	add	r6, sp, #164	; 0xa4
 80147ea:	ab22      	add	r3, sp, #136	; 0x88
 80147ec:	6033      	str	r3, [r6, #0]
 80147ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80147f0:	6073      	str	r3, [r6, #4]
 80147f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80147f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80147f6:	4413      	add	r3, r2
 80147f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80147fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80147fc:	3301      	adds	r3, #1
 80147fe:	2b07      	cmp	r3, #7
 8014800:	9327      	str	r3, [sp, #156]	; 0x9c
 8014802:	f73f adb3 	bgt.w	801436c <_svfprintf_r+0xe84>
 8014806:	f106 0408 	add.w	r4, r6, #8
 801480a:	e414      	b.n	8014036 <_svfprintf_r+0xb4e>
 801480c:	aa26      	add	r2, sp, #152	; 0x98
 801480e:	4641      	mov	r1, r8
 8014810:	9803      	ldr	r0, [sp, #12]
 8014812:	f001 fd8c 	bl	801632e <__ssprint_r>
 8014816:	2800      	cmp	r0, #0
 8014818:	d152      	bne.n	80148c0 <_svfprintf_r+0x13d8>
 801481a:	ae29      	add	r6, sp, #164	; 0xa4
 801481c:	e7c5      	b.n	80147aa <_svfprintf_r+0x12c2>
 801481e:	2c00      	cmp	r4, #0
 8014820:	dde3      	ble.n	80147ea <_svfprintf_r+0x1302>
 8014822:	4d3e      	ldr	r5, [pc, #248]	; (801491c <_svfprintf_r+0x1434>)
 8014824:	2710      	movs	r7, #16
 8014826:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801482a:	2c10      	cmp	r4, #16
 801482c:	f103 0301 	add.w	r3, r3, #1
 8014830:	f106 0108 	add.w	r1, r6, #8
 8014834:	6035      	str	r5, [r6, #0]
 8014836:	dc07      	bgt.n	8014848 <_svfprintf_r+0x1360>
 8014838:	6074      	str	r4, [r6, #4]
 801483a:	2b07      	cmp	r3, #7
 801483c:	4414      	add	r4, r2
 801483e:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 8014842:	dcca      	bgt.n	80147da <_svfprintf_r+0x12f2>
 8014844:	460e      	mov	r6, r1
 8014846:	e7d0      	b.n	80147ea <_svfprintf_r+0x1302>
 8014848:	3210      	adds	r2, #16
 801484a:	2b07      	cmp	r3, #7
 801484c:	6077      	str	r7, [r6, #4]
 801484e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8014852:	dd06      	ble.n	8014862 <_svfprintf_r+0x137a>
 8014854:	aa26      	add	r2, sp, #152	; 0x98
 8014856:	4641      	mov	r1, r8
 8014858:	9803      	ldr	r0, [sp, #12]
 801485a:	f001 fd68 	bl	801632e <__ssprint_r>
 801485e:	bb78      	cbnz	r0, 80148c0 <_svfprintf_r+0x13d8>
 8014860:	a929      	add	r1, sp, #164	; 0xa4
 8014862:	3c10      	subs	r4, #16
 8014864:	460e      	mov	r6, r1
 8014866:	e7de      	b.n	8014826 <_svfprintf_r+0x133e>
 8014868:	2201      	movs	r2, #1
 801486a:	2b07      	cmp	r3, #7
 801486c:	f8c4 b000 	str.w	fp, [r4]
 8014870:	6062      	str	r2, [r4, #4]
 8014872:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8014876:	ddb8      	ble.n	80147ea <_svfprintf_r+0x1302>
 8014878:	e7af      	b.n	80147da <_svfprintf_r+0x12f2>
 801487a:	3608      	adds	r6, #8
 801487c:	e7b5      	b.n	80147ea <_svfprintf_r+0x1302>
 801487e:	460c      	mov	r4, r1
 8014880:	f7ff bbd9 	b.w	8014036 <_svfprintf_r+0xb4e>
 8014884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014886:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014888:	1a9d      	subs	r5, r3, r2
 801488a:	2d00      	cmp	r5, #0
 801488c:	f77f abd7 	ble.w	801403e <_svfprintf_r+0xb56>
 8014890:	4e23      	ldr	r6, [pc, #140]	; (8014920 <_svfprintf_r+0x1438>)
 8014892:	2710      	movs	r7, #16
 8014894:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8014898:	2d10      	cmp	r5, #16
 801489a:	f103 0301 	add.w	r3, r3, #1
 801489e:	6026      	str	r6, [r4, #0]
 80148a0:	dc18      	bgt.n	80148d4 <_svfprintf_r+0x13ec>
 80148a2:	6065      	str	r5, [r4, #4]
 80148a4:	2b07      	cmp	r3, #7
 80148a6:	4415      	add	r5, r2
 80148a8:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80148ac:	f77f abc7 	ble.w	801403e <_svfprintf_r+0xb56>
 80148b0:	aa26      	add	r2, sp, #152	; 0x98
 80148b2:	4641      	mov	r1, r8
 80148b4:	9803      	ldr	r0, [sp, #12]
 80148b6:	f001 fd3a 	bl	801632e <__ssprint_r>
 80148ba:	2800      	cmp	r0, #0
 80148bc:	f43f abbf 	beq.w	801403e <_svfprintf_r+0xb56>
 80148c0:	f1b9 0f00 	cmp.w	r9, #0
 80148c4:	f43f a8a8 	beq.w	8013a18 <_svfprintf_r+0x530>
 80148c8:	4649      	mov	r1, r9
 80148ca:	9803      	ldr	r0, [sp, #12]
 80148cc:	f001 f906 	bl	8015adc <_free_r>
 80148d0:	f7ff b8a2 	b.w	8013a18 <_svfprintf_r+0x530>
 80148d4:	3210      	adds	r2, #16
 80148d6:	2b07      	cmp	r3, #7
 80148d8:	6067      	str	r7, [r4, #4]
 80148da:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80148de:	dc02      	bgt.n	80148e6 <_svfprintf_r+0x13fe>
 80148e0:	3408      	adds	r4, #8
 80148e2:	3d10      	subs	r5, #16
 80148e4:	e7d6      	b.n	8014894 <_svfprintf_r+0x13ac>
 80148e6:	aa26      	add	r2, sp, #152	; 0x98
 80148e8:	4641      	mov	r1, r8
 80148ea:	9803      	ldr	r0, [sp, #12]
 80148ec:	f001 fd1f 	bl	801632e <__ssprint_r>
 80148f0:	2800      	cmp	r0, #0
 80148f2:	d1e5      	bne.n	80148c0 <_svfprintf_r+0x13d8>
 80148f4:	ac29      	add	r4, sp, #164	; 0xa4
 80148f6:	e7f4      	b.n	80148e2 <_svfprintf_r+0x13fa>
 80148f8:	4649      	mov	r1, r9
 80148fa:	9803      	ldr	r0, [sp, #12]
 80148fc:	f001 f8ee 	bl	8015adc <_free_r>
 8014900:	f7ff bbb5 	b.w	801406e <_svfprintf_r+0xb86>
 8014904:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014906:	2b00      	cmp	r3, #0
 8014908:	f43f a886 	beq.w	8013a18 <_svfprintf_r+0x530>
 801490c:	aa26      	add	r2, sp, #152	; 0x98
 801490e:	4641      	mov	r1, r8
 8014910:	9803      	ldr	r0, [sp, #12]
 8014912:	f001 fd0c 	bl	801632e <__ssprint_r>
 8014916:	f7ff b87f 	b.w	8013a18 <_svfprintf_r+0x530>
 801491a:	bf00      	nop
 801491c:	0801850c 	.word	0x0801850c
 8014920:	080184fc 	.word	0x080184fc

08014924 <sysconf>:
 8014924:	2808      	cmp	r0, #8
 8014926:	b508      	push	{r3, lr}
 8014928:	d006      	beq.n	8014938 <sysconf+0x14>
 801492a:	f7fd fda7 	bl	801247c <__errno>
 801492e:	2316      	movs	r3, #22
 8014930:	6003      	str	r3, [r0, #0]
 8014932:	f04f 30ff 	mov.w	r0, #4294967295
 8014936:	bd08      	pop	{r3, pc}
 8014938:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801493c:	e7fb      	b.n	8014936 <sysconf+0x12>

0801493e <_vsnprintf_r>:
 801493e:	b530      	push	{r4, r5, lr}
 8014940:	1e14      	subs	r4, r2, #0
 8014942:	4605      	mov	r5, r0
 8014944:	b09b      	sub	sp, #108	; 0x6c
 8014946:	4618      	mov	r0, r3
 8014948:	da05      	bge.n	8014956 <_vsnprintf_r+0x18>
 801494a:	238b      	movs	r3, #139	; 0x8b
 801494c:	602b      	str	r3, [r5, #0]
 801494e:	f04f 30ff 	mov.w	r0, #4294967295
 8014952:	b01b      	add	sp, #108	; 0x6c
 8014954:	bd30      	pop	{r4, r5, pc}
 8014956:	f44f 7302 	mov.w	r3, #520	; 0x208
 801495a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801495e:	bf14      	ite	ne
 8014960:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014964:	4623      	moveq	r3, r4
 8014966:	9302      	str	r3, [sp, #8]
 8014968:	9305      	str	r3, [sp, #20]
 801496a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801496e:	9100      	str	r1, [sp, #0]
 8014970:	9104      	str	r1, [sp, #16]
 8014972:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014976:	4602      	mov	r2, r0
 8014978:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801497a:	4669      	mov	r1, sp
 801497c:	4628      	mov	r0, r5
 801497e:	f7fe fdb3 	bl	80134e8 <_svfprintf_r>
 8014982:	1c43      	adds	r3, r0, #1
 8014984:	bfbc      	itt	lt
 8014986:	238b      	movlt	r3, #139	; 0x8b
 8014988:	602b      	strlt	r3, [r5, #0]
 801498a:	2c00      	cmp	r4, #0
 801498c:	d0e1      	beq.n	8014952 <_vsnprintf_r+0x14>
 801498e:	9b00      	ldr	r3, [sp, #0]
 8014990:	2200      	movs	r2, #0
 8014992:	701a      	strb	r2, [r3, #0]
 8014994:	e7dd      	b.n	8014952 <_vsnprintf_r+0x14>
	...

08014998 <vsnprintf>:
 8014998:	b507      	push	{r0, r1, r2, lr}
 801499a:	9300      	str	r3, [sp, #0]
 801499c:	4613      	mov	r3, r2
 801499e:	460a      	mov	r2, r1
 80149a0:	4601      	mov	r1, r0
 80149a2:	4803      	ldr	r0, [pc, #12]	; (80149b0 <vsnprintf+0x18>)
 80149a4:	6800      	ldr	r0, [r0, #0]
 80149a6:	f7ff ffca 	bl	801493e <_vsnprintf_r>
 80149aa:	b003      	add	sp, #12
 80149ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80149b0:	20000014 	.word	0x20000014

080149b4 <__swbuf_r>:
 80149b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149b6:	460d      	mov	r5, r1
 80149b8:	4614      	mov	r4, r2
 80149ba:	4606      	mov	r6, r0
 80149bc:	b118      	cbz	r0, 80149c6 <__swbuf_r+0x12>
 80149be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80149c0:	b90b      	cbnz	r3, 80149c6 <__swbuf_r+0x12>
 80149c2:	f000 fffb 	bl	80159bc <__sinit>
 80149c6:	69a3      	ldr	r3, [r4, #24]
 80149c8:	60a3      	str	r3, [r4, #8]
 80149ca:	89a3      	ldrh	r3, [r4, #12]
 80149cc:	0719      	lsls	r1, r3, #28
 80149ce:	d528      	bpl.n	8014a22 <__swbuf_r+0x6e>
 80149d0:	6923      	ldr	r3, [r4, #16]
 80149d2:	b333      	cbz	r3, 8014a22 <__swbuf_r+0x6e>
 80149d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149d8:	b2ed      	uxtb	r5, r5
 80149da:	049a      	lsls	r2, r3, #18
 80149dc:	462f      	mov	r7, r5
 80149de:	d52a      	bpl.n	8014a36 <__swbuf_r+0x82>
 80149e0:	6923      	ldr	r3, [r4, #16]
 80149e2:	6820      	ldr	r0, [r4, #0]
 80149e4:	1ac0      	subs	r0, r0, r3
 80149e6:	6963      	ldr	r3, [r4, #20]
 80149e8:	4283      	cmp	r3, r0
 80149ea:	dc04      	bgt.n	80149f6 <__swbuf_r+0x42>
 80149ec:	4621      	mov	r1, r4
 80149ee:	4630      	mov	r0, r6
 80149f0:	f000 ff78 	bl	80158e4 <_fflush_r>
 80149f4:	b9d8      	cbnz	r0, 8014a2e <__swbuf_r+0x7a>
 80149f6:	68a3      	ldr	r3, [r4, #8]
 80149f8:	3b01      	subs	r3, #1
 80149fa:	60a3      	str	r3, [r4, #8]
 80149fc:	6823      	ldr	r3, [r4, #0]
 80149fe:	1c5a      	adds	r2, r3, #1
 8014a00:	6022      	str	r2, [r4, #0]
 8014a02:	701d      	strb	r5, [r3, #0]
 8014a04:	6963      	ldr	r3, [r4, #20]
 8014a06:	3001      	adds	r0, #1
 8014a08:	4283      	cmp	r3, r0
 8014a0a:	d004      	beq.n	8014a16 <__swbuf_r+0x62>
 8014a0c:	89a3      	ldrh	r3, [r4, #12]
 8014a0e:	07db      	lsls	r3, r3, #31
 8014a10:	d50f      	bpl.n	8014a32 <__swbuf_r+0x7e>
 8014a12:	2d0a      	cmp	r5, #10
 8014a14:	d10d      	bne.n	8014a32 <__swbuf_r+0x7e>
 8014a16:	4621      	mov	r1, r4
 8014a18:	4630      	mov	r0, r6
 8014a1a:	f000 ff63 	bl	80158e4 <_fflush_r>
 8014a1e:	b140      	cbz	r0, 8014a32 <__swbuf_r+0x7e>
 8014a20:	e005      	b.n	8014a2e <__swbuf_r+0x7a>
 8014a22:	4621      	mov	r1, r4
 8014a24:	4630      	mov	r0, r6
 8014a26:	f000 f821 	bl	8014a6c <__swsetup_r>
 8014a2a:	2800      	cmp	r0, #0
 8014a2c:	d0d2      	beq.n	80149d4 <__swbuf_r+0x20>
 8014a2e:	f04f 37ff 	mov.w	r7, #4294967295
 8014a32:	4638      	mov	r0, r7
 8014a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014a3a:	81a3      	strh	r3, [r4, #12]
 8014a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014a42:	6663      	str	r3, [r4, #100]	; 0x64
 8014a44:	e7cc      	b.n	80149e0 <__swbuf_r+0x2c>
	...

08014a48 <_write_r>:
 8014a48:	b538      	push	{r3, r4, r5, lr}
 8014a4a:	4c07      	ldr	r4, [pc, #28]	; (8014a68 <_write_r+0x20>)
 8014a4c:	4605      	mov	r5, r0
 8014a4e:	4608      	mov	r0, r1
 8014a50:	4611      	mov	r1, r2
 8014a52:	2200      	movs	r2, #0
 8014a54:	6022      	str	r2, [r4, #0]
 8014a56:	461a      	mov	r2, r3
 8014a58:	f7f4 f829 	bl	8008aae <_write>
 8014a5c:	1c43      	adds	r3, r0, #1
 8014a5e:	d102      	bne.n	8014a66 <_write_r+0x1e>
 8014a60:	6823      	ldr	r3, [r4, #0]
 8014a62:	b103      	cbz	r3, 8014a66 <_write_r+0x1e>
 8014a64:	602b      	str	r3, [r5, #0]
 8014a66:	bd38      	pop	{r3, r4, r5, pc}
 8014a68:	2000105c 	.word	0x2000105c

08014a6c <__swsetup_r>:
 8014a6c:	b538      	push	{r3, r4, r5, lr}
 8014a6e:	4b2a      	ldr	r3, [pc, #168]	; (8014b18 <__swsetup_r+0xac>)
 8014a70:	4605      	mov	r5, r0
 8014a72:	6818      	ldr	r0, [r3, #0]
 8014a74:	460c      	mov	r4, r1
 8014a76:	b118      	cbz	r0, 8014a80 <__swsetup_r+0x14>
 8014a78:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014a7a:	b90b      	cbnz	r3, 8014a80 <__swsetup_r+0x14>
 8014a7c:	f000 ff9e 	bl	80159bc <__sinit>
 8014a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a84:	b29a      	uxth	r2, r3
 8014a86:	0711      	lsls	r1, r2, #28
 8014a88:	d422      	bmi.n	8014ad0 <__swsetup_r+0x64>
 8014a8a:	06d0      	lsls	r0, r2, #27
 8014a8c:	d407      	bmi.n	8014a9e <__swsetup_r+0x32>
 8014a8e:	2209      	movs	r2, #9
 8014a90:	602a      	str	r2, [r5, #0]
 8014a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a96:	81a3      	strh	r3, [r4, #12]
 8014a98:	f04f 30ff 	mov.w	r0, #4294967295
 8014a9c:	e034      	b.n	8014b08 <__swsetup_r+0x9c>
 8014a9e:	0751      	lsls	r1, r2, #29
 8014aa0:	d512      	bpl.n	8014ac8 <__swsetup_r+0x5c>
 8014aa2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014aa4:	b141      	cbz	r1, 8014ab8 <__swsetup_r+0x4c>
 8014aa6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8014aaa:	4299      	cmp	r1, r3
 8014aac:	d002      	beq.n	8014ab4 <__swsetup_r+0x48>
 8014aae:	4628      	mov	r0, r5
 8014ab0:	f001 f814 	bl	8015adc <_free_r>
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	6323      	str	r3, [r4, #48]	; 0x30
 8014ab8:	89a3      	ldrh	r3, [r4, #12]
 8014aba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014abe:	81a3      	strh	r3, [r4, #12]
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	6063      	str	r3, [r4, #4]
 8014ac4:	6923      	ldr	r3, [r4, #16]
 8014ac6:	6023      	str	r3, [r4, #0]
 8014ac8:	89a3      	ldrh	r3, [r4, #12]
 8014aca:	f043 0308 	orr.w	r3, r3, #8
 8014ace:	81a3      	strh	r3, [r4, #12]
 8014ad0:	6923      	ldr	r3, [r4, #16]
 8014ad2:	b94b      	cbnz	r3, 8014ae8 <__swsetup_r+0x7c>
 8014ad4:	89a3      	ldrh	r3, [r4, #12]
 8014ad6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ade:	d003      	beq.n	8014ae8 <__swsetup_r+0x7c>
 8014ae0:	4621      	mov	r1, r4
 8014ae2:	4628      	mov	r0, r5
 8014ae4:	f7fd ff4a 	bl	801297c <__smakebuf_r>
 8014ae8:	89a2      	ldrh	r2, [r4, #12]
 8014aea:	f012 0301 	ands.w	r3, r2, #1
 8014aee:	d00c      	beq.n	8014b0a <__swsetup_r+0x9e>
 8014af0:	2300      	movs	r3, #0
 8014af2:	60a3      	str	r3, [r4, #8]
 8014af4:	6963      	ldr	r3, [r4, #20]
 8014af6:	425b      	negs	r3, r3
 8014af8:	61a3      	str	r3, [r4, #24]
 8014afa:	6923      	ldr	r3, [r4, #16]
 8014afc:	b953      	cbnz	r3, 8014b14 <__swsetup_r+0xa8>
 8014afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b02:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014b06:	d1c4      	bne.n	8014a92 <__swsetup_r+0x26>
 8014b08:	bd38      	pop	{r3, r4, r5, pc}
 8014b0a:	0792      	lsls	r2, r2, #30
 8014b0c:	bf58      	it	pl
 8014b0e:	6963      	ldrpl	r3, [r4, #20]
 8014b10:	60a3      	str	r3, [r4, #8]
 8014b12:	e7f2      	b.n	8014afa <__swsetup_r+0x8e>
 8014b14:	2000      	movs	r0, #0
 8014b16:	e7f7      	b.n	8014b08 <__swsetup_r+0x9c>
 8014b18:	20000014 	.word	0x20000014

08014b1c <register_fini>:
 8014b1c:	4b02      	ldr	r3, [pc, #8]	; (8014b28 <register_fini+0xc>)
 8014b1e:	b113      	cbz	r3, 8014b26 <register_fini+0xa>
 8014b20:	4802      	ldr	r0, [pc, #8]	; (8014b2c <register_fini+0x10>)
 8014b22:	f000 b805 	b.w	8014b30 <atexit>
 8014b26:	4770      	bx	lr
 8014b28:	00000000 	.word	0x00000000
 8014b2c:	08015a0d 	.word	0x08015a0d

08014b30 <atexit>:
 8014b30:	2300      	movs	r3, #0
 8014b32:	4601      	mov	r1, r0
 8014b34:	461a      	mov	r2, r3
 8014b36:	4618      	mov	r0, r3
 8014b38:	f001 bc7e 	b.w	8016438 <__register_exitproc>

08014b3c <_close_r>:
 8014b3c:	b538      	push	{r3, r4, r5, lr}
 8014b3e:	4c06      	ldr	r4, [pc, #24]	; (8014b58 <_close_r+0x1c>)
 8014b40:	2300      	movs	r3, #0
 8014b42:	4605      	mov	r5, r0
 8014b44:	4608      	mov	r0, r1
 8014b46:	6023      	str	r3, [r4, #0]
 8014b48:	f7f3 ffcd 	bl	8008ae6 <_close>
 8014b4c:	1c43      	adds	r3, r0, #1
 8014b4e:	d102      	bne.n	8014b56 <_close_r+0x1a>
 8014b50:	6823      	ldr	r3, [r4, #0]
 8014b52:	b103      	cbz	r3, 8014b56 <_close_r+0x1a>
 8014b54:	602b      	str	r3, [r5, #0]
 8014b56:	bd38      	pop	{r3, r4, r5, pc}
 8014b58:	2000105c 	.word	0x2000105c

08014b5c <quorem>:
 8014b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b60:	6903      	ldr	r3, [r0, #16]
 8014b62:	690c      	ldr	r4, [r1, #16]
 8014b64:	42a3      	cmp	r3, r4
 8014b66:	4680      	mov	r8, r0
 8014b68:	f2c0 8082 	blt.w	8014c70 <quorem+0x114>
 8014b6c:	3c01      	subs	r4, #1
 8014b6e:	f101 0714 	add.w	r7, r1, #20
 8014b72:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014b76:	f100 0614 	add.w	r6, r0, #20
 8014b7a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014b7e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014b82:	eb06 030c 	add.w	r3, r6, ip
 8014b86:	3501      	adds	r5, #1
 8014b88:	eb07 090c 	add.w	r9, r7, ip
 8014b8c:	9301      	str	r3, [sp, #4]
 8014b8e:	fbb0 f5f5 	udiv	r5, r0, r5
 8014b92:	b395      	cbz	r5, 8014bfa <quorem+0x9e>
 8014b94:	f04f 0a00 	mov.w	sl, #0
 8014b98:	4638      	mov	r0, r7
 8014b9a:	46b6      	mov	lr, r6
 8014b9c:	46d3      	mov	fp, sl
 8014b9e:	f850 2b04 	ldr.w	r2, [r0], #4
 8014ba2:	b293      	uxth	r3, r2
 8014ba4:	fb05 a303 	mla	r3, r5, r3, sl
 8014ba8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014bac:	b29b      	uxth	r3, r3
 8014bae:	ebab 0303 	sub.w	r3, fp, r3
 8014bb2:	0c12      	lsrs	r2, r2, #16
 8014bb4:	f8de b000 	ldr.w	fp, [lr]
 8014bb8:	fb05 a202 	mla	r2, r5, r2, sl
 8014bbc:	fa13 f38b 	uxtah	r3, r3, fp
 8014bc0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014bc4:	fa1f fb82 	uxth.w	fp, r2
 8014bc8:	f8de 2000 	ldr.w	r2, [lr]
 8014bcc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014bd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014bd4:	b29b      	uxth	r3, r3
 8014bd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014bda:	4581      	cmp	r9, r0
 8014bdc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014be0:	f84e 3b04 	str.w	r3, [lr], #4
 8014be4:	d2db      	bcs.n	8014b9e <quorem+0x42>
 8014be6:	f856 300c 	ldr.w	r3, [r6, ip]
 8014bea:	b933      	cbnz	r3, 8014bfa <quorem+0x9e>
 8014bec:	9b01      	ldr	r3, [sp, #4]
 8014bee:	3b04      	subs	r3, #4
 8014bf0:	429e      	cmp	r6, r3
 8014bf2:	461a      	mov	r2, r3
 8014bf4:	d330      	bcc.n	8014c58 <quorem+0xfc>
 8014bf6:	f8c8 4010 	str.w	r4, [r8, #16]
 8014bfa:	4640      	mov	r0, r8
 8014bfc:	f001 fa74 	bl	80160e8 <__mcmp>
 8014c00:	2800      	cmp	r0, #0
 8014c02:	db25      	blt.n	8014c50 <quorem+0xf4>
 8014c04:	3501      	adds	r5, #1
 8014c06:	4630      	mov	r0, r6
 8014c08:	f04f 0c00 	mov.w	ip, #0
 8014c0c:	f857 2b04 	ldr.w	r2, [r7], #4
 8014c10:	f8d0 e000 	ldr.w	lr, [r0]
 8014c14:	b293      	uxth	r3, r2
 8014c16:	ebac 0303 	sub.w	r3, ip, r3
 8014c1a:	0c12      	lsrs	r2, r2, #16
 8014c1c:	fa13 f38e 	uxtah	r3, r3, lr
 8014c20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014c24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014c28:	b29b      	uxth	r3, r3
 8014c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c2e:	45b9      	cmp	r9, r7
 8014c30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014c34:	f840 3b04 	str.w	r3, [r0], #4
 8014c38:	d2e8      	bcs.n	8014c0c <quorem+0xb0>
 8014c3a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014c3e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014c42:	b92a      	cbnz	r2, 8014c50 <quorem+0xf4>
 8014c44:	3b04      	subs	r3, #4
 8014c46:	429e      	cmp	r6, r3
 8014c48:	461a      	mov	r2, r3
 8014c4a:	d30b      	bcc.n	8014c64 <quorem+0x108>
 8014c4c:	f8c8 4010 	str.w	r4, [r8, #16]
 8014c50:	4628      	mov	r0, r5
 8014c52:	b003      	add	sp, #12
 8014c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c58:	6812      	ldr	r2, [r2, #0]
 8014c5a:	3b04      	subs	r3, #4
 8014c5c:	2a00      	cmp	r2, #0
 8014c5e:	d1ca      	bne.n	8014bf6 <quorem+0x9a>
 8014c60:	3c01      	subs	r4, #1
 8014c62:	e7c5      	b.n	8014bf0 <quorem+0x94>
 8014c64:	6812      	ldr	r2, [r2, #0]
 8014c66:	3b04      	subs	r3, #4
 8014c68:	2a00      	cmp	r2, #0
 8014c6a:	d1ef      	bne.n	8014c4c <quorem+0xf0>
 8014c6c:	3c01      	subs	r4, #1
 8014c6e:	e7ea      	b.n	8014c46 <quorem+0xea>
 8014c70:	2000      	movs	r0, #0
 8014c72:	e7ee      	b.n	8014c52 <quorem+0xf6>
 8014c74:	0000      	movs	r0, r0
	...

08014c78 <_dtoa_r>:
 8014c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c7c:	b097      	sub	sp, #92	; 0x5c
 8014c7e:	ec57 6b10 	vmov	r6, r7, d0
 8014c82:	9106      	str	r1, [sp, #24]
 8014c84:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8014c86:	920b      	str	r2, [sp, #44]	; 0x2c
 8014c88:	4604      	mov	r4, r0
 8014c8a:	9312      	str	r3, [sp, #72]	; 0x48
 8014c8c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8014c8e:	e9cd 6700 	strd	r6, r7, [sp]
 8014c92:	b141      	cbz	r1, 8014ca6 <_dtoa_r+0x2e>
 8014c94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014c96:	604a      	str	r2, [r1, #4]
 8014c98:	2301      	movs	r3, #1
 8014c9a:	4093      	lsls	r3, r2
 8014c9c:	608b      	str	r3, [r1, #8]
 8014c9e:	f001 f85e 	bl	8015d5e <_Bfree>
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	6423      	str	r3, [r4, #64]	; 0x40
 8014ca6:	1e3b      	subs	r3, r7, #0
 8014ca8:	bfb9      	ittee	lt
 8014caa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014cae:	9301      	strlt	r3, [sp, #4]
 8014cb0:	2300      	movge	r3, #0
 8014cb2:	602b      	strge	r3, [r5, #0]
 8014cb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014cb8:	4baf      	ldr	r3, [pc, #700]	; (8014f78 <_dtoa_r+0x300>)
 8014cba:	bfbc      	itt	lt
 8014cbc:	2201      	movlt	r2, #1
 8014cbe:	602a      	strlt	r2, [r5, #0]
 8014cc0:	ea33 0308 	bics.w	r3, r3, r8
 8014cc4:	d116      	bne.n	8014cf4 <_dtoa_r+0x7c>
 8014cc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014cc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8014ccc:	6013      	str	r3, [r2, #0]
 8014cce:	9b00      	ldr	r3, [sp, #0]
 8014cd0:	b923      	cbnz	r3, 8014cdc <_dtoa_r+0x64>
 8014cd2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014cd6:	2800      	cmp	r0, #0
 8014cd8:	f000 8543 	beq.w	8015762 <_dtoa_r+0xaea>
 8014cdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014cde:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014f8c <_dtoa_r+0x314>
 8014ce2:	b11b      	cbz	r3, 8014cec <_dtoa_r+0x74>
 8014ce4:	f10b 0303 	add.w	r3, fp, #3
 8014ce8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014cea:	6013      	str	r3, [r2, #0]
 8014cec:	4658      	mov	r0, fp
 8014cee:	b017      	add	sp, #92	; 0x5c
 8014cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cf4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	4630      	mov	r0, r6
 8014cfe:	4639      	mov	r1, r7
 8014d00:	f7f2 fc5c 	bl	80075bc <__aeabi_dcmpeq>
 8014d04:	4681      	mov	r9, r0
 8014d06:	b160      	cbz	r0, 8014d22 <_dtoa_r+0xaa>
 8014d08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	6013      	str	r3, [r2, #0]
 8014d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	f000 8522 	beq.w	801575a <_dtoa_r+0xae2>
 8014d16:	4b99      	ldr	r3, [pc, #612]	; (8014f7c <_dtoa_r+0x304>)
 8014d18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014d1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8014d1e:	6013      	str	r3, [r2, #0]
 8014d20:	e7e4      	b.n	8014cec <_dtoa_r+0x74>
 8014d22:	aa14      	add	r2, sp, #80	; 0x50
 8014d24:	a915      	add	r1, sp, #84	; 0x54
 8014d26:	ec47 6b10 	vmov	d0, r6, r7
 8014d2a:	4620      	mov	r0, r4
 8014d2c:	f001 fa53 	bl	80161d6 <__d2b>
 8014d30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014d34:	9004      	str	r0, [sp, #16]
 8014d36:	2d00      	cmp	r5, #0
 8014d38:	d07c      	beq.n	8014e34 <_dtoa_r+0x1bc>
 8014d3a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014d3e:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014d42:	46b2      	mov	sl, r6
 8014d44:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014d48:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014d4c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014d50:	2200      	movs	r2, #0
 8014d52:	4b8b      	ldr	r3, [pc, #556]	; (8014f80 <_dtoa_r+0x308>)
 8014d54:	4650      	mov	r0, sl
 8014d56:	4659      	mov	r1, fp
 8014d58:	f7f2 f810 	bl	8006d7c <__aeabi_dsub>
 8014d5c:	a380      	add	r3, pc, #512	; (adr r3, 8014f60 <_dtoa_r+0x2e8>)
 8014d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d62:	f7f2 f9c3 	bl	80070ec <__aeabi_dmul>
 8014d66:	a380      	add	r3, pc, #512	; (adr r3, 8014f68 <_dtoa_r+0x2f0>)
 8014d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d6c:	f7f2 f808 	bl	8006d80 <__adddf3>
 8014d70:	4606      	mov	r6, r0
 8014d72:	4628      	mov	r0, r5
 8014d74:	460f      	mov	r7, r1
 8014d76:	f7f2 f94f 	bl	8007018 <__aeabi_i2d>
 8014d7a:	a37d      	add	r3, pc, #500	; (adr r3, 8014f70 <_dtoa_r+0x2f8>)
 8014d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d80:	f7f2 f9b4 	bl	80070ec <__aeabi_dmul>
 8014d84:	4602      	mov	r2, r0
 8014d86:	460b      	mov	r3, r1
 8014d88:	4630      	mov	r0, r6
 8014d8a:	4639      	mov	r1, r7
 8014d8c:	f7f1 fff8 	bl	8006d80 <__adddf3>
 8014d90:	4606      	mov	r6, r0
 8014d92:	460f      	mov	r7, r1
 8014d94:	f7f2 fc5a 	bl	800764c <__aeabi_d2iz>
 8014d98:	2200      	movs	r2, #0
 8014d9a:	4682      	mov	sl, r0
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	4630      	mov	r0, r6
 8014da0:	4639      	mov	r1, r7
 8014da2:	f7f2 fc15 	bl	80075d0 <__aeabi_dcmplt>
 8014da6:	b148      	cbz	r0, 8014dbc <_dtoa_r+0x144>
 8014da8:	4650      	mov	r0, sl
 8014daa:	f7f2 f935 	bl	8007018 <__aeabi_i2d>
 8014dae:	4632      	mov	r2, r6
 8014db0:	463b      	mov	r3, r7
 8014db2:	f7f2 fc03 	bl	80075bc <__aeabi_dcmpeq>
 8014db6:	b908      	cbnz	r0, 8014dbc <_dtoa_r+0x144>
 8014db8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014dbc:	f1ba 0f16 	cmp.w	sl, #22
 8014dc0:	d859      	bhi.n	8014e76 <_dtoa_r+0x1fe>
 8014dc2:	4970      	ldr	r1, [pc, #448]	; (8014f84 <_dtoa_r+0x30c>)
 8014dc4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014dd0:	f7f2 fc1c 	bl	800760c <__aeabi_dcmpgt>
 8014dd4:	2800      	cmp	r0, #0
 8014dd6:	d050      	beq.n	8014e7a <_dtoa_r+0x202>
 8014dd8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014ddc:	2300      	movs	r3, #0
 8014dde:	930f      	str	r3, [sp, #60]	; 0x3c
 8014de0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014de2:	1b5d      	subs	r5, r3, r5
 8014de4:	f1b5 0801 	subs.w	r8, r5, #1
 8014de8:	bf49      	itett	mi
 8014dea:	f1c5 0301 	rsbmi	r3, r5, #1
 8014dee:	2300      	movpl	r3, #0
 8014df0:	9305      	strmi	r3, [sp, #20]
 8014df2:	f04f 0800 	movmi.w	r8, #0
 8014df6:	bf58      	it	pl
 8014df8:	9305      	strpl	r3, [sp, #20]
 8014dfa:	f1ba 0f00 	cmp.w	sl, #0
 8014dfe:	db3e      	blt.n	8014e7e <_dtoa_r+0x206>
 8014e00:	2300      	movs	r3, #0
 8014e02:	44d0      	add	r8, sl
 8014e04:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014e08:	9307      	str	r3, [sp, #28]
 8014e0a:	9b06      	ldr	r3, [sp, #24]
 8014e0c:	2b09      	cmp	r3, #9
 8014e0e:	f200 808d 	bhi.w	8014f2c <_dtoa_r+0x2b4>
 8014e12:	2b05      	cmp	r3, #5
 8014e14:	bfc4      	itt	gt
 8014e16:	3b04      	subgt	r3, #4
 8014e18:	9306      	strgt	r3, [sp, #24]
 8014e1a:	9b06      	ldr	r3, [sp, #24]
 8014e1c:	f1a3 0302 	sub.w	r3, r3, #2
 8014e20:	bfcc      	ite	gt
 8014e22:	2500      	movgt	r5, #0
 8014e24:	2501      	movle	r5, #1
 8014e26:	2b03      	cmp	r3, #3
 8014e28:	f200 808c 	bhi.w	8014f44 <_dtoa_r+0x2cc>
 8014e2c:	e8df f003 	tbb	[pc, r3]
 8014e30:	6e317c7a 	.word	0x6e317c7a
 8014e34:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014e38:	441d      	add	r5, r3
 8014e3a:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014e3e:	2820      	cmp	r0, #32
 8014e40:	dd13      	ble.n	8014e6a <_dtoa_r+0x1f2>
 8014e42:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014e46:	9b00      	ldr	r3, [sp, #0]
 8014e48:	fa08 f800 	lsl.w	r8, r8, r0
 8014e4c:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014e50:	fa23 f000 	lsr.w	r0, r3, r0
 8014e54:	ea48 0000 	orr.w	r0, r8, r0
 8014e58:	f7f2 f8ce 	bl	8006ff8 <__aeabi_ui2d>
 8014e5c:	2301      	movs	r3, #1
 8014e5e:	4682      	mov	sl, r0
 8014e60:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014e64:	3d01      	subs	r5, #1
 8014e66:	9313      	str	r3, [sp, #76]	; 0x4c
 8014e68:	e772      	b.n	8014d50 <_dtoa_r+0xd8>
 8014e6a:	9b00      	ldr	r3, [sp, #0]
 8014e6c:	f1c0 0020 	rsb	r0, r0, #32
 8014e70:	fa03 f000 	lsl.w	r0, r3, r0
 8014e74:	e7f0      	b.n	8014e58 <_dtoa_r+0x1e0>
 8014e76:	2301      	movs	r3, #1
 8014e78:	e7b1      	b.n	8014dde <_dtoa_r+0x166>
 8014e7a:	900f      	str	r0, [sp, #60]	; 0x3c
 8014e7c:	e7b0      	b.n	8014de0 <_dtoa_r+0x168>
 8014e7e:	9b05      	ldr	r3, [sp, #20]
 8014e80:	eba3 030a 	sub.w	r3, r3, sl
 8014e84:	9305      	str	r3, [sp, #20]
 8014e86:	f1ca 0300 	rsb	r3, sl, #0
 8014e8a:	9307      	str	r3, [sp, #28]
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	930e      	str	r3, [sp, #56]	; 0x38
 8014e90:	e7bb      	b.n	8014e0a <_dtoa_r+0x192>
 8014e92:	2301      	movs	r3, #1
 8014e94:	930a      	str	r3, [sp, #40]	; 0x28
 8014e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	dd56      	ble.n	8014f4a <_dtoa_r+0x2d2>
 8014e9c:	9302      	str	r3, [sp, #8]
 8014e9e:	4699      	mov	r9, r3
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	6462      	str	r2, [r4, #68]	; 0x44
 8014ea4:	2204      	movs	r2, #4
 8014ea6:	f102 0014 	add.w	r0, r2, #20
 8014eaa:	4298      	cmp	r0, r3
 8014eac:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014eae:	d951      	bls.n	8014f54 <_dtoa_r+0x2dc>
 8014eb0:	4620      	mov	r0, r4
 8014eb2:	f000 ff2f 	bl	8015d14 <_Balloc>
 8014eb6:	f1b9 0f0e 	cmp.w	r9, #14
 8014eba:	4683      	mov	fp, r0
 8014ebc:	6420      	str	r0, [r4, #64]	; 0x40
 8014ebe:	f200 80e8 	bhi.w	8015092 <_dtoa_r+0x41a>
 8014ec2:	2d00      	cmp	r5, #0
 8014ec4:	f000 80e5 	beq.w	8015092 <_dtoa_r+0x41a>
 8014ec8:	ed9d 7b00 	vldr	d7, [sp]
 8014ecc:	f1ba 0f00 	cmp.w	sl, #0
 8014ed0:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014ed4:	dd76      	ble.n	8014fc4 <_dtoa_r+0x34c>
 8014ed6:	4a2b      	ldr	r2, [pc, #172]	; (8014f84 <_dtoa_r+0x30c>)
 8014ed8:	f00a 030f 	and.w	r3, sl, #15
 8014edc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014ee0:	ed93 7b00 	vldr	d7, [r3]
 8014ee4:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014ee8:	06f0      	lsls	r0, r6, #27
 8014eea:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014eee:	d567      	bpl.n	8014fc0 <_dtoa_r+0x348>
 8014ef0:	4b25      	ldr	r3, [pc, #148]	; (8014f88 <_dtoa_r+0x310>)
 8014ef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014ef6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014efa:	f7f2 fa21 	bl	8007340 <__aeabi_ddiv>
 8014efe:	e9cd 0100 	strd	r0, r1, [sp]
 8014f02:	f006 060f 	and.w	r6, r6, #15
 8014f06:	2503      	movs	r5, #3
 8014f08:	4f1f      	ldr	r7, [pc, #124]	; (8014f88 <_dtoa_r+0x310>)
 8014f0a:	e04e      	b.n	8014faa <_dtoa_r+0x332>
 8014f0c:	2301      	movs	r3, #1
 8014f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8014f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f12:	4453      	add	r3, sl
 8014f14:	f103 0901 	add.w	r9, r3, #1
 8014f18:	9302      	str	r3, [sp, #8]
 8014f1a:	464b      	mov	r3, r9
 8014f1c:	2b01      	cmp	r3, #1
 8014f1e:	bfb8      	it	lt
 8014f20:	2301      	movlt	r3, #1
 8014f22:	e7bd      	b.n	8014ea0 <_dtoa_r+0x228>
 8014f24:	2300      	movs	r3, #0
 8014f26:	e7b5      	b.n	8014e94 <_dtoa_r+0x21c>
 8014f28:	2300      	movs	r3, #0
 8014f2a:	e7f0      	b.n	8014f0e <_dtoa_r+0x296>
 8014f2c:	2501      	movs	r5, #1
 8014f2e:	2300      	movs	r3, #0
 8014f30:	9306      	str	r3, [sp, #24]
 8014f32:	950a      	str	r5, [sp, #40]	; 0x28
 8014f34:	f04f 33ff 	mov.w	r3, #4294967295
 8014f38:	9302      	str	r3, [sp, #8]
 8014f3a:	4699      	mov	r9, r3
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	2312      	movs	r3, #18
 8014f40:	920b      	str	r2, [sp, #44]	; 0x2c
 8014f42:	e7ad      	b.n	8014ea0 <_dtoa_r+0x228>
 8014f44:	2301      	movs	r3, #1
 8014f46:	930a      	str	r3, [sp, #40]	; 0x28
 8014f48:	e7f4      	b.n	8014f34 <_dtoa_r+0x2bc>
 8014f4a:	2301      	movs	r3, #1
 8014f4c:	9302      	str	r3, [sp, #8]
 8014f4e:	4699      	mov	r9, r3
 8014f50:	461a      	mov	r2, r3
 8014f52:	e7f5      	b.n	8014f40 <_dtoa_r+0x2c8>
 8014f54:	3101      	adds	r1, #1
 8014f56:	6461      	str	r1, [r4, #68]	; 0x44
 8014f58:	0052      	lsls	r2, r2, #1
 8014f5a:	e7a4      	b.n	8014ea6 <_dtoa_r+0x22e>
 8014f5c:	f3af 8000 	nop.w
 8014f60:	636f4361 	.word	0x636f4361
 8014f64:	3fd287a7 	.word	0x3fd287a7
 8014f68:	8b60c8b3 	.word	0x8b60c8b3
 8014f6c:	3fc68a28 	.word	0x3fc68a28
 8014f70:	509f79fb 	.word	0x509f79fb
 8014f74:	3fd34413 	.word	0x3fd34413
 8014f78:	7ff00000 	.word	0x7ff00000
 8014f7c:	080184fb 	.word	0x080184fb
 8014f80:	3ff80000 	.word	0x3ff80000
 8014f84:	08018560 	.word	0x08018560
 8014f88:	08018538 	.word	0x08018538
 8014f8c:	08018525 	.word	0x08018525
 8014f90:	07f1      	lsls	r1, r6, #31
 8014f92:	d508      	bpl.n	8014fa6 <_dtoa_r+0x32e>
 8014f94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014f9c:	f7f2 f8a6 	bl	80070ec <__aeabi_dmul>
 8014fa0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014fa4:	3501      	adds	r5, #1
 8014fa6:	1076      	asrs	r6, r6, #1
 8014fa8:	3708      	adds	r7, #8
 8014faa:	2e00      	cmp	r6, #0
 8014fac:	d1f0      	bne.n	8014f90 <_dtoa_r+0x318>
 8014fae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014fb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014fb6:	f7f2 f9c3 	bl	8007340 <__aeabi_ddiv>
 8014fba:	e9cd 0100 	strd	r0, r1, [sp]
 8014fbe:	e01a      	b.n	8014ff6 <_dtoa_r+0x37e>
 8014fc0:	2502      	movs	r5, #2
 8014fc2:	e7a1      	b.n	8014f08 <_dtoa_r+0x290>
 8014fc4:	f000 80a0 	beq.w	8015108 <_dtoa_r+0x490>
 8014fc8:	f1ca 0600 	rsb	r6, sl, #0
 8014fcc:	4b9f      	ldr	r3, [pc, #636]	; (801524c <_dtoa_r+0x5d4>)
 8014fce:	4fa0      	ldr	r7, [pc, #640]	; (8015250 <_dtoa_r+0x5d8>)
 8014fd0:	f006 020f 	and.w	r2, r6, #15
 8014fd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014fe0:	f7f2 f884 	bl	80070ec <__aeabi_dmul>
 8014fe4:	e9cd 0100 	strd	r0, r1, [sp]
 8014fe8:	1136      	asrs	r6, r6, #4
 8014fea:	2300      	movs	r3, #0
 8014fec:	2502      	movs	r5, #2
 8014fee:	2e00      	cmp	r6, #0
 8014ff0:	d17f      	bne.n	80150f2 <_dtoa_r+0x47a>
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d1e1      	bne.n	8014fba <_dtoa_r+0x342>
 8014ff6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	f000 8087 	beq.w	801510c <_dtoa_r+0x494>
 8014ffe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015002:	2200      	movs	r2, #0
 8015004:	4b93      	ldr	r3, [pc, #588]	; (8015254 <_dtoa_r+0x5dc>)
 8015006:	4630      	mov	r0, r6
 8015008:	4639      	mov	r1, r7
 801500a:	f7f2 fae1 	bl	80075d0 <__aeabi_dcmplt>
 801500e:	2800      	cmp	r0, #0
 8015010:	d07c      	beq.n	801510c <_dtoa_r+0x494>
 8015012:	f1b9 0f00 	cmp.w	r9, #0
 8015016:	d079      	beq.n	801510c <_dtoa_r+0x494>
 8015018:	9b02      	ldr	r3, [sp, #8]
 801501a:	2b00      	cmp	r3, #0
 801501c:	dd35      	ble.n	801508a <_dtoa_r+0x412>
 801501e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015022:	9308      	str	r3, [sp, #32]
 8015024:	4639      	mov	r1, r7
 8015026:	2200      	movs	r2, #0
 8015028:	4b8b      	ldr	r3, [pc, #556]	; (8015258 <_dtoa_r+0x5e0>)
 801502a:	4630      	mov	r0, r6
 801502c:	f7f2 f85e 	bl	80070ec <__aeabi_dmul>
 8015030:	e9cd 0100 	strd	r0, r1, [sp]
 8015034:	9f02      	ldr	r7, [sp, #8]
 8015036:	3501      	adds	r5, #1
 8015038:	4628      	mov	r0, r5
 801503a:	f7f1 ffed 	bl	8007018 <__aeabi_i2d>
 801503e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015042:	f7f2 f853 	bl	80070ec <__aeabi_dmul>
 8015046:	2200      	movs	r2, #0
 8015048:	4b84      	ldr	r3, [pc, #528]	; (801525c <_dtoa_r+0x5e4>)
 801504a:	f7f1 fe99 	bl	8006d80 <__adddf3>
 801504e:	4605      	mov	r5, r0
 8015050:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015054:	2f00      	cmp	r7, #0
 8015056:	d15d      	bne.n	8015114 <_dtoa_r+0x49c>
 8015058:	2200      	movs	r2, #0
 801505a:	4b81      	ldr	r3, [pc, #516]	; (8015260 <_dtoa_r+0x5e8>)
 801505c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015060:	f7f1 fe8c 	bl	8006d7c <__aeabi_dsub>
 8015064:	462a      	mov	r2, r5
 8015066:	4633      	mov	r3, r6
 8015068:	e9cd 0100 	strd	r0, r1, [sp]
 801506c:	f7f2 face 	bl	800760c <__aeabi_dcmpgt>
 8015070:	2800      	cmp	r0, #0
 8015072:	f040 8288 	bne.w	8015586 <_dtoa_r+0x90e>
 8015076:	462a      	mov	r2, r5
 8015078:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801507c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015080:	f7f2 faa6 	bl	80075d0 <__aeabi_dcmplt>
 8015084:	2800      	cmp	r0, #0
 8015086:	f040 827c 	bne.w	8015582 <_dtoa_r+0x90a>
 801508a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801508e:	e9cd 2300 	strd	r2, r3, [sp]
 8015092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015094:	2b00      	cmp	r3, #0
 8015096:	f2c0 8150 	blt.w	801533a <_dtoa_r+0x6c2>
 801509a:	f1ba 0f0e 	cmp.w	sl, #14
 801509e:	f300 814c 	bgt.w	801533a <_dtoa_r+0x6c2>
 80150a2:	4b6a      	ldr	r3, [pc, #424]	; (801524c <_dtoa_r+0x5d4>)
 80150a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80150a8:	ed93 7b00 	vldr	d7, [r3]
 80150ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80150b4:	f280 80d8 	bge.w	8015268 <_dtoa_r+0x5f0>
 80150b8:	f1b9 0f00 	cmp.w	r9, #0
 80150bc:	f300 80d4 	bgt.w	8015268 <_dtoa_r+0x5f0>
 80150c0:	f040 825e 	bne.w	8015580 <_dtoa_r+0x908>
 80150c4:	2200      	movs	r2, #0
 80150c6:	4b66      	ldr	r3, [pc, #408]	; (8015260 <_dtoa_r+0x5e8>)
 80150c8:	ec51 0b17 	vmov	r0, r1, d7
 80150cc:	f7f2 f80e 	bl	80070ec <__aeabi_dmul>
 80150d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80150d4:	f7f2 fa90 	bl	80075f8 <__aeabi_dcmpge>
 80150d8:	464f      	mov	r7, r9
 80150da:	464e      	mov	r6, r9
 80150dc:	2800      	cmp	r0, #0
 80150de:	f040 8234 	bne.w	801554a <_dtoa_r+0x8d2>
 80150e2:	2331      	movs	r3, #49	; 0x31
 80150e4:	f10b 0501 	add.w	r5, fp, #1
 80150e8:	f88b 3000 	strb.w	r3, [fp]
 80150ec:	f10a 0a01 	add.w	sl, sl, #1
 80150f0:	e22f      	b.n	8015552 <_dtoa_r+0x8da>
 80150f2:	07f2      	lsls	r2, r6, #31
 80150f4:	d505      	bpl.n	8015102 <_dtoa_r+0x48a>
 80150f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80150fa:	f7f1 fff7 	bl	80070ec <__aeabi_dmul>
 80150fe:	3501      	adds	r5, #1
 8015100:	2301      	movs	r3, #1
 8015102:	1076      	asrs	r6, r6, #1
 8015104:	3708      	adds	r7, #8
 8015106:	e772      	b.n	8014fee <_dtoa_r+0x376>
 8015108:	2502      	movs	r5, #2
 801510a:	e774      	b.n	8014ff6 <_dtoa_r+0x37e>
 801510c:	f8cd a020 	str.w	sl, [sp, #32]
 8015110:	464f      	mov	r7, r9
 8015112:	e791      	b.n	8015038 <_dtoa_r+0x3c0>
 8015114:	4b4d      	ldr	r3, [pc, #308]	; (801524c <_dtoa_r+0x5d4>)
 8015116:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801511a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801511e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015120:	2b00      	cmp	r3, #0
 8015122:	d047      	beq.n	80151b4 <_dtoa_r+0x53c>
 8015124:	4602      	mov	r2, r0
 8015126:	460b      	mov	r3, r1
 8015128:	2000      	movs	r0, #0
 801512a:	494e      	ldr	r1, [pc, #312]	; (8015264 <_dtoa_r+0x5ec>)
 801512c:	f7f2 f908 	bl	8007340 <__aeabi_ddiv>
 8015130:	462a      	mov	r2, r5
 8015132:	4633      	mov	r3, r6
 8015134:	f7f1 fe22 	bl	8006d7c <__aeabi_dsub>
 8015138:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801513c:	465d      	mov	r5, fp
 801513e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015142:	f7f2 fa83 	bl	800764c <__aeabi_d2iz>
 8015146:	4606      	mov	r6, r0
 8015148:	f7f1 ff66 	bl	8007018 <__aeabi_i2d>
 801514c:	4602      	mov	r2, r0
 801514e:	460b      	mov	r3, r1
 8015150:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015154:	f7f1 fe12 	bl	8006d7c <__aeabi_dsub>
 8015158:	3630      	adds	r6, #48	; 0x30
 801515a:	f805 6b01 	strb.w	r6, [r5], #1
 801515e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015162:	e9cd 0100 	strd	r0, r1, [sp]
 8015166:	f7f2 fa33 	bl	80075d0 <__aeabi_dcmplt>
 801516a:	2800      	cmp	r0, #0
 801516c:	d163      	bne.n	8015236 <_dtoa_r+0x5be>
 801516e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015172:	2000      	movs	r0, #0
 8015174:	4937      	ldr	r1, [pc, #220]	; (8015254 <_dtoa_r+0x5dc>)
 8015176:	f7f1 fe01 	bl	8006d7c <__aeabi_dsub>
 801517a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801517e:	f7f2 fa27 	bl	80075d0 <__aeabi_dcmplt>
 8015182:	2800      	cmp	r0, #0
 8015184:	f040 80b7 	bne.w	80152f6 <_dtoa_r+0x67e>
 8015188:	eba5 030b 	sub.w	r3, r5, fp
 801518c:	429f      	cmp	r7, r3
 801518e:	f77f af7c 	ble.w	801508a <_dtoa_r+0x412>
 8015192:	2200      	movs	r2, #0
 8015194:	4b30      	ldr	r3, [pc, #192]	; (8015258 <_dtoa_r+0x5e0>)
 8015196:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801519a:	f7f1 ffa7 	bl	80070ec <__aeabi_dmul>
 801519e:	2200      	movs	r2, #0
 80151a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80151a4:	4b2c      	ldr	r3, [pc, #176]	; (8015258 <_dtoa_r+0x5e0>)
 80151a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151aa:	f7f1 ff9f 	bl	80070ec <__aeabi_dmul>
 80151ae:	e9cd 0100 	strd	r0, r1, [sp]
 80151b2:	e7c4      	b.n	801513e <_dtoa_r+0x4c6>
 80151b4:	462a      	mov	r2, r5
 80151b6:	4633      	mov	r3, r6
 80151b8:	f7f1 ff98 	bl	80070ec <__aeabi_dmul>
 80151bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80151c0:	eb0b 0507 	add.w	r5, fp, r7
 80151c4:	465e      	mov	r6, fp
 80151c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151ca:	f7f2 fa3f 	bl	800764c <__aeabi_d2iz>
 80151ce:	4607      	mov	r7, r0
 80151d0:	f7f1 ff22 	bl	8007018 <__aeabi_i2d>
 80151d4:	3730      	adds	r7, #48	; 0x30
 80151d6:	4602      	mov	r2, r0
 80151d8:	460b      	mov	r3, r1
 80151da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151de:	f7f1 fdcd 	bl	8006d7c <__aeabi_dsub>
 80151e2:	f806 7b01 	strb.w	r7, [r6], #1
 80151e6:	42ae      	cmp	r6, r5
 80151e8:	e9cd 0100 	strd	r0, r1, [sp]
 80151ec:	f04f 0200 	mov.w	r2, #0
 80151f0:	d126      	bne.n	8015240 <_dtoa_r+0x5c8>
 80151f2:	4b1c      	ldr	r3, [pc, #112]	; (8015264 <_dtoa_r+0x5ec>)
 80151f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80151f8:	f7f1 fdc2 	bl	8006d80 <__adddf3>
 80151fc:	4602      	mov	r2, r0
 80151fe:	460b      	mov	r3, r1
 8015200:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015204:	f7f2 fa02 	bl	800760c <__aeabi_dcmpgt>
 8015208:	2800      	cmp	r0, #0
 801520a:	d174      	bne.n	80152f6 <_dtoa_r+0x67e>
 801520c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015210:	2000      	movs	r0, #0
 8015212:	4914      	ldr	r1, [pc, #80]	; (8015264 <_dtoa_r+0x5ec>)
 8015214:	f7f1 fdb2 	bl	8006d7c <__aeabi_dsub>
 8015218:	4602      	mov	r2, r0
 801521a:	460b      	mov	r3, r1
 801521c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015220:	f7f2 f9d6 	bl	80075d0 <__aeabi_dcmplt>
 8015224:	2800      	cmp	r0, #0
 8015226:	f43f af30 	beq.w	801508a <_dtoa_r+0x412>
 801522a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801522e:	2b30      	cmp	r3, #48	; 0x30
 8015230:	f105 32ff 	add.w	r2, r5, #4294967295
 8015234:	d002      	beq.n	801523c <_dtoa_r+0x5c4>
 8015236:	f8dd a020 	ldr.w	sl, [sp, #32]
 801523a:	e04a      	b.n	80152d2 <_dtoa_r+0x65a>
 801523c:	4615      	mov	r5, r2
 801523e:	e7f4      	b.n	801522a <_dtoa_r+0x5b2>
 8015240:	4b05      	ldr	r3, [pc, #20]	; (8015258 <_dtoa_r+0x5e0>)
 8015242:	f7f1 ff53 	bl	80070ec <__aeabi_dmul>
 8015246:	e9cd 0100 	strd	r0, r1, [sp]
 801524a:	e7bc      	b.n	80151c6 <_dtoa_r+0x54e>
 801524c:	08018560 	.word	0x08018560
 8015250:	08018538 	.word	0x08018538
 8015254:	3ff00000 	.word	0x3ff00000
 8015258:	40240000 	.word	0x40240000
 801525c:	401c0000 	.word	0x401c0000
 8015260:	40140000 	.word	0x40140000
 8015264:	3fe00000 	.word	0x3fe00000
 8015268:	e9dd 6700 	ldrd	r6, r7, [sp]
 801526c:	465d      	mov	r5, fp
 801526e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015272:	4630      	mov	r0, r6
 8015274:	4639      	mov	r1, r7
 8015276:	f7f2 f863 	bl	8007340 <__aeabi_ddiv>
 801527a:	f7f2 f9e7 	bl	800764c <__aeabi_d2iz>
 801527e:	4680      	mov	r8, r0
 8015280:	f7f1 feca 	bl	8007018 <__aeabi_i2d>
 8015284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015288:	f7f1 ff30 	bl	80070ec <__aeabi_dmul>
 801528c:	4602      	mov	r2, r0
 801528e:	460b      	mov	r3, r1
 8015290:	4630      	mov	r0, r6
 8015292:	4639      	mov	r1, r7
 8015294:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015298:	f7f1 fd70 	bl	8006d7c <__aeabi_dsub>
 801529c:	f805 6b01 	strb.w	r6, [r5], #1
 80152a0:	eba5 060b 	sub.w	r6, r5, fp
 80152a4:	45b1      	cmp	r9, r6
 80152a6:	4602      	mov	r2, r0
 80152a8:	460b      	mov	r3, r1
 80152aa:	d139      	bne.n	8015320 <_dtoa_r+0x6a8>
 80152ac:	f7f1 fd68 	bl	8006d80 <__adddf3>
 80152b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152b4:	4606      	mov	r6, r0
 80152b6:	460f      	mov	r7, r1
 80152b8:	f7f2 f9a8 	bl	800760c <__aeabi_dcmpgt>
 80152bc:	b9c8      	cbnz	r0, 80152f2 <_dtoa_r+0x67a>
 80152be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152c2:	4630      	mov	r0, r6
 80152c4:	4639      	mov	r1, r7
 80152c6:	f7f2 f979 	bl	80075bc <__aeabi_dcmpeq>
 80152ca:	b110      	cbz	r0, 80152d2 <_dtoa_r+0x65a>
 80152cc:	f018 0f01 	tst.w	r8, #1
 80152d0:	d10f      	bne.n	80152f2 <_dtoa_r+0x67a>
 80152d2:	9904      	ldr	r1, [sp, #16]
 80152d4:	4620      	mov	r0, r4
 80152d6:	f000 fd42 	bl	8015d5e <_Bfree>
 80152da:	2300      	movs	r3, #0
 80152dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80152de:	702b      	strb	r3, [r5, #0]
 80152e0:	f10a 0301 	add.w	r3, sl, #1
 80152e4:	6013      	str	r3, [r2, #0]
 80152e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	f43f acff 	beq.w	8014cec <_dtoa_r+0x74>
 80152ee:	601d      	str	r5, [r3, #0]
 80152f0:	e4fc      	b.n	8014cec <_dtoa_r+0x74>
 80152f2:	f8cd a020 	str.w	sl, [sp, #32]
 80152f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80152fa:	2a39      	cmp	r2, #57	; 0x39
 80152fc:	f105 33ff 	add.w	r3, r5, #4294967295
 8015300:	d108      	bne.n	8015314 <_dtoa_r+0x69c>
 8015302:	459b      	cmp	fp, r3
 8015304:	d10a      	bne.n	801531c <_dtoa_r+0x6a4>
 8015306:	9b08      	ldr	r3, [sp, #32]
 8015308:	3301      	adds	r3, #1
 801530a:	9308      	str	r3, [sp, #32]
 801530c:	2330      	movs	r3, #48	; 0x30
 801530e:	f88b 3000 	strb.w	r3, [fp]
 8015312:	465b      	mov	r3, fp
 8015314:	781a      	ldrb	r2, [r3, #0]
 8015316:	3201      	adds	r2, #1
 8015318:	701a      	strb	r2, [r3, #0]
 801531a:	e78c      	b.n	8015236 <_dtoa_r+0x5be>
 801531c:	461d      	mov	r5, r3
 801531e:	e7ea      	b.n	80152f6 <_dtoa_r+0x67e>
 8015320:	2200      	movs	r2, #0
 8015322:	4b9b      	ldr	r3, [pc, #620]	; (8015590 <_dtoa_r+0x918>)
 8015324:	f7f1 fee2 	bl	80070ec <__aeabi_dmul>
 8015328:	2200      	movs	r2, #0
 801532a:	2300      	movs	r3, #0
 801532c:	4606      	mov	r6, r0
 801532e:	460f      	mov	r7, r1
 8015330:	f7f2 f944 	bl	80075bc <__aeabi_dcmpeq>
 8015334:	2800      	cmp	r0, #0
 8015336:	d09a      	beq.n	801526e <_dtoa_r+0x5f6>
 8015338:	e7cb      	b.n	80152d2 <_dtoa_r+0x65a>
 801533a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801533c:	2a00      	cmp	r2, #0
 801533e:	f000 808b 	beq.w	8015458 <_dtoa_r+0x7e0>
 8015342:	9a06      	ldr	r2, [sp, #24]
 8015344:	2a01      	cmp	r2, #1
 8015346:	dc6e      	bgt.n	8015426 <_dtoa_r+0x7ae>
 8015348:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801534a:	2a00      	cmp	r2, #0
 801534c:	d067      	beq.n	801541e <_dtoa_r+0x7a6>
 801534e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015352:	9f07      	ldr	r7, [sp, #28]
 8015354:	9d05      	ldr	r5, [sp, #20]
 8015356:	9a05      	ldr	r2, [sp, #20]
 8015358:	2101      	movs	r1, #1
 801535a:	441a      	add	r2, r3
 801535c:	4620      	mov	r0, r4
 801535e:	9205      	str	r2, [sp, #20]
 8015360:	4498      	add	r8, r3
 8015362:	f000 fd8e 	bl	8015e82 <__i2b>
 8015366:	4606      	mov	r6, r0
 8015368:	2d00      	cmp	r5, #0
 801536a:	dd0c      	ble.n	8015386 <_dtoa_r+0x70e>
 801536c:	f1b8 0f00 	cmp.w	r8, #0
 8015370:	dd09      	ble.n	8015386 <_dtoa_r+0x70e>
 8015372:	4545      	cmp	r5, r8
 8015374:	9a05      	ldr	r2, [sp, #20]
 8015376:	462b      	mov	r3, r5
 8015378:	bfa8      	it	ge
 801537a:	4643      	movge	r3, r8
 801537c:	1ad2      	subs	r2, r2, r3
 801537e:	9205      	str	r2, [sp, #20]
 8015380:	1aed      	subs	r5, r5, r3
 8015382:	eba8 0803 	sub.w	r8, r8, r3
 8015386:	9b07      	ldr	r3, [sp, #28]
 8015388:	b1eb      	cbz	r3, 80153c6 <_dtoa_r+0x74e>
 801538a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801538c:	2b00      	cmp	r3, #0
 801538e:	d067      	beq.n	8015460 <_dtoa_r+0x7e8>
 8015390:	b18f      	cbz	r7, 80153b6 <_dtoa_r+0x73e>
 8015392:	4631      	mov	r1, r6
 8015394:	463a      	mov	r2, r7
 8015396:	4620      	mov	r0, r4
 8015398:	f000 fe12 	bl	8015fc0 <__pow5mult>
 801539c:	9a04      	ldr	r2, [sp, #16]
 801539e:	4601      	mov	r1, r0
 80153a0:	4606      	mov	r6, r0
 80153a2:	4620      	mov	r0, r4
 80153a4:	f000 fd76 	bl	8015e94 <__multiply>
 80153a8:	9904      	ldr	r1, [sp, #16]
 80153aa:	9008      	str	r0, [sp, #32]
 80153ac:	4620      	mov	r0, r4
 80153ae:	f000 fcd6 	bl	8015d5e <_Bfree>
 80153b2:	9b08      	ldr	r3, [sp, #32]
 80153b4:	9304      	str	r3, [sp, #16]
 80153b6:	9b07      	ldr	r3, [sp, #28]
 80153b8:	1bda      	subs	r2, r3, r7
 80153ba:	d004      	beq.n	80153c6 <_dtoa_r+0x74e>
 80153bc:	9904      	ldr	r1, [sp, #16]
 80153be:	4620      	mov	r0, r4
 80153c0:	f000 fdfe 	bl	8015fc0 <__pow5mult>
 80153c4:	9004      	str	r0, [sp, #16]
 80153c6:	2101      	movs	r1, #1
 80153c8:	4620      	mov	r0, r4
 80153ca:	f000 fd5a 	bl	8015e82 <__i2b>
 80153ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153d0:	4607      	mov	r7, r0
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	f000 81cf 	beq.w	8015776 <_dtoa_r+0xafe>
 80153d8:	461a      	mov	r2, r3
 80153da:	4601      	mov	r1, r0
 80153dc:	4620      	mov	r0, r4
 80153de:	f000 fdef 	bl	8015fc0 <__pow5mult>
 80153e2:	9b06      	ldr	r3, [sp, #24]
 80153e4:	2b01      	cmp	r3, #1
 80153e6:	4607      	mov	r7, r0
 80153e8:	dc40      	bgt.n	801546c <_dtoa_r+0x7f4>
 80153ea:	9b00      	ldr	r3, [sp, #0]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d139      	bne.n	8015464 <_dtoa_r+0x7ec>
 80153f0:	9b01      	ldr	r3, [sp, #4]
 80153f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d136      	bne.n	8015468 <_dtoa_r+0x7f0>
 80153fa:	9b01      	ldr	r3, [sp, #4]
 80153fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015400:	0d1b      	lsrs	r3, r3, #20
 8015402:	051b      	lsls	r3, r3, #20
 8015404:	b12b      	cbz	r3, 8015412 <_dtoa_r+0x79a>
 8015406:	9b05      	ldr	r3, [sp, #20]
 8015408:	3301      	adds	r3, #1
 801540a:	9305      	str	r3, [sp, #20]
 801540c:	f108 0801 	add.w	r8, r8, #1
 8015410:	2301      	movs	r3, #1
 8015412:	9307      	str	r3, [sp, #28]
 8015414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015416:	2b00      	cmp	r3, #0
 8015418:	d12a      	bne.n	8015470 <_dtoa_r+0x7f8>
 801541a:	2001      	movs	r0, #1
 801541c:	e030      	b.n	8015480 <_dtoa_r+0x808>
 801541e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015420:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015424:	e795      	b.n	8015352 <_dtoa_r+0x6da>
 8015426:	9b07      	ldr	r3, [sp, #28]
 8015428:	f109 37ff 	add.w	r7, r9, #4294967295
 801542c:	42bb      	cmp	r3, r7
 801542e:	bfbf      	itttt	lt
 8015430:	9b07      	ldrlt	r3, [sp, #28]
 8015432:	9707      	strlt	r7, [sp, #28]
 8015434:	1afa      	sublt	r2, r7, r3
 8015436:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015438:	bfbb      	ittet	lt
 801543a:	189b      	addlt	r3, r3, r2
 801543c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801543e:	1bdf      	subge	r7, r3, r7
 8015440:	2700      	movlt	r7, #0
 8015442:	f1b9 0f00 	cmp.w	r9, #0
 8015446:	bfb5      	itete	lt
 8015448:	9b05      	ldrlt	r3, [sp, #20]
 801544a:	9d05      	ldrge	r5, [sp, #20]
 801544c:	eba3 0509 	sublt.w	r5, r3, r9
 8015450:	464b      	movge	r3, r9
 8015452:	bfb8      	it	lt
 8015454:	2300      	movlt	r3, #0
 8015456:	e77e      	b.n	8015356 <_dtoa_r+0x6de>
 8015458:	9f07      	ldr	r7, [sp, #28]
 801545a:	9d05      	ldr	r5, [sp, #20]
 801545c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801545e:	e783      	b.n	8015368 <_dtoa_r+0x6f0>
 8015460:	9a07      	ldr	r2, [sp, #28]
 8015462:	e7ab      	b.n	80153bc <_dtoa_r+0x744>
 8015464:	2300      	movs	r3, #0
 8015466:	e7d4      	b.n	8015412 <_dtoa_r+0x79a>
 8015468:	9b00      	ldr	r3, [sp, #0]
 801546a:	e7d2      	b.n	8015412 <_dtoa_r+0x79a>
 801546c:	2300      	movs	r3, #0
 801546e:	9307      	str	r3, [sp, #28]
 8015470:	693b      	ldr	r3, [r7, #16]
 8015472:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015476:	6918      	ldr	r0, [r3, #16]
 8015478:	f000 fcb5 	bl	8015de6 <__hi0bits>
 801547c:	f1c0 0020 	rsb	r0, r0, #32
 8015480:	4440      	add	r0, r8
 8015482:	f010 001f 	ands.w	r0, r0, #31
 8015486:	d047      	beq.n	8015518 <_dtoa_r+0x8a0>
 8015488:	f1c0 0320 	rsb	r3, r0, #32
 801548c:	2b04      	cmp	r3, #4
 801548e:	dd3b      	ble.n	8015508 <_dtoa_r+0x890>
 8015490:	9b05      	ldr	r3, [sp, #20]
 8015492:	f1c0 001c 	rsb	r0, r0, #28
 8015496:	4403      	add	r3, r0
 8015498:	9305      	str	r3, [sp, #20]
 801549a:	4405      	add	r5, r0
 801549c:	4480      	add	r8, r0
 801549e:	9b05      	ldr	r3, [sp, #20]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	dd05      	ble.n	80154b0 <_dtoa_r+0x838>
 80154a4:	461a      	mov	r2, r3
 80154a6:	9904      	ldr	r1, [sp, #16]
 80154a8:	4620      	mov	r0, r4
 80154aa:	f000 fdc9 	bl	8016040 <__lshift>
 80154ae:	9004      	str	r0, [sp, #16]
 80154b0:	f1b8 0f00 	cmp.w	r8, #0
 80154b4:	dd05      	ble.n	80154c2 <_dtoa_r+0x84a>
 80154b6:	4639      	mov	r1, r7
 80154b8:	4642      	mov	r2, r8
 80154ba:	4620      	mov	r0, r4
 80154bc:	f000 fdc0 	bl	8016040 <__lshift>
 80154c0:	4607      	mov	r7, r0
 80154c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154c4:	b353      	cbz	r3, 801551c <_dtoa_r+0x8a4>
 80154c6:	4639      	mov	r1, r7
 80154c8:	9804      	ldr	r0, [sp, #16]
 80154ca:	f000 fe0d 	bl	80160e8 <__mcmp>
 80154ce:	2800      	cmp	r0, #0
 80154d0:	da24      	bge.n	801551c <_dtoa_r+0x8a4>
 80154d2:	2300      	movs	r3, #0
 80154d4:	220a      	movs	r2, #10
 80154d6:	9904      	ldr	r1, [sp, #16]
 80154d8:	4620      	mov	r0, r4
 80154da:	f000 fc49 	bl	8015d70 <__multadd>
 80154de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154e0:	9004      	str	r0, [sp, #16]
 80154e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	f000 814c 	beq.w	8015784 <_dtoa_r+0xb0c>
 80154ec:	2300      	movs	r3, #0
 80154ee:	4631      	mov	r1, r6
 80154f0:	220a      	movs	r2, #10
 80154f2:	4620      	mov	r0, r4
 80154f4:	f000 fc3c 	bl	8015d70 <__multadd>
 80154f8:	9b02      	ldr	r3, [sp, #8]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	4606      	mov	r6, r0
 80154fe:	dc4f      	bgt.n	80155a0 <_dtoa_r+0x928>
 8015500:	9b06      	ldr	r3, [sp, #24]
 8015502:	2b02      	cmp	r3, #2
 8015504:	dd4c      	ble.n	80155a0 <_dtoa_r+0x928>
 8015506:	e011      	b.n	801552c <_dtoa_r+0x8b4>
 8015508:	d0c9      	beq.n	801549e <_dtoa_r+0x826>
 801550a:	9a05      	ldr	r2, [sp, #20]
 801550c:	331c      	adds	r3, #28
 801550e:	441a      	add	r2, r3
 8015510:	9205      	str	r2, [sp, #20]
 8015512:	441d      	add	r5, r3
 8015514:	4498      	add	r8, r3
 8015516:	e7c2      	b.n	801549e <_dtoa_r+0x826>
 8015518:	4603      	mov	r3, r0
 801551a:	e7f6      	b.n	801550a <_dtoa_r+0x892>
 801551c:	f1b9 0f00 	cmp.w	r9, #0
 8015520:	dc38      	bgt.n	8015594 <_dtoa_r+0x91c>
 8015522:	9b06      	ldr	r3, [sp, #24]
 8015524:	2b02      	cmp	r3, #2
 8015526:	dd35      	ble.n	8015594 <_dtoa_r+0x91c>
 8015528:	f8cd 9008 	str.w	r9, [sp, #8]
 801552c:	9b02      	ldr	r3, [sp, #8]
 801552e:	b963      	cbnz	r3, 801554a <_dtoa_r+0x8d2>
 8015530:	4639      	mov	r1, r7
 8015532:	2205      	movs	r2, #5
 8015534:	4620      	mov	r0, r4
 8015536:	f000 fc1b 	bl	8015d70 <__multadd>
 801553a:	4601      	mov	r1, r0
 801553c:	4607      	mov	r7, r0
 801553e:	9804      	ldr	r0, [sp, #16]
 8015540:	f000 fdd2 	bl	80160e8 <__mcmp>
 8015544:	2800      	cmp	r0, #0
 8015546:	f73f adcc 	bgt.w	80150e2 <_dtoa_r+0x46a>
 801554a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801554c:	465d      	mov	r5, fp
 801554e:	ea6f 0a03 	mvn.w	sl, r3
 8015552:	f04f 0900 	mov.w	r9, #0
 8015556:	4639      	mov	r1, r7
 8015558:	4620      	mov	r0, r4
 801555a:	f000 fc00 	bl	8015d5e <_Bfree>
 801555e:	2e00      	cmp	r6, #0
 8015560:	f43f aeb7 	beq.w	80152d2 <_dtoa_r+0x65a>
 8015564:	f1b9 0f00 	cmp.w	r9, #0
 8015568:	d005      	beq.n	8015576 <_dtoa_r+0x8fe>
 801556a:	45b1      	cmp	r9, r6
 801556c:	d003      	beq.n	8015576 <_dtoa_r+0x8fe>
 801556e:	4649      	mov	r1, r9
 8015570:	4620      	mov	r0, r4
 8015572:	f000 fbf4 	bl	8015d5e <_Bfree>
 8015576:	4631      	mov	r1, r6
 8015578:	4620      	mov	r0, r4
 801557a:	f000 fbf0 	bl	8015d5e <_Bfree>
 801557e:	e6a8      	b.n	80152d2 <_dtoa_r+0x65a>
 8015580:	2700      	movs	r7, #0
 8015582:	463e      	mov	r6, r7
 8015584:	e7e1      	b.n	801554a <_dtoa_r+0x8d2>
 8015586:	f8dd a020 	ldr.w	sl, [sp, #32]
 801558a:	463e      	mov	r6, r7
 801558c:	e5a9      	b.n	80150e2 <_dtoa_r+0x46a>
 801558e:	bf00      	nop
 8015590:	40240000 	.word	0x40240000
 8015594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015596:	f8cd 9008 	str.w	r9, [sp, #8]
 801559a:	2b00      	cmp	r3, #0
 801559c:	f000 80f9 	beq.w	8015792 <_dtoa_r+0xb1a>
 80155a0:	2d00      	cmp	r5, #0
 80155a2:	dd05      	ble.n	80155b0 <_dtoa_r+0x938>
 80155a4:	4631      	mov	r1, r6
 80155a6:	462a      	mov	r2, r5
 80155a8:	4620      	mov	r0, r4
 80155aa:	f000 fd49 	bl	8016040 <__lshift>
 80155ae:	4606      	mov	r6, r0
 80155b0:	9b07      	ldr	r3, [sp, #28]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d04c      	beq.n	8015650 <_dtoa_r+0x9d8>
 80155b6:	6871      	ldr	r1, [r6, #4]
 80155b8:	4620      	mov	r0, r4
 80155ba:	f000 fbab 	bl	8015d14 <_Balloc>
 80155be:	6932      	ldr	r2, [r6, #16]
 80155c0:	3202      	adds	r2, #2
 80155c2:	4605      	mov	r5, r0
 80155c4:	0092      	lsls	r2, r2, #2
 80155c6:	f106 010c 	add.w	r1, r6, #12
 80155ca:	300c      	adds	r0, #12
 80155cc:	f7fd fc6b 	bl	8012ea6 <memcpy>
 80155d0:	2201      	movs	r2, #1
 80155d2:	4629      	mov	r1, r5
 80155d4:	4620      	mov	r0, r4
 80155d6:	f000 fd33 	bl	8016040 <__lshift>
 80155da:	9b00      	ldr	r3, [sp, #0]
 80155dc:	f8cd b014 	str.w	fp, [sp, #20]
 80155e0:	f003 0301 	and.w	r3, r3, #1
 80155e4:	46b1      	mov	r9, r6
 80155e6:	9307      	str	r3, [sp, #28]
 80155e8:	4606      	mov	r6, r0
 80155ea:	4639      	mov	r1, r7
 80155ec:	9804      	ldr	r0, [sp, #16]
 80155ee:	f7ff fab5 	bl	8014b5c <quorem>
 80155f2:	4649      	mov	r1, r9
 80155f4:	4605      	mov	r5, r0
 80155f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80155fa:	9804      	ldr	r0, [sp, #16]
 80155fc:	f000 fd74 	bl	80160e8 <__mcmp>
 8015600:	4632      	mov	r2, r6
 8015602:	9000      	str	r0, [sp, #0]
 8015604:	4639      	mov	r1, r7
 8015606:	4620      	mov	r0, r4
 8015608:	f000 fd88 	bl	801611c <__mdiff>
 801560c:	68c3      	ldr	r3, [r0, #12]
 801560e:	4602      	mov	r2, r0
 8015610:	bb03      	cbnz	r3, 8015654 <_dtoa_r+0x9dc>
 8015612:	4601      	mov	r1, r0
 8015614:	9008      	str	r0, [sp, #32]
 8015616:	9804      	ldr	r0, [sp, #16]
 8015618:	f000 fd66 	bl	80160e8 <__mcmp>
 801561c:	9a08      	ldr	r2, [sp, #32]
 801561e:	4603      	mov	r3, r0
 8015620:	4611      	mov	r1, r2
 8015622:	4620      	mov	r0, r4
 8015624:	9308      	str	r3, [sp, #32]
 8015626:	f000 fb9a 	bl	8015d5e <_Bfree>
 801562a:	9b08      	ldr	r3, [sp, #32]
 801562c:	b9a3      	cbnz	r3, 8015658 <_dtoa_r+0x9e0>
 801562e:	9a06      	ldr	r2, [sp, #24]
 8015630:	b992      	cbnz	r2, 8015658 <_dtoa_r+0x9e0>
 8015632:	9a07      	ldr	r2, [sp, #28]
 8015634:	b982      	cbnz	r2, 8015658 <_dtoa_r+0x9e0>
 8015636:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801563a:	d029      	beq.n	8015690 <_dtoa_r+0xa18>
 801563c:	9b00      	ldr	r3, [sp, #0]
 801563e:	2b00      	cmp	r3, #0
 8015640:	dd01      	ble.n	8015646 <_dtoa_r+0x9ce>
 8015642:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015646:	9b05      	ldr	r3, [sp, #20]
 8015648:	1c5d      	adds	r5, r3, #1
 801564a:	f883 8000 	strb.w	r8, [r3]
 801564e:	e782      	b.n	8015556 <_dtoa_r+0x8de>
 8015650:	4630      	mov	r0, r6
 8015652:	e7c2      	b.n	80155da <_dtoa_r+0x962>
 8015654:	2301      	movs	r3, #1
 8015656:	e7e3      	b.n	8015620 <_dtoa_r+0x9a8>
 8015658:	9a00      	ldr	r2, [sp, #0]
 801565a:	2a00      	cmp	r2, #0
 801565c:	db04      	blt.n	8015668 <_dtoa_r+0x9f0>
 801565e:	d125      	bne.n	80156ac <_dtoa_r+0xa34>
 8015660:	9a06      	ldr	r2, [sp, #24]
 8015662:	bb1a      	cbnz	r2, 80156ac <_dtoa_r+0xa34>
 8015664:	9a07      	ldr	r2, [sp, #28]
 8015666:	bb0a      	cbnz	r2, 80156ac <_dtoa_r+0xa34>
 8015668:	2b00      	cmp	r3, #0
 801566a:	ddec      	ble.n	8015646 <_dtoa_r+0x9ce>
 801566c:	2201      	movs	r2, #1
 801566e:	9904      	ldr	r1, [sp, #16]
 8015670:	4620      	mov	r0, r4
 8015672:	f000 fce5 	bl	8016040 <__lshift>
 8015676:	4639      	mov	r1, r7
 8015678:	9004      	str	r0, [sp, #16]
 801567a:	f000 fd35 	bl	80160e8 <__mcmp>
 801567e:	2800      	cmp	r0, #0
 8015680:	dc03      	bgt.n	801568a <_dtoa_r+0xa12>
 8015682:	d1e0      	bne.n	8015646 <_dtoa_r+0x9ce>
 8015684:	f018 0f01 	tst.w	r8, #1
 8015688:	d0dd      	beq.n	8015646 <_dtoa_r+0x9ce>
 801568a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801568e:	d1d8      	bne.n	8015642 <_dtoa_r+0x9ca>
 8015690:	9b05      	ldr	r3, [sp, #20]
 8015692:	9a05      	ldr	r2, [sp, #20]
 8015694:	1c5d      	adds	r5, r3, #1
 8015696:	2339      	movs	r3, #57	; 0x39
 8015698:	7013      	strb	r3, [r2, #0]
 801569a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801569e:	2b39      	cmp	r3, #57	; 0x39
 80156a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80156a4:	d04f      	beq.n	8015746 <_dtoa_r+0xace>
 80156a6:	3301      	adds	r3, #1
 80156a8:	7013      	strb	r3, [r2, #0]
 80156aa:	e754      	b.n	8015556 <_dtoa_r+0x8de>
 80156ac:	9a05      	ldr	r2, [sp, #20]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	f102 0501 	add.w	r5, r2, #1
 80156b4:	dd06      	ble.n	80156c4 <_dtoa_r+0xa4c>
 80156b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80156ba:	d0e9      	beq.n	8015690 <_dtoa_r+0xa18>
 80156bc:	f108 0801 	add.w	r8, r8, #1
 80156c0:	9b05      	ldr	r3, [sp, #20]
 80156c2:	e7c2      	b.n	801564a <_dtoa_r+0x9d2>
 80156c4:	9a02      	ldr	r2, [sp, #8]
 80156c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80156ca:	eba5 030b 	sub.w	r3, r5, fp
 80156ce:	4293      	cmp	r3, r2
 80156d0:	d021      	beq.n	8015716 <_dtoa_r+0xa9e>
 80156d2:	2300      	movs	r3, #0
 80156d4:	220a      	movs	r2, #10
 80156d6:	9904      	ldr	r1, [sp, #16]
 80156d8:	4620      	mov	r0, r4
 80156da:	f000 fb49 	bl	8015d70 <__multadd>
 80156de:	45b1      	cmp	r9, r6
 80156e0:	9004      	str	r0, [sp, #16]
 80156e2:	f04f 0300 	mov.w	r3, #0
 80156e6:	f04f 020a 	mov.w	r2, #10
 80156ea:	4649      	mov	r1, r9
 80156ec:	4620      	mov	r0, r4
 80156ee:	d105      	bne.n	80156fc <_dtoa_r+0xa84>
 80156f0:	f000 fb3e 	bl	8015d70 <__multadd>
 80156f4:	4681      	mov	r9, r0
 80156f6:	4606      	mov	r6, r0
 80156f8:	9505      	str	r5, [sp, #20]
 80156fa:	e776      	b.n	80155ea <_dtoa_r+0x972>
 80156fc:	f000 fb38 	bl	8015d70 <__multadd>
 8015700:	4631      	mov	r1, r6
 8015702:	4681      	mov	r9, r0
 8015704:	2300      	movs	r3, #0
 8015706:	220a      	movs	r2, #10
 8015708:	4620      	mov	r0, r4
 801570a:	f000 fb31 	bl	8015d70 <__multadd>
 801570e:	4606      	mov	r6, r0
 8015710:	e7f2      	b.n	80156f8 <_dtoa_r+0xa80>
 8015712:	f04f 0900 	mov.w	r9, #0
 8015716:	2201      	movs	r2, #1
 8015718:	9904      	ldr	r1, [sp, #16]
 801571a:	4620      	mov	r0, r4
 801571c:	f000 fc90 	bl	8016040 <__lshift>
 8015720:	4639      	mov	r1, r7
 8015722:	9004      	str	r0, [sp, #16]
 8015724:	f000 fce0 	bl	80160e8 <__mcmp>
 8015728:	2800      	cmp	r0, #0
 801572a:	dcb6      	bgt.n	801569a <_dtoa_r+0xa22>
 801572c:	d102      	bne.n	8015734 <_dtoa_r+0xabc>
 801572e:	f018 0f01 	tst.w	r8, #1
 8015732:	d1b2      	bne.n	801569a <_dtoa_r+0xa22>
 8015734:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015738:	2b30      	cmp	r3, #48	; 0x30
 801573a:	f105 32ff 	add.w	r2, r5, #4294967295
 801573e:	f47f af0a 	bne.w	8015556 <_dtoa_r+0x8de>
 8015742:	4615      	mov	r5, r2
 8015744:	e7f6      	b.n	8015734 <_dtoa_r+0xabc>
 8015746:	4593      	cmp	fp, r2
 8015748:	d105      	bne.n	8015756 <_dtoa_r+0xade>
 801574a:	2331      	movs	r3, #49	; 0x31
 801574c:	f10a 0a01 	add.w	sl, sl, #1
 8015750:	f88b 3000 	strb.w	r3, [fp]
 8015754:	e6ff      	b.n	8015556 <_dtoa_r+0x8de>
 8015756:	4615      	mov	r5, r2
 8015758:	e79f      	b.n	801569a <_dtoa_r+0xa22>
 801575a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80157c0 <_dtoa_r+0xb48>
 801575e:	f7ff bac5 	b.w	8014cec <_dtoa_r+0x74>
 8015762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015764:	f8df b05c 	ldr.w	fp, [pc, #92]	; 80157c4 <_dtoa_r+0xb4c>
 8015768:	2b00      	cmp	r3, #0
 801576a:	f43f aabf 	beq.w	8014cec <_dtoa_r+0x74>
 801576e:	f10b 0308 	add.w	r3, fp, #8
 8015772:	f7ff bab9 	b.w	8014ce8 <_dtoa_r+0x70>
 8015776:	9b06      	ldr	r3, [sp, #24]
 8015778:	2b01      	cmp	r3, #1
 801577a:	f77f ae36 	ble.w	80153ea <_dtoa_r+0x772>
 801577e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015780:	9307      	str	r3, [sp, #28]
 8015782:	e64a      	b.n	801541a <_dtoa_r+0x7a2>
 8015784:	9b02      	ldr	r3, [sp, #8]
 8015786:	2b00      	cmp	r3, #0
 8015788:	dc03      	bgt.n	8015792 <_dtoa_r+0xb1a>
 801578a:	9b06      	ldr	r3, [sp, #24]
 801578c:	2b02      	cmp	r3, #2
 801578e:	f73f aecd 	bgt.w	801552c <_dtoa_r+0x8b4>
 8015792:	465d      	mov	r5, fp
 8015794:	4639      	mov	r1, r7
 8015796:	9804      	ldr	r0, [sp, #16]
 8015798:	f7ff f9e0 	bl	8014b5c <quorem>
 801579c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80157a0:	f805 8b01 	strb.w	r8, [r5], #1
 80157a4:	9a02      	ldr	r2, [sp, #8]
 80157a6:	eba5 030b 	sub.w	r3, r5, fp
 80157aa:	429a      	cmp	r2, r3
 80157ac:	ddb1      	ble.n	8015712 <_dtoa_r+0xa9a>
 80157ae:	2300      	movs	r3, #0
 80157b0:	220a      	movs	r2, #10
 80157b2:	9904      	ldr	r1, [sp, #16]
 80157b4:	4620      	mov	r0, r4
 80157b6:	f000 fadb 	bl	8015d70 <__multadd>
 80157ba:	9004      	str	r0, [sp, #16]
 80157bc:	e7ea      	b.n	8015794 <_dtoa_r+0xb1c>
 80157be:	bf00      	nop
 80157c0:	080184fa 	.word	0x080184fa
 80157c4:	0801851c 	.word	0x0801851c

080157c8 <__sflush_r>:
 80157c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80157cc:	b293      	uxth	r3, r2
 80157ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157d2:	4605      	mov	r5, r0
 80157d4:	0718      	lsls	r0, r3, #28
 80157d6:	460c      	mov	r4, r1
 80157d8:	d45f      	bmi.n	801589a <__sflush_r+0xd2>
 80157da:	684b      	ldr	r3, [r1, #4]
 80157dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	818a      	strh	r2, [r1, #12]
 80157e4:	dc05      	bgt.n	80157f2 <__sflush_r+0x2a>
 80157e6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	dc02      	bgt.n	80157f2 <__sflush_r+0x2a>
 80157ec:	2000      	movs	r0, #0
 80157ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80157f4:	2e00      	cmp	r6, #0
 80157f6:	d0f9      	beq.n	80157ec <__sflush_r+0x24>
 80157f8:	2300      	movs	r3, #0
 80157fa:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80157fe:	682f      	ldr	r7, [r5, #0]
 8015800:	69e1      	ldr	r1, [r4, #28]
 8015802:	602b      	str	r3, [r5, #0]
 8015804:	d036      	beq.n	8015874 <__sflush_r+0xac>
 8015806:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8015808:	89a3      	ldrh	r3, [r4, #12]
 801580a:	075a      	lsls	r2, r3, #29
 801580c:	d505      	bpl.n	801581a <__sflush_r+0x52>
 801580e:	6863      	ldr	r3, [r4, #4]
 8015810:	1ac0      	subs	r0, r0, r3
 8015812:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015814:	b10b      	cbz	r3, 801581a <__sflush_r+0x52>
 8015816:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015818:	1ac0      	subs	r0, r0, r3
 801581a:	2300      	movs	r3, #0
 801581c:	4602      	mov	r2, r0
 801581e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015820:	69e1      	ldr	r1, [r4, #28]
 8015822:	4628      	mov	r0, r5
 8015824:	47b0      	blx	r6
 8015826:	1c43      	adds	r3, r0, #1
 8015828:	89a3      	ldrh	r3, [r4, #12]
 801582a:	d106      	bne.n	801583a <__sflush_r+0x72>
 801582c:	6829      	ldr	r1, [r5, #0]
 801582e:	291d      	cmp	r1, #29
 8015830:	d84c      	bhi.n	80158cc <__sflush_r+0x104>
 8015832:	4a2b      	ldr	r2, [pc, #172]	; (80158e0 <__sflush_r+0x118>)
 8015834:	40ca      	lsrs	r2, r1
 8015836:	07d6      	lsls	r6, r2, #31
 8015838:	d548      	bpl.n	80158cc <__sflush_r+0x104>
 801583a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801583e:	b21b      	sxth	r3, r3
 8015840:	2200      	movs	r2, #0
 8015842:	6062      	str	r2, [r4, #4]
 8015844:	04d9      	lsls	r1, r3, #19
 8015846:	6922      	ldr	r2, [r4, #16]
 8015848:	81a3      	strh	r3, [r4, #12]
 801584a:	6022      	str	r2, [r4, #0]
 801584c:	d504      	bpl.n	8015858 <__sflush_r+0x90>
 801584e:	1c42      	adds	r2, r0, #1
 8015850:	d101      	bne.n	8015856 <__sflush_r+0x8e>
 8015852:	682b      	ldr	r3, [r5, #0]
 8015854:	b903      	cbnz	r3, 8015858 <__sflush_r+0x90>
 8015856:	6520      	str	r0, [r4, #80]	; 0x50
 8015858:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801585a:	602f      	str	r7, [r5, #0]
 801585c:	2900      	cmp	r1, #0
 801585e:	d0c5      	beq.n	80157ec <__sflush_r+0x24>
 8015860:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8015864:	4299      	cmp	r1, r3
 8015866:	d002      	beq.n	801586e <__sflush_r+0xa6>
 8015868:	4628      	mov	r0, r5
 801586a:	f000 f937 	bl	8015adc <_free_r>
 801586e:	2000      	movs	r0, #0
 8015870:	6320      	str	r0, [r4, #48]	; 0x30
 8015872:	e7bc      	b.n	80157ee <__sflush_r+0x26>
 8015874:	2301      	movs	r3, #1
 8015876:	4628      	mov	r0, r5
 8015878:	47b0      	blx	r6
 801587a:	1c41      	adds	r1, r0, #1
 801587c:	d1c4      	bne.n	8015808 <__sflush_r+0x40>
 801587e:	682b      	ldr	r3, [r5, #0]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d0c1      	beq.n	8015808 <__sflush_r+0x40>
 8015884:	2b1d      	cmp	r3, #29
 8015886:	d001      	beq.n	801588c <__sflush_r+0xc4>
 8015888:	2b16      	cmp	r3, #22
 801588a:	d101      	bne.n	8015890 <__sflush_r+0xc8>
 801588c:	602f      	str	r7, [r5, #0]
 801588e:	e7ad      	b.n	80157ec <__sflush_r+0x24>
 8015890:	89a3      	ldrh	r3, [r4, #12]
 8015892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015896:	81a3      	strh	r3, [r4, #12]
 8015898:	e7a9      	b.n	80157ee <__sflush_r+0x26>
 801589a:	690f      	ldr	r7, [r1, #16]
 801589c:	2f00      	cmp	r7, #0
 801589e:	d0a5      	beq.n	80157ec <__sflush_r+0x24>
 80158a0:	079b      	lsls	r3, r3, #30
 80158a2:	680e      	ldr	r6, [r1, #0]
 80158a4:	bf08      	it	eq
 80158a6:	694b      	ldreq	r3, [r1, #20]
 80158a8:	600f      	str	r7, [r1, #0]
 80158aa:	bf18      	it	ne
 80158ac:	2300      	movne	r3, #0
 80158ae:	eba6 0807 	sub.w	r8, r6, r7
 80158b2:	608b      	str	r3, [r1, #8]
 80158b4:	f1b8 0f00 	cmp.w	r8, #0
 80158b8:	dd98      	ble.n	80157ec <__sflush_r+0x24>
 80158ba:	4643      	mov	r3, r8
 80158bc:	463a      	mov	r2, r7
 80158be:	69e1      	ldr	r1, [r4, #28]
 80158c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80158c2:	4628      	mov	r0, r5
 80158c4:	47b0      	blx	r6
 80158c6:	2800      	cmp	r0, #0
 80158c8:	dc06      	bgt.n	80158d8 <__sflush_r+0x110>
 80158ca:	89a3      	ldrh	r3, [r4, #12]
 80158cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158d0:	81a3      	strh	r3, [r4, #12]
 80158d2:	f04f 30ff 	mov.w	r0, #4294967295
 80158d6:	e78a      	b.n	80157ee <__sflush_r+0x26>
 80158d8:	4407      	add	r7, r0
 80158da:	eba8 0800 	sub.w	r8, r8, r0
 80158de:	e7e9      	b.n	80158b4 <__sflush_r+0xec>
 80158e0:	20400001 	.word	0x20400001

080158e4 <_fflush_r>:
 80158e4:	b538      	push	{r3, r4, r5, lr}
 80158e6:	460c      	mov	r4, r1
 80158e8:	4605      	mov	r5, r0
 80158ea:	b118      	cbz	r0, 80158f4 <_fflush_r+0x10>
 80158ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80158ee:	b90b      	cbnz	r3, 80158f4 <_fflush_r+0x10>
 80158f0:	f000 f864 	bl	80159bc <__sinit>
 80158f4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80158f8:	b1b8      	cbz	r0, 801592a <_fflush_r+0x46>
 80158fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80158fc:	07db      	lsls	r3, r3, #31
 80158fe:	d404      	bmi.n	801590a <_fflush_r+0x26>
 8015900:	0581      	lsls	r1, r0, #22
 8015902:	d402      	bmi.n	801590a <_fflush_r+0x26>
 8015904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015906:	f7fd f80b 	bl	8012920 <__retarget_lock_acquire_recursive>
 801590a:	4628      	mov	r0, r5
 801590c:	4621      	mov	r1, r4
 801590e:	f7ff ff5b 	bl	80157c8 <__sflush_r>
 8015912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015914:	07da      	lsls	r2, r3, #31
 8015916:	4605      	mov	r5, r0
 8015918:	d405      	bmi.n	8015926 <_fflush_r+0x42>
 801591a:	89a3      	ldrh	r3, [r4, #12]
 801591c:	059b      	lsls	r3, r3, #22
 801591e:	d402      	bmi.n	8015926 <_fflush_r+0x42>
 8015920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015922:	f7fc fffe 	bl	8012922 <__retarget_lock_release_recursive>
 8015926:	4628      	mov	r0, r5
 8015928:	bd38      	pop	{r3, r4, r5, pc}
 801592a:	4605      	mov	r5, r0
 801592c:	e7fb      	b.n	8015926 <_fflush_r+0x42>
	...

08015930 <std>:
 8015930:	2300      	movs	r3, #0
 8015932:	b510      	push	{r4, lr}
 8015934:	4604      	mov	r4, r0
 8015936:	e9c0 3300 	strd	r3, r3, [r0]
 801593a:	6083      	str	r3, [r0, #8]
 801593c:	8181      	strh	r1, [r0, #12]
 801593e:	6643      	str	r3, [r0, #100]	; 0x64
 8015940:	81c2      	strh	r2, [r0, #14]
 8015942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015946:	6183      	str	r3, [r0, #24]
 8015948:	4619      	mov	r1, r3
 801594a:	2208      	movs	r2, #8
 801594c:	305c      	adds	r0, #92	; 0x5c
 801594e:	f7fd face 	bl	8012eee <memset>
 8015952:	4b07      	ldr	r3, [pc, #28]	; (8015970 <std+0x40>)
 8015954:	6223      	str	r3, [r4, #32]
 8015956:	4b07      	ldr	r3, [pc, #28]	; (8015974 <std+0x44>)
 8015958:	6263      	str	r3, [r4, #36]	; 0x24
 801595a:	4b07      	ldr	r3, [pc, #28]	; (8015978 <std+0x48>)
 801595c:	62a3      	str	r3, [r4, #40]	; 0x28
 801595e:	4b07      	ldr	r3, [pc, #28]	; (801597c <std+0x4c>)
 8015960:	61e4      	str	r4, [r4, #28]
 8015962:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015964:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801596c:	f7fc bfd6 	b.w	801291c <__retarget_lock_init_recursive>
 8015970:	0801343d 	.word	0x0801343d
 8015974:	0801345f 	.word	0x0801345f
 8015978:	08013497 	.word	0x08013497
 801597c:	080134bb 	.word	0x080134bb

08015980 <_cleanup_r>:
 8015980:	4901      	ldr	r1, [pc, #4]	; (8015988 <_cleanup_r+0x8>)
 8015982:	f000 b967 	b.w	8015c54 <_fwalk_reent>
 8015986:	bf00      	nop
 8015988:	0801653f 	.word	0x0801653f

0801598c <__sfp_lock_acquire>:
 801598c:	4801      	ldr	r0, [pc, #4]	; (8015994 <__sfp_lock_acquire+0x8>)
 801598e:	f7fc bfc7 	b.w	8012920 <__retarget_lock_acquire_recursive>
 8015992:	bf00      	nop
 8015994:	20001058 	.word	0x20001058

08015998 <__sfp_lock_release>:
 8015998:	4801      	ldr	r0, [pc, #4]	; (80159a0 <__sfp_lock_release+0x8>)
 801599a:	f7fc bfc2 	b.w	8012922 <__retarget_lock_release_recursive>
 801599e:	bf00      	nop
 80159a0:	20001058 	.word	0x20001058

080159a4 <__sinit_lock_acquire>:
 80159a4:	4801      	ldr	r0, [pc, #4]	; (80159ac <__sinit_lock_acquire+0x8>)
 80159a6:	f7fc bfbb 	b.w	8012920 <__retarget_lock_acquire_recursive>
 80159aa:	bf00      	nop
 80159ac:	20001053 	.word	0x20001053

080159b0 <__sinit_lock_release>:
 80159b0:	4801      	ldr	r0, [pc, #4]	; (80159b8 <__sinit_lock_release+0x8>)
 80159b2:	f7fc bfb6 	b.w	8012922 <__retarget_lock_release_recursive>
 80159b6:	bf00      	nop
 80159b8:	20001053 	.word	0x20001053

080159bc <__sinit>:
 80159bc:	b510      	push	{r4, lr}
 80159be:	4604      	mov	r4, r0
 80159c0:	f7ff fff0 	bl	80159a4 <__sinit_lock_acquire>
 80159c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80159c6:	b11a      	cbz	r2, 80159d0 <__sinit+0x14>
 80159c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159cc:	f7ff bff0 	b.w	80159b0 <__sinit_lock_release>
 80159d0:	4b0d      	ldr	r3, [pc, #52]	; (8015a08 <__sinit+0x4c>)
 80159d2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80159d4:	2303      	movs	r3, #3
 80159d6:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80159da:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80159de:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80159e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80159e6:	2104      	movs	r1, #4
 80159e8:	6860      	ldr	r0, [r4, #4]
 80159ea:	f7ff ffa1 	bl	8015930 <std>
 80159ee:	2201      	movs	r2, #1
 80159f0:	2109      	movs	r1, #9
 80159f2:	68a0      	ldr	r0, [r4, #8]
 80159f4:	f7ff ff9c 	bl	8015930 <std>
 80159f8:	2202      	movs	r2, #2
 80159fa:	2112      	movs	r1, #18
 80159fc:	68e0      	ldr	r0, [r4, #12]
 80159fe:	f7ff ff97 	bl	8015930 <std>
 8015a02:	2301      	movs	r3, #1
 8015a04:	63a3      	str	r3, [r4, #56]	; 0x38
 8015a06:	e7df      	b.n	80159c8 <__sinit+0xc>
 8015a08:	08015981 	.word	0x08015981

08015a0c <__libc_fini_array>:
 8015a0c:	b538      	push	{r3, r4, r5, lr}
 8015a0e:	4d07      	ldr	r5, [pc, #28]	; (8015a2c <__libc_fini_array+0x20>)
 8015a10:	4c07      	ldr	r4, [pc, #28]	; (8015a30 <__libc_fini_array+0x24>)
 8015a12:	1b64      	subs	r4, r4, r5
 8015a14:	10a4      	asrs	r4, r4, #2
 8015a16:	b91c      	cbnz	r4, 8015a20 <__libc_fini_array+0x14>
 8015a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a1c:	f000 bdec 	b.w	80165f8 <_fini>
 8015a20:	3c01      	subs	r4, #1
 8015a22:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8015a26:	4798      	blx	r3
 8015a28:	e7f5      	b.n	8015a16 <__libc_fini_array+0xa>
 8015a2a:	bf00      	nop
 8015a2c:	08018a78 	.word	0x08018a78
 8015a30:	08018a7c 	.word	0x08018a7c

08015a34 <_malloc_trim_r>:
 8015a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a38:	4605      	mov	r5, r0
 8015a3a:	2008      	movs	r0, #8
 8015a3c:	460c      	mov	r4, r1
 8015a3e:	f7fe ff71 	bl	8014924 <sysconf>
 8015a42:	4f23      	ldr	r7, [pc, #140]	; (8015ad0 <_malloc_trim_r+0x9c>)
 8015a44:	4680      	mov	r8, r0
 8015a46:	4628      	mov	r0, r5
 8015a48:	f7fd fa5a 	bl	8012f00 <__malloc_lock>
 8015a4c:	68bb      	ldr	r3, [r7, #8]
 8015a4e:	685e      	ldr	r6, [r3, #4]
 8015a50:	f026 0603 	bic.w	r6, r6, #3
 8015a54:	1b34      	subs	r4, r6, r4
 8015a56:	3c11      	subs	r4, #17
 8015a58:	4444      	add	r4, r8
 8015a5a:	fbb4 f4f8 	udiv	r4, r4, r8
 8015a5e:	3c01      	subs	r4, #1
 8015a60:	fb08 f404 	mul.w	r4, r8, r4
 8015a64:	45a0      	cmp	r8, r4
 8015a66:	dd05      	ble.n	8015a74 <_malloc_trim_r+0x40>
 8015a68:	4628      	mov	r0, r5
 8015a6a:	f7fd fa4f 	bl	8012f0c <__malloc_unlock>
 8015a6e:	2000      	movs	r0, #0
 8015a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a74:	2100      	movs	r1, #0
 8015a76:	4628      	mov	r0, r5
 8015a78:	f7fd fc32 	bl	80132e0 <_sbrk_r>
 8015a7c:	68bb      	ldr	r3, [r7, #8]
 8015a7e:	4433      	add	r3, r6
 8015a80:	4298      	cmp	r0, r3
 8015a82:	d1f1      	bne.n	8015a68 <_malloc_trim_r+0x34>
 8015a84:	4261      	negs	r1, r4
 8015a86:	4628      	mov	r0, r5
 8015a88:	f7fd fc2a 	bl	80132e0 <_sbrk_r>
 8015a8c:	3001      	adds	r0, #1
 8015a8e:	d110      	bne.n	8015ab2 <_malloc_trim_r+0x7e>
 8015a90:	2100      	movs	r1, #0
 8015a92:	4628      	mov	r0, r5
 8015a94:	f7fd fc24 	bl	80132e0 <_sbrk_r>
 8015a98:	68ba      	ldr	r2, [r7, #8]
 8015a9a:	1a83      	subs	r3, r0, r2
 8015a9c:	2b0f      	cmp	r3, #15
 8015a9e:	dde3      	ble.n	8015a68 <_malloc_trim_r+0x34>
 8015aa0:	490c      	ldr	r1, [pc, #48]	; (8015ad4 <_malloc_trim_r+0xa0>)
 8015aa2:	6809      	ldr	r1, [r1, #0]
 8015aa4:	1a40      	subs	r0, r0, r1
 8015aa6:	490c      	ldr	r1, [pc, #48]	; (8015ad8 <_malloc_trim_r+0xa4>)
 8015aa8:	f043 0301 	orr.w	r3, r3, #1
 8015aac:	6008      	str	r0, [r1, #0]
 8015aae:	6053      	str	r3, [r2, #4]
 8015ab0:	e7da      	b.n	8015a68 <_malloc_trim_r+0x34>
 8015ab2:	68bb      	ldr	r3, [r7, #8]
 8015ab4:	4a08      	ldr	r2, [pc, #32]	; (8015ad8 <_malloc_trim_r+0xa4>)
 8015ab6:	1b36      	subs	r6, r6, r4
 8015ab8:	f046 0601 	orr.w	r6, r6, #1
 8015abc:	605e      	str	r6, [r3, #4]
 8015abe:	6813      	ldr	r3, [r2, #0]
 8015ac0:	4628      	mov	r0, r5
 8015ac2:	1b1c      	subs	r4, r3, r4
 8015ac4:	6014      	str	r4, [r2, #0]
 8015ac6:	f7fd fa21 	bl	8012f0c <__malloc_unlock>
 8015aca:	2001      	movs	r0, #1
 8015acc:	e7d0      	b.n	8015a70 <_malloc_trim_r+0x3c>
 8015ace:	bf00      	nop
 8015ad0:	20000440 	.word	0x20000440
 8015ad4:	20000848 	.word	0x20000848
 8015ad8:	20000f18 	.word	0x20000f18

08015adc <_free_r>:
 8015adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ae0:	4604      	mov	r4, r0
 8015ae2:	4688      	mov	r8, r1
 8015ae4:	2900      	cmp	r1, #0
 8015ae6:	f000 80ab 	beq.w	8015c40 <_free_r+0x164>
 8015aea:	f7fd fa09 	bl	8012f00 <__malloc_lock>
 8015aee:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8015af2:	4d54      	ldr	r5, [pc, #336]	; (8015c44 <_free_r+0x168>)
 8015af4:	f022 0001 	bic.w	r0, r2, #1
 8015af8:	f1a8 0308 	sub.w	r3, r8, #8
 8015afc:	181f      	adds	r7, r3, r0
 8015afe:	68a9      	ldr	r1, [r5, #8]
 8015b00:	687e      	ldr	r6, [r7, #4]
 8015b02:	42b9      	cmp	r1, r7
 8015b04:	f026 0603 	bic.w	r6, r6, #3
 8015b08:	f002 0201 	and.w	r2, r2, #1
 8015b0c:	d11b      	bne.n	8015b46 <_free_r+0x6a>
 8015b0e:	4430      	add	r0, r6
 8015b10:	b93a      	cbnz	r2, 8015b22 <_free_r+0x46>
 8015b12:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8015b16:	1a9b      	subs	r3, r3, r2
 8015b18:	4410      	add	r0, r2
 8015b1a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8015b1e:	60ca      	str	r2, [r1, #12]
 8015b20:	6091      	str	r1, [r2, #8]
 8015b22:	f040 0201 	orr.w	r2, r0, #1
 8015b26:	605a      	str	r2, [r3, #4]
 8015b28:	60ab      	str	r3, [r5, #8]
 8015b2a:	4b47      	ldr	r3, [pc, #284]	; (8015c48 <_free_r+0x16c>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	4283      	cmp	r3, r0
 8015b30:	d804      	bhi.n	8015b3c <_free_r+0x60>
 8015b32:	4b46      	ldr	r3, [pc, #280]	; (8015c4c <_free_r+0x170>)
 8015b34:	4620      	mov	r0, r4
 8015b36:	6819      	ldr	r1, [r3, #0]
 8015b38:	f7ff ff7c 	bl	8015a34 <_malloc_trim_r>
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b42:	f7fd b9e3 	b.w	8012f0c <__malloc_unlock>
 8015b46:	607e      	str	r6, [r7, #4]
 8015b48:	2a00      	cmp	r2, #0
 8015b4a:	d139      	bne.n	8015bc0 <_free_r+0xe4>
 8015b4c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8015b50:	1a5b      	subs	r3, r3, r1
 8015b52:	4408      	add	r0, r1
 8015b54:	6899      	ldr	r1, [r3, #8]
 8015b56:	f105 0c08 	add.w	ip, r5, #8
 8015b5a:	4561      	cmp	r1, ip
 8015b5c:	d032      	beq.n	8015bc4 <_free_r+0xe8>
 8015b5e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8015b62:	f8c1 c00c 	str.w	ip, [r1, #12]
 8015b66:	f8cc 1008 	str.w	r1, [ip, #8]
 8015b6a:	19b9      	adds	r1, r7, r6
 8015b6c:	6849      	ldr	r1, [r1, #4]
 8015b6e:	07c9      	lsls	r1, r1, #31
 8015b70:	d40a      	bmi.n	8015b88 <_free_r+0xac>
 8015b72:	4430      	add	r0, r6
 8015b74:	68b9      	ldr	r1, [r7, #8]
 8015b76:	bb3a      	cbnz	r2, 8015bc8 <_free_r+0xec>
 8015b78:	4e35      	ldr	r6, [pc, #212]	; (8015c50 <_free_r+0x174>)
 8015b7a:	42b1      	cmp	r1, r6
 8015b7c:	d124      	bne.n	8015bc8 <_free_r+0xec>
 8015b7e:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8015b82:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8015b86:	2201      	movs	r2, #1
 8015b88:	f040 0101 	orr.w	r1, r0, #1
 8015b8c:	6059      	str	r1, [r3, #4]
 8015b8e:	5018      	str	r0, [r3, r0]
 8015b90:	2a00      	cmp	r2, #0
 8015b92:	d1d3      	bne.n	8015b3c <_free_r+0x60>
 8015b94:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8015b98:	d21a      	bcs.n	8015bd0 <_free_r+0xf4>
 8015b9a:	08c0      	lsrs	r0, r0, #3
 8015b9c:	1081      	asrs	r1, r0, #2
 8015b9e:	2201      	movs	r2, #1
 8015ba0:	408a      	lsls	r2, r1
 8015ba2:	6869      	ldr	r1, [r5, #4]
 8015ba4:	3001      	adds	r0, #1
 8015ba6:	430a      	orrs	r2, r1
 8015ba8:	606a      	str	r2, [r5, #4]
 8015baa:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8015bae:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8015bb2:	3a08      	subs	r2, #8
 8015bb4:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8015bb8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8015bbc:	60cb      	str	r3, [r1, #12]
 8015bbe:	e7bd      	b.n	8015b3c <_free_r+0x60>
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	e7d2      	b.n	8015b6a <_free_r+0x8e>
 8015bc4:	2201      	movs	r2, #1
 8015bc6:	e7d0      	b.n	8015b6a <_free_r+0x8e>
 8015bc8:	68fe      	ldr	r6, [r7, #12]
 8015bca:	60ce      	str	r6, [r1, #12]
 8015bcc:	60b1      	str	r1, [r6, #8]
 8015bce:	e7db      	b.n	8015b88 <_free_r+0xac>
 8015bd0:	0a42      	lsrs	r2, r0, #9
 8015bd2:	2a04      	cmp	r2, #4
 8015bd4:	d813      	bhi.n	8015bfe <_free_r+0x122>
 8015bd6:	0982      	lsrs	r2, r0, #6
 8015bd8:	3238      	adds	r2, #56	; 0x38
 8015bda:	1c51      	adds	r1, r2, #1
 8015bdc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8015be0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8015be4:	428e      	cmp	r6, r1
 8015be6:	d124      	bne.n	8015c32 <_free_r+0x156>
 8015be8:	2001      	movs	r0, #1
 8015bea:	1092      	asrs	r2, r2, #2
 8015bec:	fa00 f202 	lsl.w	r2, r0, r2
 8015bf0:	6868      	ldr	r0, [r5, #4]
 8015bf2:	4302      	orrs	r2, r0
 8015bf4:	606a      	str	r2, [r5, #4]
 8015bf6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8015bfa:	60b3      	str	r3, [r6, #8]
 8015bfc:	e7de      	b.n	8015bbc <_free_r+0xe0>
 8015bfe:	2a14      	cmp	r2, #20
 8015c00:	d801      	bhi.n	8015c06 <_free_r+0x12a>
 8015c02:	325b      	adds	r2, #91	; 0x5b
 8015c04:	e7e9      	b.n	8015bda <_free_r+0xfe>
 8015c06:	2a54      	cmp	r2, #84	; 0x54
 8015c08:	d802      	bhi.n	8015c10 <_free_r+0x134>
 8015c0a:	0b02      	lsrs	r2, r0, #12
 8015c0c:	326e      	adds	r2, #110	; 0x6e
 8015c0e:	e7e4      	b.n	8015bda <_free_r+0xfe>
 8015c10:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8015c14:	d802      	bhi.n	8015c1c <_free_r+0x140>
 8015c16:	0bc2      	lsrs	r2, r0, #15
 8015c18:	3277      	adds	r2, #119	; 0x77
 8015c1a:	e7de      	b.n	8015bda <_free_r+0xfe>
 8015c1c:	f240 5154 	movw	r1, #1364	; 0x554
 8015c20:	428a      	cmp	r2, r1
 8015c22:	bf9a      	itte	ls
 8015c24:	0c82      	lsrls	r2, r0, #18
 8015c26:	327c      	addls	r2, #124	; 0x7c
 8015c28:	227e      	movhi	r2, #126	; 0x7e
 8015c2a:	e7d6      	b.n	8015bda <_free_r+0xfe>
 8015c2c:	6889      	ldr	r1, [r1, #8]
 8015c2e:	428e      	cmp	r6, r1
 8015c30:	d004      	beq.n	8015c3c <_free_r+0x160>
 8015c32:	684a      	ldr	r2, [r1, #4]
 8015c34:	f022 0203 	bic.w	r2, r2, #3
 8015c38:	4282      	cmp	r2, r0
 8015c3a:	d8f7      	bhi.n	8015c2c <_free_r+0x150>
 8015c3c:	68ce      	ldr	r6, [r1, #12]
 8015c3e:	e7da      	b.n	8015bf6 <_free_r+0x11a>
 8015c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c44:	20000440 	.word	0x20000440
 8015c48:	2000084c 	.word	0x2000084c
 8015c4c:	20000f48 	.word	0x20000f48
 8015c50:	20000448 	.word	0x20000448

08015c54 <_fwalk_reent>:
 8015c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c58:	4680      	mov	r8, r0
 8015c5a:	4689      	mov	r9, r1
 8015c5c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8015c60:	2600      	movs	r6, #0
 8015c62:	b914      	cbnz	r4, 8015c6a <_fwalk_reent+0x16>
 8015c64:	4630      	mov	r0, r6
 8015c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c6a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015c6e:	3f01      	subs	r7, #1
 8015c70:	d501      	bpl.n	8015c76 <_fwalk_reent+0x22>
 8015c72:	6824      	ldr	r4, [r4, #0]
 8015c74:	e7f5      	b.n	8015c62 <_fwalk_reent+0xe>
 8015c76:	89ab      	ldrh	r3, [r5, #12]
 8015c78:	2b01      	cmp	r3, #1
 8015c7a:	d907      	bls.n	8015c8c <_fwalk_reent+0x38>
 8015c7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015c80:	3301      	adds	r3, #1
 8015c82:	d003      	beq.n	8015c8c <_fwalk_reent+0x38>
 8015c84:	4629      	mov	r1, r5
 8015c86:	4640      	mov	r0, r8
 8015c88:	47c8      	blx	r9
 8015c8a:	4306      	orrs	r6, r0
 8015c8c:	3568      	adds	r5, #104	; 0x68
 8015c8e:	e7ee      	b.n	8015c6e <_fwalk_reent+0x1a>

08015c90 <_isatty_r>:
 8015c90:	b538      	push	{r3, r4, r5, lr}
 8015c92:	4c06      	ldr	r4, [pc, #24]	; (8015cac <_isatty_r+0x1c>)
 8015c94:	2300      	movs	r3, #0
 8015c96:	4605      	mov	r5, r0
 8015c98:	4608      	mov	r0, r1
 8015c9a:	6023      	str	r3, [r4, #0]
 8015c9c:	f7f2 ff3f 	bl	8008b1e <_isatty>
 8015ca0:	1c43      	adds	r3, r0, #1
 8015ca2:	d102      	bne.n	8015caa <_isatty_r+0x1a>
 8015ca4:	6823      	ldr	r3, [r4, #0]
 8015ca6:	b103      	cbz	r3, 8015caa <_isatty_r+0x1a>
 8015ca8:	602b      	str	r3, [r5, #0]
 8015caa:	bd38      	pop	{r3, r4, r5, pc}
 8015cac:	2000105c 	.word	0x2000105c

08015cb0 <_localeconv_r>:
 8015cb0:	4b04      	ldr	r3, [pc, #16]	; (8015cc4 <_localeconv_r+0x14>)
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015cb6:	4b04      	ldr	r3, [pc, #16]	; (8015cc8 <_localeconv_r+0x18>)
 8015cb8:	2800      	cmp	r0, #0
 8015cba:	bf08      	it	eq
 8015cbc:	4618      	moveq	r0, r3
 8015cbe:	30f0      	adds	r0, #240	; 0xf0
 8015cc0:	4770      	bx	lr
 8015cc2:	bf00      	nop
 8015cc4:	20000014 	.word	0x20000014
 8015cc8:	20000854 	.word	0x20000854

08015ccc <_lseek_r>:
 8015ccc:	b538      	push	{r3, r4, r5, lr}
 8015cce:	4c07      	ldr	r4, [pc, #28]	; (8015cec <_lseek_r+0x20>)
 8015cd0:	4605      	mov	r5, r0
 8015cd2:	4608      	mov	r0, r1
 8015cd4:	4611      	mov	r1, r2
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	6022      	str	r2, [r4, #0]
 8015cda:	461a      	mov	r2, r3
 8015cdc:	f7f2 ff2a 	bl	8008b34 <_lseek>
 8015ce0:	1c43      	adds	r3, r0, #1
 8015ce2:	d102      	bne.n	8015cea <_lseek_r+0x1e>
 8015ce4:	6823      	ldr	r3, [r4, #0]
 8015ce6:	b103      	cbz	r3, 8015cea <_lseek_r+0x1e>
 8015ce8:	602b      	str	r3, [r5, #0]
 8015cea:	bd38      	pop	{r3, r4, r5, pc}
 8015cec:	2000105c 	.word	0x2000105c

08015cf0 <__ascii_mbtowc>:
 8015cf0:	b082      	sub	sp, #8
 8015cf2:	b901      	cbnz	r1, 8015cf6 <__ascii_mbtowc+0x6>
 8015cf4:	a901      	add	r1, sp, #4
 8015cf6:	b142      	cbz	r2, 8015d0a <__ascii_mbtowc+0x1a>
 8015cf8:	b14b      	cbz	r3, 8015d0e <__ascii_mbtowc+0x1e>
 8015cfa:	7813      	ldrb	r3, [r2, #0]
 8015cfc:	600b      	str	r3, [r1, #0]
 8015cfe:	7812      	ldrb	r2, [r2, #0]
 8015d00:	1c10      	adds	r0, r2, #0
 8015d02:	bf18      	it	ne
 8015d04:	2001      	movne	r0, #1
 8015d06:	b002      	add	sp, #8
 8015d08:	4770      	bx	lr
 8015d0a:	4610      	mov	r0, r2
 8015d0c:	e7fb      	b.n	8015d06 <__ascii_mbtowc+0x16>
 8015d0e:	f06f 0001 	mvn.w	r0, #1
 8015d12:	e7f8      	b.n	8015d06 <__ascii_mbtowc+0x16>

08015d14 <_Balloc>:
 8015d14:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8015d16:	b570      	push	{r4, r5, r6, lr}
 8015d18:	4605      	mov	r5, r0
 8015d1a:	460c      	mov	r4, r1
 8015d1c:	b17b      	cbz	r3, 8015d3e <_Balloc+0x2a>
 8015d1e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015d20:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015d24:	b9a0      	cbnz	r0, 8015d50 <_Balloc+0x3c>
 8015d26:	2101      	movs	r1, #1
 8015d28:	fa01 f604 	lsl.w	r6, r1, r4
 8015d2c:	1d72      	adds	r2, r6, #5
 8015d2e:	0092      	lsls	r2, r2, #2
 8015d30:	4628      	mov	r0, r5
 8015d32:	f000 fbd7 	bl	80164e4 <_calloc_r>
 8015d36:	b148      	cbz	r0, 8015d4c <_Balloc+0x38>
 8015d38:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8015d3c:	e00b      	b.n	8015d56 <_Balloc+0x42>
 8015d3e:	2221      	movs	r2, #33	; 0x21
 8015d40:	2104      	movs	r1, #4
 8015d42:	f000 fbcf 	bl	80164e4 <_calloc_r>
 8015d46:	64e8      	str	r0, [r5, #76]	; 0x4c
 8015d48:	2800      	cmp	r0, #0
 8015d4a:	d1e8      	bne.n	8015d1e <_Balloc+0xa>
 8015d4c:	2000      	movs	r0, #0
 8015d4e:	bd70      	pop	{r4, r5, r6, pc}
 8015d50:	6802      	ldr	r2, [r0, #0]
 8015d52:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8015d56:	2300      	movs	r3, #0
 8015d58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015d5c:	e7f7      	b.n	8015d4e <_Balloc+0x3a>

08015d5e <_Bfree>:
 8015d5e:	b131      	cbz	r1, 8015d6e <_Bfree+0x10>
 8015d60:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8015d62:	684a      	ldr	r2, [r1, #4]
 8015d64:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015d68:	6008      	str	r0, [r1, #0]
 8015d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8015d6e:	4770      	bx	lr

08015d70 <__multadd>:
 8015d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d74:	690d      	ldr	r5, [r1, #16]
 8015d76:	461f      	mov	r7, r3
 8015d78:	4606      	mov	r6, r0
 8015d7a:	460c      	mov	r4, r1
 8015d7c:	f101 0c14 	add.w	ip, r1, #20
 8015d80:	2300      	movs	r3, #0
 8015d82:	f8dc 0000 	ldr.w	r0, [ip]
 8015d86:	b281      	uxth	r1, r0
 8015d88:	fb02 7101 	mla	r1, r2, r1, r7
 8015d8c:	0c0f      	lsrs	r7, r1, #16
 8015d8e:	0c00      	lsrs	r0, r0, #16
 8015d90:	fb02 7000 	mla	r0, r2, r0, r7
 8015d94:	b289      	uxth	r1, r1
 8015d96:	3301      	adds	r3, #1
 8015d98:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015d9c:	429d      	cmp	r5, r3
 8015d9e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015da2:	f84c 1b04 	str.w	r1, [ip], #4
 8015da6:	dcec      	bgt.n	8015d82 <__multadd+0x12>
 8015da8:	b1d7      	cbz	r7, 8015de0 <__multadd+0x70>
 8015daa:	68a3      	ldr	r3, [r4, #8]
 8015dac:	42ab      	cmp	r3, r5
 8015dae:	dc12      	bgt.n	8015dd6 <__multadd+0x66>
 8015db0:	6861      	ldr	r1, [r4, #4]
 8015db2:	4630      	mov	r0, r6
 8015db4:	3101      	adds	r1, #1
 8015db6:	f7ff ffad 	bl	8015d14 <_Balloc>
 8015dba:	6922      	ldr	r2, [r4, #16]
 8015dbc:	3202      	adds	r2, #2
 8015dbe:	f104 010c 	add.w	r1, r4, #12
 8015dc2:	4680      	mov	r8, r0
 8015dc4:	0092      	lsls	r2, r2, #2
 8015dc6:	300c      	adds	r0, #12
 8015dc8:	f7fd f86d 	bl	8012ea6 <memcpy>
 8015dcc:	4621      	mov	r1, r4
 8015dce:	4630      	mov	r0, r6
 8015dd0:	f7ff ffc5 	bl	8015d5e <_Bfree>
 8015dd4:	4644      	mov	r4, r8
 8015dd6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015dda:	3501      	adds	r5, #1
 8015ddc:	615f      	str	r7, [r3, #20]
 8015dde:	6125      	str	r5, [r4, #16]
 8015de0:	4620      	mov	r0, r4
 8015de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015de6 <__hi0bits>:
 8015de6:	0c02      	lsrs	r2, r0, #16
 8015de8:	0412      	lsls	r2, r2, #16
 8015dea:	4603      	mov	r3, r0
 8015dec:	b9b2      	cbnz	r2, 8015e1c <__hi0bits+0x36>
 8015dee:	0403      	lsls	r3, r0, #16
 8015df0:	2010      	movs	r0, #16
 8015df2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015df6:	bf04      	itt	eq
 8015df8:	021b      	lsleq	r3, r3, #8
 8015dfa:	3008      	addeq	r0, #8
 8015dfc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015e00:	bf04      	itt	eq
 8015e02:	011b      	lsleq	r3, r3, #4
 8015e04:	3004      	addeq	r0, #4
 8015e06:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015e0a:	bf04      	itt	eq
 8015e0c:	009b      	lsleq	r3, r3, #2
 8015e0e:	3002      	addeq	r0, #2
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	db06      	blt.n	8015e22 <__hi0bits+0x3c>
 8015e14:	005b      	lsls	r3, r3, #1
 8015e16:	d503      	bpl.n	8015e20 <__hi0bits+0x3a>
 8015e18:	3001      	adds	r0, #1
 8015e1a:	4770      	bx	lr
 8015e1c:	2000      	movs	r0, #0
 8015e1e:	e7e8      	b.n	8015df2 <__hi0bits+0xc>
 8015e20:	2020      	movs	r0, #32
 8015e22:	4770      	bx	lr

08015e24 <__lo0bits>:
 8015e24:	6803      	ldr	r3, [r0, #0]
 8015e26:	f013 0207 	ands.w	r2, r3, #7
 8015e2a:	4601      	mov	r1, r0
 8015e2c:	d00b      	beq.n	8015e46 <__lo0bits+0x22>
 8015e2e:	07da      	lsls	r2, r3, #31
 8015e30:	d423      	bmi.n	8015e7a <__lo0bits+0x56>
 8015e32:	0798      	lsls	r0, r3, #30
 8015e34:	bf49      	itett	mi
 8015e36:	085b      	lsrmi	r3, r3, #1
 8015e38:	089b      	lsrpl	r3, r3, #2
 8015e3a:	2001      	movmi	r0, #1
 8015e3c:	600b      	strmi	r3, [r1, #0]
 8015e3e:	bf5c      	itt	pl
 8015e40:	600b      	strpl	r3, [r1, #0]
 8015e42:	2002      	movpl	r0, #2
 8015e44:	4770      	bx	lr
 8015e46:	b298      	uxth	r0, r3
 8015e48:	b9a8      	cbnz	r0, 8015e76 <__lo0bits+0x52>
 8015e4a:	0c1b      	lsrs	r3, r3, #16
 8015e4c:	2010      	movs	r0, #16
 8015e4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015e52:	bf04      	itt	eq
 8015e54:	0a1b      	lsreq	r3, r3, #8
 8015e56:	3008      	addeq	r0, #8
 8015e58:	071a      	lsls	r2, r3, #28
 8015e5a:	bf04      	itt	eq
 8015e5c:	091b      	lsreq	r3, r3, #4
 8015e5e:	3004      	addeq	r0, #4
 8015e60:	079a      	lsls	r2, r3, #30
 8015e62:	bf04      	itt	eq
 8015e64:	089b      	lsreq	r3, r3, #2
 8015e66:	3002      	addeq	r0, #2
 8015e68:	07da      	lsls	r2, r3, #31
 8015e6a:	d402      	bmi.n	8015e72 <__lo0bits+0x4e>
 8015e6c:	085b      	lsrs	r3, r3, #1
 8015e6e:	d006      	beq.n	8015e7e <__lo0bits+0x5a>
 8015e70:	3001      	adds	r0, #1
 8015e72:	600b      	str	r3, [r1, #0]
 8015e74:	4770      	bx	lr
 8015e76:	4610      	mov	r0, r2
 8015e78:	e7e9      	b.n	8015e4e <__lo0bits+0x2a>
 8015e7a:	2000      	movs	r0, #0
 8015e7c:	4770      	bx	lr
 8015e7e:	2020      	movs	r0, #32
 8015e80:	4770      	bx	lr

08015e82 <__i2b>:
 8015e82:	b510      	push	{r4, lr}
 8015e84:	460c      	mov	r4, r1
 8015e86:	2101      	movs	r1, #1
 8015e88:	f7ff ff44 	bl	8015d14 <_Balloc>
 8015e8c:	2201      	movs	r2, #1
 8015e8e:	6144      	str	r4, [r0, #20]
 8015e90:	6102      	str	r2, [r0, #16]
 8015e92:	bd10      	pop	{r4, pc}

08015e94 <__multiply>:
 8015e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e98:	4614      	mov	r4, r2
 8015e9a:	690a      	ldr	r2, [r1, #16]
 8015e9c:	6923      	ldr	r3, [r4, #16]
 8015e9e:	429a      	cmp	r2, r3
 8015ea0:	bfb8      	it	lt
 8015ea2:	460b      	movlt	r3, r1
 8015ea4:	4688      	mov	r8, r1
 8015ea6:	bfbc      	itt	lt
 8015ea8:	46a0      	movlt	r8, r4
 8015eaa:	461c      	movlt	r4, r3
 8015eac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015eb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015eb4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015eb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015ebc:	eb07 0609 	add.w	r6, r7, r9
 8015ec0:	42b3      	cmp	r3, r6
 8015ec2:	bfb8      	it	lt
 8015ec4:	3101      	addlt	r1, #1
 8015ec6:	f7ff ff25 	bl	8015d14 <_Balloc>
 8015eca:	f100 0514 	add.w	r5, r0, #20
 8015ece:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015ed2:	462b      	mov	r3, r5
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	4573      	cmp	r3, lr
 8015ed8:	d316      	bcc.n	8015f08 <__multiply+0x74>
 8015eda:	f104 0214 	add.w	r2, r4, #20
 8015ede:	f108 0114 	add.w	r1, r8, #20
 8015ee2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015ee6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015eea:	9300      	str	r3, [sp, #0]
 8015eec:	9b00      	ldr	r3, [sp, #0]
 8015eee:	9201      	str	r2, [sp, #4]
 8015ef0:	4293      	cmp	r3, r2
 8015ef2:	d80c      	bhi.n	8015f0e <__multiply+0x7a>
 8015ef4:	2e00      	cmp	r6, #0
 8015ef6:	dd03      	ble.n	8015f00 <__multiply+0x6c>
 8015ef8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d05d      	beq.n	8015fbc <__multiply+0x128>
 8015f00:	6106      	str	r6, [r0, #16]
 8015f02:	b003      	add	sp, #12
 8015f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f08:	f843 2b04 	str.w	r2, [r3], #4
 8015f0c:	e7e3      	b.n	8015ed6 <__multiply+0x42>
 8015f0e:	f8b2 b000 	ldrh.w	fp, [r2]
 8015f12:	f1bb 0f00 	cmp.w	fp, #0
 8015f16:	d023      	beq.n	8015f60 <__multiply+0xcc>
 8015f18:	4689      	mov	r9, r1
 8015f1a:	46ac      	mov	ip, r5
 8015f1c:	f04f 0800 	mov.w	r8, #0
 8015f20:	f859 4b04 	ldr.w	r4, [r9], #4
 8015f24:	f8dc a000 	ldr.w	sl, [ip]
 8015f28:	b2a3      	uxth	r3, r4
 8015f2a:	fa1f fa8a 	uxth.w	sl, sl
 8015f2e:	fb0b a303 	mla	r3, fp, r3, sl
 8015f32:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015f36:	f8dc 4000 	ldr.w	r4, [ip]
 8015f3a:	4443      	add	r3, r8
 8015f3c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015f40:	fb0b 840a 	mla	r4, fp, sl, r8
 8015f44:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015f48:	46e2      	mov	sl, ip
 8015f4a:	b29b      	uxth	r3, r3
 8015f4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015f50:	454f      	cmp	r7, r9
 8015f52:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015f56:	f84a 3b04 	str.w	r3, [sl], #4
 8015f5a:	d82b      	bhi.n	8015fb4 <__multiply+0x120>
 8015f5c:	f8cc 8004 	str.w	r8, [ip, #4]
 8015f60:	9b01      	ldr	r3, [sp, #4]
 8015f62:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015f66:	3204      	adds	r2, #4
 8015f68:	f1ba 0f00 	cmp.w	sl, #0
 8015f6c:	d020      	beq.n	8015fb0 <__multiply+0x11c>
 8015f6e:	682b      	ldr	r3, [r5, #0]
 8015f70:	4689      	mov	r9, r1
 8015f72:	46a8      	mov	r8, r5
 8015f74:	f04f 0b00 	mov.w	fp, #0
 8015f78:	f8b9 c000 	ldrh.w	ip, [r9]
 8015f7c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015f80:	fb0a 440c 	mla	r4, sl, ip, r4
 8015f84:	445c      	add	r4, fp
 8015f86:	46c4      	mov	ip, r8
 8015f88:	b29b      	uxth	r3, r3
 8015f8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015f8e:	f84c 3b04 	str.w	r3, [ip], #4
 8015f92:	f859 3b04 	ldr.w	r3, [r9], #4
 8015f96:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015f9a:	0c1b      	lsrs	r3, r3, #16
 8015f9c:	fb0a b303 	mla	r3, sl, r3, fp
 8015fa0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015fa4:	454f      	cmp	r7, r9
 8015fa6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015faa:	d805      	bhi.n	8015fb8 <__multiply+0x124>
 8015fac:	f8c8 3004 	str.w	r3, [r8, #4]
 8015fb0:	3504      	adds	r5, #4
 8015fb2:	e79b      	b.n	8015eec <__multiply+0x58>
 8015fb4:	46d4      	mov	ip, sl
 8015fb6:	e7b3      	b.n	8015f20 <__multiply+0x8c>
 8015fb8:	46e0      	mov	r8, ip
 8015fba:	e7dd      	b.n	8015f78 <__multiply+0xe4>
 8015fbc:	3e01      	subs	r6, #1
 8015fbe:	e799      	b.n	8015ef4 <__multiply+0x60>

08015fc0 <__pow5mult>:
 8015fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fc4:	4615      	mov	r5, r2
 8015fc6:	f012 0203 	ands.w	r2, r2, #3
 8015fca:	4606      	mov	r6, r0
 8015fcc:	460f      	mov	r7, r1
 8015fce:	d007      	beq.n	8015fe0 <__pow5mult+0x20>
 8015fd0:	3a01      	subs	r2, #1
 8015fd2:	4c1a      	ldr	r4, [pc, #104]	; (801603c <__pow5mult+0x7c>)
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015fda:	f7ff fec9 	bl	8015d70 <__multadd>
 8015fde:	4607      	mov	r7, r0
 8015fe0:	10ad      	asrs	r5, r5, #2
 8015fe2:	d027      	beq.n	8016034 <__pow5mult+0x74>
 8015fe4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8015fe6:	b944      	cbnz	r4, 8015ffa <__pow5mult+0x3a>
 8015fe8:	f240 2171 	movw	r1, #625	; 0x271
 8015fec:	4630      	mov	r0, r6
 8015fee:	f7ff ff48 	bl	8015e82 <__i2b>
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	64b0      	str	r0, [r6, #72]	; 0x48
 8015ff6:	4604      	mov	r4, r0
 8015ff8:	6003      	str	r3, [r0, #0]
 8015ffa:	f04f 0800 	mov.w	r8, #0
 8015ffe:	07eb      	lsls	r3, r5, #31
 8016000:	d50a      	bpl.n	8016018 <__pow5mult+0x58>
 8016002:	4639      	mov	r1, r7
 8016004:	4622      	mov	r2, r4
 8016006:	4630      	mov	r0, r6
 8016008:	f7ff ff44 	bl	8015e94 <__multiply>
 801600c:	4639      	mov	r1, r7
 801600e:	4681      	mov	r9, r0
 8016010:	4630      	mov	r0, r6
 8016012:	f7ff fea4 	bl	8015d5e <_Bfree>
 8016016:	464f      	mov	r7, r9
 8016018:	106d      	asrs	r5, r5, #1
 801601a:	d00b      	beq.n	8016034 <__pow5mult+0x74>
 801601c:	6820      	ldr	r0, [r4, #0]
 801601e:	b938      	cbnz	r0, 8016030 <__pow5mult+0x70>
 8016020:	4622      	mov	r2, r4
 8016022:	4621      	mov	r1, r4
 8016024:	4630      	mov	r0, r6
 8016026:	f7ff ff35 	bl	8015e94 <__multiply>
 801602a:	6020      	str	r0, [r4, #0]
 801602c:	f8c0 8000 	str.w	r8, [r0]
 8016030:	4604      	mov	r4, r0
 8016032:	e7e4      	b.n	8015ffe <__pow5mult+0x3e>
 8016034:	4638      	mov	r0, r7
 8016036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801603a:	bf00      	nop
 801603c:	08018628 	.word	0x08018628

08016040 <__lshift>:
 8016040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016044:	460c      	mov	r4, r1
 8016046:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801604a:	6923      	ldr	r3, [r4, #16]
 801604c:	6849      	ldr	r1, [r1, #4]
 801604e:	eb0a 0903 	add.w	r9, sl, r3
 8016052:	68a3      	ldr	r3, [r4, #8]
 8016054:	4607      	mov	r7, r0
 8016056:	4616      	mov	r6, r2
 8016058:	f109 0501 	add.w	r5, r9, #1
 801605c:	42ab      	cmp	r3, r5
 801605e:	db32      	blt.n	80160c6 <__lshift+0x86>
 8016060:	4638      	mov	r0, r7
 8016062:	f7ff fe57 	bl	8015d14 <_Balloc>
 8016066:	2300      	movs	r3, #0
 8016068:	4680      	mov	r8, r0
 801606a:	f100 0114 	add.w	r1, r0, #20
 801606e:	461a      	mov	r2, r3
 8016070:	4553      	cmp	r3, sl
 8016072:	db2b      	blt.n	80160cc <__lshift+0x8c>
 8016074:	6920      	ldr	r0, [r4, #16]
 8016076:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801607a:	f104 0314 	add.w	r3, r4, #20
 801607e:	f016 021f 	ands.w	r2, r6, #31
 8016082:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016086:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801608a:	d025      	beq.n	80160d8 <__lshift+0x98>
 801608c:	f1c2 0e20 	rsb	lr, r2, #32
 8016090:	2000      	movs	r0, #0
 8016092:	681e      	ldr	r6, [r3, #0]
 8016094:	468a      	mov	sl, r1
 8016096:	4096      	lsls	r6, r2
 8016098:	4330      	orrs	r0, r6
 801609a:	f84a 0b04 	str.w	r0, [sl], #4
 801609e:	f853 0b04 	ldr.w	r0, [r3], #4
 80160a2:	459c      	cmp	ip, r3
 80160a4:	fa20 f00e 	lsr.w	r0, r0, lr
 80160a8:	d814      	bhi.n	80160d4 <__lshift+0x94>
 80160aa:	6048      	str	r0, [r1, #4]
 80160ac:	b108      	cbz	r0, 80160b2 <__lshift+0x72>
 80160ae:	f109 0502 	add.w	r5, r9, #2
 80160b2:	3d01      	subs	r5, #1
 80160b4:	4638      	mov	r0, r7
 80160b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80160ba:	4621      	mov	r1, r4
 80160bc:	f7ff fe4f 	bl	8015d5e <_Bfree>
 80160c0:	4640      	mov	r0, r8
 80160c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160c6:	3101      	adds	r1, #1
 80160c8:	005b      	lsls	r3, r3, #1
 80160ca:	e7c7      	b.n	801605c <__lshift+0x1c>
 80160cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80160d0:	3301      	adds	r3, #1
 80160d2:	e7cd      	b.n	8016070 <__lshift+0x30>
 80160d4:	4651      	mov	r1, sl
 80160d6:	e7dc      	b.n	8016092 <__lshift+0x52>
 80160d8:	3904      	subs	r1, #4
 80160da:	f853 2b04 	ldr.w	r2, [r3], #4
 80160de:	f841 2f04 	str.w	r2, [r1, #4]!
 80160e2:	459c      	cmp	ip, r3
 80160e4:	d8f9      	bhi.n	80160da <__lshift+0x9a>
 80160e6:	e7e4      	b.n	80160b2 <__lshift+0x72>

080160e8 <__mcmp>:
 80160e8:	6903      	ldr	r3, [r0, #16]
 80160ea:	690a      	ldr	r2, [r1, #16]
 80160ec:	1a9b      	subs	r3, r3, r2
 80160ee:	b530      	push	{r4, r5, lr}
 80160f0:	d10c      	bne.n	801610c <__mcmp+0x24>
 80160f2:	0092      	lsls	r2, r2, #2
 80160f4:	3014      	adds	r0, #20
 80160f6:	3114      	adds	r1, #20
 80160f8:	1884      	adds	r4, r0, r2
 80160fa:	4411      	add	r1, r2
 80160fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016100:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016104:	4295      	cmp	r5, r2
 8016106:	d003      	beq.n	8016110 <__mcmp+0x28>
 8016108:	d305      	bcc.n	8016116 <__mcmp+0x2e>
 801610a:	2301      	movs	r3, #1
 801610c:	4618      	mov	r0, r3
 801610e:	bd30      	pop	{r4, r5, pc}
 8016110:	42a0      	cmp	r0, r4
 8016112:	d3f3      	bcc.n	80160fc <__mcmp+0x14>
 8016114:	e7fa      	b.n	801610c <__mcmp+0x24>
 8016116:	f04f 33ff 	mov.w	r3, #4294967295
 801611a:	e7f7      	b.n	801610c <__mcmp+0x24>

0801611c <__mdiff>:
 801611c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016120:	460d      	mov	r5, r1
 8016122:	4607      	mov	r7, r0
 8016124:	4611      	mov	r1, r2
 8016126:	4628      	mov	r0, r5
 8016128:	4614      	mov	r4, r2
 801612a:	f7ff ffdd 	bl	80160e8 <__mcmp>
 801612e:	1e06      	subs	r6, r0, #0
 8016130:	d108      	bne.n	8016144 <__mdiff+0x28>
 8016132:	4631      	mov	r1, r6
 8016134:	4638      	mov	r0, r7
 8016136:	f7ff fded 	bl	8015d14 <_Balloc>
 801613a:	2301      	movs	r3, #1
 801613c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016144:	bfa4      	itt	ge
 8016146:	4623      	movge	r3, r4
 8016148:	462c      	movge	r4, r5
 801614a:	4638      	mov	r0, r7
 801614c:	6861      	ldr	r1, [r4, #4]
 801614e:	bfa6      	itte	ge
 8016150:	461d      	movge	r5, r3
 8016152:	2600      	movge	r6, #0
 8016154:	2601      	movlt	r6, #1
 8016156:	f7ff fddd 	bl	8015d14 <_Balloc>
 801615a:	692b      	ldr	r3, [r5, #16]
 801615c:	60c6      	str	r6, [r0, #12]
 801615e:	6926      	ldr	r6, [r4, #16]
 8016160:	f105 0914 	add.w	r9, r5, #20
 8016164:	f104 0214 	add.w	r2, r4, #20
 8016168:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801616c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016170:	f100 0514 	add.w	r5, r0, #20
 8016174:	f04f 0e00 	mov.w	lr, #0
 8016178:	f852 ab04 	ldr.w	sl, [r2], #4
 801617c:	f859 4b04 	ldr.w	r4, [r9], #4
 8016180:	fa1e f18a 	uxtah	r1, lr, sl
 8016184:	b2a3      	uxth	r3, r4
 8016186:	1ac9      	subs	r1, r1, r3
 8016188:	0c23      	lsrs	r3, r4, #16
 801618a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801618e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016192:	b289      	uxth	r1, r1
 8016194:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016198:	45c8      	cmp	r8, r9
 801619a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801619e:	4694      	mov	ip, r2
 80161a0:	f845 3b04 	str.w	r3, [r5], #4
 80161a4:	d8e8      	bhi.n	8016178 <__mdiff+0x5c>
 80161a6:	45bc      	cmp	ip, r7
 80161a8:	d304      	bcc.n	80161b4 <__mdiff+0x98>
 80161aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80161ae:	b183      	cbz	r3, 80161d2 <__mdiff+0xb6>
 80161b0:	6106      	str	r6, [r0, #16]
 80161b2:	e7c5      	b.n	8016140 <__mdiff+0x24>
 80161b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80161b8:	fa1e f381 	uxtah	r3, lr, r1
 80161bc:	141a      	asrs	r2, r3, #16
 80161be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80161c2:	b29b      	uxth	r3, r3
 80161c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80161c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80161cc:	f845 3b04 	str.w	r3, [r5], #4
 80161d0:	e7e9      	b.n	80161a6 <__mdiff+0x8a>
 80161d2:	3e01      	subs	r6, #1
 80161d4:	e7e9      	b.n	80161aa <__mdiff+0x8e>

080161d6 <__d2b>:
 80161d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80161da:	460e      	mov	r6, r1
 80161dc:	2101      	movs	r1, #1
 80161de:	ec59 8b10 	vmov	r8, r9, d0
 80161e2:	4615      	mov	r5, r2
 80161e4:	f7ff fd96 	bl	8015d14 <_Balloc>
 80161e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80161ec:	4607      	mov	r7, r0
 80161ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80161f2:	bb34      	cbnz	r4, 8016242 <__d2b+0x6c>
 80161f4:	9301      	str	r3, [sp, #4]
 80161f6:	f1b8 0300 	subs.w	r3, r8, #0
 80161fa:	d027      	beq.n	801624c <__d2b+0x76>
 80161fc:	a802      	add	r0, sp, #8
 80161fe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016202:	f7ff fe0f 	bl	8015e24 <__lo0bits>
 8016206:	9900      	ldr	r1, [sp, #0]
 8016208:	b1f0      	cbz	r0, 8016248 <__d2b+0x72>
 801620a:	9a01      	ldr	r2, [sp, #4]
 801620c:	f1c0 0320 	rsb	r3, r0, #32
 8016210:	fa02 f303 	lsl.w	r3, r2, r3
 8016214:	430b      	orrs	r3, r1
 8016216:	40c2      	lsrs	r2, r0
 8016218:	617b      	str	r3, [r7, #20]
 801621a:	9201      	str	r2, [sp, #4]
 801621c:	9b01      	ldr	r3, [sp, #4]
 801621e:	61bb      	str	r3, [r7, #24]
 8016220:	2b00      	cmp	r3, #0
 8016222:	bf14      	ite	ne
 8016224:	2102      	movne	r1, #2
 8016226:	2101      	moveq	r1, #1
 8016228:	6139      	str	r1, [r7, #16]
 801622a:	b1c4      	cbz	r4, 801625e <__d2b+0x88>
 801622c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016230:	4404      	add	r4, r0
 8016232:	6034      	str	r4, [r6, #0]
 8016234:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016238:	6028      	str	r0, [r5, #0]
 801623a:	4638      	mov	r0, r7
 801623c:	b003      	add	sp, #12
 801623e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016246:	e7d5      	b.n	80161f4 <__d2b+0x1e>
 8016248:	6179      	str	r1, [r7, #20]
 801624a:	e7e7      	b.n	801621c <__d2b+0x46>
 801624c:	a801      	add	r0, sp, #4
 801624e:	f7ff fde9 	bl	8015e24 <__lo0bits>
 8016252:	9b01      	ldr	r3, [sp, #4]
 8016254:	617b      	str	r3, [r7, #20]
 8016256:	2101      	movs	r1, #1
 8016258:	6139      	str	r1, [r7, #16]
 801625a:	3020      	adds	r0, #32
 801625c:	e7e5      	b.n	801622a <__d2b+0x54>
 801625e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016262:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016266:	6030      	str	r0, [r6, #0]
 8016268:	6918      	ldr	r0, [r3, #16]
 801626a:	f7ff fdbc 	bl	8015de6 <__hi0bits>
 801626e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016272:	e7e1      	b.n	8016238 <__d2b+0x62>

08016274 <_read_r>:
 8016274:	b538      	push	{r3, r4, r5, lr}
 8016276:	4c07      	ldr	r4, [pc, #28]	; (8016294 <_read_r+0x20>)
 8016278:	4605      	mov	r5, r0
 801627a:	4608      	mov	r0, r1
 801627c:	4611      	mov	r1, r2
 801627e:	2200      	movs	r2, #0
 8016280:	6022      	str	r2, [r4, #0]
 8016282:	461a      	mov	r2, r3
 8016284:	f7f2 fbf6 	bl	8008a74 <_read>
 8016288:	1c43      	adds	r3, r0, #1
 801628a:	d102      	bne.n	8016292 <_read_r+0x1e>
 801628c:	6823      	ldr	r3, [r4, #0]
 801628e:	b103      	cbz	r3, 8016292 <_read_r+0x1e>
 8016290:	602b      	str	r3, [r5, #0]
 8016292:	bd38      	pop	{r3, r4, r5, pc}
 8016294:	2000105c 	.word	0x2000105c

08016298 <frexp>:
 8016298:	b570      	push	{r4, r5, r6, lr}
 801629a:	2100      	movs	r1, #0
 801629c:	ec55 4b10 	vmov	r4, r5, d0
 80162a0:	6001      	str	r1, [r0, #0]
 80162a2:	4916      	ldr	r1, [pc, #88]	; (80162fc <frexp+0x64>)
 80162a4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80162a8:	428b      	cmp	r3, r1
 80162aa:	4606      	mov	r6, r0
 80162ac:	462a      	mov	r2, r5
 80162ae:	dc22      	bgt.n	80162f6 <frexp+0x5e>
 80162b0:	ee10 1a10 	vmov	r1, s0
 80162b4:	4319      	orrs	r1, r3
 80162b6:	d01e      	beq.n	80162f6 <frexp+0x5e>
 80162b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80162bc:	da0d      	bge.n	80162da <frexp+0x42>
 80162be:	2200      	movs	r2, #0
 80162c0:	4b0f      	ldr	r3, [pc, #60]	; (8016300 <frexp+0x68>)
 80162c2:	ee10 0a10 	vmov	r0, s0
 80162c6:	4629      	mov	r1, r5
 80162c8:	f7f0 ff10 	bl	80070ec <__aeabi_dmul>
 80162cc:	460a      	mov	r2, r1
 80162ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80162d2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80162d6:	4604      	mov	r4, r0
 80162d8:	6031      	str	r1, [r6, #0]
 80162da:	6831      	ldr	r1, [r6, #0]
 80162dc:	151b      	asrs	r3, r3, #20
 80162de:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80162e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80162e6:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80162ea:	440b      	add	r3, r1
 80162ec:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80162f0:	6033      	str	r3, [r6, #0]
 80162f2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80162f6:	ec45 4b10 	vmov	d0, r4, r5
 80162fa:	bd70      	pop	{r4, r5, r6, pc}
 80162fc:	7fefffff 	.word	0x7fefffff
 8016300:	43500000 	.word	0x43500000

08016304 <strncpy>:
 8016304:	b570      	push	{r4, r5, r6, lr}
 8016306:	3901      	subs	r1, #1
 8016308:	4604      	mov	r4, r0
 801630a:	b902      	cbnz	r2, 801630e <strncpy+0xa>
 801630c:	bd70      	pop	{r4, r5, r6, pc}
 801630e:	4623      	mov	r3, r4
 8016310:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8016314:	f803 5b01 	strb.w	r5, [r3], #1
 8016318:	1e56      	subs	r6, r2, #1
 801631a:	b92d      	cbnz	r5, 8016328 <strncpy+0x24>
 801631c:	4414      	add	r4, r2
 801631e:	42a3      	cmp	r3, r4
 8016320:	d0f4      	beq.n	801630c <strncpy+0x8>
 8016322:	f803 5b01 	strb.w	r5, [r3], #1
 8016326:	e7fa      	b.n	801631e <strncpy+0x1a>
 8016328:	461c      	mov	r4, r3
 801632a:	4632      	mov	r2, r6
 801632c:	e7ed      	b.n	801630a <strncpy+0x6>

0801632e <__ssprint_r>:
 801632e:	6893      	ldr	r3, [r2, #8]
 8016330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016334:	4681      	mov	r9, r0
 8016336:	460c      	mov	r4, r1
 8016338:	4616      	mov	r6, r2
 801633a:	2b00      	cmp	r3, #0
 801633c:	d05e      	beq.n	80163fc <__ssprint_r+0xce>
 801633e:	f04f 0b00 	mov.w	fp, #0
 8016342:	f8d2 a000 	ldr.w	sl, [r2]
 8016346:	465f      	mov	r7, fp
 8016348:	b357      	cbz	r7, 80163a0 <__ssprint_r+0x72>
 801634a:	68a3      	ldr	r3, [r4, #8]
 801634c:	429f      	cmp	r7, r3
 801634e:	d340      	bcc.n	80163d2 <__ssprint_r+0xa4>
 8016350:	89a2      	ldrh	r2, [r4, #12]
 8016352:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016356:	d03c      	beq.n	80163d2 <__ssprint_r+0xa4>
 8016358:	6825      	ldr	r5, [r4, #0]
 801635a:	6921      	ldr	r1, [r4, #16]
 801635c:	eba5 0801 	sub.w	r8, r5, r1
 8016360:	6965      	ldr	r5, [r4, #20]
 8016362:	2302      	movs	r3, #2
 8016364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016368:	fb95 f5f3 	sdiv	r5, r5, r3
 801636c:	f108 0301 	add.w	r3, r8, #1
 8016370:	443b      	add	r3, r7
 8016372:	429d      	cmp	r5, r3
 8016374:	bf38      	it	cc
 8016376:	461d      	movcc	r5, r3
 8016378:	0553      	lsls	r3, r2, #21
 801637a:	d544      	bpl.n	8016406 <__ssprint_r+0xd8>
 801637c:	4629      	mov	r1, r5
 801637e:	4648      	mov	r0, r9
 8016380:	f7fc fb4c 	bl	8012a1c <_malloc_r>
 8016384:	b988      	cbnz	r0, 80163aa <__ssprint_r+0x7c>
 8016386:	230c      	movs	r3, #12
 8016388:	f8c9 3000 	str.w	r3, [r9]
 801638c:	89a3      	ldrh	r3, [r4, #12]
 801638e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016392:	81a3      	strh	r3, [r4, #12]
 8016394:	2300      	movs	r3, #0
 8016396:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801639a:	f04f 30ff 	mov.w	r0, #4294967295
 801639e:	e02f      	b.n	8016400 <__ssprint_r+0xd2>
 80163a0:	e9da b700 	ldrd	fp, r7, [sl]
 80163a4:	f10a 0a08 	add.w	sl, sl, #8
 80163a8:	e7ce      	b.n	8016348 <__ssprint_r+0x1a>
 80163aa:	4642      	mov	r2, r8
 80163ac:	6921      	ldr	r1, [r4, #16]
 80163ae:	9001      	str	r0, [sp, #4]
 80163b0:	f7fc fd79 	bl	8012ea6 <memcpy>
 80163b4:	89a2      	ldrh	r2, [r4, #12]
 80163b6:	9b01      	ldr	r3, [sp, #4]
 80163b8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80163bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80163c0:	81a2      	strh	r2, [r4, #12]
 80163c2:	6123      	str	r3, [r4, #16]
 80163c4:	6165      	str	r5, [r4, #20]
 80163c6:	4443      	add	r3, r8
 80163c8:	eba5 0508 	sub.w	r5, r5, r8
 80163cc:	6023      	str	r3, [r4, #0]
 80163ce:	60a5      	str	r5, [r4, #8]
 80163d0:	463b      	mov	r3, r7
 80163d2:	42bb      	cmp	r3, r7
 80163d4:	bf28      	it	cs
 80163d6:	463b      	movcs	r3, r7
 80163d8:	461a      	mov	r2, r3
 80163da:	4659      	mov	r1, fp
 80163dc:	6820      	ldr	r0, [r4, #0]
 80163de:	9301      	str	r3, [sp, #4]
 80163e0:	f7fc fd6c 	bl	8012ebc <memmove>
 80163e4:	68a2      	ldr	r2, [r4, #8]
 80163e6:	9b01      	ldr	r3, [sp, #4]
 80163e8:	1ad2      	subs	r2, r2, r3
 80163ea:	60a2      	str	r2, [r4, #8]
 80163ec:	6822      	ldr	r2, [r4, #0]
 80163ee:	4413      	add	r3, r2
 80163f0:	6023      	str	r3, [r4, #0]
 80163f2:	68b3      	ldr	r3, [r6, #8]
 80163f4:	1bdf      	subs	r7, r3, r7
 80163f6:	60b7      	str	r7, [r6, #8]
 80163f8:	2f00      	cmp	r7, #0
 80163fa:	d1d1      	bne.n	80163a0 <__ssprint_r+0x72>
 80163fc:	2000      	movs	r0, #0
 80163fe:	6070      	str	r0, [r6, #4]
 8016400:	b003      	add	sp, #12
 8016402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016406:	462a      	mov	r2, r5
 8016408:	4648      	mov	r0, r9
 801640a:	f7fc fdc1 	bl	8012f90 <_realloc_r>
 801640e:	4603      	mov	r3, r0
 8016410:	2800      	cmp	r0, #0
 8016412:	d1d6      	bne.n	80163c2 <__ssprint_r+0x94>
 8016414:	6921      	ldr	r1, [r4, #16]
 8016416:	4648      	mov	r0, r9
 8016418:	f7ff fb60 	bl	8015adc <_free_r>
 801641c:	e7b3      	b.n	8016386 <__ssprint_r+0x58>

0801641e <__ascii_wctomb>:
 801641e:	b149      	cbz	r1, 8016434 <__ascii_wctomb+0x16>
 8016420:	2aff      	cmp	r2, #255	; 0xff
 8016422:	bf85      	ittet	hi
 8016424:	238a      	movhi	r3, #138	; 0x8a
 8016426:	6003      	strhi	r3, [r0, #0]
 8016428:	700a      	strbls	r2, [r1, #0]
 801642a:	f04f 30ff 	movhi.w	r0, #4294967295
 801642e:	bf98      	it	ls
 8016430:	2001      	movls	r0, #1
 8016432:	4770      	bx	lr
 8016434:	4608      	mov	r0, r1
 8016436:	4770      	bx	lr

08016438 <__register_exitproc>:
 8016438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801643c:	4c26      	ldr	r4, [pc, #152]	; (80164d8 <__register_exitproc+0xa0>)
 801643e:	4606      	mov	r6, r0
 8016440:	6820      	ldr	r0, [r4, #0]
 8016442:	4698      	mov	r8, r3
 8016444:	460f      	mov	r7, r1
 8016446:	4691      	mov	r9, r2
 8016448:	f7fc fa6a 	bl	8012920 <__retarget_lock_acquire_recursive>
 801644c:	4b23      	ldr	r3, [pc, #140]	; (80164dc <__register_exitproc+0xa4>)
 801644e:	681d      	ldr	r5, [r3, #0]
 8016450:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8016454:	b918      	cbnz	r0, 801645e <__register_exitproc+0x26>
 8016456:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 801645a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 801645e:	6843      	ldr	r3, [r0, #4]
 8016460:	2b1f      	cmp	r3, #31
 8016462:	dd19      	ble.n	8016498 <__register_exitproc+0x60>
 8016464:	4b1e      	ldr	r3, [pc, #120]	; (80164e0 <__register_exitproc+0xa8>)
 8016466:	b933      	cbnz	r3, 8016476 <__register_exitproc+0x3e>
 8016468:	6820      	ldr	r0, [r4, #0]
 801646a:	f7fc fa5a 	bl	8012922 <__retarget_lock_release_recursive>
 801646e:	f04f 30ff 	mov.w	r0, #4294967295
 8016472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016476:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801647a:	f7fc fabf 	bl	80129fc <malloc>
 801647e:	2800      	cmp	r0, #0
 8016480:	d0f2      	beq.n	8016468 <__register_exitproc+0x30>
 8016482:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8016486:	6003      	str	r3, [r0, #0]
 8016488:	2200      	movs	r2, #0
 801648a:	6042      	str	r2, [r0, #4]
 801648c:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8016490:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8016494:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8016498:	6843      	ldr	r3, [r0, #4]
 801649a:	b19e      	cbz	r6, 80164c4 <__register_exitproc+0x8c>
 801649c:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 80164a0:	2201      	movs	r2, #1
 80164a2:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 80164a6:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 80164aa:	409a      	lsls	r2, r3
 80164ac:	4311      	orrs	r1, r2
 80164ae:	2e02      	cmp	r6, #2
 80164b0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 80164b4:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 80164b8:	bf02      	ittt	eq
 80164ba:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 80164be:	430a      	orreq	r2, r1
 80164c0:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 80164c4:	1c5a      	adds	r2, r3, #1
 80164c6:	3302      	adds	r3, #2
 80164c8:	6042      	str	r2, [r0, #4]
 80164ca:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 80164ce:	6820      	ldr	r0, [r4, #0]
 80164d0:	f7fc fa27 	bl	8012922 <__retarget_lock_release_recursive>
 80164d4:	2000      	movs	r0, #0
 80164d6:	e7cc      	b.n	8016472 <__register_exitproc+0x3a>
 80164d8:	20000850 	.word	0x20000850
 80164dc:	080184c4 	.word	0x080184c4
 80164e0:	080129fd 	.word	0x080129fd

080164e4 <_calloc_r>:
 80164e4:	b510      	push	{r4, lr}
 80164e6:	4351      	muls	r1, r2
 80164e8:	f7fc fa98 	bl	8012a1c <_malloc_r>
 80164ec:	4604      	mov	r4, r0
 80164ee:	b198      	cbz	r0, 8016518 <_calloc_r+0x34>
 80164f0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80164f4:	f022 0203 	bic.w	r2, r2, #3
 80164f8:	3a04      	subs	r2, #4
 80164fa:	2a24      	cmp	r2, #36	; 0x24
 80164fc:	d81b      	bhi.n	8016536 <_calloc_r+0x52>
 80164fe:	2a13      	cmp	r2, #19
 8016500:	d917      	bls.n	8016532 <_calloc_r+0x4e>
 8016502:	2100      	movs	r1, #0
 8016504:	2a1b      	cmp	r2, #27
 8016506:	e9c0 1100 	strd	r1, r1, [r0]
 801650a:	d807      	bhi.n	801651c <_calloc_r+0x38>
 801650c:	f100 0308 	add.w	r3, r0, #8
 8016510:	2200      	movs	r2, #0
 8016512:	e9c3 2200 	strd	r2, r2, [r3]
 8016516:	609a      	str	r2, [r3, #8]
 8016518:	4620      	mov	r0, r4
 801651a:	bd10      	pop	{r4, pc}
 801651c:	2a24      	cmp	r2, #36	; 0x24
 801651e:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8016522:	bf11      	iteee	ne
 8016524:	f100 0310 	addne.w	r3, r0, #16
 8016528:	6101      	streq	r1, [r0, #16]
 801652a:	f100 0318 	addeq.w	r3, r0, #24
 801652e:	6141      	streq	r1, [r0, #20]
 8016530:	e7ee      	b.n	8016510 <_calloc_r+0x2c>
 8016532:	4603      	mov	r3, r0
 8016534:	e7ec      	b.n	8016510 <_calloc_r+0x2c>
 8016536:	2100      	movs	r1, #0
 8016538:	f7fc fcd9 	bl	8012eee <memset>
 801653c:	e7ec      	b.n	8016518 <_calloc_r+0x34>

0801653e <_fclose_r>:
 801653e:	b570      	push	{r4, r5, r6, lr}
 8016540:	4606      	mov	r6, r0
 8016542:	460c      	mov	r4, r1
 8016544:	b911      	cbnz	r1, 801654c <_fclose_r+0xe>
 8016546:	2500      	movs	r5, #0
 8016548:	4628      	mov	r0, r5
 801654a:	bd70      	pop	{r4, r5, r6, pc}
 801654c:	b118      	cbz	r0, 8016556 <_fclose_r+0x18>
 801654e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016550:	b90b      	cbnz	r3, 8016556 <_fclose_r+0x18>
 8016552:	f7ff fa33 	bl	80159bc <__sinit>
 8016556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016558:	07d8      	lsls	r0, r3, #31
 801655a:	d405      	bmi.n	8016568 <_fclose_r+0x2a>
 801655c:	89a3      	ldrh	r3, [r4, #12]
 801655e:	0599      	lsls	r1, r3, #22
 8016560:	d402      	bmi.n	8016568 <_fclose_r+0x2a>
 8016562:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016564:	f7fc f9dc 	bl	8012920 <__retarget_lock_acquire_recursive>
 8016568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801656c:	b93b      	cbnz	r3, 801657e <_fclose_r+0x40>
 801656e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8016570:	f015 0501 	ands.w	r5, r5, #1
 8016574:	d1e7      	bne.n	8016546 <_fclose_r+0x8>
 8016576:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016578:	f7fc f9d3 	bl	8012922 <__retarget_lock_release_recursive>
 801657c:	e7e4      	b.n	8016548 <_fclose_r+0xa>
 801657e:	4621      	mov	r1, r4
 8016580:	4630      	mov	r0, r6
 8016582:	f7ff f921 	bl	80157c8 <__sflush_r>
 8016586:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016588:	4605      	mov	r5, r0
 801658a:	b133      	cbz	r3, 801659a <_fclose_r+0x5c>
 801658c:	69e1      	ldr	r1, [r4, #28]
 801658e:	4630      	mov	r0, r6
 8016590:	4798      	blx	r3
 8016592:	2800      	cmp	r0, #0
 8016594:	bfb8      	it	lt
 8016596:	f04f 35ff 	movlt.w	r5, #4294967295
 801659a:	89a3      	ldrh	r3, [r4, #12]
 801659c:	061a      	lsls	r2, r3, #24
 801659e:	d503      	bpl.n	80165a8 <_fclose_r+0x6a>
 80165a0:	6921      	ldr	r1, [r4, #16]
 80165a2:	4630      	mov	r0, r6
 80165a4:	f7ff fa9a 	bl	8015adc <_free_r>
 80165a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80165aa:	b141      	cbz	r1, 80165be <_fclose_r+0x80>
 80165ac:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80165b0:	4299      	cmp	r1, r3
 80165b2:	d002      	beq.n	80165ba <_fclose_r+0x7c>
 80165b4:	4630      	mov	r0, r6
 80165b6:	f7ff fa91 	bl	8015adc <_free_r>
 80165ba:	2300      	movs	r3, #0
 80165bc:	6323      	str	r3, [r4, #48]	; 0x30
 80165be:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80165c0:	b121      	cbz	r1, 80165cc <_fclose_r+0x8e>
 80165c2:	4630      	mov	r0, r6
 80165c4:	f7ff fa8a 	bl	8015adc <_free_r>
 80165c8:	2300      	movs	r3, #0
 80165ca:	6463      	str	r3, [r4, #68]	; 0x44
 80165cc:	f7ff f9de 	bl	801598c <__sfp_lock_acquire>
 80165d0:	2300      	movs	r3, #0
 80165d2:	81a3      	strh	r3, [r4, #12]
 80165d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80165d6:	07db      	lsls	r3, r3, #31
 80165d8:	d402      	bmi.n	80165e0 <_fclose_r+0xa2>
 80165da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80165dc:	f7fc f9a1 	bl	8012922 <__retarget_lock_release_recursive>
 80165e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80165e2:	f7fc f99c 	bl	801291e <__retarget_lock_close_recursive>
 80165e6:	f7ff f9d7 	bl	8015998 <__sfp_lock_release>
 80165ea:	e7ad      	b.n	8016548 <_fclose_r+0xa>

080165ec <_init>:
 80165ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ee:	bf00      	nop
 80165f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165f2:	bc08      	pop	{r3}
 80165f4:	469e      	mov	lr, r3
 80165f6:	4770      	bx	lr

080165f8 <_fini>:
 80165f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165fa:	bf00      	nop
 80165fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165fe:	bc08      	pop	{r3}
 8016600:	469e      	mov	lr, r3
 8016602:	4770      	bx	lr
